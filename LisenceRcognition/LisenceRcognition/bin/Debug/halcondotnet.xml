<?xml version="1.0"?>
<doc>
    <assembly>
        <name>halcondotnet</name>
    </assembly>
    <members>
        <member name="F:HalconDotNet.HTool.UNDEF">
            <summary>Represents an uninitialized tool instance</summary>
        </member>
        <member name="M:HalconDotNet.HTool.Detach">
            <summary>Relinquish ownership of managed HALCON ID</summary>
            <remarks>
              Caller must ensure that handle is destroyed at some time
              after this instance is no longer used.
            </remarks>
        </member>
        <member name="M:HalconDotNet.HTool.IsInitialized">
            <summary>
              Returns true if the tool has been initialized.
            </summary>
            <remarks>
              A tool will be uninitialized when creating it with a
              no-argument constructor or after calling Dispose();
            </remarks>
        </member>
        <member name="M:HalconDotNet.HTool.Dispose">
            <summary>Releases the resources used by this tool object</summary>
        </member>
        <member name="M:HalconDotNet.HTool.InvalidateWithoutDispose">
            <summary>
              Invalidates the tool object but keeps the HALCON handle alive, which
              only makes sense if the handle is used externally and cleared later,
              e.g. by an HOperatorSet based module or another language interface.
            </summary>
        </member>
        <member name="M:HalconDotNet.HTool.op_Implicit(HalconDotNet.HTool)~System.IntPtr">
            <summary>Cast to IntPtr returns HALCON ID of tool resources</summary>
            <remarks>Caller must ensure that input object is kept alive</remarks>
        </member>
        <member name="M:HalconDotNet.HTool.op_Implicit(HalconDotNet.HTool)~HalconDotNet.HTuple">
            <summary>Cast to HTuple returns HALCON ID of tool resources</summary>
            <remarks>Caller must ensure that input object is kept alive</remarks>
        </member>
        <member name="P:HalconDotNet.HTool.Handle">
            <summary>Returns the HALCON ID for this tool object</summary>
            <remarks>Caller must ensure that input object is kept alive</remarks>
        </member>
        <member name="P:HalconDotNet.HTupleElements.I">
            <summary>
              Get the value of this element as a 32-bit integer.
              The element must represent integer data (32-bit or 64-bit).
            </summary>
        </member>
        <member name="P:HalconDotNet.HTupleElements.IArr">
            <summary>
              Get the value of these elements as a 32-bit integer.
              The elements must represent integer data (32-bit or 64-bit).
            </summary>
        </member>
        <member name="P:HalconDotNet.HTupleElements.L">
            <summary>
              Get the value of this element as a 64-bit integer.
              The elements must represent integer data (32-bit or 64-bit).
            </summary>
        </member>
        <member name="P:HalconDotNet.HTupleElements.LArr">
            <summary>
              Get the value of these elements as a 64-bit integer.
              The elements must represent integer data (32-bit or 64-bit).
            </summary>
        </member>
        <member name="P:HalconDotNet.HTupleElements.D">
            <summary>
              Get the value of this element as a double.
              The element must represent numeric data.
            </summary>
        </member>
        <member name="P:HalconDotNet.HTupleElements.DArr">
            <summary>
              Get the value of these elements as doubles.
              The elements must represent numeric data.
            </summary>
        </member>
        <member name="P:HalconDotNet.HTupleElements.S">
            <summary>
              Get the value of this element as a string.
              The element must represent a string value.
            </summary>
        </member>
        <member name="P:HalconDotNet.HTupleElements.SArr">
            <summary>
              Get the value of these elements as strings.
              The elements must represent string values.
            </summary>
        </member>
        <member name="P:HalconDotNet.HTupleElements.O">
            <summary>
              Get the value of this element as an object.
              The element may be of any type. Numeric data will be boxed.
            </summary>
        </member>
        <member name="P:HalconDotNet.HTupleElements.OArr">
            <summary>
              Get the value of these elements as objects.
              The elements may be of any type. Numeric data will be boxed.
            </summary>
        </member>
        <member name="P:HalconDotNet.HTupleElements.F">
            <summary>
              Get the value of this element as a float.
              The element must represent numeric data.
            </summary>
        </member>
        <member name="P:HalconDotNet.HTupleElements.FArr">
            <summary>
              Get the value of these elements as a float.
              The elements must represent numeric data.
            </summary>
        </member>
        <member name="P:HalconDotNet.HTupleElements.IP">
            <summary>
              Get the value of this element as an IntPtr.
              The element must represent an integer matching IntPtr.Size.
            </summary>
        </member>
        <member name="P:HalconDotNet.HTupleElements.IPArr">
            <summary>
              Get the value of these elements as IntPtrs.
              The elements must represent integers matching IntPtr.Size.
            </summary>
        </member>
        <member name="P:HalconDotNet.HTupleElements.Type">
            <summary>Get the data type of this element</summary>
        </member>
        <member name="P:HalconDotNet.HData.RawData">
            <summary>
              Provides access to the internally used tuple data
            </summary>
        </member>
        <member name="P:HalconDotNet.HData.Item(System.Int32)">
            <summary>
              Provides access to the value at the specified index
            </summary>
        </member>
        <member name="F:HalconDotNet.HObjectBase.UNDEF">
            <summary>Represents an uninitialized HALCON object key</summary>
        </member>
        <member name="M:HalconDotNet.HObjectBase.IsInitialized">
            <summary>
              Returns true if the iconic object has been initialized.
            </summary>
            <remarks>
              An object will be uninitialized when creating it with a
              no-argument constructor or after calling Dispose();
            </remarks>
        </member>
        <member name="M:HalconDotNet.HObjectBase.CopyKey">
            <summary>
              Returns a new HALCON ID referencing this iconic object, which will
              remain valid even after this object is disposed (and vice versa).
              This is only useful if the ID shall be used in another language
              interface (in fact, the key needs to be externally disposed,
              a feature not even offered by the .NET language interface).
            </summary>
        </member>
        <member name="M:HalconDotNet.HObjectBase.Dispose">
            <summary>Releases the resources used by this tool object</summary>
        </member>
        <member name="P:HalconDotNet.HObjectBase.Key">
            <summary>Returns the HALCON ID for this iconic object</summary>
            <remarks>Caller must ensure that object is kept alive</remarks>
        </member>
        <member name="T:HalconDotNet.HalconAPI">
            <summary>
              This class manages all communication with the HALCON library
            </summary>
        </member>
        <member name="F:HalconDotNet.HalconAPI.isPlatform64">
            <summary>True when running on a 64-bit platform.</summary>
        </member>
        <member name="F:HalconDotNet.HalconAPI.isWindows">
            <summary>True when running on a Windows platform.</summary>
        </member>
        <member name="M:HalconDotNet.HalconAPI.DoLicenseError(System.Boolean)">
            <summary>
              Setting DoLicenseError(false) disables the license error dialog and
              application termination. Instead, an exception is raised.
            </summary>
        </member>
        <member name="M:HalconDotNet.HalconAPI.UseSpinLock(System.Boolean)">
            <summary>
              Setting HLIUseSpinLock(false) before calling the first operator
              will cause HALCON to use mutex synchronization instead of spin locks.
              This is usually less efficient but may prevent problems if a large
              number of threads with differing priorities is used.
            </summary>
        </member>
        <member name="M:HalconDotNet.HalconAPI.StartUpThreadPool(System.Boolean)">
            <summary>
              Setting HLIStartUpThreadPool(false) before calling the first 
              operator will disable the thread pool of HALCON
            </summary>
        </member>
        <member name="M:HalconDotNet.HalconAPI.CancelDraw">
            <summary>
              Aborts a draw_* operator as a right-click would (Windows only)
            </summary>
        </member>
        <member name="M:HalconDotNet.HDevWindowStack.Dispose">
            <summary>Releases the resources used by this tool object</summary>
        </member>
        <member name="T:HalconDotNet.HVectorAccessException">
            <summary>
              This exception is thrown whenever an error occurs during
              vector operations
            </summary>
        </member>
        <member name="T:HalconDotNet.HVector">
            <summary>
              The HALCON vector classes are intended to support the export of 
              HDevelop code that uses vectors, and to pass vector arguments to 
              procedures that use vector parameters. They are not intended to be 
              used as generic container classes in user code. For this purpose, 
              consider using standard container classes such as List&lt;T&gt;. 
              
              Also note HVector is abstract, you can only create instances
              of HTupleVector or HObjectVector.
            </summary>
        </member>
        <member name="M:HalconDotNet.HVector.At(System.Int32)">
            <summary>
              Read access to subvector at specified index. In contrast
              to the index operator, an exception will be raised if index
              is out of range. A reference to the internal subvector is
              returned and needs to be cloned for independent manipulation.
            </summary>
        </member>
        <member name="M:HalconDotNet.HVector.VectorEqual(HalconDotNet.HVector)">
            <summary>
              Returns true if vector has same dimension, lengths, and elements
            </summary>
        </member>
        <member name="M:HalconDotNet.HVector.Concat(HalconDotNet.HVector)">
            <summary>
              Concatenate two vectors, creating new vector
            </summary>
        </member>
        <member name="M:HalconDotNet.HVector.Append(HalconDotNet.HVector)">
            <summary>
              Append vector to this vector
            </summary>
        </member>
        <member name="M:HalconDotNet.HVector.Insert(System.Int32,HalconDotNet.HVector)">
            <summary>
              Insert vector at specified index
            </summary>
        </member>
        <member name="M:HalconDotNet.HVector.Remove(System.Int32)">
            <summary>
              Remove element at specified index from this vector
            </summary>
        </member>
        <member name="M:HalconDotNet.HVector.Clear">
            <summary>
              Remove all elements from this vector
            </summary>
        </member>
        <member name="M:HalconDotNet.HVector.Clone">
            <summary>
               Create an independent copy of this vector
            </summary>
        </member>
        <member name="M:HalconDotNet.HVector.Dispose">
            <summary>
              Clear vector and dispose elements (if necessary). When called
              on vector with dimension > 0 the effect is identical to clear
            </summary>
        </member>
        <member name="M:HalconDotNet.HVector.ToString">
            <summary>
              Provides a simple string representation of the vector,
              which is mainly useful for debug outputs.
            </summary>
        </member>
        <member name="P:HalconDotNet.HVector.Item(System.Int32)">
            <summary>
              Access to subvector at specified index. The vector will be 
              enlarged to accomodate index, even in read access. For read
              access without enlargement use the member function At(index).
              A reference to the internal subvector is returned and needs
              to be cloned for independent manipulation.
            </summary>
        </member>
        <member name="T:HalconDotNet.HTupleVector">
            <summary>
              The HALCON vector classes are intended to support the export of 
              HDevelop code that uses vectors, and to pass vector arguments to 
              procedures that use vector parameters. They are not intended to be 
              used as generic container classes in user code. For this purpose, 
              consider using standard container classes such as List&lt;T&gt;. 
            </summary>
        </member>
        <member name="M:HalconDotNet.HTupleVector.#ctor(System.Int32)">
            <summary>
              Create empty vector of specified dimension. In case of dimension
              0 a leaf vector for an empty tuple is created
            </summary>
        </member>
        <member name="M:HalconDotNet.HTupleVector.#ctor(HalconDotNet.HTuple)">
            <summary>
              Create leaf vector of dimension 0 for the specified tuple
            </summary>
        </member>
        <member name="M:HalconDotNet.HTupleVector.#ctor(HalconDotNet.HTuple,System.Int32)">
            <summary>
              Create 1-dimensional vector by splitting input tuple into
              blocks of fixed size (except possibly for the last block).
              This corresponds to convert_tuple_to_vector_1d in HDevelop.
            </summary>
        </member>
        <member name="M:HalconDotNet.HTupleVector.#ctor(HalconDotNet.HTupleVector)">
            <summary>
              Create copy of tuple vector
            </summary>
        </member>
        <member name="M:HalconDotNet.HTupleVector.At(System.Int32)">
            <summary>
              Read access to subvector at specified index. An exception
              will be raised if index is out of range. The returned data
              is a copy and may be stored safely.
            </summary>
        </member>
        <member name="M:HalconDotNet.HTupleVector.VectorEqual(HalconDotNet.HTupleVector)">
            <summary>
              Returns true if vector has same dimension, lengths, and elements
            </summary>
        </member>
        <member name="M:HalconDotNet.HTupleVector.Concat(HalconDotNet.HTupleVector)">
            <summary>
              Concatenate two vectors, creating new vector
            </summary>
        </member>
        <member name="M:HalconDotNet.HTupleVector.Append(HalconDotNet.HTupleVector)">
            <summary>
              Append vector to this vector
            </summary>
        </member>
        <member name="M:HalconDotNet.HTupleVector.Insert(System.Int32,HalconDotNet.HTupleVector)">
            <summary>
              Insert vector at specified index
            </summary>
        </member>
        <member name="M:HalconDotNet.HTupleVector.Remove(System.Int32)">
            <summary>
              Remove element at specified index from this vector
            </summary>
        </member>
        <member name="M:HalconDotNet.HTupleVector.Clear">
            <summary>
              Remove all elements from this vector
            </summary>
        </member>
        <member name="M:HalconDotNet.HTupleVector.Clone">
            <summary>
               Create an independent copy of this vector
            </summary>
        </member>
        <member name="M:HalconDotNet.HTupleVector.ConvertVectorToTuple">
            <summary>
              Concatenates all tuples stored in the vector
            </summary>
        </member>
        <member name="M:HalconDotNet.HTupleVector.ToString">
            <summary>
              Provides a simple string representation of the vector,
              which is mainly useful for debug outputs.
            </summary>
        </member>
        <member name="P:HalconDotNet.HTupleVector.T">
            <summary>
              Access to the tuple value for leaf vectors (dimension 0)
            </summary>
        </member>
        <member name="P:HalconDotNet.HTupleVector.Item(System.Int32)">
            <summary>
              Access to subvector at specified index. The vector will be 
              enlarged to accomodate index, even in read access. The internal
              reference is returned to allow modifications of vector state. For
              read access, preferrably use the member function At(index).
            </summary>
        </member>
        <member name="T:HalconDotNet.HObjectVector">
            <summary>
              The HALCON vector classes are intended to support the export of 
              HDevelop code that uses vectors, and to pass vector arguments to 
              procedures that use vector parameters. They are not intended to be 
              used as generic container classes in user code. For this purpose, 
              consider using standard container classes such as List&lt;T&gt;. 
            </summary>
        </member>
        <member name="M:HalconDotNet.HObjectVector.#ctor(System.Int32)">
            <summary>
              Create empty vector of specified dimension. In case of dimension
              0 a leaf vector for an empty object is created
            </summary>
        </member>
        <member name="M:HalconDotNet.HObjectVector.#ctor(HalconDotNet.HObject)">
            <summary>
              Create leaf vector of dimension 0 for the specified object
            </summary>
        </member>
        <member name="M:HalconDotNet.HObjectVector.#ctor(HalconDotNet.HObjectVector)">
            <summary>
              Create copy of object vector
            </summary>
        </member>
        <member name="M:HalconDotNet.HObjectVector.At(System.Int32)">
            <summary>
              Read access to subvector at specified index. An exception
              will be raised if index is out of range. The returned data
              is a copy and may be stored safely.
            </summary>
        </member>
        <member name="M:HalconDotNet.HObjectVector.VectorEqual(HalconDotNet.HObjectVector)">
            <summary>
              Returns true if vector has same dimension, lengths, and elements
            </summary>
        </member>
        <member name="M:HalconDotNet.HObjectVector.Concat(HalconDotNet.HObjectVector)">
            <summary>
              Concatenate two vectors, creating new vector
            </summary>
        </member>
        <member name="M:HalconDotNet.HObjectVector.Append(HalconDotNet.HObjectVector)">
            <summary>
              Append vector to this vector
            </summary>
        </member>
        <member name="M:HalconDotNet.HObjectVector.Insert(System.Int32,HalconDotNet.HObjectVector)">
            <summary>
              Insert vector at specified index
            </summary>
        </member>
        <member name="M:HalconDotNet.HObjectVector.Remove(System.Int32)">
            <summary>
              Remove element at specified index from this vector
            </summary>
        </member>
        <member name="M:HalconDotNet.HObjectVector.Clear">
            <summary>
              Remove all elements from this vector
            </summary>
        </member>
        <member name="M:HalconDotNet.HObjectVector.Clone">
            <summary>
               Create an independent copy of this vector
            </summary>
        </member>
        <member name="M:HalconDotNet.HObjectVector.ToString">
            <summary>
              Provides a simple string representation of the vector,
              which is mainly useful for debug outputs.
            </summary>
        </member>
        <member name="P:HalconDotNet.HObjectVector.O">
            <summary>
              Access to the object value for leaf vectors (dimension 0). 
              Ownership of object resides with object vector and it will
              be disposed when the vector is disposed. Use O.CopyObj(1,-1)
              to create an object that will survive a vector dispose.
              When storing an object in the vector, it will be
              copied automatically. 
            </summary>
        </member>
        <member name="P:HalconDotNet.HObjectVector.Item(System.Int32)">
            <summary>
              Access to subvector at specified index. The vector will be 
              enlarged to accomodate index, even in read access. The internal
              reference is returned to allow modifications of vector state. For
              read access, preferrably use the member function At(index).
            </summary>
        </member>
        <member name="T:HalconDotNet.HTupleAccessException">
            <summary>
              This exception is thrown whenever an error occurs during tuple access.
            </summary>
        </member>
        <member name="T:HalconDotNet.HTupleType">
            <summary>
              Enumeration of tuple types, as returned by HTuple.Type
            </summary>
        </member>
        <member name="F:HalconDotNet.HTupleType.EMPTY">
            <summary>Tuple is empty</summary>
        </member>
        <member name="F:HalconDotNet.HTupleType.INTEGER">
            <summary>Tuple is represented by an array of System.Int32</summary>
        </member>
        <member name="F:HalconDotNet.HTupleType.LONG">
            <summary>Tuple is represented by an array of System.Int64</summary>
        </member>
        <member name="F:HalconDotNet.HTupleType.DOUBLE">
            <summary>Tuple is represented by an array of System.Double</summary>
        </member>
        <member name="F:HalconDotNet.HTupleType.STRING">
            <summary>Tuple is represented by an array of strings</summary>
        </member>
        <member name="F:HalconDotNet.HTupleType.MIXED">
            <summary>Tuple is represented by an object array of boxed values.</summary>
        </member>
        <member name="T:HalconDotNet.HTuple">
            <summary>
              The class HTuple represents HALCON tuples (control parameter values)
            </summary>
        </member>
        <member name="M:HalconDotNet.HTuple.#ctor">
            <summary>Create an empty tuple</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.#ctor(System.Boolean)">
            <summary>Create tuple containing integer value 0 (false) or 1 (true)</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.#ctor(System.Int32)">
            <summary>Create a tuple containing a single 32-bit integer value</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.#ctor(System.Int32[])">
            <summary>Create a tuple containing 32-bit integer values</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.#ctor(System.Int64)">
            <summary>Create a tuple containing a single 64-bit integer value</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.#ctor(System.Int64[])">
            <summary>Create a tuple containing 64-bit integer values</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.#ctor(System.IntPtr)">
            <summary>
              Create an integer tuple representing a pointer value.
              The used integer size depends on the executing platform.
            </summary>
        </member>
        <member name="M:HalconDotNet.HTuple.#ctor(System.IntPtr[])">
            <summary>
              Create an integer tuple representing pointer values.
              The used integer size depends on the executing platform.
            </summary>
        </member>
        <member name="M:HalconDotNet.HTuple.#ctor(System.Double)">
            <summary>Create a tuple containing a single double value</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.#ctor(System.Double[])">
            <summary>Create a tuple containing double values</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.#ctor(System.Single)">
            <summary>Create a tuple containing a single double value</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.#ctor(System.Single[])">
            <summary>Create a tuple containing double values</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.#ctor(System.String)">
            <summary>Create a tuple containing a single string value</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.#ctor(System.String[])">
            <summary>Create a tuple containing string values</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.#ctor(System.Object[])">
            <summary>
              Create a tuple containing mixed values. 
              Only integer, double and string values are valid.
            </summary>
        </member>
        <member name="M:HalconDotNet.HTuple.#ctor(HalconDotNet.HTuple)">
            <summary>Create a copy of an existing tuple</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.#ctor(HalconDotNet.HTuple[])">
            <summary>Create a concatenation of existing tuples</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.PinTuple">
            <summary>
              Pins the tuple's data such that the pointer to this data is
              valid throughout the call of a HALCON operator
            </summary>
        </member>
        <member name="M:HalconDotNet.HTuple.UnPinTuple">
            <summary>
              Unpins the tuple's data
            </summary>
        </member>
        <member name="M:HalconDotNet.HTuple.ToIArr">
            <summary>
              Get the data of this tuple as a 32-bit integer array.
              The tuple may only contain integer data (32-bit or 64-bit).
            </summary>
        </member>
        <member name="M:HalconDotNet.HTuple.ToLArr">
            <summary>
              Get the data of this tuple as a 64-bit integer array.
              The tuple may only contain integer data (32-bit or 64-bit).
            </summary>
        </member>
        <member name="M:HalconDotNet.HTuple.ToDArr">
            <summary>
              Get the data of this tuple as a double array.
              The tuple may only contain numeric data.
            </summary>
        </member>
        <member name="M:HalconDotNet.HTuple.ToSArr">
            <summary>
              Get the data of this tuple as a string array.
              The tuple may only contain string values.
            </summary>
        </member>
        <member name="M:HalconDotNet.HTuple.ToOArr">
            <summary>
              Get the data of this tuple as an object array.
              The tuple may contain arbitrary values.
            </summary>
        </member>
        <member name="M:HalconDotNet.HTuple.ToFArr">
            <summary>
              Get the data of this tuple as a float array.
              The tuple may only contain numeric data.
            </summary>
        </member>
        <member name="M:HalconDotNet.HTuple.ToIPArr">
            <summary>
              Get the data of this tuple as an IntPtr array.
              The tuple may only contain integer data matching IntPtr.Size.
            </summary>
        </member>
        <member name="M:HalconDotNet.HTuple.op_Implicit(HalconDotNet.HTuple)~System.Boolean">
            <summary>Convert first element of a tuple to bool</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.op_Implicit(HalconDotNet.HTuple)~System.Int32">
            <summary>Convert first element of a tuple to int</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.op_Implicit(HalconDotNet.HTuple)~System.Int64">
            <summary>Convert first element of a tuple to long</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.op_Implicit(HalconDotNet.HTuple)~System.Double">
            <summary>Convert first element of a tuple to double</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.op_Implicit(HalconDotNet.HTuple)~System.String">
            <summary>Convert first element of a tuple to string</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.op_Implicit(HalconDotNet.HTuple)~System.IntPtr">
            <summary>Convert first element of a tuple to IntPtr</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.op_Implicit(HalconDotNet.HTuple)~System.Int32[]">
            <summary>Convert all elements of a tuple to int[]</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.op_Implicit(HalconDotNet.HTuple)~System.Int64[]">
            <summary>Convert all elements of a tuple to long[]</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.op_Implicit(HalconDotNet.HTuple)~System.Double[]">
            <summary>Convert all elements of a tuple to double[]</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.op_Implicit(HalconDotNet.HTuple)~System.String[]">
            <summary>Convert all elements of a tuple to string[]</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.op_Implicit(HalconDotNet.HTuple)~System.IntPtr[]">
            <summary>Convert all elements of a tuple to IntPtr[]</summary>
        </member>
        <member name="M:HalconDotNet.HTuple.ToString">
            <summary>
              Provides a simple string representation of the tuple,
              which is mainly useful for debug outputs.
            </summary>
            <remarks>
              Casting a HTuple to a string does *not* invoke ToString(), as the
              former represents an implicit access to tuple.S == tuple[0].S, which
              is only legal if the first tuple element is a string.
            </remarks>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleConcat(HalconDotNet.HTuple[])">
            <summary>
              Concatenate multiple tuples to a new one.
              Instance represents: Input tuple 1.
            </summary>
            <param name="tuples">Further input tuples.</param>
            <returns>Concatenation of input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.Append(HalconDotNet.HTuple)">
            <summary>
              Append tuple to this tuple
            </summary>
            <param name="tuple">Data to append.</param>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleLength">
            <summary>
              Returns the number of elements of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Number of elements of input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleAdd(HalconDotNet.HTuple)">
            <summary>
              Add two tuples.
              Instance represents: Input tuple 1.
            </summary>
            <param name="s2">Input tuple 2.</param>
            <returns>Sum of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleSub(HalconDotNet.HTuple)">
            <summary>
              Subtract two tuples.
              Instance represents: Input tuple 1.
            </summary>
            <param name="d2">Input tuple 2.</param>
            <returns>Difference of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleMult(HalconDotNet.HTuple)">
            <summary>
              Multiply two tuples.
              Instance represents: Input tuple 1.
            </summary>
            <param name="p2">Input tuple 2.</param>
            <returns>Product of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleConcat(HalconDotNet.HTuple)">
            <summary>
              Concatenate two tuple to a new one.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Concatentaion of input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleUnion(HalconDotNet.HTuple)">
            <summary>
              Compute the union set of two input tuples.
              Instance represents: Input tuple.
            </summary>
            <param name="set2">Input tuple.</param>
            <returns>The union set of two input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleIntersection(HalconDotNet.HTuple)">
            <summary>
              Compute the intersection set of two input tuples.
              Instance represents: Input tuple.
            </summary>
            <param name="set2">Input tuple.</param>
            <returns>The intersection set of two input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleDifference(HalconDotNet.HTuple)">
            <summary>
              Compute the difference set of two input tuples.
              Instance represents: Input tuple.
            </summary>
            <param name="set2">Input tuple.</param>
            <returns>The difference set of two input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleSymmdiff(HalconDotNet.HTuple)">
            <summary>
              Compute the symmetric difference set of two input tuples.
              Instance represents: Input tuple.
            </summary>
            <param name="set2">Input tuple.</param>
            <returns>The symmetric difference set of two input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleIsStringElem">
            <summary>
              Test whether the types of the elements of a tuple are of type string.
              Instance represents: Input tuple.
            </summary>
            <returns>Are the elements of the input tuple of type string?</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleIsRealElem">
            <summary>
              Test whether the types of the elements of a tuple are of type real.
              Instance represents: Input tuple.
            </summary>
            <returns>Are the elements of the input tuple of type real?</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleIsIntElem">
            <summary>
              Test whether the types of the elements of a tuple are of type integer.
              Instance represents: Input tuple.
            </summary>
            <returns>Are the elements of the input tuple of type integer?</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleTypeElem">
            <summary>
              Return the types of the elements of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Types of the elements of the input tuple as integer values.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleIsMixed">
            <summary>
              Test whether a tuple is of type mixed.
              Instance represents: Input tuple.
            </summary>
            <returns>Is the input tuple of type mixed?</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleIsString">
            <summary>
              Test whether a tuple is of type string.
              Instance represents: Input tuple.
            </summary>
            <returns>Is the input tuple of type string?</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleIsReal">
            <summary>
              Test whether the types of the elements of a tuple are of type real.
              Instance represents: Input tuple.
            </summary>
            <returns>Is the input tuple of type real?</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleIsInt">
            <summary>
              Test whether a tuple is of type integer.
              Instance represents: Input tuple.
            </summary>
            <returns>Is the input tuple of type integer?</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleType">
            <summary>
              Return the type of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Type of the input tuple as an integer number.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleHistoRange(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Calculate the value distribution of a tuple within a certain value range.
              Instance represents: Input tuple.
            </summary>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <param name="numBins">Number of bins.</param>
            <param name="binSize">Bin size.</param>
            <returns>Histogram to be calculated.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleRegexpSelect(HalconDotNet.HTuple)">
            <summary>
              Select tuple elements matching a regular expression.
              Instance represents: Input strings to match.
            </summary>
            <param name="expression">Regular expression. Default: ".*"</param>
            <returns>Matching strings</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleRegexpTest(HalconDotNet.HTuple)">
            <summary>
              Test if a string matches a regular expression.
              Instance represents: Input strings to match.
            </summary>
            <param name="expression">Regular expression. Default: ".*"</param>
            <returns>Number of matching strings</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleRegexpReplace(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Replace a substring using regular expressions.
              Instance represents: Input strings to process.
            </summary>
            <param name="expression">Regular expression. Default: ".*"</param>
            <param name="replace">Replacement expression.</param>
            <returns>Processed strings.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleRegexpMatch(HalconDotNet.HTuple)">
            <summary>
              Extract substrings using regular expressions.
              Instance represents: Input strings to match.
            </summary>
            <param name="expression">Regular expression. Default: ".*"</param>
            <returns>Found matches.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleRand(HalconDotNet.HTuple)">
            <summary>Return a tuple of random numbers between 0 and 1.</summary>
            <param name="length">Length of tuple to generate.</param>
            <returns>Tuple of random numbers.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleSgn">
            <summary>
              Calculate the sign of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Signs of the input tuple as integer numbers.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleMax2(HalconDotNet.HTuple)">
            <summary>
              Calculate the elementwise maximum of two tuples.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Elementwise maximum of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleMin2(HalconDotNet.HTuple)">
            <summary>
              Calculate the elementwise minimum of two tuples.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Elementwise minimum of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleMax">
            <summary>
              Return the maximal element of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Maximal element of the input tuple elements.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleMin">
            <summary>
              Return the minimal element of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Minimal element of the input tuple elements.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleCumul">
            <summary>
              Calculate the cumulative sums of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Cumulative sum of the corresponding tuple elements.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleSelectRank(HalconDotNet.HTuple)">
            <summary>
              Select the element of rank n of a tuple.
              Instance represents: Input tuple.
            </summary>
            <param name="rankIndex">Rank of the element to select.</param>
            <returns>Selected tuple element.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleMedian">
            <summary>
              Return the median of the elements of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Median of the tuple elements.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleSum">
            <summary>
              Return the sum of all elements of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Sum of tuple elements.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleMean">
            <summary>
              Return the mean value of a tuple of numbers.
              Instance represents: Input tuple.
            </summary>
            <returns>Mean value of tuple elements.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleDeviation">
            <summary>
              Return the standard deviation of the elements of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Standard deviation of tuple elements.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleUniq">
            <summary>
              Discard all but one of successive identical elements of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Tuple without successive identical elements.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleFindLast(HalconDotNet.HTuple)">
            <summary>
              Return the index of the last occurence of a tuple within another tuple.
              Instance represents: Input tuple to examine.
            </summary>
            <param name="toFind">Input tuple with values to find.</param>
            <returns>Index of the last occurrence of the values to find.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleFindFirst(HalconDotNet.HTuple)">
            <summary>
              Return the index of the first occurrence of a tuple within another tuple.
              Instance represents: Input tuple to examine.
            </summary>
            <param name="toFind">Input tuple with values to find.</param>
            <returns>Index of the first occurrence of the values to find.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleFind(HalconDotNet.HTuple)">
            <summary>
              Return the indices of all occurrences of a tuple within another tuple.
              Instance represents: Input tuple to examine.
            </summary>
            <param name="toFind">Input tuple with values to find.</param>
            <returns>Indices of the occurrences of the values to find in the  tuple to examine.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleSortIndex">
            <summary>
              Sort the elements of a tuple and return the indices of the sorted tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Sorted tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleSort">
            <summary>
              Sort the elements of a tuple in ascending order.
              Instance represents: Input tuple.
            </summary>
            <returns>Sorted tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleInverse">
            <summary>
              Invert a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Inverted input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleConcatOp(HalconDotNet.HTuple)">
            <summary>
              Concatenate two tuples to a new one.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Concatenation of input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleSelectRange(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Select several elements of a tuple.
              Instance represents: Input tuple.
            </summary>
            <param name="leftindex">Index of first element to select.</param>
            <param name="rightindex">Index of last element to select.</param>
            <returns>Selected tuple elements.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleLastN(HalconDotNet.HTuple)">
            <summary>
              Select all elements from index "n" to the end of a tuple.
              Instance represents: Input tuple.
            </summary>
            <param name="index">Index of the first element to select.</param>
            <returns>Selected tuple elements.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleFirstN(HalconDotNet.HTuple)">
            <summary>
              Select the first elements of a tuple.
              Instance represents: Input tuple.
            </summary>
            <param name="index">Index of the last element to select.</param>
            <returns>Selected tuple elements.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleInsert(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Inserts one or more elements into a tuple at index.
              Instance represents: Input tuple.
            </summary>
            <param name="index">Start index of elements to be inserted.</param>
            <param name="insertTuple">Element(s) to insert at index.</param>
            <returns>Tuple with inserted elements.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleReplace(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Replaces one or more elements of a tuple.
              Instance represents: Input tuple.
            </summary>
            <param name="index">Index/Indices of elements to be replaced.</param>
            <param name="replaceTuple">Element(s) to replace.</param>
            <returns>Tuple with replaced elements.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleRemove(HalconDotNet.HTuple)">
            <summary>
              Remove elements from a tuple.
              Instance represents: Input tuple.
            </summary>
            <param name="index">Indices of the elements to remove.</param>
            <returns>Reduced tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleSelectMask(HalconDotNet.HTuple)">
            <summary>
              Select in mask specified elements of a tuple.
              Instance represents: Input tuple.
            </summary>
            <param name="mask"> greater than  0 specifies the elements to select.</param>
            <returns>Selected tuple elements.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleSelect(HalconDotNet.HTuple)">
            <summary>
              Select single elements of a tuple.
              Instance represents: Input tuple.
            </summary>
            <param name="index">Indices of the elements to select.</param>
            <returns>Selected tuple element.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleStrBitSelect(HalconDotNet.HTuple)">
            <summary>
              Select single character or bit from a tuple.
              Instance represents: Input tuple.
            </summary>
            <param name="index">Position of character or bit to select.</param>
            <returns>Tuple containing the selected characters and bits.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleGenSequence(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate a tuple with a sequence of equidistant values.</summary>
            <param name="start">Start value of the tuple.</param>
            <param name="end">Maximum value for the last entry.</param>
            <param name="step">Increment value.</param>
            <returns>The resulting sequence.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleGenConst(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate a tuple of a specific length and initialize its elements.</summary>
            <param name="length">Length of tuple to generate.</param>
            <param name="constVal">Constant for initializing the tuple elements.</param>
            <returns>New Tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleEnvironment">
            <summary>
              Read one or more environment variables.
              Instance represents: Tuple containing name(s) of the environment variable(s).
            </summary>
            <returns>Content of the environment variable(s).</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleSplit(HalconDotNet.HTuple)">
            <summary>
              Split strings into substrings between predefined separator symbol(s).
              Instance represents: Input tuple with string(s) to split.
            </summary>
            <param name="separator">Input tuple with separator symbol(s).</param>
            <returns>Substrings after splitting the input strings.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleSubstr(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Cut characters from position "n1" through "n2" out of a string tuple.
              Instance represents: Input tuple with string(s) to examine.
            </summary>
            <param name="position1">Input tuple with start position(s) "n1".</param>
            <param name="position2">Input tuple with end position(s) "n2".</param>
            <returns>Characters of the string(s) from position "n1" to "n2".</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleStrLastN(HalconDotNet.HTuple)">
            <summary>
              Cut all characters starting at position "n" out of a string tuple.
              Instance represents: Input tuple with string(s) to examine.
            </summary>
            <param name="position">Input tuple with position(s) "n".</param>
            <returns>The last characters of the string(s) starting at position "n".</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleStrFirstN(HalconDotNet.HTuple)">
            <summary>
              Cut the first characters up to position "n" out of a string tuple.
              Instance represents: Input tuple with string(s) to examine.
            </summary>
            <param name="position">Input tuple with position(s) "n".</param>
            <returns>The first characters of the string(s) up to position "n".</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleStrrchr(HalconDotNet.HTuple)">
            <summary>
              Backward search for characters within a string tuple.
              Instance represents: Input tuple with string(s) to examine.
            </summary>
            <param name="toFind">Input tuple with character(s) to search.</param>
            <returns>Position of searched character(s) within the string(s).</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleStrchr(HalconDotNet.HTuple)">
            <summary>
              Forward search for characters within a string tuple.
              Instance represents: Input tuple with string(s) to examine.
            </summary>
            <param name="toFind">Input tuple with character(s) to search.</param>
            <returns>Position of searched character(s) within the string(s).</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleStrrstr(HalconDotNet.HTuple)">
            <summary>
              Backward search for strings within a string tuple.
              Instance represents: Input tuple with string(s) to examine.
            </summary>
            <param name="toFind">Input tuple with string(s) to search.</param>
            <returns>Position of searched string(s) within the examined string(s).</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleStrstr(HalconDotNet.HTuple)">
            <summary>
              Forward search for strings within a string tuple.
              Instance represents: Input tuple with string(s) to examine.
            </summary>
            <param name="toFind">Input tuple with string(s) to search.</param>
            <returns>Position of searched string(s) within the examined string(s).</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleStrlen">
            <summary>
              Determine the length of every string within a tuple of strings.
              Instance represents: Input tuple.
            </summary>
            <returns>Lengths of the single strings of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleLessEqualElem(HalconDotNet.HTuple)">
            <summary>
              Test, whether a tuple is elementwise less or equal to another tuple.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Result of the comparison of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleLessElem(HalconDotNet.HTuple)">
            <summary>
              Test, whether a tuple is elementwise less than another tuple.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Result of the comparison of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleGreaterEqualElem(HalconDotNet.HTuple)">
            <summary>
              Test, whether a tuple is elementwise greater or equal to another tuple.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Result of the comparison of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleGreaterElem(HalconDotNet.HTuple)">
            <summary>
              Test, whether a tuple is elementwise greater than another tuple.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Result of the comparison of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleNotEqualElem(HalconDotNet.HTuple)">
            <summary>
              Test, whether two tuples are elementwise not equal.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Result of the comparison of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleEqualElem(HalconDotNet.HTuple)">
            <summary>
              Test, whether two tuples are elementwise equal.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Result of the comparison of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleLessEqual(HalconDotNet.HTuple)">
            <summary>
              Test whether a tuple is less or equal to another tuple.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Result of the comparison of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleLess(HalconDotNet.HTuple)">
            <summary>
              Test whether a tuple is less than another tuple.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Result of the comparison of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleGreaterEqual(HalconDotNet.HTuple)">
            <summary>
              Test whether a tuple is greater or equal to another tuple.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Result of the comparison of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleGreater(HalconDotNet.HTuple)">
            <summary>
              Test whether a tuple is greater than another tuple.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Result of the comparison of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleNotEqual(HalconDotNet.HTuple)">
            <summary>
              Test whether two tuples are not equal.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Result of the comparison of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleEqual(HalconDotNet.HTuple)">
            <summary>
              Test whether two tuples are equal.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Result of the comparison of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleNot">
            <summary>
              Compute the logical not of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Binary not of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleXor(HalconDotNet.HTuple)">
            <summary>
              Compute the logical exclusive or of two tuples.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Binary exclusive or of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleOr(HalconDotNet.HTuple)">
            <summary>
              Compute the logical or of two tuples.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Logical or of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleAnd(HalconDotNet.HTuple)">
            <summary>
              Compute the logical and of two tuples.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Logical and of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleBnot">
            <summary>
              Compute the bitwise not of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Binary not of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleBxor(HalconDotNet.HTuple)">
            <summary>
              Compute the bitwise exclusive or of two tuples.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Binary exclusive or of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleBor(HalconDotNet.HTuple)">
            <summary>
              Compute the bitwise or of two tuples.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Binary or of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleBand(HalconDotNet.HTuple)">
            <summary>
              Compute the bitwise and of two tuples.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Binary and of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleRsh(HalconDotNet.HTuple)">
            <summary>
              Shift a tuple bitwise to the right.
              Instance represents: Input tuple.
            </summary>
            <param name="shift">Number of places to shift the input tuple.</param>
            <returns>Shifted input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleLsh(HalconDotNet.HTuple)">
            <summary>
              Shift a tuple bitwise to the left.
              Instance represents: Input tuple.
            </summary>
            <param name="shift">Number of places to shift the input tuple.</param>
            <returns>Shifted input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleChrt">
            <summary>
              Convert a tuple of integers into strings with the corresponding ASCII codes.
              Instance represents: Input tuple.
            </summary>
            <returns>Strings corresponding to the ASCII code of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleOrds">
            <summary>
              Convert a tuple of strings into a tuple of their ASCII codes.
              Instance represents: Input tuple.
            </summary>
            <returns>ASCII code of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleChr">
            <summary>
              Convert a tuple of integers into strings with the corresponding ASCII codes.
              Instance represents: Input tuple.
            </summary>
            <returns>Strings corresponding to the ASCII code of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleOrd">
            <summary>
              Convert a tuple of strings of length 1 into a tuple of their ASCII codes.
              Instance represents: Input tuple.
            </summary>
            <returns>ASCII code of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleString(HalconDotNet.HTuple)">
            <summary>
              Convert a tuple into a tuple of strings.
              Instance represents: Input tuple.
            </summary>
            <param name="format">Format string.</param>
            <returns>Input tuple converted to strings.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleIsNumber">
            <summary>
              Check a tuple (of strings) whether it represents numbers.
              Instance represents: Input tuple.
            </summary>
            <returns>Tuple with boolean numbers.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleNumber">
            <summary>
              Convert a tuple (of strings) into a tuple of numbers.
              Instance represents: Input tuple.
            </summary>
            <returns>Input tuple as numbers.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleRound">
            <summary>
              Convert a tuple into a tuple of integer numbers.
              Instance represents: Input tuple.
            </summary>
            <returns>Result of the rounding.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleInt">
            <summary>
              Convert a tuple into a tuple of integer numbers.
              Instance represents: Input tuple.
            </summary>
            <returns>Result of the conversion into integer numbers.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleReal">
            <summary>
              Convert a tuple into a tuple of floating point numbers.
              Instance represents: Input tuple.
            </summary>
            <returns>Input tuple as floating point numbers.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleLdexp(HalconDotNet.HTuple)">
            <summary>
              Calculate the ldexp function of two tuples.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Ldexp function of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleFmod(HalconDotNet.HTuple)">
            <summary>
              Calculate the remainder of the floating point division of two tuples.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Remainder of the division of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleMod(HalconDotNet.HTuple)">
            <summary>
              Calculate the remainder of the integer division of two tuples.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Remainder of the division of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleCeil">
            <summary>
              Compute the ceiling function of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Ceiling function of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleFloor">
            <summary>
              Compute the floor function of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Floor function of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TuplePow(HalconDotNet.HTuple)">
            <summary>
              Calculate the power function of two tuples.
              Instance represents: Input tuple 1.
            </summary>
            <param name="t2">Input tuple 2.</param>
            <returns>Power function of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleLog10">
            <summary>
              Compute the base 10 logarithm of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Base 10 logarithm of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleLog">
            <summary>
              Compute the natural logarithm of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Natural logarithm of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleExp">
            <summary>
              Compute the exponential of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Exponential of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleTanh">
            <summary>
              Compute the hyperbolic tangent of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Hyperbolic tangent of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleCosh">
            <summary>
              Compute the hyperbolic cosine of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Hyperbolic cosine of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleSinh">
            <summary>
              Compute the hyperbolic sine of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Hyperbolic sine of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleRad">
            <summary>
              Convert a tuple from degrees to radians.
              Instance represents: Input tuple.
            </summary>
            <returns>Input tuple in radians.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleDeg">
            <summary>
              Convert a tuple from radians to degrees.
              Instance represents: Input tuple.
            </summary>
            <returns>Input tuple in degrees.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleAtan2(HalconDotNet.HTuple)">
            <summary>
              Compute the arctangent of a tuple for all four quadrants.
              Instance represents: Input tuple of the y-values.
            </summary>
            <param name="x">Input tuple of the x-values.</param>
            <returns>Arctangent of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleAtan">
            <summary>
              Compute the arctangent of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Arctangent of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleAcos">
            <summary>
              Compute the arccosine of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Arccosine of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleAsin">
            <summary>
              Compute the arcsine of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Arcsine of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleTan">
            <summary>
              Compute the tangent of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Tangent of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleCos">
            <summary>
              Compute the cosine of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Cosine of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleSin">
            <summary>
              Compute the sine of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Sine of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleFabs">
            <summary>
              Compute the absolute value of a tuple (as floating point numbers).
              Instance represents: Input tuple.
            </summary>
            <returns>Absolute value of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleSqrt">
            <summary>
              Compute the square root of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Square root of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleAbs">
            <summary>
              Compute the absolute value of a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Absolute value of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleNeg">
            <summary>
              Negate a tuple.
              Instance represents: Input tuple.
            </summary>
            <returns>Negation of the input tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleDiv(HalconDotNet.HTuple)">
            <summary>
              Divide two tuples.
              Instance represents: Input tuple 1.
            </summary>
            <param name="q2">Input tuple 2.</param>
            <returns>Quotient of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleMultOp(HalconDotNet.HTuple)">
            <summary>
              Multiply two tuples.
              Instance represents: Input tuple 1.
            </summary>
            <param name="p2">Input tuple 2.</param>
            <returns>Product of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleSubOp(HalconDotNet.HTuple)">
            <summary>
              Subtract two tuples.
              Instance represents: Input tuple 1.
            </summary>
            <param name="d2">Input tuple 2.</param>
            <returns>Difference of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.TupleAddOp(HalconDotNet.HTuple)">
            <summary>
              Add two tuples.
              Instance represents: Input tuple 1.
            </summary>
            <param name="s2">Input tuple 2.</param>
            <returns>Sum of the input tuples.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.DeserializeTuple(HalconDotNet.HSerializedItem)">
            <summary>Deserialize a serialized tuple.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <returns>Tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.SerializeTuple">
            <summary>
              Serialize a tuple.
              Instance represents: Tuple.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HTuple.WriteTuple(HalconDotNet.HTuple)">
            <summary>
              Write a tuple to a file.
              Instance represents: Tuple with any kind of data.
            </summary>
            <param name="fileName">Name of the file to be written.</param>
        </member>
        <member name="M:HalconDotNet.HTuple.ReadTuple(HalconDotNet.HTuple)">
            <summary>Read a tuple from a file.</summary>
            <param name="fileName">Name of the file to be read.</param>
            <returns>Tuple with any kind of data.</returns>
        </member>
        <member name="P:HalconDotNet.HTuple.Type">
            <summary>Get the data type of this tuple</summary>
        </member>
        <member name="P:HalconDotNet.HTuple.Length">
            <summary>Get the length of this tuple</summary>
        </member>
        <member name="P:HalconDotNet.HTuple.Item(System.Int32[])">
            <summary>
              Provides access to tuple elements at the specified indices
            </summary>
        </member>
        <member name="P:HalconDotNet.HTuple.Item(System.Int32)">
            <summary>
              Provides access to the tuple element at the specified index
            </summary>
        </member>
        <member name="P:HalconDotNet.HTuple.Item(HalconDotNet.HTuple)">
            <summary>
              Provides access to the tuple element at the specified index
            </summary>
        </member>
        <member name="P:HalconDotNet.HTuple.IArr">
            <summary>
              Exposes the internal array representation to allow most efficient
              (but not safest) access. Tuple type must be HTupleType.INTEGER.
              The array length may be greater than the used tuple length.
            </summary>
        </member>
        <member name="P:HalconDotNet.HTuple.LArr">
            <summary>
              Exposes the internal array representation to allow most efficient
              (but not safest) access. Tuple type must be HTupleType.LONG.
              The array length may be greater than the used tuple length.
            </summary>
        </member>
        <member name="P:HalconDotNet.HTuple.DArr">
            <summary>
              Exposes the internal array representation to allow most efficient
              (but not safest) access. Tuple type must be HTupleType.DOUBLE.
              The array length may be greater than the used tuple length.
            </summary>
        </member>
        <member name="P:HalconDotNet.HTuple.SArr">
            <summary>
              Exposes the internal array representation to allow most efficient
              (but not safest) access. Tuple type must be HTupleType.STRING.
              The array length may be greater than the used tuple length.
            </summary>
        </member>
        <member name="P:HalconDotNet.HTuple.I">
            <summary>Convenience accessor for tuple[0].I</summary>
        </member>
        <member name="P:HalconDotNet.HTuple.L">
            <summary>Convenience accessor for tuple[0].L</summary>
        </member>
        <member name="P:HalconDotNet.HTuple.D">
            <summary>Convenience accessor for tuple[0].D</summary>
        </member>
        <member name="P:HalconDotNet.HTuple.S">
            <summary>Convenience accessor for tuple[0].S</summary>
        </member>
        <member name="P:HalconDotNet.HTuple.O">
            <summary>Convenience accessor for tuple[0].O</summary>
        </member>
        <member name="P:HalconDotNet.HTuple.IP">
            <summary>Convenience accessor for tuple[0].IP</summary>
        </member>
        <member name="T:HalconDotNet.HalconWindowLayoutDialog">
            <summary>
            Summary description for HalconWindowLayoutDialog.
            </summary>
        </member>
        <member name="F:HalconDotNet.HalconWindowLayoutDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HalconDotNet.HalconWindowLayoutDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:HalconDotNet.HalconWindowLayoutDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HalconDotNet.HMouseEventArgs">
            <summary>
            Provides data for the HMouseUp, HMouseDown, and HMouseMove  events.
            </summary>
        </member>
        <member name="P:HalconDotNet.HMouseEventArgs.Button">
            <summary>Gets which mouse button was pressed.</summary>
        </member>
        <member name="P:HalconDotNet.HMouseEventArgs.Clicks">
            <summary>
              Gets the number of times the mouse button was pressed and released.
            </summary>
        </member>
        <member name="P:HalconDotNet.HMouseEventArgs.X">
            <summary>Gets the column coordinate of a mouse click.</summary>
        </member>
        <member name="P:HalconDotNet.HMouseEventArgs.Y">
            <summary>Gets the row coordinate of a mouse click.</summary>
        </member>
        <member name="P:HalconDotNet.HMouseEventArgs.Delta">
            <summary>
              Gets a signed count of the number of detents the mouse wheel 
              has rotated. A detent is one notch of the mouse wheel.
            </summary>
        </member>
        <member name="T:HalconDotNet.HMouseEventHandler">
            <summary>
            Represents the method that will handle the HMouseDown, HMouseUp, 
            or HMouseMove event of a HWindowControl.
            </summary>
        </member>
        <member name="T:HalconDotNet.HInitWindowEventHandler">
            <summary>
            Represents the method that will handle the InitWindow event
            of a HWindowControl
            </summary>
        </member>
        <member name="T:HalconDotNet.HWindowControl">
            <summary>
            Provides a HALCON window for your Windows Forms application
            </summary>
        </member>
        <member name="F:HalconDotNet.HWindowControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:HalconDotNet.HWindowControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:HalconDotNet.HWindowControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:HalconDotNet.HWindowControl.SetFullImagePart(HalconDotNet.HImage)">
            <summary>
              Adapt ImagePart to show the full image.
            </summary>
            <param name="reference"></param>
        </member>
        <member name="P:HalconDotNet.HWindowControl.WindowSize">
            <summary>
              Size of the HALCON window in pixels.
              Without border, this will be identical to the control size.
            </summary>
        </member>
        <member name="P:HalconDotNet.HWindowControl.ImagePart">
            <summary>
             This rectangle specifies the image part to be displayed. 
             The method SetFullImagePart() will adapt this property to
             show the full image.
            </summary>
        </member>
        <member name="P:HalconDotNet.HWindowControl.BorderWidth">
            <summary>
              Width of optional border in pixels
            </summary>
        </member>
        <member name="P:HalconDotNet.HWindowControl.BorderColor">
            <summary>
              Color of optional border around window
            </summary>
        </member>
        <member name="E:HalconDotNet.HWindowControl.HInitWindow">
            <summary>
              Occurs after the HALCON window has been initialized
            </summary>
            <remarks>
              Under Mono/Linux, the HALCON window cannot be initialized
              before the Form is visible. Therefore, accessing the window
              in the event Load of the Form is not portable.
            </remarks>
        </member>
        <member name="E:HalconDotNet.HWindowControl.HMouseMove">
            <summary>
              Occurs when the mouse is moved over the HALCON window.
            </summary>
        </member>
        <member name="E:HalconDotNet.HWindowControl.HMouseDown">
            <summary>
              Occurs when a button is pressed over the HALCON window.
            </summary>
        </member>
        <member name="E:HalconDotNet.HWindowControl.HMouseUp">
            <summary>
              "Occurs when a button is released over the HALCON window.
            </summary>
        </member>
        <member name="E:HalconDotNet.HWindowControl.HMouseWheel">
            <summary>
              "Occurs when the wheel is used over the HALCON window.
            </summary>
        </member>
        <member name="T:HalconDotNet.HSerial">
            <summary>Represents an instance of a connection via a serial port.</summary>
        </member>
        <member name="M:HalconDotNet.HSerial.#ctor(System.String)">
            <summary>
              Open a serial device.
              Modified instance represents: Serial interface handle.
            </summary>
            <param name="portName">Name of the serial port. Default: "COM1"</param>
        </member>
        <member name="M:HalconDotNet.HSerial.ClearSerial(System.String)">
            <summary>
              Clear the buffer of a serial connection.
              Instance represents: Serial interface handle.
            </summary>
            <param name="channel">Buffer to be cleared. Default: "input"</param>
        </member>
        <member name="M:HalconDotNet.HSerial.WriteSerial(HalconDotNet.HTuple)">
            <summary>
              Write to a serial connection.
              Instance represents: Serial interface handle.
            </summary>
            <param name="data">Characters to write (as tuple of integers).</param>
        </member>
        <member name="M:HalconDotNet.HSerial.WriteSerial(System.Int32)">
            <summary>
              Write to a serial connection.
              Instance represents: Serial interface handle.
            </summary>
            <param name="data">Characters to write (as tuple of integers).</param>
        </member>
        <member name="M:HalconDotNet.HSerial.ReadSerial(System.Int32)">
            <summary>
              Read from a serial device.
              Instance represents: Serial interface handle.
            </summary>
            <param name="numCharacters">Number of characters to read. Default: 1</param>
            <returns>Read characters (as tuple of integers).</returns>
        </member>
        <member name="M:HalconDotNet.HSerial.GetSerialParam(System.Int32@,System.String@,System.String@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Get the parameters of a serial device.
              Instance represents: Serial interface handle.
            </summary>
            <param name="dataBits">Number of data bits of the serial interface.</param>
            <param name="flowControl">Type of flow control of the serial interface.</param>
            <param name="parity">Parity of the serial interface.</param>
            <param name="stopBits">Number of stop bits of the serial interface.</param>
            <param name="totalTimeOut">Total timeout of the serial interface in ms.</param>
            <param name="interCharTimeOut">Inter-character timeout of the serial interface in ms.</param>
            <returns>Speed of the serial interface.</returns>
        </member>
        <member name="M:HalconDotNet.HSerial.SetSerialParam(HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set the parameters of a serial device.
              Instance represents: Serial interface handle.
            </summary>
            <param name="baudRate">Speed of the serial interface. Default: "unchanged"</param>
            <param name="dataBits">Number of data bits of the serial interface. Default: "unchanged"</param>
            <param name="flowControl">Type of flow control of the serial interface. Default: "unchanged"</param>
            <param name="parity">Parity of the serial interface. Default: "unchanged"</param>
            <param name="stopBits">Number of stop bits of the serial interface. Default: "unchanged"</param>
            <param name="totalTimeOut">Total timeout of the serial interface in ms. Default: "unchanged"</param>
            <param name="interCharTimeOut">Inter-character timeout of the serial interface in ms. Default: "unchanged"</param>
        </member>
        <member name="M:HalconDotNet.HSerial.SetSerialParam(System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
              Set the parameters of a serial device.
              Instance represents: Serial interface handle.
            </summary>
            <param name="baudRate">Speed of the serial interface. Default: "unchanged"</param>
            <param name="dataBits">Number of data bits of the serial interface. Default: "unchanged"</param>
            <param name="flowControl">Type of flow control of the serial interface. Default: "unchanged"</param>
            <param name="parity">Parity of the serial interface. Default: "unchanged"</param>
            <param name="stopBits">Number of stop bits of the serial interface. Default: "unchanged"</param>
            <param name="totalTimeOut">Total timeout of the serial interface in ms. Default: "unchanged"</param>
            <param name="interCharTimeOut">Inter-character timeout of the serial interface in ms. Default: "unchanged"</param>
        </member>
        <member name="M:HalconDotNet.HSerial.OpenSerial(System.String)">
            <summary>
              Open a serial device.
              Modified instance represents: Serial interface handle.
            </summary>
            <param name="portName">Name of the serial port. Default: "COM1"</param>
        </member>
        <member name="T:HalconDotNet.HFeatureSet">
            <summary>Represents an instance of a training used for the classifier.</summary>
        </member>
        <member name="M:HalconDotNet.HFeatureSet.#ctor(System.String)">
            <summary>
              Read a training data set from a file.
              Modified instance represents: Identification of the data set to train.
            </summary>
            <param name="fileName">Filename of the data set to train. Default: "sampset1"</param>
        </member>
        <member name="M:HalconDotNet.HFeatureSet.ReadSampset(System.String)">
            <summary>
              Read a training data set from a file.
              Modified instance represents: Identification of the data set to train.
            </summary>
            <param name="fileName">Filename of the data set to train. Default: "sampset1"</param>
        </member>
        <member name="M:HalconDotNet.HFeatureSet.LearnSampsetBox(HalconDotNet.HClassBox,System.String,System.Int32,System.Double,System.Int32)">
            <summary>
              Train the classifier with one data set.
              Instance represents: Number of the data set to train.
            </summary>
            <param name="classifHandle">Handle of the classifier.</param>
            <param name="outfile">Name of the protocol file. Default: "training_prot"</param>
            <param name="NSamples">Number of arrays of attributes to learn. Default: 500</param>
            <param name="stopError">Classification error for termination. Default: 0.05</param>
            <param name="errorN">Error during the assignment. Default: 100</param>
        </member>
        <member name="M:HalconDotNet.HFeatureSet.TestSampsetBox(HalconDotNet.HClassBox)">
            <summary>
              Classify a set of arrays.
              Instance represents: Key of the test data.
            </summary>
            <param name="classifHandle">Handle of the classifier.</param>
            <returns>Error during the assignment.</returns>
        </member>
        <member name="T:HalconDotNet.HIOChannel">
            <summary>Represents an instance of a channel of an I/O device.</summary>
        </member>
        <member name="M:HalconDotNet.HIOChannel.#ctor(HalconDotNet.HIODevice,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Open and configure I/O channels.
              Modified instance represents: Handles of the opened I/O channel.
            </summary>
            <param name="IODeviceHandle">Handle of the opened I/O device.</param>
            <param name="IOChannelName">HALCON I/O channel names of the specified device.</param>
            <param name="genParamName">Parameter names. Default: []</param>
            <param name="genParamValue">Parameter values. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HIOChannel.ControlIoChannel(HalconDotNet.HIOChannel[],System.String,HalconDotNet.HTuple)">
            <summary>Perform an action on I/O channels.</summary>
            <param name="IOChannelHandle">Handles of the opened I/O channels.</param>
            <param name="paramAction">Name of the action to perform.</param>
            <param name="paramArgument">List of arguments for the action. Default: []</param>
            <returns>List of values returned by the action.</returns>
        </member>
        <member name="M:HalconDotNet.HIOChannel.ControlIoChannel(System.String,HalconDotNet.HTuple)">
            <summary>
              Perform an action on I/O channels.
              Instance represents: Handles of the opened I/O channels.
            </summary>
            <param name="paramAction">Name of the action to perform.</param>
            <param name="paramArgument">List of arguments for the action. Default: []</param>
            <returns>List of values returned by the action.</returns>
        </member>
        <member name="M:HalconDotNet.HIOChannel.WriteIoChannel(HalconDotNet.HIOChannel[],HalconDotNet.HTuple)">
            <summary>Write a value to the specified I/O channels.</summary>
            <param name="IOChannelHandle">Handles of the opened I/O channels.</param>
            <param name="value">Write values.</param>
            <returns>Status of written values.</returns>
        </member>
        <member name="M:HalconDotNet.HIOChannel.WriteIoChannel(HalconDotNet.HTuple)">
            <summary>
              Write a value to the specified I/O channels.
              Instance represents: Handles of the opened I/O channels.
            </summary>
            <param name="value">Write values.</param>
            <returns>Status of written values.</returns>
        </member>
        <member name="M:HalconDotNet.HIOChannel.ReadIoChannel(HalconDotNet.HIOChannel[],HalconDotNet.HTuple@)">
            <summary>Read a value from the specified I/O channels.</summary>
            <param name="IOChannelHandle">Handles of the opened I/O channels.</param>
            <param name="status">Status of read value.</param>
            <returns>Read value.</returns>
        </member>
        <member name="M:HalconDotNet.HIOChannel.ReadIoChannel(HalconDotNet.HTuple@)">
            <summary>
              Read a value from the specified I/O channels.
              Instance represents: Handles of the opened I/O channels.
            </summary>
            <param name="status">Status of read value.</param>
            <returns>Read value.</returns>
        </member>
        <member name="M:HalconDotNet.HIOChannel.SetIoChannelParam(HalconDotNet.HIOChannel[],HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set specific parameters of I/O channels.</summary>
            <param name="IOChannelHandle">Handles of the opened I/O channels.</param>
            <param name="paramName">Parameter names. Default: []</param>
            <param name="paramValue">Parameter values to set. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HIOChannel.SetIoChannelParam(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set specific parameters of I/O channels.
              Instance represents: Handles of the opened I/O channels.
            </summary>
            <param name="paramName">Parameter names. Default: []</param>
            <param name="paramValue">Parameter values to set. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HIOChannel.GetIoChannelParam(HalconDotNet.HIOChannel[],HalconDotNet.HTuple)">
            <summary>Query specific parameters of I/O channels.</summary>
            <param name="IOChannelHandle">Handles of the opened I/O channels.</param>
            <param name="paramName">Parameter names. Default: ""</param>
            <returns>Parameter values.</returns>
        </member>
        <member name="M:HalconDotNet.HIOChannel.GetIoChannelParam(System.String)">
            <summary>
              Query specific parameters of I/O channels.
              Instance represents: Handles of the opened I/O channels.
            </summary>
            <param name="paramName">Parameter names. Default: ""</param>
            <returns>Parameter values.</returns>
        </member>
        <member name="M:HalconDotNet.HIOChannel.OpenIoChannel(HalconDotNet.HIODevice,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Open and configure I/O channels.</summary>
            <param name="IODeviceHandle">Handle of the opened I/O device.</param>
            <param name="IOChannelName">HALCON I/O channel names of the specified device.</param>
            <param name="genParamName">Parameter names. Default: []</param>
            <param name="genParamValue">Parameter values. Default: []</param>
            <returns>Handles of the opened I/O channel.</returns>
        </member>
        <member name="M:HalconDotNet.HIOChannel.OpenIoChannel(HalconDotNet.HIODevice,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Open and configure I/O channels.
              Modified instance represents: Handles of the opened I/O channel.
            </summary>
            <param name="IODeviceHandle">Handle of the opened I/O device.</param>
            <param name="IOChannelName">HALCON I/O channel names of the specified device.</param>
            <param name="genParamName">Parameter names. Default: []</param>
            <param name="genParamValue">Parameter values. Default: []</param>
        </member>
        <member name="T:HalconDotNet.HMetrologyModel">
            <summary>Represents an instance of a metrology model.</summary>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.#ctor(System.String)">
            <summary>
              Read a metrology model from a file.
              Modified instance represents: Handle of the metrology model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.#ctor">
            <summary>
              Create the data structure that is needed to measure geometric shapes.
              Modified instance represents: Handle of the metrology model.
            </summary>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.GetMetrologyObjectModelContour(HalconDotNet.HTuple,System.Double)">
            <summary>
              Query the model contour of a metrology object in image coordinates. 
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology object. Default: "all"</param>
            <param name="resolution">Distance between neighboring contour points. Default: 1.5</param>
            <returns>Model contour.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.GetMetrologyObjectModelContour(System.Int32,System.Double)">
            <summary>
              Query the model contour of a metrology object in image coordinates. 
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology object. Default: "all"</param>
            <param name="resolution">Distance between neighboring contour points. Default: 1.5</param>
            <returns>Model contour.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.GetMetrologyObjectResultContour(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double)">
            <summary>
              Query the result contour of a metrology object. 
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology object. Default: "all"</param>
            <param name="instance">Instance of the metrology object. Default: "all"</param>
            <param name="resolution">Distance between neighboring contour points. Default: 1.5</param>
            <returns>Result contour for the given metrology object.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.GetMetrologyObjectResultContour(System.Int32,System.Int32,System.Double)">
            <summary>
              Query the result contour of a metrology object. 
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology object. Default: "all"</param>
            <param name="instance">Instance of the metrology object. Default: "all"</param>
            <param name="resolution">Distance between neighboring contour points. Default: 1.5</param>
            <returns>Result contour for the given metrology object.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.AlignMetrologyModel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Alignment of a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="row">Row coordinate of the alignment. Default: 0</param>
            <param name="column">Column coordinate of the alignment. Default: 0</param>
            <param name="angle">Rotation angle of the alignment. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.AlignMetrologyModel(System.Double,System.Double,System.Double)">
            <summary>
              Alignment of a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="row">Row coordinate of the alignment. Default: 0</param>
            <param name="column">Column coordinate of the alignment. Default: 0</param>
            <param name="angle">Rotation angle of the alignment. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.AddMetrologyObjectGeneric(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a metrology object to a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="shape">Type of the metrology object to be added. Default: "circle"</param>
            <param name="shapeParam">Parameters of the metrology object to be added.</param>
            <param name="measureLength1">Half length of the measure regions perpendicular to the boundary. Default: 20.0</param>
            <param name="measureLength2">Half length of the measure regions tangetial to the boundary. Default: 5.0</param>
            <param name="measureSigma">Sigma of the Gaussian function for the smoothing. Default: 1.0</param>
            <param name="measureThreshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Index of the created metrology object.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.AddMetrologyObjectGeneric(System.String,HalconDotNet.HTuple,System.Double,System.Double,System.Double,System.Double,System.String,System.Double)">
            <summary>
              Add a metrology object to a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="shape">Type of the metrology object to be added. Default: "circle"</param>
            <param name="shapeParam">Parameters of the metrology object to be added.</param>
            <param name="measureLength1">Half length of the measure regions perpendicular to the boundary. Default: 20.0</param>
            <param name="measureLength2">Half length of the measure regions tangetial to the boundary. Default: 5.0</param>
            <param name="measureSigma">Sigma of the Gaussian function for the smoothing. Default: 1.0</param>
            <param name="measureThreshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Index of the created metrology object.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.GetMetrologyModelParam(System.String)">
            <summary>
              Get parameters that are valid for the entire metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="genParamName">Name of the generic parameter. Default: "camera_param"</param>
            <returns>Value of the generic parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.SetMetrologyModelParam(System.String,HalconDotNet.HTuple)">
            <summary>
              Set parameters that are valid for the entire metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="genParamName">Name of the generic parameter. Default: "camera_param"</param>
            <param name="genParamValue">Value of the generic parameter. Default: [0,0,0,0,0,0,0,0]</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.SetMetrologyModelParam(System.String,System.String)">
            <summary>
              Set parameters that are valid for the entire metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="genParamName">Name of the generic parameter. Default: "camera_param"</param>
            <param name="genParamValue">Value of the generic parameter. Default: [0,0,0,0,0,0,0,0]</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.DeserializeMetrologyModel(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized metrology model.
              Modified instance represents: Handle of the metrology model.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.SerializeMetrologyModel">
            <summary>
              Serialize a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.TransformMetrologyObject(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Transform metrology objects of a metrology model, e.g. for alignment.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <param name="row">Translation in row direction.</param>
            <param name="column">Translation in column direction.</param>
            <param name="phi">Rotation angle.</param>
            <param name="mode">Mode of the transformation. Default: "absolute"</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.TransformMetrologyObject(System.String,System.Double,System.Double,System.Double,System.String)">
            <summary>
              Transform metrology objects of a metrology model, e.g. for alignment.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <param name="row">Translation in row direction.</param>
            <param name="column">Translation in column direction.</param>
            <param name="phi">Rotation angle.</param>
            <param name="mode">Mode of the transformation. Default: "absolute"</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.WriteMetrologyModel(System.String)">
            <summary>
              Write a metrology model to a file.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.ReadMetrologyModel(System.String)">
            <summary>
              Read a metrology model from a file.
              Modified instance represents: Handle of the metrology model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.CopyMetrologyModel(HalconDotNet.HTuple)">
            <summary>
              Copy a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <returns>Handle of the copied metrology model.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.CopyMetrologyModel(System.String)">
            <summary>
              Copy a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <returns>Handle of the copied metrology model.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.CopyMetrologyObject(HalconDotNet.HTuple)">
            <summary>
              Copy metrology metrology objects of a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <returns>Indices of the copied metrology objects.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.CopyMetrologyObject(System.String)">
            <summary>
              Copy metrology metrology objects of a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <returns>Indices of the copied metrology objects.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.GetMetrologyObjectNumInstances(HalconDotNet.HTuple)">
            <summary>
              Get the number of instances of the metrology objects of a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: 0</param>
            <returns>Number of Instances of the metrology objects.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.GetMetrologyObjectNumInstances(System.Int32)">
            <summary>
              Get the number of instances of the metrology objects of a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: 0</param>
            <returns>Number of Instances of the metrology objects.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.GetMetrologyObjectResult(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Get the results of the measurement of a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology object. Default: "all"</param>
            <param name="instance">Instance of the metrology object. Default: "all"</param>
            <param name="genParamName">Name of the generic parameter. Default: "result_type"</param>
            <param name="genParamValue">Value of the generic parameter. Default: "all_param"</param>
            <returns>Result values.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.GetMetrologyObjectResult(System.Int32,System.Int32,System.String,System.String)">
            <summary>
              Get the results of the measurement of a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology object. Default: "all"</param>
            <param name="instance">Instance of the metrology object. Default: "all"</param>
            <param name="genParamName">Name of the generic parameter. Default: "result_type"</param>
            <param name="genParamValue">Value of the generic parameter. Default: "all_param"</param>
            <returns>Result values.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.GetMetrologyObjectMeasures(HalconDotNet.HTuple,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Get the measure regions and the results of the edge location for the metrology objects of a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <param name="transition">Select light/dark or dark/light edges. Default: "all"</param>
            <param name="row">Row coordinates of the measured edges.</param>
            <param name="column">Column coordinates of the measured edges.</param>
            <returns>Rectangular XLD Contours of measure regions.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.GetMetrologyObjectMeasures(System.String,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Get the measure regions and the results of the edge location for the metrology objects of a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <param name="transition">Select light/dark or dark/light edges. Default: "all"</param>
            <param name="row">Row coordinates of the measured edges.</param>
            <param name="column">Column coordinates of the measured edges.</param>
            <returns>Rectangular XLD Contours of measure regions.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.ApplyMetrologyModel(HalconDotNet.HImage)">
            <summary>
              Measure and fit the geometric shapes of all metrology objects of a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="image">Input image.</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.GetMetrologyObjectIndices">
            <summary>
              Get the indices of the metrology objects of a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <returns>Indices of the metrology objects.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.ResetMetrologyObjectFuzzyParam(HalconDotNet.HTuple)">
            <summary>
              Reset all fuzzy parameters and fuzzy functions of a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.ResetMetrologyObjectFuzzyParam(System.String)">
            <summary>
              Reset all fuzzy parameters and fuzzy functions of a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.ResetMetrologyObjectParam(HalconDotNet.HTuple)">
            <summary>
              Reset all parameters of a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.ResetMetrologyObjectParam(System.String)">
            <summary>
              Reset all parameters of a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.GetMetrologyObjectFuzzyParam(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Get a fuzzy parameter of a metroloy model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: 0</param>
            <param name="genParamName">Names of the generic parameters. Default: "fuzzy_thresh"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.GetMetrologyObjectFuzzyParam(System.String,System.String)">
            <summary>
              Get a fuzzy parameter of a metroloy model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: 0</param>
            <param name="genParamName">Names of the generic parameters. Default: "fuzzy_thresh"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.GetMetrologyObjectParam(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Get one or several parameters of a metroloy model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <param name="genParamName">Names of the generic parameters. Default: "num_measures"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.GetMetrologyObjectParam(System.String,System.String)">
            <summary>
              Get one or several parameters of a metroloy model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <param name="genParamName">Names of the generic parameters. Default: "num_measures"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.SetMetrologyObjectFuzzyParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set fuzzy parameters or fuzzy functions for a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <param name="genParamName">Names of the generic parameters. Default: "fuzzy_thresh"</param>
            <param name="genParamValue">Values of the generic parameters. Default: 0.5</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.SetMetrologyObjectFuzzyParam(System.String,System.String,System.Double)">
            <summary>
              Set fuzzy parameters or fuzzy functions for a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <param name="genParamName">Names of the generic parameters. Default: "fuzzy_thresh"</param>
            <param name="genParamValue">Values of the generic parameters. Default: 0.5</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.SetMetrologyObjectParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set parameters for the metrology objects of a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <param name="genParamName">Names of the generic parameters. Default: "num_instances"</param>
            <param name="genParamValue">Values of the generic parameters. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.SetMetrologyObjectParam(System.String,System.String,System.String)">
            <summary>
              Set parameters for the metrology objects of a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <param name="genParamName">Names of the generic parameters. Default: "num_instances"</param>
            <param name="genParamValue">Values of the generic parameters. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.AddMetrologyObjectRectangle2Measure(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a rectangle to a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="row">Row (or Y) coordinate of the center of the rectangle.</param>
            <param name="column">Column (or X) coordinate of the center of the rectangle.</param>
            <param name="phi">Orientation of the main axis [rad].</param>
            <param name="length1">Length of the larger half edge of the rectangle.</param>
            <param name="length2">Length of the smaller half edge of the rectangle.</param>
            <param name="measureLength1">Half length of the measure regions perpendicular to the boundary. Default: 20.0</param>
            <param name="measureLength2">Half length of the measure regions tangetial to the boundary. Default: 5.0</param>
            <param name="measureSigma">Sigma of the Gaussian function for the smoothing. Default: 1.0</param>
            <param name="measureThreshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Index of the created metrology object.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.AddMetrologyObjectRectangle2Measure(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.Double)">
            <summary>
              Add a rectangle to a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="row">Row (or Y) coordinate of the center of the rectangle.</param>
            <param name="column">Column (or X) coordinate of the center of the rectangle.</param>
            <param name="phi">Orientation of the main axis [rad].</param>
            <param name="length1">Length of the larger half edge of the rectangle.</param>
            <param name="length2">Length of the smaller half edge of the rectangle.</param>
            <param name="measureLength1">Half length of the measure regions perpendicular to the boundary. Default: 20.0</param>
            <param name="measureLength2">Half length of the measure regions tangetial to the boundary. Default: 5.0</param>
            <param name="measureSigma">Sigma of the Gaussian function for the smoothing. Default: 1.0</param>
            <param name="measureThreshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Index of the created metrology object.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.AddMetrologyObjectLineMeasure(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a line to a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="rowBegin">Row (or Y) coordinate of the start of the line.</param>
            <param name="columnBegin">Column (or X) coordinate of the start of the line.</param>
            <param name="rowEnd">Row (or Y) coordinate of the end of the line.</param>
            <param name="columnEnd">Column (or X) coordinate of the end of the line.</param>
            <param name="measureLength1">Half length of the measure regions perpendicular to the boundary. Default: 20.0</param>
            <param name="measureLength2">Half length of the measure regions tangetial to the boundary. Default: 5.0</param>
            <param name="measureSigma">Sigma of the Gaussian function for the smoothing. Default: 1.0</param>
            <param name="measureThreshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Index of the created metrology object.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.AddMetrologyObjectLineMeasure(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.Double)">
            <summary>
              Add a line to a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="rowBegin">Row (or Y) coordinate of the start of the line.</param>
            <param name="columnBegin">Column (or X) coordinate of the start of the line.</param>
            <param name="rowEnd">Row (or Y) coordinate of the end of the line.</param>
            <param name="columnEnd">Column (or X) coordinate of the end of the line.</param>
            <param name="measureLength1">Half length of the measure regions perpendicular to the boundary. Default: 20.0</param>
            <param name="measureLength2">Half length of the measure regions tangetial to the boundary. Default: 5.0</param>
            <param name="measureSigma">Sigma of the Gaussian function for the smoothing. Default: 1.0</param>
            <param name="measureThreshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Index of the created metrology object.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.AddMetrologyObjectEllipseMeasure(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add an ellipse or an elliptic arc to a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="row">Row (or Y) coordinate of the center of the ellipse.</param>
            <param name="column">Column (or X) coordinate of the center of the ellipse.</param>
            <param name="phi">Orientation of the main axis [rad].</param>
            <param name="radius1">Length of the larger half axis.</param>
            <param name="radius2">Length of the smaller half axis.</param>
            <param name="measureLength1">Half length of the measure regions perpendicular to the boundary. Default: 20.0</param>
            <param name="measureLength2">Half length of the measure regions tangetial to the boundary. Default: 5.0</param>
            <param name="measureSigma">Sigma of the Gaussian function for the smoothing. Default: 1.0</param>
            <param name="measureThreshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Index of the created metrology object.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.AddMetrologyObjectEllipseMeasure(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.Double)">
            <summary>
              Add an ellipse or an elliptic arc to a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="row">Row (or Y) coordinate of the center of the ellipse.</param>
            <param name="column">Column (or X) coordinate of the center of the ellipse.</param>
            <param name="phi">Orientation of the main axis [rad].</param>
            <param name="radius1">Length of the larger half axis.</param>
            <param name="radius2">Length of the smaller half axis.</param>
            <param name="measureLength1">Half length of the measure regions perpendicular to the boundary. Default: 20.0</param>
            <param name="measureLength2">Half length of the measure regions tangetial to the boundary. Default: 5.0</param>
            <param name="measureSigma">Sigma of the Gaussian function for the smoothing. Default: 1.0</param>
            <param name="measureThreshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Index of the created metrology object.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.AddMetrologyObjectCircleMeasure(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a circle or a circular arc to a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="row">Row coordinate (or Y) of the center of the circle or circular arc.</param>
            <param name="column">Column (or X) coordinate of the center of the circle or circular arc.</param>
            <param name="radius">Radius of the circle or circular arc.</param>
            <param name="measureLength1">Half length of the measure regions perpendicular to the boundary. Default: 20.0</param>
            <param name="measureLength2">Half length of the measure regions tangetial to the boundary. Default: 5.0</param>
            <param name="measureSigma">Sigma of the Gaussian function for the smoothing. Default: 1.0</param>
            <param name="measureThreshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Index of the created metrology object.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.AddMetrologyObjectCircleMeasure(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.Double)">
            <summary>
              Add a circle or a circular arc to a metrology model.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="row">Row coordinate (or Y) of the center of the circle or circular arc.</param>
            <param name="column">Column (or X) coordinate of the center of the circle or circular arc.</param>
            <param name="radius">Radius of the circle or circular arc.</param>
            <param name="measureLength1">Half length of the measure regions perpendicular to the boundary. Default: 20.0</param>
            <param name="measureLength2">Half length of the measure regions tangetial to the boundary. Default: 5.0</param>
            <param name="measureSigma">Sigma of the Gaussian function for the smoothing. Default: 1.0</param>
            <param name="measureThreshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Index of the created metrology object.</returns>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.ClearAllMetrologyModels">
            <summary>Delete all metrology models and free the allocated memory.</summary>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.ClearMetrologyObject(HalconDotNet.HTuple)">
            <summary>
              Delete metrology objects and free the allocated memory.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.ClearMetrologyObject(System.String)">
            <summary>
              Delete metrology objects and free the allocated memory.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="index">Index of the metrology objects. Default: "all"</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.SetMetrologyModelImageSize(System.Int32,System.Int32)">
            <summary>
              Set the size of the image of metrology objects.
              Instance represents: Handle of the metrology model.
            </summary>
            <param name="width">Width of the image to be processed. Default: 640</param>
            <param name="height">Height of the image to be processed. Default: 480</param>
        </member>
        <member name="M:HalconDotNet.HMetrologyModel.CreateMetrologyModel">
            <summary>
              Create the data structure that is needed to measure geometric shapes.
              Modified instance represents: Handle of the metrology model.
            </summary>
        </member>
        <member name="T:HalconDotNet.HCalibData">
            <summary>Represents an instance of a camera calibration model.</summary>
        </member>
        <member name="M:HalconDotNet.HCalibData.#ctor(System.String)">
            <summary>
              Restore a calibration data model from a file.
              Modified instance represents: Handle of a calibration data model.
            </summary>
            <param name="fileName">The path and file name of the model file.</param>
        </member>
        <member name="M:HalconDotNet.HCalibData.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
              Create a HALCON calibration data model.
              Modified instance represents: Handle of the created calibration data model.
            </summary>
            <param name="calibSetup">Type of the calibration setup. Default: "calibration_object"</param>
            <param name="numCameras">Number of cameras in the calibration setup. Default: 1</param>
            <param name="numCalibObjects">Number of calibration objects. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HCalibData.DeserializeCalibData(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized calibration data model.
              Modified instance represents: Handle of a calibration data model.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HCalibData.SerializeCalibData">
            <summary>
              Serialize a calibration data model.
              Instance represents: Handle of a calibration data model.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HCalibData.ReadCalibData(System.String)">
            <summary>
              Restore a calibration data model from a file.
              Modified instance represents: Handle of a calibration data model.
            </summary>
            <param name="fileName">The path and file name of the model file.</param>
        </member>
        <member name="M:HalconDotNet.HCalibData.WriteCalibData(System.String)">
            <summary>
              Store a calibration data model into a file.
              Instance represents: Handle of a calibration data model.
            </summary>
            <param name="fileName">The file name of the model to be saved.</param>
        </member>
        <member name="M:HalconDotNet.HCalibData.CalibrateHandEye">
            <summary>
              Perform a hand-eye calibration.
              Instance represents: Handle of a calibration data model.
            </summary>
            <returns>Average residual error of the optimization.</returns>
        </member>
        <member name="M:HalconDotNet.HCalibData.CalibrateCameras">
            <summary>
              Determine all camera parameters by a simultaneous minimization process.
              Instance represents: Handle of a calibration data model.
            </summary>
            <returns>Back projection root mean square error (RMSE) of the optimization.</returns>
        </member>
        <member name="M:HalconDotNet.HCalibData.RemoveCalibData(System.String,HalconDotNet.HTuple)">
            <summary>
              Remove a data set from a calibration data model.
              Instance represents: Handle of a calibration data model.
            </summary>
            <param name="itemType">Type of the calibration data item. Default: "tool"</param>
            <param name="itemIdx">Index of the affected item. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HCalibData.RemoveCalibData(System.String,System.Int32)">
            <summary>
              Remove a data set from a calibration data model.
              Instance represents: Handle of a calibration data model.
            </summary>
            <param name="itemType">Type of the calibration data item. Default: "tool"</param>
            <param name="itemIdx">Index of the affected item. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HCalibData.SetCalibData(System.String,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple)">
            <summary>
              Set data in a calibration data model.
              Instance represents: Handle of a calibration data model.
            </summary>
            <param name="itemType">Type of calibration data item. Default: "model"</param>
            <param name="itemIdx">Index of the affected item (depending on the selected ItemType). Default: "general"</param>
            <param name="dataName">Parameter(s) to set. Default: "reference_camera"</param>
            <param name="dataValue">New value(s). Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HCalibData.SetCalibData(System.String,System.Int32,System.String,System.String)">
            <summary>
              Set data in a calibration data model.
              Instance represents: Handle of a calibration data model.
            </summary>
            <param name="itemType">Type of calibration data item. Default: "model"</param>
            <param name="itemIdx">Index of the affected item (depending on the selected ItemType). Default: "general"</param>
            <param name="dataName">Parameter(s) to set. Default: "reference_camera"</param>
            <param name="dataValue">New value(s). Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HCalibData.FindCalibObject(HalconDotNet.HImage,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Find the HALCON calibration plate and set the extracted points and contours in a calibration data model.
              Instance represents: Handle of a calibration data model.
            </summary>
            <param name="image">Input image.</param>
            <param name="cameraIdx">Index of the observing camera. Default: 0</param>
            <param name="calibObjIdx">Index of the calibration object. Default: 0</param>
            <param name="calibObjPoseIdx">Index of the observed calibration object. Default: 0</param>
            <param name="genParamName">Names of the generic parameters to be set. Default: []</param>
            <param name="genParamValue">Values of the generic parameters to be set. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HCalibData.RemoveCalibDataObserv(System.Int32,System.Int32,System.Int32)">
            <summary>
              Remove observation data from a calibration data model.
              Instance represents: Handle of a calibration data model.
            </summary>
            <param name="cameraIdx">Index of the observing camera. Default: 0</param>
            <param name="calibObjIdx">Index of the observed calibration object. Default: 0</param>
            <param name="calibObjPoseIdx">Index of the observed calibration object pose. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HCalibData.GetCalibDataObservContours(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
              Get contour-based observation data from a calibration data model.
              Instance represents: Handle of a calibration data model.
            </summary>
            <param name="contourName">Name of contour objects to be returned. Default: "marks"</param>
            <param name="cameraIdx">Index of the observing camera. Default: 0</param>
            <param name="calibObjIdx">Index of the observed calibration object. Default: 0</param>
            <param name="calibObjPoseIdx">Index of the observed calibration object pose. Default: 0</param>
            <returns>Contour-based result(s).</returns>
        </member>
        <member name="M:HalconDotNet.HCalibData.GetCalibDataObservPose(System.Int32,System.Int32,System.Int32)">
            <summary>
              Get observed calibration object poses from a calibration data model.
              Instance represents: Handle of a calibration data model.
            </summary>
            <param name="cameraIdx">Index of the observing camera. Default: 0</param>
            <param name="calibObjIdx">Index of the observed calibration object. Default: 0</param>
            <param name="calibObjPoseIdx">Index of the observed calibration object pose. Default: 0</param>
            <returns>Stored observed calibration object pose relative to the observing camera.</returns>
        </member>
        <member name="M:HalconDotNet.HCalibData.SetCalibDataObservPose(System.Int32,System.Int32,System.Int32,HalconDotNet.HPose)">
            <summary>
              Set observed calibration object poses in a calibration data model.
              Instance represents: Handle of a calibration data model.
            </summary>
            <param name="cameraIdx">Index of the observing camera. Default: 0</param>
            <param name="calibObjIdx">Index of the calibration object. Default: 0</param>
            <param name="calibObjPoseIdx">Index of the observed calibration object. Default: 0</param>
            <param name="objInCameraPose">Pose of the observed calibration object relative to the observing camera.</param>
        </member>
        <member name="M:HalconDotNet.HCalibData.GetCalibDataObservPoints(System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Get point-based observation data from a calibration data model.
              Instance represents: Handle of a calibration data model.
            </summary>
            <param name="cameraIdx">Index of the observing camera. Default: 0</param>
            <param name="calibObjIdx">Index of the observed calibration object. Default: 0</param>
            <param name="calibObjPoseIdx">Index of the observed calibration object pose. Default: 0</param>
            <param name="row">Row coordinates of the detected points.</param>
            <param name="column">Column coordinates of the detected points.</param>
            <param name="index">Correspondence of the detected points to the points of the observed calibration object.</param>
            <param name="pose">Roughly estimated pose of the observed calibration object relative to the observing camera.</param>
        </member>
        <member name="M:HalconDotNet.HCalibData.SetCalibDataObservPoints(System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set point-based observation data in a calibration data model.
              Instance represents: Handle of a calibration data model.
            </summary>
            <param name="cameraIdx">Index of the observing camera. Default: 0</param>
            <param name="calibObjIdx">Index of the calibration object. Default: 0</param>
            <param name="calibObjPoseIdx">Index of the observed calibration object. Default: 0</param>
            <param name="row">Row coordinates of the extracted points.</param>
            <param name="column">Column coordinates of the extracted points.</param>
            <param name="index">Correspondence of the extracted points to the calibration marks of the observed calibration object. Default: "all"</param>
            <param name="pose">Roughly estimated pose of the observed calibration object relative to the observing camera.</param>
        </member>
        <member name="M:HalconDotNet.HCalibData.QueryCalibDataObservIndices(System.String,System.Int32,HalconDotNet.HTuple@)">
            <summary>
              Query information about the relations between cameras, calibration objects, and calibration object poses.
              Instance represents: Handle of a calibration data model.
            </summary>
            <param name="itemType">Kind of referred object. Default: "camera"</param>
            <param name="itemIdx">Camera index or calibration object index (depending on the selected ItemType). Default: 0</param>
            <param name="index2">Calibration object numbers.</param>
            <returns>List of calibration object indices or list of  camera indices (depending on ItemType).</returns>
        </member>
        <member name="M:HalconDotNet.HCalibData.GetCalibData(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Query data stored or computed in a calibration data model.
              Instance represents: Handle of a calibration data model.
            </summary>
            <param name="itemType">Type of calibration data item. Default: "camera"</param>
            <param name="itemIdx">Index of the affected item (depending on the selected ItemType). Default: 0</param>
            <param name="dataName">The name of the inspected data. Default: "params"</param>
            <returns>Requested data.</returns>
        </member>
        <member name="M:HalconDotNet.HCalibData.GetCalibData(System.String,System.Int32,System.String)">
            <summary>
              Query data stored or computed in a calibration data model.
              Instance represents: Handle of a calibration data model.
            </summary>
            <param name="itemType">Type of calibration data item. Default: "camera"</param>
            <param name="itemIdx">Index of the affected item (depending on the selected ItemType). Default: 0</param>
            <param name="dataName">The name of the inspected data. Default: "params"</param>
            <returns>Requested data.</returns>
        </member>
        <member name="M:HalconDotNet.HCalibData.SetCalibDataCalibObject(System.Int32,HalconDotNet.HTuple)">
            <summary>
              Define a calibration object in a calibration model.
              Instance represents: Handle of a calibration data model.
            </summary>
            <param name="calibObjIdx">Calibration object index. Default: 0</param>
            <param name="calibObjDescr">3D point coordinates or a description file name.</param>
        </member>
        <member name="M:HalconDotNet.HCalibData.SetCalibDataCalibObject(System.Int32,System.Double)">
            <summary>
              Define a calibration object in a calibration model.
              Instance represents: Handle of a calibration data model.
            </summary>
            <param name="calibObjIdx">Calibration object index. Default: 0</param>
            <param name="calibObjDescr">3D point coordinates or a description file name.</param>
        </member>
        <member name="M:HalconDotNet.HCalibData.SetCalibDataCamParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set type and initial parameters of a camera in a calibration data model.
              Instance represents: Handle of a calibration data model.
            </summary>
            <param name="cameraIdx">Camera index. Default: 0</param>
            <param name="cameraType">Type of the camera. Default: "area_scan_division"</param>
            <param name="cameraParam">Initial camera internal parameters.</param>
        </member>
        <member name="M:HalconDotNet.HCalibData.CreateCalibData(System.String,System.Int32,System.Int32)">
            <summary>
              Create a HALCON calibration data model.
              Modified instance represents: Handle of the created calibration data model.
            </summary>
            <param name="calibSetup">Type of the calibration setup. Default: "calibration_object"</param>
            <param name="numCameras">Number of cameras in the calibration setup. Default: 1</param>
            <param name="numCalibObjects">Number of calibration objects. Default: 1</param>
        </member>
        <member name="T:HalconDotNet.HBarCode">
            <summary>Represents an instance of a bar code reader.</summary>
        </member>
        <member name="M:HalconDotNet.HBarCode.#ctor(System.String)">
            <summary>
              Read a bar code model from a file and create a new model.
              Modified instance represents: Handle of the bar code model.
            </summary>
            <param name="fileName">Name of the bar code model file. Default: "bar_code_model.bcm"</param>
        </member>
        <member name="M:HalconDotNet.HBarCode.#ctor(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a model of a bar code reader.
              Modified instance represents: Handle for using and accessing the bar code model.
            </summary>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the bar code model. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the bar code model. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HBarCode.#ctor(System.String,System.Double)">
            <summary>
              Create a model of a bar code reader.
              Modified instance represents: Handle for using and accessing the bar code model.
            </summary>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the bar code model. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the bar code model. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HBarCode.DeserializeBarCodeModel(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a bar code model.
              Modified instance represents: Handle of the bar code model.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HBarCode.SerializeBarCodeModel">
            <summary>
              Serialize a bar code model.
              Instance represents: Handle of the bar code model.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HBarCode.ReadBarCodeModel(System.String)">
            <summary>
              Read a bar code model from a file and create a new model.
              Modified instance represents: Handle of the bar code model.
            </summary>
            <param name="fileName">Name of the bar code model file. Default: "bar_code_model.bcm"</param>
        </member>
        <member name="M:HalconDotNet.HBarCode.WriteBarCodeModel(System.String)">
            <summary>
              Write a bar code model to a file.
              Instance represents: Handle of the bar code model.
            </summary>
            <param name="fileName">Name of the bar code model file. Default: "bar_code_model.bcm"</param>
        </member>
        <member name="M:HalconDotNet.HBarCode.GetBarCodeObject(HalconDotNet.HTuple,System.String)">
            <summary>
              Access iconic objects that were created during the search or decoding of bar code symbols.
              Instance represents: Handle of the bar code model.
            </summary>
            <param name="candidateHandle">Indicating the bar code results respectively candidates for which the data is required. Default: "all"</param>
            <param name="objectName">Name of the iconic object to return. Default: "candidate_regions"</param>
            <returns>Objects that are created as intermediate results during the detection or evaluation of bar codes.</returns>
        </member>
        <member name="M:HalconDotNet.HBarCode.GetBarCodeObject(System.String,System.String)">
            <summary>
              Access iconic objects that were created during the search or decoding of bar code symbols.
              Instance represents: Handle of the bar code model.
            </summary>
            <param name="candidateHandle">Indicating the bar code results respectively candidates for which the data is required. Default: "all"</param>
            <param name="objectName">Name of the iconic object to return. Default: "candidate_regions"</param>
            <returns>Objects that are created as intermediate results during the detection or evaluation of bar codes.</returns>
        </member>
        <member name="M:HalconDotNet.HBarCode.GetBarCodeResult(HalconDotNet.HTuple,System.String)">
            <summary>
              Get the alphanumerical results that were accumulated during the decoding of bar code symbols.
              Instance represents: Handle of the bar code model.
            </summary>
            <param name="candidateHandle">Indicating the bar code results respectively candidates for which the data is required. Default: "all"</param>
            <param name="resultName">Names of the resulting data to return. Default: "decoded_types"</param>
            <returns>List with the results.</returns>
        </member>
        <member name="M:HalconDotNet.HBarCode.GetBarCodeResult(System.String,System.String)">
            <summary>
              Get the alphanumerical results that were accumulated during the decoding of bar code symbols.
              Instance represents: Handle of the bar code model.
            </summary>
            <param name="candidateHandle">Indicating the bar code results respectively candidates for which the data is required. Default: "all"</param>
            <param name="resultName">Names of the resulting data to return. Default: "decoded_types"</param>
            <returns>List with the results.</returns>
        </member>
        <member name="M:HalconDotNet.HBarCode.DecodeBarCodeRectangle2(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Decode bar code symbols within a rectangle.
              Instance represents: Handle of the bar code model.
            </summary>
            <param name="image">Input image.</param>
            <param name="codeType">Type of the searched bar code. Default: "EAN-13"</param>
            <param name="row">Row index of the center. Default: 50.0</param>
            <param name="column">Column index of the center. Default: 100.0</param>
            <param name="phi">Orientation of rectangle in radians. Default: 0.0</param>
            <param name="length1">Half of the length of the rectangle along the reading direction of the bar code. Default: 200.0</param>
            <param name="length2">Half of the length of the rectangle perpendicular to the reading direction of the bar code. Default: 100.0</param>
            <returns>Data strings of all successfully decoded bar codes.</returns>
        </member>
        <member name="M:HalconDotNet.HBarCode.DecodeBarCodeRectangle2(HalconDotNet.HImage,System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Decode bar code symbols within a rectangle.
              Instance represents: Handle of the bar code model.
            </summary>
            <param name="image">Input image.</param>
            <param name="codeType">Type of the searched bar code. Default: "EAN-13"</param>
            <param name="row">Row index of the center. Default: 50.0</param>
            <param name="column">Column index of the center. Default: 100.0</param>
            <param name="phi">Orientation of rectangle in radians. Default: 0.0</param>
            <param name="length1">Half of the length of the rectangle along the reading direction of the bar code. Default: 200.0</param>
            <param name="length2">Half of the length of the rectangle perpendicular to the reading direction of the bar code. Default: 100.0</param>
            <returns>Data strings of all successfully decoded bar codes.</returns>
        </member>
        <member name="M:HalconDotNet.HBarCode.FindBarCode(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Detect and read bar code symbols in an image.
              Instance represents: Handle of the bar code model.
            </summary>
            <param name="image">Input image.</param>
            <param name="codeType">Type of the searched bar code. Default: "auto"</param>
            <param name="decodedDataStrings">Data strings of all successfully decoded bar codes.</param>
            <returns>Regions of the successfully decoded bar code symbols.</returns>
        </member>
        <member name="M:HalconDotNet.HBarCode.FindBarCode(HalconDotNet.HImage,System.String,System.String@)">
            <summary>
              Detect and read bar code symbols in an image.
              Instance represents: Handle of the bar code model.
            </summary>
            <param name="image">Input image.</param>
            <param name="codeType">Type of the searched bar code. Default: "auto"</param>
            <param name="decodedDataStrings">Data strings of all successfully decoded bar codes.</param>
            <returns>Regions of the successfully decoded bar code symbols.</returns>
        </member>
        <member name="M:HalconDotNet.HBarCode.QueryBarCodeParams(HalconDotNet.HTuple)">
            <summary>
              Get the names of the parameters that can be used in set_bar_code* and get_bar_code* operators for a given bar code model
              Instance represents: Handle of the bar code model.
            </summary>
            <param name="properties">Properties of the parameters. Default: "trained_general"</param>
            <returns>Names of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HBarCode.QueryBarCodeParams(System.String)">
            <summary>
              Get the names of the parameters that can be used in set_bar_code* and get_bar_code* operators for a given bar code model
              Instance represents: Handle of the bar code model.
            </summary>
            <param name="properties">Properties of the parameters. Default: "trained_general"</param>
            <returns>Names of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HBarCode.GetBarCodeParamSpecific(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Get parameters that are used by the bar code reader when processing a specific bar code type. 
              Instance represents: Handle of the bar code model.
            </summary>
            <param name="codeTypes">Names of the bar code types for which parameters should be queried. Default: "EAN-13"</param>
            <param name="genParamNames">Names of the generic parameters that are to be queried for the bar code model. Default: "check_char"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HBarCode.GetBarCodeParamSpecific(System.String,System.String)">
            <summary>
              Get parameters that are used by the bar code reader when processing a specific bar code type. 
              Instance represents: Handle of the bar code model.
            </summary>
            <param name="codeTypes">Names of the bar code types for which parameters should be queried. Default: "EAN-13"</param>
            <param name="genParamNames">Names of the generic parameters that are to be queried for the bar code model. Default: "check_char"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HBarCode.GetBarCodeParam(HalconDotNet.HTuple)">
            <summary>
              Get one or several parameters that describe the bar code model.
              Instance represents: Handle of the bar code model.
            </summary>
            <param name="genParamNames">Names of the generic parameters that are to be queried for the bar code model. Default: "element_size_min"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HBarCode.GetBarCodeParam(System.String)">
            <summary>
              Get one or several parameters that describe the bar code model.
              Instance represents: Handle of the bar code model.
            </summary>
            <param name="genParamNames">Names of the generic parameters that are to be queried for the bar code model. Default: "element_size_min"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HBarCode.SetBarCodeParamSpecific(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set selected parameters of the bar code model for selected bar code types
              Instance represents: Handle of the bar code model.
            </summary>
            <param name="codeTypes">Names of the bar code types for which parameters should be set. Default: "EAN-13"</param>
            <param name="genParamNames">Names of the generic parameters that shall be adjusted for finding and decoding bar codes. Default: "check_char"</param>
            <param name="genParamValues">Values of the generic parameters that are adjusted for finding and decoding bar codes. Default: "absent"</param>
        </member>
        <member name="M:HalconDotNet.HBarCode.SetBarCodeParamSpecific(System.String,System.String,System.Double)">
            <summary>
              Set selected parameters of the bar code model for selected bar code types
              Instance represents: Handle of the bar code model.
            </summary>
            <param name="codeTypes">Names of the bar code types for which parameters should be set. Default: "EAN-13"</param>
            <param name="genParamNames">Names of the generic parameters that shall be adjusted for finding and decoding bar codes. Default: "check_char"</param>
            <param name="genParamValues">Values of the generic parameters that are adjusted for finding and decoding bar codes. Default: "absent"</param>
        </member>
        <member name="M:HalconDotNet.HBarCode.SetBarCodeParam(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set selected parameters of the bar code model.
              Instance represents: Handle of the bar code model.
            </summary>
            <param name="genParamNames">Names of the generic parameters that shall be adjusted for finding and decoding bar codes. Default: "element_size_min"</param>
            <param name="genParamValues">Values of the generic parameters that are adjusted for finding and decoding bar codes. Default: 8</param>
        </member>
        <member name="M:HalconDotNet.HBarCode.SetBarCodeParam(System.String,System.Double)">
            <summary>
              Set selected parameters of the bar code model.
              Instance represents: Handle of the bar code model.
            </summary>
            <param name="genParamNames">Names of the generic parameters that shall be adjusted for finding and decoding bar codes. Default: "element_size_min"</param>
            <param name="genParamValues">Values of the generic parameters that are adjusted for finding and decoding bar codes. Default: 8</param>
        </member>
        <member name="M:HalconDotNet.HBarCode.CreateBarCodeModel(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a model of a bar code reader.
              Modified instance represents: Handle for using and accessing the bar code model.
            </summary>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the bar code model. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the bar code model. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HBarCode.CreateBarCodeModel(System.String,System.Double)">
            <summary>
              Create a model of a bar code reader.
              Modified instance represents: Handle for using and accessing the bar code model.
            </summary>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the bar code model. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the bar code model. Default: []</param>
        </member>
        <member name="T:HalconDotNet.HOCRKnn">
            <summary>Represents an instance of a k-NearestNeighbor OCR classifier.</summary>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.#ctor(System.String)">
            <summary>
              Read an OCR classifier from a file.
              Modified instance represents: Handle of the OCR classifier.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.#ctor(System.Int32,System.Int32,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create an OCR classifier using a k-Nearest Neighbor (k-NN) classifier.
              Modified instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 8</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 10</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters. Default: "constant"</param>
            <param name="features">Features to be used for classification. Default: "default"</param>
            <param name="characters">All characters of the character set to be read. Default: ["0","1","2","3","4","5","6","7","8","9"]</param>
            <param name="genParamNames">This parameter is not yet supported. Default: []</param>
            <param name="genParamValues">This parameter is not yet supported. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.#ctor(System.Int32,System.Int32,System.String,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create an OCR classifier using a k-Nearest Neighbor (k-NN) classifier.
              Modified instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 8</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 10</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters. Default: "constant"</param>
            <param name="features">Features to be used for classification. Default: "default"</param>
            <param name="characters">All characters of the character set to be read. Default: ["0","1","2","3","4","5","6","7","8","9"]</param>
            <param name="genParamNames">This parameter is not yet supported. Default: []</param>
            <param name="genParamValues">This parameter is not yet supported. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.DoOcrWordKnn(HalconDotNet.HRegion,HalconDotNet.HImage,System.String,System.Int32,System.Int32,HalconDotNet.HTuple@,System.String@,System.Double@)">
            <summary>
              Classify a related group of characters with an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="character">Characters to be recognized.</param>
            <param name="image">Gray values of the characters.</param>
            <param name="expression">Expression describing the allowed word structure.</param>
            <param name="numAlternatives">Number of classes per character considered for the internal word correction. Default: 3</param>
            <param name="numCorrections">Maximum number of corrected characters. Default: 2</param>
            <param name="confidence">Confidence of the class of the characters.</param>
            <param name="word">Word text after classification and correction.</param>
            <param name="score">Measure of similarity between corrected word and uncorrected classification results.</param>
            <returns>Result of classifying the characters with the k-NN.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.DoOcrWordKnn(HalconDotNet.HRegion,HalconDotNet.HImage,System.String,System.Int32,System.Int32,System.Double@,System.String@,System.Double@)">
            <summary>
              Classify a related group of characters with an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="character">Characters to be recognized.</param>
            <param name="image">Gray values of the characters.</param>
            <param name="expression">Expression describing the allowed word structure.</param>
            <param name="numAlternatives">Number of classes per character considered for the internal word correction. Default: 3</param>
            <param name="numCorrections">Maximum number of corrected characters. Default: 2</param>
            <param name="confidence">Confidence of the class of the characters.</param>
            <param name="word">Word text after classification and correction.</param>
            <param name="score">Measure of similarity between corrected word and uncorrected classification results.</param>
            <returns>Result of classifying the characters with the k-NN.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.DeserializeOcrClassKnn(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized k-NN-based OCR classifier.
              Modified instance represents: Handle of the OCR classifier.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.SerializeOcrClassKnn">
            <summary>
              Serialize a k-NN-based OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.ReadOcrClassKnn(System.String)">
            <summary>
              Read an OCR classifier from a file.
              Modified instance represents: Handle of the OCR classifier.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.WriteOcrClassKnn(System.String)">
            <summary>
              Write a k-NN classifier for an OCR task to a file.
              Instance represents: Handle of the k-NN classifier for an OCR task.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.ClearAllOcrClassKnn">
            <summary>Clear all OCR classifiers.</summary>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.CreateOcrClassKnn(System.Int32,System.Int32,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create an OCR classifier using a k-Nearest Neighbor (k-NN) classifier.
              Modified instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 8</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 10</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters. Default: "constant"</param>
            <param name="features">Features to be used for classification. Default: "default"</param>
            <param name="characters">All characters of the character set to be read. Default: ["0","1","2","3","4","5","6","7","8","9"]</param>
            <param name="genParamNames">This parameter is not yet supported. Default: []</param>
            <param name="genParamValues">This parameter is not yet supported. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.CreateOcrClassKnn(System.Int32,System.Int32,System.String,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create an OCR classifier using a k-Nearest Neighbor (k-NN) classifier.
              Modified instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 8</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 10</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters. Default: "constant"</param>
            <param name="features">Features to be used for classification. Default: "default"</param>
            <param name="characters">All characters of the character set to be read. Default: ["0","1","2","3","4","5","6","7","8","9"]</param>
            <param name="genParamNames">This parameter is not yet supported. Default: []</param>
            <param name="genParamValues">This parameter is not yet supported. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.TrainfOcrClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Trains an k-NN classifier for an OCR task.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the k-NN classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the k-NN classifier creation. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.TrainfOcrClassKnn(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Trains an k-NN classifier for an OCR task.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the k-NN classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the k-NN classifier creation. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.GetFeaturesOcrClassKnn(HalconDotNet.HImage,System.String)">
            <summary>
              Compute the features of a character.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="character">Input character.</param>
            <param name="transform">Should the feature vector be transformed with the preprocessing? Default: "true"</param>
            <returns>Feature vector of the character.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.GetParamsOcrClassKnn(System.Int32@,System.Int32@,System.String@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,System.String@,System.Int32@)">
            <summary>
              Return the parameters of an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed.</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed.</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters.</param>
            <param name="features">Features to be used for classification.</param>
            <param name="characters">Characters of the character set to be read.</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors.</param>
            <param name="numTrees">Number of different trees used during the classifcation.</param>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.GetParamsOcrClassKnn(System.Int32@,System.Int32@,System.String@,System.String@,HalconDotNet.HTuple@,System.String@,System.Int32@)">
            <summary>
              Return the parameters of an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed.</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed.</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters.</param>
            <param name="features">Features to be used for classification.</param>
            <param name="characters">Characters of the character set to be read.</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors.</param>
            <param name="numTrees">Number of different trees used during the classifcation.</param>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.DoOcrMultiClassKnn(HalconDotNet.HRegion,HalconDotNet.HImage,HalconDotNet.HTuple@)">
            <summary>
              Classify multiple characters with an k-NN classifier.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="character">Characters to be recognized.</param>
            <param name="image">Gray values of the characters.</param>
            <param name="confidence">Confidence of the class of the characters.</param>
            <returns>Result of classifying the characters with the k-NN.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.DoOcrMultiClassKnn(HalconDotNet.HRegion,HalconDotNet.HImage,System.Double@)">
            <summary>
              Classify multiple characters with an k-NN classifier.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="character">Characters to be recognized.</param>
            <param name="image">Gray values of the characters.</param>
            <param name="confidence">Confidence of the class of the characters.</param>
            <returns>Result of classifying the characters with the k-NN.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.DoOcrSingleClassKnn(HalconDotNet.HRegion,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Classify a single character with an OCR classifier.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="character">Character to be recognized.</param>
            <param name="image">Gray values of the character.</param>
            <param name="numClasses">Number of maximal classes to determine. Default: 1</param>
            <param name="numNeighbors">Number of neighbors to consider. Default: 1</param>
            <param name="confidence">Confidence(s) of the class(es) of the character.</param>
            <returns>Results of classifying the character with the k-NN.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.DoOcrSingleClassKnn(HalconDotNet.HRegion,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double@)">
            <summary>
              Classify a single character with an OCR classifier.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="character">Character to be recognized.</param>
            <param name="image">Gray values of the character.</param>
            <param name="numClasses">Number of maximal classes to determine. Default: 1</param>
            <param name="numNeighbors">Number of neighbors to consider. Default: 1</param>
            <param name="confidence">Confidence(s) of the class(es) of the character.</param>
            <returns>Results of classifying the character with the k-NN.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.SelectFeatureSetTrainfKnn(HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Select an optimal combination of features to classify OCR data.
              Modified instance represents: Trained OCR-k-NN classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="featureList">List of features that should be considered for selection. Default: ["zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"]</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="width">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 15</param>
            <param name="height">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 16</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="score">Achieved score using tow-fold cross-validation.</param>
            <returns>Selected feature set, contains only entries from  FeatureList.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRKnn.SelectFeatureSetTrainfKnn(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Select an optimal combination of features to classify OCR data.
              Modified instance represents: Trained OCR-k-NN classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="featureList">List of features that should be considered for selection. Default: ["zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"]</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="width">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 15</param>
            <param name="height">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 16</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="score">Achieved score using tow-fold cross-validation.</param>
            <returns>Selected feature set, contains only entries from  FeatureList.</returns>
        </member>
        <member name="T:HalconDotNet.HClassSvm">
            <summary>Represents an instance of a support vector machine.</summary>
        </member>
        <member name="M:HalconDotNet.HClassSvm.#ctor(System.String)">
            <summary>
              Read a support vector machine from a file.
              Modified instance represents: SVM handle.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HClassSvm.#ctor(System.Int32,System.String,System.Double,System.Double,System.Int32,System.String,System.String,System.Int32)">
            <summary>
              Create a support vector machine for pattern classification.
              Modified instance represents: SVM handle.
            </summary>
            <param name="numFeatures">Number of input variables (features) of the SVM. Default: 10</param>
            <param name="kernelType">The kernel type. Default: "rbf"</param>
            <param name="kernelParam">Additional parameter for the kernel function. In case of RBF kernel the value for gamma@f$  Default: 0.02</param>
            <param name="nu">Regularisation constant of the SVM. Default: 0.05</param>
            <param name="numClasses">Number of classes. Default: 5</param>
            <param name="mode">The mode of the SVM. Default: "one-versus-one"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "normalization"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HClassSvm.ClassifyImageClassSvm(HalconDotNet.HImage)">
            <summary>
              Classify an image with a support vector machine.
              Instance represents: SVM handle.
            </summary>
            <param name="image">Input image.</param>
            <returns>Segmented classes.</returns>
        </member>
        <member name="M:HalconDotNet.HClassSvm.AddSamplesImageClassSvm(HalconDotNet.HImage,HalconDotNet.HRegion)">
            <summary>
              Add training samples from an image to the training data of a support vector machine.
              Instance represents: SVM handle.
            </summary>
            <param name="image">Training image.</param>
            <param name="classRegions">Regions of the classes to be trained.</param>
        </member>
        <member name="M:HalconDotNet.HClassSvm.GetClassTrainDataSvm">
            <summary>
              Get the training data of a support vector machine (SVM).
              Instance represents: Handle of a SVM that contains training data.
            </summary>
            <returns>Handle of the training data of the classifier.</returns>
        </member>
        <member name="M:HalconDotNet.HClassSvm.AddClassTrainDataSvm(HalconDotNet.HClassTrainData)">
            <summary>
              Add training data to a support vector machine (SVM).
              Instance represents: Handle of a SVM which receives the training data.
            </summary>
            <param name="classTrainDataHandle">Training data for a classifier.</param>
        </member>
        <member name="M:HalconDotNet.HClassSvm.SelectFeatureSetSvm(HalconDotNet.HClassTrainData,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal combination of features to classify the provided data.
              Modified instance represents: A trained SVM classifier using only the selected  features.
            </summary>
            <param name="classTrainDataHandle">Handle of the training data.</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
            <returns>The selected feature set, contains  indices.</returns>
        </member>
        <member name="M:HalconDotNet.HClassSvm.SelectFeatureSetSvm(HalconDotNet.HClassTrainData,System.String,System.String,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal combination of features to classify the provided data.
              Modified instance represents: A trained SVM classifier using only the selected  features.
            </summary>
            <param name="classTrainDataHandle">Handle of the training data.</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
            <returns>The selected feature set, contains  indices.</returns>
        </member>
        <member name="M:HalconDotNet.HClassSvm.CreateClassLutSvm(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a look-up table using a Support-Vector-Machine to classify byte images.
              Instance represents: SVM handle.
            </summary>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <returns>Handle of the LUT classifier.</returns>
        </member>
        <member name="M:HalconDotNet.HClassSvm.ClearSamplesClassSvm(HalconDotNet.HClassSvm[])">
            <summary>Clear the training data of a support vector machine.</summary>
            <param name="SVMHandle">SVM handle.</param>
        </member>
        <member name="M:HalconDotNet.HClassSvm.ClearSamplesClassSvm">
            <summary>
              Clear the training data of a support vector machine.
              Instance represents: SVM handle.
            </summary>
        </member>
        <member name="M:HalconDotNet.HClassSvm.DeserializeClassSvm(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized support vector machine (SVM).
              Modified instance represents: SVM handle.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HClassSvm.SerializeClassSvm">
            <summary>
              Serialize a support vector machine (SVM).
              Instance represents: SVM handle.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HClassSvm.ReadClassSvm(System.String)">
            <summary>
              Read a support vector machine from a file.
              Modified instance represents: SVM handle.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HClassSvm.WriteClassSvm(System.String)">
            <summary>
              Write a support vector machine to a file.
              Instance represents: SVM handle.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HClassSvm.ReadSamplesClassSvm(System.String)">
            <summary>
              Read the training data of a support vector machine from a file.
              Instance represents: SVM handle.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HClassSvm.WriteSamplesClassSvm(System.String)">
            <summary>
              Write the training data of a support vector machine to a file.
              Instance represents: SVM handle.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HClassSvm.EvaluateClassSvm(HalconDotNet.HTuple)">
            <summary>
              Evaluate a feature vector by a support vector machine.
              Instance represents: SVM handle.
            </summary>
            <param name="features">Feature vector.</param>
            <returns>Result of evaluating the feature vector with the SVM.</returns>
        </member>
        <member name="M:HalconDotNet.HClassSvm.ClassifyClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Classify a feature vector by a support vector machine.
              Instance represents: SVM handle.
            </summary>
            <param name="features">Feature vector.</param>
            <param name="num">Number of best classes to determine. Default: 1</param>
            <returns>Result of classifying the feature vector with the SVM.</returns>
        </member>
        <member name="M:HalconDotNet.HClassSvm.ReduceClassSvm(System.String,System.Int32,System.Double)">
            <summary>
              Approximate a trained support vector machine by a reduced support vector machine for faster classification.
              Instance represents: Original SVM handle.
            </summary>
            <param name="method">Type of postprocessing to reduce number of SV. Default: "bottom_up"</param>
            <param name="minRemainingSV">Minimum number of remaining SVs. Default: 2</param>
            <param name="maxError">Maximum allowed error of reduction. Default: 0.001</param>
            <returns>SVMHandle of reduced SVM.</returns>
        </member>
        <member name="M:HalconDotNet.HClassSvm.TrainClassSvm(System.Double,HalconDotNet.HTuple)">
            <summary>
              Train a support vector machine.
              Instance represents: SVM handle.
            </summary>
            <param name="epsilon">Stop parameter for training. Default: 0.001</param>
            <param name="trainMode">Mode of training. For normal operation: 'default'. If SVs already included in the SVM should be used for training: 'add_sv_to_train_set'. For alpha seeding: the respective SVM handle. Default: "default"</param>
        </member>
        <member name="M:HalconDotNet.HClassSvm.TrainClassSvm(System.Double,System.String)">
            <summary>
              Train a support vector machine.
              Instance represents: SVM handle.
            </summary>
            <param name="epsilon">Stop parameter for training. Default: 0.001</param>
            <param name="trainMode">Mode of training. For normal operation: 'default'. If SVs already included in the SVM should be used for training: 'add_sv_to_train_set'. For alpha seeding: the respective SVM handle. Default: "default"</param>
        </member>
        <member name="M:HalconDotNet.HClassSvm.GetPrepInfoClassSvm(System.String,HalconDotNet.HTuple@)">
            <summary>
              Compute the information content of the preprocessed feature vectors of a support vector machine
              Instance represents: SVM handle.
            </summary>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "principal_components"</param>
            <param name="cumInformationCont">Cumulative information content of the transformed feature vectors.</param>
            <returns>Relative information content of the transformed feature vectors.</returns>
        </member>
        <member name="M:HalconDotNet.HClassSvm.GetSupportVectorNumClassSvm(HalconDotNet.HTuple@)">
            <summary>
              Return the number of support vectors of a support vector machine.
              Instance represents: SVM handle.
            </summary>
            <param name="numSVPerSVM">Number of SV of each sub-SVM.</param>
            <returns>Total number of support vectors.</returns>
        </member>
        <member name="M:HalconDotNet.HClassSvm.GetSupportVectorClassSvm(HalconDotNet.HTuple)">
            <summary>
              Return the index of a support vector from a trained support vector machine.
              Instance represents: SVM handle.
            </summary>
            <param name="indexSupportVector">Number of stored support vectors.</param>
            <returns>Index of the support vector in the training set.</returns>
        </member>
        <member name="M:HalconDotNet.HClassSvm.GetSampleNumClassSvm">
            <summary>
              Return the number of training samples stored in the training data of a support vector machine.
              Instance represents: SVM handle.
            </summary>
            <returns>Number of stored training samples.</returns>
        </member>
        <member name="M:HalconDotNet.HClassSvm.GetSampleClassSvm(System.Int32,System.Int32@)">
            <summary>
              Return a training sample from the training data of a support vector machine.
              Instance represents: SVM handle.
            </summary>
            <param name="indexSample">Number of the stored training sample.</param>
            <param name="target">Target vector of the training sample.</param>
            <returns>Feature vector of the training sample.</returns>
        </member>
        <member name="M:HalconDotNet.HClassSvm.AddSampleClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a training sample to the training data of a support vector machine.
              Instance represents: SVM handle.
            </summary>
            <param name="features">Feature vector of the training sample to be stored.</param>
            <param name="classVal">Class of the training sample to be stored.</param>
        </member>
        <member name="M:HalconDotNet.HClassSvm.AddSampleClassSvm(HalconDotNet.HTuple,System.Int32)">
            <summary>
              Add a training sample to the training data of a support vector machine.
              Instance represents: SVM handle.
            </summary>
            <param name="features">Feature vector of the training sample to be stored.</param>
            <param name="classVal">Class of the training sample to be stored.</param>
        </member>
        <member name="M:HalconDotNet.HClassSvm.GetParamsClassSvm(System.String@,System.Double@,System.Double@,System.Int32@,System.String@,System.String@,System.Int32@)">
            <summary>
              Return the parameters of a support vector machine.
              Instance represents: SVM handle.
            </summary>
            <param name="kernelType">The kernel type.</param>
            <param name="kernelParam">Additional parameter for the kernel.</param>
            <param name="nu">Regularization constant of the SVM.</param>
            <param name="numClasses">Number of classes of the test data.</param>
            <param name="mode">The mode of the SVM.</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors.</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization').</param>
            <returns>Number of input variables (features) of the SVM.</returns>
        </member>
        <member name="M:HalconDotNet.HClassSvm.CreateClassSvm(System.Int32,System.String,System.Double,System.Double,System.Int32,System.String,System.String,System.Int32)">
            <summary>
              Create a support vector machine for pattern classification.
              Modified instance represents: SVM handle.
            </summary>
            <param name="numFeatures">Number of input variables (features) of the SVM. Default: 10</param>
            <param name="kernelType">The kernel type. Default: "rbf"</param>
            <param name="kernelParam">Additional parameter for the kernel function. In case of RBF kernel the value for gamma@f$  Default: 0.02</param>
            <param name="nu">Regularisation constant of the SVM. Default: 0.05</param>
            <param name="numClasses">Number of classes. Default: 5</param>
            <param name="mode">The mode of the SVM. Default: "one-versus-one"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "normalization"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
        </member>
        <member name="T:HalconDotNet.HTextModel">
            <summary>Represents an instance of a text model for text segmentations.</summary>
        </member>
        <member name="M:HalconDotNet.HTextModel.#ctor(System.String,HalconDotNet.HTuple)">
            <summary>
              Create a text model.
              Modified instance represents: New text model.
            </summary>
            <param name="mode">The Mode of the text model. Default: "auto"</param>
            <param name="OCRClassifierMLP">OCR Classifier. Default: "Industrial_Rej.omc"</param>
        </member>
        <member name="M:HalconDotNet.HTextModel.#ctor(System.String,System.String)">
            <summary>
              Create a text model.
              Modified instance represents: New text model.
            </summary>
            <param name="mode">The Mode of the text model. Default: "auto"</param>
            <param name="OCRClassifierMLP">OCR Classifier. Default: "Industrial_Rej.omc"</param>
        </member>
        <member name="M:HalconDotNet.HTextModel.#ctor">
            <summary>
              Create a text model.
              Modified instance represents: New text model.
            </summary>
        </member>
        <member name="M:HalconDotNet.HTextModel.FindText(HalconDotNet.HImage)">
            <summary>
              Find text in an image.
              Instance represents: Text model specifying the text to be segmented.
            </summary>
            <param name="image">Input image.</param>
            <returns>Result of the segmentation.</returns>
        </member>
        <member name="M:HalconDotNet.HTextModel.GetTextModelParam(System.String)">
            <summary>
              Query parameters of a text model.
              Instance represents: Text model.
            </summary>
            <param name="genParamName">Parameters to be queried. Default: "min_contrast"</param>
            <returns>Values of Parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HTextModel.SetTextModelParam(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set parameters of a text model.
              Instance represents: Text model.
            </summary>
            <param name="genParamName">Names of the parameters to be set. Default: "min_contrast"</param>
            <param name="genParamValue">Values of the parameters to be set. Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HTextModel.SetTextModelParam(System.String,System.Int32)">
            <summary>
              Set parameters of a text model.
              Instance represents: Text model.
            </summary>
            <param name="genParamName">Names of the parameters to be set. Default: "min_contrast"</param>
            <param name="genParamValue">Values of the parameters to be set. Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HTextModel.CreateTextModelReader(System.String,HalconDotNet.HTuple)">
            <summary>
              Create a text model.
              Modified instance represents: New text model.
            </summary>
            <param name="mode">The Mode of the text model. Default: "auto"</param>
            <param name="OCRClassifierMLP">OCR Classifier. Default: "Industrial_Rej.omc"</param>
        </member>
        <member name="M:HalconDotNet.HTextModel.CreateTextModelReader(System.String,System.String)">
            <summary>
              Create a text model.
              Modified instance represents: New text model.
            </summary>
            <param name="mode">The Mode of the text model. Default: "auto"</param>
            <param name="OCRClassifierMLP">OCR Classifier. Default: "Industrial_Rej.omc"</param>
        </member>
        <member name="M:HalconDotNet.HTextModel.CreateTextModel">
            <summary>
              Create a text model.
              Modified instance represents: New text model.
            </summary>
        </member>
        <member name="T:HalconDotNet.HMutex">
            <summary>Represents an instance of a mutex synchronization object.</summary>
        </member>
        <member name="M:HalconDotNet.HMutex.#ctor(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a mutual exclusion synchronization object.
              Modified instance represents: Mutex synchronization object.
            </summary>
            <param name="attribName">Mutex attribute class. Default: ""</param>
            <param name="attribValue">Mutex attribute kind. Default: ""</param>
        </member>
        <member name="M:HalconDotNet.HMutex.#ctor(System.String,System.String)">
            <summary>
              Create a mutual exclusion synchronization object.
              Modified instance represents: Mutex synchronization object.
            </summary>
            <param name="attribName">Mutex attribute class. Default: ""</param>
            <param name="attribValue">Mutex attribute kind. Default: ""</param>
        </member>
        <member name="M:HalconDotNet.HMutex.UnlockMutex">
            <summary>
              Unlock a mutex synchronization object.
              Instance represents: Mutex synchronization object.
            </summary>
        </member>
        <member name="M:HalconDotNet.HMutex.TryLockMutex">
            <summary>
              Lock a mutex synchronization object.
              Instance represents: Mutex synchronization object.
            </summary>
            <returns>Mutex already locked?</returns>
        </member>
        <member name="M:HalconDotNet.HMutex.LockMutex">
            <summary>
              Lock a mutex synchronization object.
              Instance represents: Mutex synchronization object.
            </summary>
        </member>
        <member name="M:HalconDotNet.HMutex.CreateMutex(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a mutual exclusion synchronization object.
              Modified instance represents: Mutex synchronization object.
            </summary>
            <param name="attribName">Mutex attribute class. Default: ""</param>
            <param name="attribValue">Mutex attribute kind. Default: ""</param>
        </member>
        <member name="M:HalconDotNet.HMutex.CreateMutex(System.String,System.String)">
            <summary>
              Create a mutual exclusion synchronization object.
              Modified instance represents: Mutex synchronization object.
            </summary>
            <param name="attribName">Mutex attribute class. Default: ""</param>
            <param name="attribValue">Mutex attribute kind. Default: ""</param>
        </member>
        <member name="T:HalconDotNet.HFramegrabber">
            <summary>Represents an instance of an image acquisition device.</summary>
        </member>
        <member name="M:HalconDotNet.HFramegrabber.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Open and configure an image acquisition device.
              Modified instance represents: Handle of the opened image acquisition device.
            </summary>
            <param name="name">HALCON image acquisition interface name, i.e., name of the corresponding DLL (Windows) or shared library (Linux/OS X). Default: "File"</param>
            <param name="horizontalResolution">Desired horizontal resolution of image acquisition interface (absolute value or 1 for full resolution, 2 for half resolution, or 4 for quarter resolution). Default: 1</param>
            <param name="verticalResolution">Desired vertical resolution of image acquisition interface (absolute value or 1 for full resolution, 2 for half resolution, or 4 for quarter resolution). Default: 1</param>
            <param name="imageWidth">Width of desired image part (absolute value or 0 for HorizontalResolution - 2*StartColumn). Default: 0</param>
            <param name="imageHeight">Height of desired image part (absolute value or 0 for VerticalResolution - 2*StartRow). Default: 0</param>
            <param name="startRow">Line number of upper left corner of desired image part (or border height if ImageHeight = 0). Default: 0</param>
            <param name="startColumn">Column number of upper left corner of desired image part (or border width if ImageWidth = 0). Default: 0</param>
            <param name="field">Desired half image or full image. Default: "default"</param>
            <param name="bitsPerChannel">Number of transferred bits per pixel and image channel (-1: device-specific default value). Default: -1</param>
            <param name="colorSpace">Output color format of the grabbed images, typically 'gray' or 'raw' for single-channel or 'rgb' or 'yuv' for three-channel images ('default': device-specific default value). Default: "default"</param>
            <param name="generic">Generic parameter with device-specific meaning. Default: -1</param>
            <param name="externalTrigger">External triggering. Default: "default"</param>
            <param name="cameraType">Type of used camera ('default': device-specific default value). Default: "default"</param>
            <param name="device">Device the image acquisition device is connected to ('default': device-specific default value). Default: "default"</param>
            <param name="port">Port the image acquisition device is connected to (-1: device-specific default value). Default: -1</param>
            <param name="lineIn">Camera input line of multiplexer (-1: device-specific default value). Default: -1</param>
        </member>
        <member name="M:HalconDotNet.HFramegrabber.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.Double,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Open and configure an image acquisition device.
              Modified instance represents: Handle of the opened image acquisition device.
            </summary>
            <param name="name">HALCON image acquisition interface name, i.e., name of the corresponding DLL (Windows) or shared library (Linux/OS X). Default: "File"</param>
            <param name="horizontalResolution">Desired horizontal resolution of image acquisition interface (absolute value or 1 for full resolution, 2 for half resolution, or 4 for quarter resolution). Default: 1</param>
            <param name="verticalResolution">Desired vertical resolution of image acquisition interface (absolute value or 1 for full resolution, 2 for half resolution, or 4 for quarter resolution). Default: 1</param>
            <param name="imageWidth">Width of desired image part (absolute value or 0 for HorizontalResolution - 2*StartColumn). Default: 0</param>
            <param name="imageHeight">Height of desired image part (absolute value or 0 for VerticalResolution - 2*StartRow). Default: 0</param>
            <param name="startRow">Line number of upper left corner of desired image part (or border height if ImageHeight = 0). Default: 0</param>
            <param name="startColumn">Column number of upper left corner of desired image part (or border width if ImageWidth = 0). Default: 0</param>
            <param name="field">Desired half image or full image. Default: "default"</param>
            <param name="bitsPerChannel">Number of transferred bits per pixel and image channel (-1: device-specific default value). Default: -1</param>
            <param name="colorSpace">Output color format of the grabbed images, typically 'gray' or 'raw' for single-channel or 'rgb' or 'yuv' for three-channel images ('default': device-specific default value). Default: "default"</param>
            <param name="generic">Generic parameter with device-specific meaning. Default: -1</param>
            <param name="externalTrigger">External triggering. Default: "default"</param>
            <param name="cameraType">Type of used camera ('default': device-specific default value). Default: "default"</param>
            <param name="device">Device the image acquisition device is connected to ('default': device-specific default value). Default: "default"</param>
            <param name="port">Port the image acquisition device is connected to (-1: device-specific default value). Default: -1</param>
            <param name="lineIn">Camera input line of multiplexer (-1: device-specific default value). Default: -1</param>
        </member>
        <member name="M:HalconDotNet.HFramegrabber.GetFramegrabberParam(HalconDotNet.HTuple)">
            <summary>
              Query specific parameters of an image acquisition device.
              Instance represents: Handle of the acquisition device to be used.
            </summary>
            <param name="param">Parameter of interest. Default: "revision"</param>
            <returns>Parameter value.</returns>
        </member>
        <member name="M:HalconDotNet.HFramegrabber.GetFramegrabberParam(System.String)">
            <summary>
              Query specific parameters of an image acquisition device.
              Instance represents: Handle of the acquisition device to be used.
            </summary>
            <param name="param">Parameter of interest. Default: "revision"</param>
            <returns>Parameter value.</returns>
        </member>
        <member name="M:HalconDotNet.HFramegrabber.SetFramegrabberParam(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set specific parameters of an image acquistion device.
              Instance represents: Handle of the acquisition device to be used.
            </summary>
            <param name="param">Parameter name.</param>
            <param name="value">Parameter value to be set.</param>
        </member>
        <member name="M:HalconDotNet.HFramegrabber.SetFramegrabberParam(System.String,System.String)">
            <summary>
              Set specific parameters of an image acquistion device.
              Instance represents: Handle of the acquisition device to be used.
            </summary>
            <param name="param">Parameter name.</param>
            <param name="value">Parameter value to be set.</param>
        </member>
        <member name="M:HalconDotNet.HFramegrabber.GetFramegrabberCallback(System.String,System.IntPtr@)">
            <summary>
              Query callback function of an image acquisition device.
              Instance represents: Handle of the acquisition device to be used.
            </summary>
            <param name="callbackType">Callback type. Default: "transfer_end"</param>
            <param name="userContext">Pointer to user-specific context data.</param>
            <returns>Pointer to the callback function.</returns>
        </member>
        <member name="M:HalconDotNet.HFramegrabber.SetFramegrabberCallback(System.String,System.IntPtr,System.IntPtr)">
            <summary>
              Register a callback function for an image acquisition device.
              Instance represents: Handle of the acquisition device to be used.
            </summary>
            <param name="callbackType">Callback type. Default: "transfer_end"</param>
            <param name="callbackFunction">Pointer to the callback function to be set.</param>
            <param name="userContext">Pointer to user-specific context data.</param>
        </member>
        <member name="M:HalconDotNet.HFramegrabber.GrabDataAsync(HalconDotNet.HRegion@,HalconDotNet.HXLDCont@,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Asynchronous grab of images and preprocessed image data from the specified image acquisition device.
              Instance represents: Handle of the acquisition device to be used.
            </summary>
            <param name="region">Pre-processed image regions.</param>
            <param name="contours">Pre-processed XLD contours.</param>
            <param name="maxDelay">Maximum tolerated delay between the start of the asynchronous grab and the delivery of the image [ms]. Default: -1.0</param>
            <param name="data">Pre-processed control data.</param>
            <returns>Grabbed image data.</returns>
        </member>
        <member name="M:HalconDotNet.HFramegrabber.GrabDataAsync(HalconDotNet.HRegion@,HalconDotNet.HXLDCont@,System.Double,System.String@)">
            <summary>
              Asynchronous grab of images and preprocessed image data from the specified image acquisition device.
              Instance represents: Handle of the acquisition device to be used.
            </summary>
            <param name="region">Pre-processed image regions.</param>
            <param name="contours">Pre-processed XLD contours.</param>
            <param name="maxDelay">Maximum tolerated delay between the start of the asynchronous grab and the delivery of the image [ms]. Default: -1.0</param>
            <param name="data">Pre-processed control data.</param>
            <returns>Grabbed image data.</returns>
        </member>
        <member name="M:HalconDotNet.HFramegrabber.GrabData(HalconDotNet.HRegion@,HalconDotNet.HXLDCont@,HalconDotNet.HTuple@)">
            <summary>
              Synchronous grab of images and preprocessed image data from the specified image acquisition device.
              Instance represents: Handle of the acquisition device to be used.
            </summary>
            <param name="region">Preprocessed image regions.</param>
            <param name="contours">Preprocessed XLD contours.</param>
            <param name="data">Preprocessed control data.</param>
            <returns>Grabbed image data.</returns>
        </member>
        <member name="M:HalconDotNet.HFramegrabber.GrabData(HalconDotNet.HRegion@,HalconDotNet.HXLDCont@,System.String@)">
            <summary>
              Synchronous grab of images and preprocessed image data from the specified image acquisition device.
              Instance represents: Handle of the acquisition device to be used.
            </summary>
            <param name="region">Preprocessed image regions.</param>
            <param name="contours">Preprocessed XLD contours.</param>
            <param name="data">Preprocessed control data.</param>
            <returns>Grabbed image data.</returns>
        </member>
        <member name="M:HalconDotNet.HFramegrabber.GrabImageAsync(System.Double)">
            <summary>
              Asynchronous grab of an image from the specified image acquisition device.
              Instance represents: Handle of the acquisition device to be used.
            </summary>
            <param name="maxDelay">Maximum tolerated delay between the start of the asynchronous grab and the delivery of the image [ms]. Default: -1.0</param>
            <returns>Grabbed image.</returns>
        </member>
        <member name="M:HalconDotNet.HFramegrabber.GrabImageStart(System.Double)">
            <summary>
              Start an asynchronous grab from the specified image acquisition device.
              Instance represents: Handle of the acquisition device to be used.
            </summary>
            <param name="maxDelay">This parameter is obsolete and has no effect. Default: -1.0</param>
        </member>
        <member name="M:HalconDotNet.HFramegrabber.GrabImage">
            <summary>
              Synchronous grab of an image from the specified image acquisition device.
              Instance represents: Handle of the acquisition device to be used.
            </summary>
            <returns>Grabbed image.</returns>
        </member>
        <member name="M:HalconDotNet.HFramegrabber.OpenFramegrabber(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Open and configure an image acquisition device.
              Modified instance represents: Handle of the opened image acquisition device.
            </summary>
            <param name="name">HALCON image acquisition interface name, i.e., name of the corresponding DLL (Windows) or shared library (Linux/OS X). Default: "File"</param>
            <param name="horizontalResolution">Desired horizontal resolution of image acquisition interface (absolute value or 1 for full resolution, 2 for half resolution, or 4 for quarter resolution). Default: 1</param>
            <param name="verticalResolution">Desired vertical resolution of image acquisition interface (absolute value or 1 for full resolution, 2 for half resolution, or 4 for quarter resolution). Default: 1</param>
            <param name="imageWidth">Width of desired image part (absolute value or 0 for HorizontalResolution - 2*StartColumn). Default: 0</param>
            <param name="imageHeight">Height of desired image part (absolute value or 0 for VerticalResolution - 2*StartRow). Default: 0</param>
            <param name="startRow">Line number of upper left corner of desired image part (or border height if ImageHeight = 0). Default: 0</param>
            <param name="startColumn">Column number of upper left corner of desired image part (or border width if ImageWidth = 0). Default: 0</param>
            <param name="field">Desired half image or full image. Default: "default"</param>
            <param name="bitsPerChannel">Number of transferred bits per pixel and image channel (-1: device-specific default value). Default: -1</param>
            <param name="colorSpace">Output color format of the grabbed images, typically 'gray' or 'raw' for single-channel or 'rgb' or 'yuv' for three-channel images ('default': device-specific default value). Default: "default"</param>
            <param name="generic">Generic parameter with device-specific meaning. Default: -1</param>
            <param name="externalTrigger">External triggering. Default: "default"</param>
            <param name="cameraType">Type of used camera ('default': device-specific default value). Default: "default"</param>
            <param name="device">Device the image acquisition device is connected to ('default': device-specific default value). Default: "default"</param>
            <param name="port">Port the image acquisition device is connected to (-1: device-specific default value). Default: -1</param>
            <param name="lineIn">Camera input line of multiplexer (-1: device-specific default value). Default: -1</param>
        </member>
        <member name="M:HalconDotNet.HFramegrabber.OpenFramegrabber(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.Double,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Open and configure an image acquisition device.
              Modified instance represents: Handle of the opened image acquisition device.
            </summary>
            <param name="name">HALCON image acquisition interface name, i.e., name of the corresponding DLL (Windows) or shared library (Linux/OS X). Default: "File"</param>
            <param name="horizontalResolution">Desired horizontal resolution of image acquisition interface (absolute value or 1 for full resolution, 2 for half resolution, or 4 for quarter resolution). Default: 1</param>
            <param name="verticalResolution">Desired vertical resolution of image acquisition interface (absolute value or 1 for full resolution, 2 for half resolution, or 4 for quarter resolution). Default: 1</param>
            <param name="imageWidth">Width of desired image part (absolute value or 0 for HorizontalResolution - 2*StartColumn). Default: 0</param>
            <param name="imageHeight">Height of desired image part (absolute value or 0 for VerticalResolution - 2*StartRow). Default: 0</param>
            <param name="startRow">Line number of upper left corner of desired image part (or border height if ImageHeight = 0). Default: 0</param>
            <param name="startColumn">Column number of upper left corner of desired image part (or border width if ImageWidth = 0). Default: 0</param>
            <param name="field">Desired half image or full image. Default: "default"</param>
            <param name="bitsPerChannel">Number of transferred bits per pixel and image channel (-1: device-specific default value). Default: -1</param>
            <param name="colorSpace">Output color format of the grabbed images, typically 'gray' or 'raw' for single-channel or 'rgb' or 'yuv' for three-channel images ('default': device-specific default value). Default: "default"</param>
            <param name="generic">Generic parameter with device-specific meaning. Default: -1</param>
            <param name="externalTrigger">External triggering. Default: "default"</param>
            <param name="cameraType">Type of used camera ('default': device-specific default value). Default: "default"</param>
            <param name="device">Device the image acquisition device is connected to ('default': device-specific default value). Default: "default"</param>
            <param name="port">Port the image acquisition device is connected to (-1: device-specific default value). Default: -1</param>
            <param name="lineIn">Camera input line of multiplexer (-1: device-specific default value). Default: -1</param>
        </member>
        <member name="M:HalconDotNet.HFramegrabber.GetFramegrabberLut(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Query look-up table of the image acquisition device.
              Instance represents: Handle of the acquisition device to be used.
            </summary>
            <param name="imageRed">Red level of the LUT entries.</param>
            <param name="imageGreen">Green level of the LUT entries.</param>
            <param name="imageBlue">Blue level of the LUT entries.</param>
        </member>
        <member name="M:HalconDotNet.HFramegrabber.SetFramegrabberLut(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set look-up table of the image acquisition device.
              Instance represents: Handle of the acquisition device to be used.
            </summary>
            <param name="imageRed">Red level of the LUT entries.</param>
            <param name="imageGreen">Green level of the LUT entries.</param>
            <param name="imageBlue">Blue level of the LUT entries.</param>
        </member>
        <member name="T:HalconDotNet.HEvent">
            <summary>Represents an instance of an event synchronization object.</summary>
        </member>
        <member name="M:HalconDotNet.HEvent.#ctor(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create an event synchronization object.
              Modified instance represents: Event synchronization object.
            </summary>
            <param name="attribName">Mutex attribute. Default: ""</param>
            <param name="attribValue">Mutex attribute value. Default: ""</param>
        </member>
        <member name="M:HalconDotNet.HEvent.#ctor(System.String,System.String)">
            <summary>
              Create an event synchronization object.
              Modified instance represents: Event synchronization object.
            </summary>
            <param name="attribName">Mutex attribute. Default: ""</param>
            <param name="attribValue">Mutex attribute value. Default: ""</param>
        </member>
        <member name="M:HalconDotNet.HEvent.SignalEvent">
            <summary>
              Unlock an event synchronization object. 
              Instance represents: Event synchronization object.
            </summary>
        </member>
        <member name="M:HalconDotNet.HEvent.TryWaitEvent">
            <summary>
              Lock an event synchronization object only it is unlocked.
              Instance represents: Event synchronization object.
            </summary>
            <returns>Object already locked?</returns>
        </member>
        <member name="M:HalconDotNet.HEvent.WaitEvent">
            <summary>
              Lock an event synchronization object.
              Instance represents: Event synchronization object.
            </summary>
        </member>
        <member name="M:HalconDotNet.HEvent.CreateEvent(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create an event synchronization object.
              Modified instance represents: Event synchronization object.
            </summary>
            <param name="attribName">Mutex attribute. Default: ""</param>
            <param name="attribValue">Mutex attribute value. Default: ""</param>
        </member>
        <member name="M:HalconDotNet.HEvent.CreateEvent(System.String,System.String)">
            <summary>
              Create an event synchronization object.
              Modified instance represents: Event synchronization object.
            </summary>
            <param name="attribName">Mutex attribute. Default: ""</param>
            <param name="attribValue">Mutex attribute value. Default: ""</param>
        </member>
        <member name="T:HalconDotNet.HHomMat2D">
            <summary>Represents a homogeneous 2D transformation matrix.</summary>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.#ctor">
            <summary>
              Generate the homogeneous transformation matrix of the identical 2D transformation.
              Modified instance represents: Transformation matrix.
            </summary>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.ReadWorldFile(System.String)">
            <summary>
              Read the geo coding from an ARC/INFO world file.
              Modified instance represents: Transformation matrix from image to world coordinates.
            </summary>
            <param name="fileName">Name of the ARC/INFO world file.</param>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.ProjectiveTransContourXld(HalconDotNet.HXLDCont)">
            <summary>
              Apply a projective transformation to an XLD contour.
              Instance represents: Homogeneous projective transformation matrix.
            </summary>
            <param name="contours">Input contours.</param>
            <returns>Output contours.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.AffineTransPolygonXld(HalconDotNet.HXLDPoly)">
            <summary>
              Apply an arbitrary affine transformation to XLD polygons.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="polygons">Input XLD polygons.</param>
            <returns>Transformed XLD polygons.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.AffineTransContourXld(HalconDotNet.HXLDCont)">
            <summary>
              Apply an arbitrary affine 2D transformation to XLD contours.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="contours">Input XLD contours.</param>
            <returns>Transformed XLD contours.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.DeserializeHomMat2d(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized homogeneous 2D transformation matrix.
              Modified instance represents: Transformation matrix.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.SerializeHomMat2d">
            <summary>
              Serialize a homogeneous 2D transformation matrix.
              Instance represents: Transformation matrix.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.BundleAdjustMosaic(System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HHomMat2D[],HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Perform a bundle adjustment of an image mosaic.</summary>
            <param name="numImages">Number of different images that are used for the calibration.</param>
            <param name="referenceImage">Index of the reference image.</param>
            <param name="mappingSource">Indices of the source images of the transformations.</param>
            <param name="mappingDest">Indices of the target images of the transformations.</param>
            <param name="homMatrices2D">Array of 3x3 projective transformation matrices.</param>
            <param name="rows1">Row coordinates of corresponding points in the respective source images.</param>
            <param name="cols1">Column coordinates of corresponding points in the respective source images.</param>
            <param name="rows2">Row coordinates of corresponding points in the respective destination images.</param>
            <param name="cols2">Column coordinates of corresponding points in the respective destination images.</param>
            <param name="numCorrespondences">Number of point correspondences in the respective image pair.</param>
            <param name="transformation">Transformation class to be used. Default: "projective"</param>
            <param name="rows">Row coordinates of the points reconstructed by the bundle adjustment.</param>
            <param name="cols">Column coordinates of the points reconstructed by the bundle adjustment.</param>
            <param name="error">Average error per reconstructed point.</param>
            <returns>Array of 3x3 projective transformation matrices that determine the position of the images in the mosaic.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.BundleAdjustMosaic(System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HHomMat2D[],HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,System.Double@)">
            <summary>Perform a bundle adjustment of an image mosaic.</summary>
            <param name="numImages">Number of different images that are used for the calibration.</param>
            <param name="referenceImage">Index of the reference image.</param>
            <param name="mappingSource">Indices of the source images of the transformations.</param>
            <param name="mappingDest">Indices of the target images of the transformations.</param>
            <param name="homMatrices2D">Array of 3x3 projective transformation matrices.</param>
            <param name="rows1">Row coordinates of corresponding points in the respective source images.</param>
            <param name="cols1">Column coordinates of corresponding points in the respective source images.</param>
            <param name="rows2">Row coordinates of corresponding points in the respective destination images.</param>
            <param name="cols2">Column coordinates of corresponding points in the respective destination images.</param>
            <param name="numCorrespondences">Number of point correspondences in the respective image pair.</param>
            <param name="transformation">Transformation class to be used. Default: "projective"</param>
            <param name="rows">Row coordinates of the points reconstructed by the bundle adjustment.</param>
            <param name="cols">Column coordinates of the points reconstructed by the bundle adjustment.</param>
            <param name="error">Average error per reconstructed point.</param>
            <returns>Array of 3x3 projective transformation matrices that determine the position of the images in the mosaic.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.ProjMatchPointsDistortionRansacGuided(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Double,System.Double,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,System.Int32,System.Double@,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute a projective transformation matrix and the radial distortion coefficient between two images by finding correspondences between points based on known approximations of the projective transformation matrix and the radial distortion coefficient.
              Instance represents: Approximation of the homogeneous projective transformation matrix between the two images.
            </summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="grayMatchMethod">Gray value match metric. Default: "ncc"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="kappaGuide">Approximation of the radial distortion coefficient in the two images.</param>
            <param name="distanceTolerance">Tolerance for the matching search window. Default: 20.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 0.7</param>
            <param name="estimationMethod">Algorithm for the computation of the projective transformation matrix. Default: "gold_standard"</param>
            <param name="distanceThreshold">Threshold for transformation consistency check. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="kappa">Computed radial distortion coefficient.</param>
            <param name="error">Root-Mean-Square transformation error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed homogeneous projective transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.ProjMatchPointsDistortionRansacGuided(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Double,System.Double,System.Int32,System.String,System.Double,System.Int32,System.Double@,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute a projective transformation matrix and the radial distortion coefficient between two images by finding correspondences between points based on known approximations of the projective transformation matrix and the radial distortion coefficient.
              Instance represents: Approximation of the homogeneous projective transformation matrix between the two images.
            </summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="grayMatchMethod">Gray value match metric. Default: "ncc"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="kappaGuide">Approximation of the radial distortion coefficient in the two images.</param>
            <param name="distanceTolerance">Tolerance for the matching search window. Default: 20.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 0.7</param>
            <param name="estimationMethod">Algorithm for the computation of the projective transformation matrix. Default: "gold_standard"</param>
            <param name="distanceThreshold">Threshold for transformation consistency check. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="kappa">Computed radial distortion coefficient.</param>
            <param name="error">Root-Mean-Square transformation error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed homogeneous projective transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.ProjMatchPointsDistortionRansac(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,System.Int32,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute a projective transformation matrix between two images and the radial distortion coefficient by automatically finding correspondences between points.
              Modified instance represents: Computed homogeneous projective transformation matrix.
            </summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="grayMatchMethod">Gray value match metric. Default: "ncc"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate offset of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate offset of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative rotation of the second image with respect to the first image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 0.7</param>
            <param name="estimationMethod">Algorithm for the computation of the projective transformation matrix. Default: "gold_standard"</param>
            <param name="distanceThreshold">Threshold for the transformation consistency check. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="error">Root-Mean-Square transformation error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed radial distortion coefficient.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.ProjMatchPointsDistortionRansac(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.String,System.Double,System.Int32,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute a projective transformation matrix between two images and the radial distortion coefficient by automatically finding correspondences between points.
              Modified instance represents: Computed homogeneous projective transformation matrix.
            </summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="grayMatchMethod">Gray value match metric. Default: "ncc"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate offset of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate offset of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative rotation of the second image with respect to the first image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 0.7</param>
            <param name="estimationMethod">Algorithm for the computation of the projective transformation matrix. Default: "gold_standard"</param>
            <param name="distanceThreshold">Threshold for the transformation consistency check. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="error">Root-Mean-Square transformation error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed radial distortion coefficient.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.ProjMatchPointsRansacGuided(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Double,HalconDotNet.HTuple,System.String,System.Double,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute a projective transformation matrix between two images by finding correspondences between points based on a known approximation of the projective transformation matrix.
              Instance represents: Approximation of the Homogeneous projective transformation matrix between the two images.
            </summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="distanceTolerance">Tolerance for the matching search window. Default: 20.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Transformation matrix estimation algorithm. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Threshold for transformation consistency check. Default: 0.2</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Homogeneous projective transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.ProjMatchPointsRansacGuided(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Double,System.Int32,System.String,System.Double,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute a projective transformation matrix between two images by finding correspondences between points based on a known approximation of the projective transformation matrix.
              Instance represents: Approximation of the Homogeneous projective transformation matrix between the two images.
            </summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="distanceTolerance">Tolerance for the matching search window. Default: 20.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Transformation matrix estimation algorithm. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Threshold for transformation consistency check. Default: 0.2</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Homogeneous projective transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.ProjMatchPointsRansac(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Double,System.Int32,HalconDotNet.HTuple@)">
            <summary>
              Compute a projective transformation matrix between two images by finding correspondences between points.
              Modified instance represents: Homogeneous projective transformation matrix.
            </summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift. Default: 0</param>
            <param name="colMove">Average column coordinate shift. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 256</param>
            <param name="colTolerance">Half width of matching search window. Default: 256</param>
            <param name="rotation">Range of rotation angles. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Transformation matrix estimation algorithm. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Threshold for transformation consistency check. Default: 0.2</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Indices of matched input points in image 1.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.ProjMatchPointsRansac(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.String,System.Double,System.Int32,HalconDotNet.HTuple@)">
            <summary>
              Compute a projective transformation matrix between two images by finding correspondences between points.
              Modified instance represents: Homogeneous projective transformation matrix.
            </summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift. Default: 0</param>
            <param name="colMove">Average column coordinate shift. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 256</param>
            <param name="colTolerance">Half width of matching search window. Default: 256</param>
            <param name="rotation">Range of rotation angles. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Transformation matrix estimation algorithm. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Threshold for transformation consistency check. Default: 0.2</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Indices of matched input points in image 1.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.VectorToProjHomMat2dDistortion(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,System.String,System.Double@)">
            <summary>
              Compute a projective transformation matrix and the radial distortion coefficient using given point correspondences.
              Modified instance represents: Homogeneous projective transformation matrix.
            </summary>
            <param name="points1Row">Input points in image 1 (row coordinate).</param>
            <param name="points1Col">Input points in image 1 (column coordinate).</param>
            <param name="points2Row">Input points in image 2 (row coordinate).</param>
            <param name="points2Col">Input points in image 2 (column coordinate).</param>
            <param name="covRR1">Row coordinate variance of the points in image 1. Default: []</param>
            <param name="covRC1">Covariance of the points in image 1. Default: []</param>
            <param name="covCC1">Column coordinate variance of the points in image 1. Default: []</param>
            <param name="covRR2">Row coordinate variance of the points in image 2. Default: []</param>
            <param name="covRC2">Covariance of the points in image 2. Default: []</param>
            <param name="covCC2">Column coordinate variance of the points in image 2. Default: []</param>
            <param name="imageWidth">Width of the images from which the points were extracted.</param>
            <param name="imageHeight">Height of the images from which the points were extracted.</param>
            <param name="method">Estimation algorithm. Default: "gold_standard"</param>
            <param name="error">Root-Mean-Square transformation error.</param>
            <returns>Computed radial distortion coefficient.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomVectorToProjHomMat2d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Compute a homogeneous transformation matrix using given point correspondences.
              Modified instance represents: Homogeneous projective transformation matrix.
            </summary>
            <param name="px">Input points 1 (x coordinate).</param>
            <param name="py">Input points 1 (y coordinate).</param>
            <param name="pw">Input points 1 (w coordinate).</param>
            <param name="qx">Input points 2 (x coordinate).</param>
            <param name="qy">Input points 2 (y coordinate).</param>
            <param name="qw">Input points 2 (w coordinate).</param>
            <param name="method">Estimation algorithm. Default: "normalized_dlt"</param>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.VectorToProjHomMat2d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Compute a projective transformation matrix using given point correspondences.
              Modified instance represents: Homogeneous projective transformation matrix.
            </summary>
            <param name="px">Input points in image 1 (row coordinate).</param>
            <param name="py">Input points in image 1 (column coordinate).</param>
            <param name="qx">Input points in image 2 (row coordinate).</param>
            <param name="qy">Input points in image 2 (column coordinate).</param>
            <param name="method">Estimation algorithm. Default: "normalized_dlt"</param>
            <param name="covXX1">Row coordinate variance of the points in image 1. Default: []</param>
            <param name="covYY1">Column coordinate variance of the points in image 1. Default: []</param>
            <param name="covXY1">Covariance of the points in image 1. Default: []</param>
            <param name="covXX2">Row coordinate variance of the points in image 2. Default: []</param>
            <param name="covYY2">Column coordinate variance of the points in image 2. Default: []</param>
            <param name="covXY2">Covariance of the points in image 2. Default: []</param>
            <returns>9x9 covariance matrix of the projective transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dToAffinePar(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Compute the affine transformation parameters from a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="sy">Scaling factor along the y direction.</param>
            <param name="phi">Rotation angle.</param>
            <param name="theta">Slant angle.</param>
            <param name="tx">Translation along the x direction.</param>
            <param name="ty">Translation along the y direction.</param>
            <returns>Scaling factor along the x direction.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.VectorAngleToRigid(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Compute a rigid affine transformation from points and angles.
              Modified instance represents: Output transformation matrix.
            </summary>
            <param name="row1">Row coordinate of the original point.</param>
            <param name="column1">Column coordinate of the original point.</param>
            <param name="angle1">Angle of the original point.</param>
            <param name="row2">Row coordinate of the transformed point.</param>
            <param name="column2">Column coordinate of the transformed point.</param>
            <param name="angle2">Angle of the transformed point.</param>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.VectorAngleToRigid(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Compute a rigid affine transformation from points and angles.
              Modified instance represents: Output transformation matrix.
            </summary>
            <param name="row1">Row coordinate of the original point.</param>
            <param name="column1">Column coordinate of the original point.</param>
            <param name="angle1">Angle of the original point.</param>
            <param name="row2">Row coordinate of the transformed point.</param>
            <param name="column2">Column coordinate of the transformed point.</param>
            <param name="angle2">Angle of the transformed point.</param>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.PointLineToHomMat2d(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Approximate an affine transformation from point-to-line correspondences.
              Modified instance represents: Output transformation matrix.
            </summary>
            <param name="transformationType">Type of the transformation to compute. Default: "rigid"</param>
            <param name="px">X coordinates of the original points.</param>
            <param name="py">Y coordinates of the original points.</param>
            <param name="l1x">X coordinates of the first point on the corresponding line.</param>
            <param name="l1y">Y coordinates of the first point on the corresponding line.</param>
            <param name="l2x">X coordinates of the second point on the corresponding line.</param>
            <param name="l2y">Y coordinates of the second point on the corresponding line.</param>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.VectorToRigid(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Approximate a rigid affine transformation from point correspondences.
              Modified instance represents: Output transformation matrix.
            </summary>
            <param name="px">X coordinates of the original points.</param>
            <param name="py">Y coordinates of the original points.</param>
            <param name="qx">X coordinates of the transformed points.</param>
            <param name="qy">Y coordinates of the transformed points.</param>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.VectorToSimilarity(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Approximate an similarity transformation from point correspondences.
              Modified instance represents: Output transformation matrix.
            </summary>
            <param name="px">X coordinates of the original points.</param>
            <param name="py">Y coordinates of the original points.</param>
            <param name="qx">X coordinates of the transformed points.</param>
            <param name="qy">Y coordinates of the transformed points.</param>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.VectorToAniso(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Approximate an anisotropic similarity transformation from point correspondences.
              Modified instance represents: Output transformation matrix.
            </summary>
            <param name="px">X coordinates of the original points.</param>
            <param name="py">Y coordinates of the original points.</param>
            <param name="qx">X coordinates of the transformed points.</param>
            <param name="qy">Y coordinates of the transformed points.</param>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.VectorToHomMat2d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Approximate an affine transformation from point correspondences.
              Modified instance represents: Output transformation matrix.
            </summary>
            <param name="px">X coordinates of the original points.</param>
            <param name="py">Y coordinates of the original points.</param>
            <param name="qx">X coordinates of the transformed points.</param>
            <param name="qy">Y coordinates of the transformed points.</param>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.ProjectiveTransPixel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Project pixel coordinates using a homogeneous projective transformation matrix.
              Instance represents: Homogeneous projective transformation matrix.
            </summary>
            <param name="row">Input pixel(s) (row coordinate). Default: 64</param>
            <param name="col">Input pixel(s) (column coordinate). Default: 64</param>
            <param name="rowTrans">Output pixel(s) (row coordinate).</param>
            <param name="colTrans">Output pixel(s) (column coordinate).</param>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.ProjectiveTransPixel(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
              Project pixel coordinates using a homogeneous projective transformation matrix.
              Instance represents: Homogeneous projective transformation matrix.
            </summary>
            <param name="row">Input pixel(s) (row coordinate). Default: 64</param>
            <param name="col">Input pixel(s) (column coordinate). Default: 64</param>
            <param name="rowTrans">Output pixel(s) (row coordinate).</param>
            <param name="colTrans">Output pixel(s) (column coordinate).</param>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.ProjectiveTransPoint2d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Project a homogeneous 2D point using a projective transformation matrix.
              Instance represents: Homogeneous projective transformation matrix.
            </summary>
            <param name="px">Input point (x coordinate).</param>
            <param name="py">Input point (y coordinate).</param>
            <param name="pw">Input point (w coordinate).</param>
            <param name="qy">Output point (y coordinate).</param>
            <param name="qw">Output point (w coordinate).</param>
            <returns>Output point (x coordinate).</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.ProjectiveTransPoint2d(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
              Project a homogeneous 2D point using a projective transformation matrix.
              Instance represents: Homogeneous projective transformation matrix.
            </summary>
            <param name="px">Input point (x coordinate).</param>
            <param name="py">Input point (y coordinate).</param>
            <param name="pw">Input point (w coordinate).</param>
            <param name="qy">Output point (y coordinate).</param>
            <param name="qw">Output point (w coordinate).</param>
            <returns>Output point (x coordinate).</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.AffineTransPixel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Apply an arbitrary affine 2D transformation to pixel coordinates.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="row">Input pixel(s) (row coordinate). Default: 64</param>
            <param name="col">Input pixel(s) (column coordinate). Default: 64</param>
            <param name="rowTrans">Output pixel(s) (row coordinate).</param>
            <param name="colTrans">Output pixel(s) (column coordinate).</param>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.AffineTransPixel(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
              Apply an arbitrary affine 2D transformation to pixel coordinates.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="row">Input pixel(s) (row coordinate). Default: 64</param>
            <param name="col">Input pixel(s) (column coordinate). Default: 64</param>
            <param name="rowTrans">Output pixel(s) (row coordinate).</param>
            <param name="colTrans">Output pixel(s) (column coordinate).</param>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.AffineTransPoint2d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Apply an arbitrary affine 2D transformation to points.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="px">Input point(s) (x or row coordinate). Default: 64</param>
            <param name="py">Input point(s) (y or column coordinate). Default: 64</param>
            <param name="qy">Output point(s) (y or column coordinate).</param>
            <returns>Output point(s) (x or row coordinate).</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.AffineTransPoint2d(System.Double,System.Double,System.Double@)">
            <summary>
              Apply an arbitrary affine 2D transformation to points.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="px">Input point(s) (x or row coordinate). Default: 64</param>
            <param name="py">Input point(s) (y or column coordinate). Default: 64</param>
            <param name="qy">Output point(s) (y or column coordinate).</param>
            <returns>Output point(s) (x or row coordinate).</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dDeterminant">
            <summary>
              Compute the determinant of a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <returns>Determinant of the input matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dTranspose">
            <summary>
              Transpose a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dInvert">
            <summary>
              Invert a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dCompose(HalconDotNet.HHomMat2D)">
            <summary>
              Multiply two homogeneous 2D transformation matrices.
              Instance represents: Left input transformation matrix.
            </summary>
            <param name="homMat2DRight">Right input transformation matrix.</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dReflectLocal(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a reflection to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="px">Point that defines the axis (x coordinate). Default: 16</param>
            <param name="py">Point that defines the axis (y coordinate). Default: 32</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dReflectLocal(System.Double,System.Double)">
            <summary>
              Add a reflection to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="px">Point that defines the axis (x coordinate). Default: 16</param>
            <param name="py">Point that defines the axis (y coordinate). Default: 32</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dReflect(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a reflection to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="px">First point of the axis (x coordinate). Default: 0</param>
            <param name="py">First point of the axis (y coordinate). Default: 0</param>
            <param name="qx">Second point of the axis (x coordinate). Default: 16</param>
            <param name="qy">Second point of the axis (y coordinate). Default: 32</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dReflect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Add a reflection to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="px">First point of the axis (x coordinate). Default: 0</param>
            <param name="py">First point of the axis (y coordinate). Default: 0</param>
            <param name="qx">Second point of the axis (x coordinate). Default: 16</param>
            <param name="qy">Second point of the axis (y coordinate). Default: 32</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dSlantLocal(HalconDotNet.HTuple,System.String)">
            <summary>
              Add a slant to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="theta">Slant angle. Default: 0.78</param>
            <param name="axis">Coordinate axis that is slanted. Default: "x"</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dSlantLocal(System.Double,System.String)">
            <summary>
              Add a slant to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="theta">Slant angle. Default: 0.78</param>
            <param name="axis">Coordinate axis that is slanted. Default: "x"</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dSlant(HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a slant to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="theta">Slant angle. Default: 0.78</param>
            <param name="axis">Coordinate axis that is slanted. Default: "x"</param>
            <param name="px">Fixed point of the transformation (x coordinate). Default: 0</param>
            <param name="py">Fixed point of the transformation (y coordinate). Default: 0</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dSlant(System.Double,System.String,System.Double,System.Double)">
            <summary>
              Add a slant to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="theta">Slant angle. Default: 0.78</param>
            <param name="axis">Coordinate axis that is slanted. Default: "x"</param>
            <param name="px">Fixed point of the transformation (x coordinate). Default: 0</param>
            <param name="py">Fixed point of the transformation (y coordinate). Default: 0</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dRotateLocal(HalconDotNet.HTuple)">
            <summary>
              Add a rotation to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="phi">Rotation angle. Default: 0.78</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dRotateLocal(System.Double)">
            <summary>
              Add a rotation to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="phi">Rotation angle. Default: 0.78</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dRotate(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a rotation to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="phi">Rotation angle. Default: 0.78</param>
            <param name="px">Fixed point of the transformation (x coordinate). Default: 0</param>
            <param name="py">Fixed point of the transformation (y coordinate). Default: 0</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dRotate(System.Double,System.Double,System.Double)">
            <summary>
              Add a rotation to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="phi">Rotation angle. Default: 0.78</param>
            <param name="px">Fixed point of the transformation (x coordinate). Default: 0</param>
            <param name="py">Fixed point of the transformation (y coordinate). Default: 0</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dScaleLocal(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a scaling to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="sx">Scale factor along the x-axis. Default: 2</param>
            <param name="sy">Scale factor along the y-axis. Default: 2</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dScaleLocal(System.Double,System.Double)">
            <summary>
              Add a scaling to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="sx">Scale factor along the x-axis. Default: 2</param>
            <param name="sy">Scale factor along the y-axis. Default: 2</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dScale(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a scaling to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="sx">Scale factor along the x-axis. Default: 2</param>
            <param name="sy">Scale factor along the y-axis. Default: 2</param>
            <param name="px">Fixed point of the transformation (x coordinate). Default: 0</param>
            <param name="py">Fixed point of the transformation (y coordinate). Default: 0</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dScale(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Add a scaling to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="sx">Scale factor along the x-axis. Default: 2</param>
            <param name="sy">Scale factor along the y-axis. Default: 2</param>
            <param name="px">Fixed point of the transformation (x coordinate). Default: 0</param>
            <param name="py">Fixed point of the transformation (y coordinate). Default: 0</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dTranslateLocal(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a translation to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="tx">Translation along the x-axis. Default: 64</param>
            <param name="ty">Translation along the y-axis. Default: 64</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dTranslateLocal(System.Double,System.Double)">
            <summary>
              Add a translation to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="tx">Translation along the x-axis. Default: 64</param>
            <param name="ty">Translation along the y-axis. Default: 64</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dTranslate(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a translation to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="tx">Translation along the x-axis. Default: 64</param>
            <param name="ty">Translation along the y-axis. Default: 64</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dTranslate(System.Double,System.Double)">
            <summary>
              Add a translation to a homogeneous 2D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="tx">Translation along the x-axis. Default: 64</param>
            <param name="ty">Translation along the y-axis. Default: 64</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.HomMat2dIdentity">
            <summary>
              Generate the homogeneous transformation matrix of the identical 2D transformation.
              Modified instance represents: Transformation matrix.
            </summary>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.Reconst3dFromFundamentalMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the projective 3d reconstruction of points based on the fundamental matrix.
              Instance represents: Fundamental matrix.
            </summary>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="covRR1">Row coordinate variance of the points in image 1. Default: []</param>
            <param name="covRC1">Covariance of the points in image 1. Default: []</param>
            <param name="covCC1">Column coordinate variance of the points in image 1. Default: []</param>
            <param name="covRR2">Row coordinate variance of the points in image 2. Default: []</param>
            <param name="covRC2">Covariance of the points in image 2. Default: []</param>
            <param name="covCC2">Column coordinate variance of the points in image 2. Default: []</param>
            <param name="covFMat">9x9 covariance matrix of the fundamental matrix. Default: []</param>
            <param name="x">X coordinates of the reconstructed points in projective 3D space.</param>
            <param name="y">Y coordinates of the reconstructed points in projective 3D space.</param>
            <param name="z">Z coordinates of the reconstructed points in projective 3D space.</param>
            <param name="w">W coordinates of the reconstructed points in projective 3D space.</param>
            <param name="covXYZW">Covariance matrices of the reconstructed points.</param>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.Reconst3dFromFundamentalMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,HalconDotNet.HTuple,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Compute the projective 3d reconstruction of points based on the fundamental matrix.
              Instance represents: Fundamental matrix.
            </summary>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="covRR1">Row coordinate variance of the points in image 1. Default: []</param>
            <param name="covRC1">Covariance of the points in image 1. Default: []</param>
            <param name="covCC1">Column coordinate variance of the points in image 1. Default: []</param>
            <param name="covRR2">Row coordinate variance of the points in image 2. Default: []</param>
            <param name="covRC2">Covariance of the points in image 2. Default: []</param>
            <param name="covCC2">Column coordinate variance of the points in image 2. Default: []</param>
            <param name="covFMat">9x9 covariance matrix of the fundamental matrix. Default: []</param>
            <param name="x">X coordinates of the reconstructed points in projective 3D space.</param>
            <param name="y">Y coordinates of the reconstructed points in projective 3D space.</param>
            <param name="z">Z coordinates of the reconstructed points in projective 3D space.</param>
            <param name="w">W coordinates of the reconstructed points in projective 3D space.</param>
            <param name="covXYZW">Covariance matrices of the reconstructed points.</param>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.GenBinocularProjRectification(HalconDotNet.HImage@,HalconDotNet.HTuple,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple@,HalconDotNet.HHomMat2D@,HalconDotNet.HHomMat2D@)">
            <summary>
              Compute the projective rectification of weakly calibrated binocular stereo images.
              Instance represents: Fundamental matrix.
            </summary>
            <param name="map2">Image coding the rectification of the 2. image.</param>
            <param name="covFMat">9x9 covariance matrix of the fundamental matrix. Default: []</param>
            <param name="width1">Width of the 1. image. Default: 512</param>
            <param name="height1">Height of the 1. image. Default: 512</param>
            <param name="width2">Width of the 2. image. Default: 512</param>
            <param name="height2">Height of the 2. image. Default: 512</param>
            <param name="subSampling">Subsampling factor. Default: 1</param>
            <param name="mapping">Type of mapping. Default: "no_map"</param>
            <param name="covFMatRect">9x9 covariance matrix of the rectified fundamental matrix.</param>
            <param name="h1">Projective transformation of the 1. image.</param>
            <param name="h2">Projective transformation of the 2. image.</param>
            <returns>Image coding the rectification of the 1. image.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.GenBinocularProjRectification(HalconDotNet.HImage@,HalconDotNet.HTuple,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,HalconDotNet.HTuple@,HalconDotNet.HHomMat2D@,HalconDotNet.HHomMat2D@)">
            <summary>
              Compute the projective rectification of weakly calibrated binocular stereo images.
              Instance represents: Fundamental matrix.
            </summary>
            <param name="map2">Image coding the rectification of the 2. image.</param>
            <param name="covFMat">9x9 covariance matrix of the fundamental matrix. Default: []</param>
            <param name="width1">Width of the 1. image. Default: 512</param>
            <param name="height1">Height of the 1. image. Default: 512</param>
            <param name="width2">Width of the 2. image. Default: 512</param>
            <param name="height2">Height of the 2. image. Default: 512</param>
            <param name="subSampling">Subsampling factor. Default: 1</param>
            <param name="mapping">Type of mapping. Default: "no_map"</param>
            <param name="covFMatRect">9x9 covariance matrix of the rectified fundamental matrix.</param>
            <param name="h1">Projective transformation of the 1. image.</param>
            <param name="h2">Projective transformation of the 2. image.</param>
            <returns>Image coding the rectification of the 1. image.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.VectorToFundamentalMatrixDistortion(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,System.String,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the fundamental matrix and the radial distortion coefficient given a set of image point correspondences and reconstruct 3D points.
              Modified instance represents: Computed fundamental matrix.
            </summary>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="covRR1">Row coordinate variance of the points in image 1. Default: []</param>
            <param name="covRC1">Covariance of the points in image 1. Default: []</param>
            <param name="covCC1">Column coordinate variance of the points in image 1. Default: []</param>
            <param name="covRR2">Row coordinate variance of the points in image 2. Default: []</param>
            <param name="covRC2">Covariance of the points in image 2. Default: []</param>
            <param name="covCC2">Column coordinate variance of the points in image 2. Default: []</param>
            <param name="imageWidth">Width of the images from which the points were extracted.</param>
            <param name="imageHeight">Height of the images from which the points were extracted.</param>
            <param name="method">Estimation algorithm. Default: "gold_standard"</param>
            <param name="error">Root-Mean-Square epipolar distance error.</param>
            <param name="x">X coordinates of the reconstructed points in projective 3D space.</param>
            <param name="y">Y coordinates of the reconstructed points in projective 3D space.</param>
            <param name="z">Z coordinates of the reconstructed points in projective 3D space.</param>
            <param name="w">W coordinates of the reconstructed points in projective 3D space.</param>
            <returns>Computed radial distortion coefficient.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.RelPoseToFundamentalMatrix(HalconDotNet.HPose,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Compute the fundamental matrix from the relative orientation of two cameras.
              Modified instance represents: Computed fundamental matrix.
            </summary>
            <param name="relPose">Relative orientation of the cameras (3D pose).</param>
            <param name="covRelPose">6x6 covariance matrix of relative pose. Default: []</param>
            <param name="camPar1">Parameters of the 1. camera.</param>
            <param name="camPar2">Parameters of the 2. camera.</param>
            <returns>9x9 covariance matrix of the fundamental matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.EssentialToFundamentalMatrix(HalconDotNet.HTuple,HalconDotNet.HHomMat2D,HalconDotNet.HHomMat2D,HalconDotNet.HTuple@)">
            <summary>
              Compute the fundamental matrix from an essential matrix.
              Instance represents: Essential matrix.
            </summary>
            <param name="covEMat">9x9 covariance matrix of the essential matrix. Default: []</param>
            <param name="camMat1">Camera matrix of the 1. camera.</param>
            <param name="camMat2">Camera matrix of the 2. camera.</param>
            <param name="covFMat">9x9 covariance matrix of the fundamental matrix.</param>
            <returns>Computed fundamental matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.VectorToEssentialMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HHomMat2D,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the essential matrix given image point correspondences and known camera matrices and reconstruct 3D points.
              Instance represents: Camera matrix of the 1st camera.
            </summary>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="covRR1">Row coordinate variance of the points in image 1. Default: []</param>
            <param name="covRC1">Covariance of the points in image 1. Default: []</param>
            <param name="covCC1">Column coordinate variance of the points in image 1. Default: []</param>
            <param name="covRR2">Row coordinate variance of the points in image 2. Default: []</param>
            <param name="covRC2">Covariance of the points in image 2. Default: []</param>
            <param name="covCC2">Column coordinate variance of the points in image 2. Default: []</param>
            <param name="camMat2">Camera matrix of the 2nd camera.</param>
            <param name="method">Algorithm for the computation of the essential matrix and for special camera orientations. Default: "normalized_dlt"</param>
            <param name="covEMat">9x9 covariance matrix of the essential matrix.</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="x">X coordinates of the reconstructed 3D points.</param>
            <param name="y">Y coordinates of the reconstructed 3D points.</param>
            <param name="z">Z coordinates of the reconstructed 3D points.</param>
            <param name="covXYZ">Covariance matrices of the reconstructed 3D points.</param>
            <returns>Computed essential matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.VectorToEssentialMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HHomMat2D,System.String,HalconDotNet.HTuple@,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the essential matrix given image point correspondences and known camera matrices and reconstruct 3D points.
              Instance represents: Camera matrix of the 1st camera.
            </summary>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="covRR1">Row coordinate variance of the points in image 1. Default: []</param>
            <param name="covRC1">Covariance of the points in image 1. Default: []</param>
            <param name="covCC1">Column coordinate variance of the points in image 1. Default: []</param>
            <param name="covRR2">Row coordinate variance of the points in image 2. Default: []</param>
            <param name="covRC2">Covariance of the points in image 2. Default: []</param>
            <param name="covCC2">Column coordinate variance of the points in image 2. Default: []</param>
            <param name="camMat2">Camera matrix of the 2nd camera.</param>
            <param name="method">Algorithm for the computation of the essential matrix and for special camera orientations. Default: "normalized_dlt"</param>
            <param name="covEMat">9x9 covariance matrix of the essential matrix.</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="x">X coordinates of the reconstructed 3D points.</param>
            <param name="y">Y coordinates of the reconstructed 3D points.</param>
            <param name="z">Z coordinates of the reconstructed 3D points.</param>
            <param name="covXYZ">Covariance matrices of the reconstructed 3D points.</param>
            <returns>Computed essential matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.VectorToFundamentalMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the fundamental matrix given a set of image point correspondences and reconstruct 3D points.
              Modified instance represents: Computed fundamental matrix.
            </summary>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="covRR1">Row coordinate variance of the points in image 1. Default: []</param>
            <param name="covRC1">Covariance of the points in image 1. Default: []</param>
            <param name="covCC1">Column coordinate variance of the points in image 1. Default: []</param>
            <param name="covRR2">Row coordinate variance of the points in image 2. Default: []</param>
            <param name="covRC2">Covariance of the points in image 2. Default: []</param>
            <param name="covCC2">Column coordinate variance of the points in image 2. Default: []</param>
            <param name="method">Estimation algorithm. Default: "normalized_dlt"</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="x">X coordinates of the reconstructed points in projective 3D space.</param>
            <param name="y">Y coordinates of the reconstructed points in projective 3D space.</param>
            <param name="z">Z coordinates of the reconstructed points in projective 3D space.</param>
            <param name="w">W coordinates of the reconstructed points in projective 3D space.</param>
            <param name="covXYZW">Covariance matrices of the reconstructed 3D points.</param>
            <returns>9x9 covariance matrix of the fundamental matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.MatchFundamentalMatrixDistortionRansac(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,System.Int32,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the fundamental matrix and the radial distortion coefficient for a pair of stereo images by automatically finding correspondences between image points.
              Modified instance represents: Computed fundamental matrix.
            </summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="grayMatchMethod">Gray value match metric. Default: "ncc"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate offset of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate offset of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative rotation of the second image with respect to the first image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 0.7</param>
            <param name="estimationMethod">Algorithm for the computation of the fundamental matrix and for special camera orientations. Default: "gold_standard"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="error">Root-Mean-Square epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed radial distortion coefficient.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.MatchFundamentalMatrixDistortionRansac(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.String,System.Double,System.Int32,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the fundamental matrix and the radial distortion coefficient for a pair of stereo images by automatically finding correspondences between image points.
              Modified instance represents: Computed fundamental matrix.
            </summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="grayMatchMethod">Gray value match metric. Default: "ncc"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate offset of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate offset of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative rotation of the second image with respect to the first image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 0.7</param>
            <param name="estimationMethod">Algorithm for the computation of the fundamental matrix and for special camera orientations. Default: "gold_standard"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="error">Root-Mean-Square epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed radial distortion coefficient.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.MatchEssentialMatrixRansac(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HHomMat2D,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the essential matrix for a pair of stereo images by automatically finding correspondences between image points.
              Instance represents: Camera matrix of the 1st camera.
            </summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="camMat2">Camera matrix of the 2nd camera.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate shift of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative orientation of the right image with respect to the left image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Algorithm for the computation of the essential matrix and for special camera orientations. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="covEMat">9x9 covariance matrix of the essential matrix.</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed essential matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.MatchEssentialMatrixRansac(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HHomMat2D,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.String,System.Double,System.Int32,HalconDotNet.HTuple@,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the essential matrix for a pair of stereo images by automatically finding correspondences between image points.
              Instance represents: Camera matrix of the 1st camera.
            </summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="camMat2">Camera matrix of the 2nd camera.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate shift of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative orientation of the right image with respect to the left image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Algorithm for the computation of the essential matrix and for special camera orientations. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="covEMat">9x9 covariance matrix of the essential matrix.</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed essential matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.MatchFundamentalMatrixRansac(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,System.Int32,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the fundamental matrix for a pair of stereo images by automatically finding correspondences between image points.
              Modified instance represents: Computed fundamental matrix.
            </summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate shift of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative orientation of the right image with respect to the left image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Algorithm for the computation of the fundamental matrix and for special camera orientations. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>9x9 covariance matrix of the fundamental matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.MatchFundamentalMatrixRansac(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.String,System.Double,System.Int32,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the fundamental matrix for a pair of stereo images by automatically finding correspondences between image points.
              Modified instance represents: Computed fundamental matrix.
            </summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate shift of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative orientation of the right image with respect to the left image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Algorithm for the computation of the fundamental matrix and for special camera orientations. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>9x9 covariance matrix of the fundamental matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.ProjectiveTransRegion(HalconDotNet.HRegion,System.String)">
            <summary>
              Apply a projective transformation to a region.
              Instance represents: Homogeneous projective transformation matrix.
            </summary>
            <param name="regions">Input regions.</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "bilinear"</param>
            <returns>Output regions.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.AffineTransRegion(HalconDotNet.HRegion,System.String)">
            <summary>
              Apply an arbitrary affine 2D transformation to regions.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="region">Region(s) to be rotated and scaled.</param>
            <param name="interpolate">Should the transformation be done using interpolation? Default: "nearest_neighbor"</param>
            <returns>Transformed output region(s).</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.ProjectiveTransImageSize(HalconDotNet.HImage,System.String,System.Int32,System.Int32,System.String)">
            <summary>
              Apply a projective transformation to an image and specify the output image size.
              Instance represents: Homogeneous projective transformation matrix.
            </summary>
            <param name="image">Input image.</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "bilinear"</param>
            <param name="width">Output image width.</param>
            <param name="height">Output image height.</param>
            <param name="transformDomain">Should the domain of the input image also be transformed? Default: "false"</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.ProjectiveTransImage(HalconDotNet.HImage,System.String,System.String,System.String)">
            <summary>
              Apply a projective transformation to an image.
              Instance represents: Homogeneous projective transformation matrix.
            </summary>
            <param name="image">Input image.</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "bilinear"</param>
            <param name="adaptImageSize">Adapt the size of the output image automatically? Default: "false"</param>
            <param name="transformDomain">Should the domain of the input image also be transformed? Default: "false"</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.AffineTransImageSize(HalconDotNet.HImage,System.String,System.Int32,System.Int32)">
            <summary>
              Apply an arbitrary affine 2D transformation to an image and specify the output image size.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="image">Input image.</param>
            <param name="interpolation">Type of interpolation. Default: "constant"</param>
            <param name="width">Width of the output image. Default: 640</param>
            <param name="height">Height of the output image. Default: 480</param>
            <returns>Transformed image.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.AffineTransImage(HalconDotNet.HImage,System.String,System.String)">
            <summary>
              Apply an arbitrary affine 2D transformation to images.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="image">Input image.</param>
            <param name="interpolation">Type of interpolation. Default: "constant"</param>
            <param name="adaptImageSize">Adaption of size of result image. Default: "false"</param>
            <returns>Transformed image.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.VectorFieldToHomMat2d(HalconDotNet.HImage)">
            <summary>
              Approximate an affine map from a displacement vector field.
              Modified instance represents: Output transformation matrix.
            </summary>
            <param name="vectorField">Input image.</param>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.CamParToCamMat(HalconDotNet.HTuple,System.Int32@,System.Int32@)">
            <summary>
              Compute a camera matrix from internal camera parameters.
              Modified instance represents: 3x3 projective camera matrix that corresponds to CameraParam.
            </summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="imageWidth">Width of the images that correspond to CameraMatrix.</param>
            <param name="imageHeight">Height of the images that correspond to CameraMatrix.</param>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.CamMatToCamPar(System.Double,System.Int32,System.Int32)">
            <summary>
              Compute the internal camera parameters from a camera matrix.
              Instance represents: 3x3 projective camera matrix that determines the internal camera parameters.
            </summary>
            <param name="kappa">Kappa.</param>
            <param name="imageWidth">Width of the images that correspond to CameraMatrix.</param>
            <param name="imageHeight">Height of the images that correspond to CameraMatrix.</param>
            <returns>Internal camera parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.StationaryCameraSelfCalibration(System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HHomMat2D[],HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple@,HalconDotNet.HHomMat2D[]@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Perform a self-calibration of a stationary projective camera.</summary>
            <param name="numImages">Number of different images that are used for the calibration.</param>
            <param name="imageWidth">Width of the images from which the points were extracted.</param>
            <param name="imageHeight">Height of the images from which the points were extracted.</param>
            <param name="referenceImage">Index of the reference image.</param>
            <param name="mappingSource">Indices of the source images of the transformations.</param>
            <param name="mappingDest">Indices of the target images of the transformations.</param>
            <param name="homMatrices2D">Array of 3x3 projective transformation matrices.</param>
            <param name="rows1">Row coordinates of corresponding points in the respective source images.</param>
            <param name="cols1">Column coordinates of corresponding points in the respective source images.</param>
            <param name="rows2">Row coordinates of corresponding points in the respective destination images.</param>
            <param name="cols2">Column coordinates of corresponding points in the respective destination images.</param>
            <param name="numCorrespondences">Number of point correspondences in the respective image pair.</param>
            <param name="estimationMethod">Estimation algorithm for the calibration. Default: "gold_standard"</param>
            <param name="cameraModel">Camera model to be used. Default: ["focus","principal_point"]</param>
            <param name="fixedCameraParams">Are the camera parameters identical for all images? Default: "true"</param>
            <param name="kappa">Radial distortion of the camera.</param>
            <param name="rotationMatrices">Array of 3x3 transformation matrices that determine rotation of the camera in the respective image.</param>
            <param name="x">X-Component of the direction vector of each point if EstimationMethod $=$ 'gold_standard' is used.</param>
            <param name="y">Y-Component of the direction vector of each point if EstimationMethod $=$ 'gold_standard' is used.</param>
            <param name="z">Z-Component of the direction vector of each point if EstimationMethod $=$ 'gold_standard' is used.</param>
            <param name="error">Average error per reconstructed point if EstimationMethod $=$ 'gold_standard' is used.</param>
            <returns>(Array of) 3x3 projective camera matrices that determine the internal camera parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat2D.StationaryCameraSelfCalibration(System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HHomMat2D[],HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,System.String,System.Double@,HalconDotNet.HHomMat2D[]@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,System.Double@)">
            <summary>Perform a self-calibration of a stationary projective camera.</summary>
            <param name="numImages">Number of different images that are used for the calibration.</param>
            <param name="imageWidth">Width of the images from which the points were extracted.</param>
            <param name="imageHeight">Height of the images from which the points were extracted.</param>
            <param name="referenceImage">Index of the reference image.</param>
            <param name="mappingSource">Indices of the source images of the transformations.</param>
            <param name="mappingDest">Indices of the target images of the transformations.</param>
            <param name="homMatrices2D">Array of 3x3 projective transformation matrices.</param>
            <param name="rows1">Row coordinates of corresponding points in the respective source images.</param>
            <param name="cols1">Column coordinates of corresponding points in the respective source images.</param>
            <param name="rows2">Row coordinates of corresponding points in the respective destination images.</param>
            <param name="cols2">Column coordinates of corresponding points in the respective destination images.</param>
            <param name="numCorrespondences">Number of point correspondences in the respective image pair.</param>
            <param name="estimationMethod">Estimation algorithm for the calibration. Default: "gold_standard"</param>
            <param name="cameraModel">Camera model to be used. Default: ["focus","principal_point"]</param>
            <param name="fixedCameraParams">Are the camera parameters identical for all images? Default: "true"</param>
            <param name="kappa">Radial distortion of the camera.</param>
            <param name="rotationMatrices">Array of 3x3 transformation matrices that determine rotation of the camera in the respective image.</param>
            <param name="x">X-Component of the direction vector of each point if EstimationMethod $=$ 'gold_standard' is used.</param>
            <param name="y">Y-Component of the direction vector of each point if EstimationMethod $=$ 'gold_standard' is used.</param>
            <param name="z">Z-Component of the direction vector of each point if EstimationMethod $=$ 'gold_standard' is used.</param>
            <param name="error">Average error per reconstructed point if EstimationMethod $=$ 'gold_standard' is used.</param>
            <returns>(Array of) 3x3 projective camera matrices that determine the internal camera parameters.</returns>
        </member>
        <member name="T:HalconDotNet.HSurfaceModel">
            <summary>Represents an instance of a surface model.</summary>
        </member>
        <member name="M:HalconDotNet.HSurfaceModel.#ctor(System.String)">
            <summary>
              Read a surface model from a file.
              Modified instance represents: Handle of the read surface model.
            </summary>
            <param name="fileName">Name of the SFM file.</param>
        </member>
        <member name="M:HalconDotNet.HSurfaceModel.#ctor(HalconDotNet.HObjectModel3D,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create the data structure needed to perform surface-based matching.
              Modified instance represents: Handle of the surface model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="relSamplingDistance">Sampling distance relative to the object's diameter Default: 0.03</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HSurfaceModel.#ctor(HalconDotNet.HObjectModel3D,System.Double,System.String,System.String)">
            <summary>
              Create the data structure needed to perform surface-based matching.
              Modified instance represents: Handle of the surface model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="relSamplingDistance">Sampling distance relative to the object's diameter Default: 0.03</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HSurfaceModel.ClearAllSurfaceModels">
            <summary>Free the memory of all surface models.</summary>
        </member>
        <member name="M:HalconDotNet.HSurfaceModel.DeserializeSurfaceModel(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a surface model.
              Modified instance represents: Handle of the surface model.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HSurfaceModel.SerializeSurfaceModel">
            <summary>
              Serialize a surface_model.
              Instance represents: Handle of the surface model.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HSurfaceModel.ReadSurfaceModel(System.String)">
            <summary>
              Read a surface model from a file.
              Modified instance represents: Handle of the read surface model.
            </summary>
            <param name="fileName">Name of the SFM file.</param>
        </member>
        <member name="M:HalconDotNet.HSurfaceModel.WriteSurfaceModel(System.String)">
            <summary>
              Write a surface model to a file.
              Instance represents: Handle of the surface model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HSurfaceModel.RefineSurfaceModelPose(HalconDotNet.HObjectModel3D,HalconDotNet.HPose[],HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HSurfaceMatchingResult[]@)">
            <summary>
              Refine the pose of a surface model in a 3D scene.
              Instance represents: Handle of the surface model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="initialPose">Initial pose of the surface model in the scene.</param>
            <param name="minScore">Minimum score of the returned poses. Default: 0</param>
            <param name="returnResultHandle">Enable returning a result handle in SurfaceMatchingResultID. Default: "false"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="score">Score of the found instances of the model.</param>
            <param name="surfaceMatchingResultID">Handle of the matching result, if enabled in ReturnResultHandle.</param>
            <returns>3D pose of the surface model in the scene.</returns>
        </member>
        <member name="M:HalconDotNet.HSurfaceModel.RefineSurfaceModelPose(HalconDotNet.HObjectModel3D,HalconDotNet.HPose,System.Double,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HSurfaceMatchingResult@)">
            <summary>
              Refine the pose of a surface model in a 3D scene.
              Instance represents: Handle of the surface model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="initialPose">Initial pose of the surface model in the scene.</param>
            <param name="minScore">Minimum score of the returned poses. Default: 0</param>
            <param name="returnResultHandle">Enable returning a result handle in SurfaceMatchingResultID. Default: "false"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="score">Score of the found instances of the model.</param>
            <param name="surfaceMatchingResultID">Handle of the matching result, if enabled in ReturnResultHandle.</param>
            <returns>3D pose of the surface model in the scene.</returns>
        </member>
        <member name="M:HalconDotNet.HSurfaceModel.FindSurfaceModel(HalconDotNet.HObjectModel3D,System.Double,System.Double,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HSurfaceMatchingResult[]@)">
            <summary>
              Find the best matches of a surface model in a 3D scene.
              Instance represents: Handle of the surface model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="relSamplingDistance">Scene sampling distance relative to the diameter of the surface model. Default: 0.05</param>
            <param name="keyPointFraction">Fraction of sampled scene points used as key points. Default: 0.2</param>
            <param name="minScore">Minimum score of the returned poses. Default: 0</param>
            <param name="returnResultHandle">Enable returning a result handle in SurfaceMatchingResultID. Default: "false"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="score">Score of the found instances of the surface model.</param>
            <param name="surfaceMatchingResultID">Handle of the matching result, if enabled in ReturnResultHandle.</param>
            <returns>3D pose of the surface model in the scene.</returns>
        </member>
        <member name="M:HalconDotNet.HSurfaceModel.FindSurfaceModel(HalconDotNet.HObjectModel3D,System.Double,System.Double,System.Double,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HSurfaceMatchingResult@)">
            <summary>
              Find the best matches of a surface model in a 3D scene.
              Instance represents: Handle of the surface model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="relSamplingDistance">Scene sampling distance relative to the diameter of the surface model. Default: 0.05</param>
            <param name="keyPointFraction">Fraction of sampled scene points used as key points. Default: 0.2</param>
            <param name="minScore">Minimum score of the returned poses. Default: 0</param>
            <param name="returnResultHandle">Enable returning a result handle in SurfaceMatchingResultID. Default: "false"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="score">Score of the found instances of the surface model.</param>
            <param name="surfaceMatchingResultID">Handle of the matching result, if enabled in ReturnResultHandle.</param>
            <returns>3D pose of the surface model in the scene.</returns>
        </member>
        <member name="M:HalconDotNet.HSurfaceModel.GetSurfaceModelParam(HalconDotNet.HTuple)">
            <summary>
              Return the parameters and properties of a surface model.
              Instance represents: Handle of the surface model.
            </summary>
            <param name="paramName">Name of the parameter. Default: "diameter"</param>
            <returns>Value of the parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HSurfaceModel.GetSurfaceModelParam(System.String)">
            <summary>
              Return the parameters and properties of a surface model.
              Instance represents: Handle of the surface model.
            </summary>
            <param name="paramName">Name of the parameter. Default: "diameter"</param>
            <returns>Value of the parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HSurfaceModel.CreateSurfaceModel(HalconDotNet.HObjectModel3D,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create the data structure needed to perform surface-based matching.
              Modified instance represents: Handle of the surface model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="relSamplingDistance">Sampling distance relative to the object's diameter Default: 0.03</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HSurfaceModel.CreateSurfaceModel(HalconDotNet.HObjectModel3D,System.Double,System.String,System.String)">
            <summary>
              Create the data structure needed to perform surface-based matching.
              Modified instance represents: Handle of the surface model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="relSamplingDistance">Sampling distance relative to the object's diameter Default: 0.03</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="T:HalconDotNet.HMessageQueue">
            <summary>Represents an instance of a message queue for inter-thread communication.</summary>
        </member>
        <member name="M:HalconDotNet.HMessageQueue.#ctor">
            <summary>
              Create a new empty message queue.
              Modified instance represents: Handle of the newly created message queue.
            </summary>
        </member>
        <member name="M:HalconDotNet.HMessageQueue.GetMessageQueueParam(HalconDotNet.HTuple)">
            <summary>
              Query message queue parameters or information about the queue.
              Instance represents: Message queue handle.
            </summary>
            <param name="genParamName">Names of the queue parameters or info queries. Default: "max_message_num"</param>
            <returns>Values of the queue parameters or info queries.</returns>
        </member>
        <member name="M:HalconDotNet.HMessageQueue.GetMessageQueueParam(System.String)">
            <summary>
              Query message queue parameters or information about the queue.
              Instance represents: Message queue handle.
            </summary>
            <param name="genParamName">Names of the queue parameters or info queries. Default: "max_message_num"</param>
            <returns>Values of the queue parameters or info queries.</returns>
        </member>
        <member name="M:HalconDotNet.HMessageQueue.SetMessageQueueParam(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set message queue parameters or invokes commands on the queue.
              Instance represents: Message queue handle.
            </summary>
            <param name="genParamName">Names of the queue parameters or action commands. Default: "max_message_num"</param>
            <param name="genParamValue">Values of the queue parameters or action commands. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HMessageQueue.SetMessageQueueParam(System.String,HalconDotNet.HTuple)">
            <summary>
              Set message queue parameters or invokes commands on the queue.
              Instance represents: Message queue handle.
            </summary>
            <param name="genParamName">Names of the queue parameters or action commands. Default: "max_message_num"</param>
            <param name="genParamValue">Values of the queue parameters or action commands. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HMessageQueue.DequeueMessage(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Receive one or more messages from the message queue.
              Instance represents: Message queue handle.
            </summary>
            <param name="genParamName">Names of optional generic parameters Default: "timeout"</param>
            <param name="genParamValue">Values of optional generic parameters Default: "infinite"</param>
            <returns>Handle(s) of the dequeued message(s).</returns>
        </member>
        <member name="M:HalconDotNet.HMessageQueue.DequeueMessage(System.String,HalconDotNet.HTuple)">
            <summary>
              Receive one or more messages from the message queue.
              Instance represents: Message queue handle.
            </summary>
            <param name="genParamName">Names of optional generic parameters Default: "timeout"</param>
            <param name="genParamValue">Values of optional generic parameters Default: "infinite"</param>
            <returns>Handle(s) of the dequeued message(s).</returns>
        </member>
        <member name="M:HalconDotNet.HMessageQueue.EnqueueMessage(HalconDotNet.HMessage[],HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Enqueue one or more messages to the message queue.
              Instance represents: Message queue handle.
            </summary>
            <param name="messageHandle">Handle(s) of message(s) to be enqueued.</param>
            <param name="genParamName">Names of optional generic parameters.</param>
            <param name="genParamValue">Values of optional generic parameters.</param>
        </member>
        <member name="M:HalconDotNet.HMessageQueue.EnqueueMessage(HalconDotNet.HMessage,System.String,HalconDotNet.HTuple)">
            <summary>
              Enqueue one or more messages to the message queue.
              Instance represents: Message queue handle.
            </summary>
            <param name="messageHandle">Handle(s) of message(s) to be enqueued.</param>
            <param name="genParamName">Names of optional generic parameters.</param>
            <param name="genParamValue">Values of optional generic parameters.</param>
        </member>
        <member name="M:HalconDotNet.HMessageQueue.CreateMessageQueue">
            <summary>
              Create a new empty message queue.
              Modified instance represents: Handle of the newly created message queue.
            </summary>
        </member>
        <member name="T:HalconDotNet.HScatteredDataInterpolator">
            <summary>Represents an instance of a scattered data interpolator.</summary>
        </member>
        <member name="M:HalconDotNet.HScatteredDataInterpolator.#ctor(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Creates an interpolator for the interpolation of scattered data.
              Modified instance represents: Handle of the scattered data interpolator
            </summary>
            <param name="method">Method for the interpolation Default: "thin_plate_splines"</param>
            <param name="rows">Row coordinates of the points used  for the interpolation</param>
            <param name="columns">Column coordinates of the points used  for the interpolation</param>
            <param name="values">Values of the points used  for the interpolation</param>
            <param name="genParamNames">Names of the generic parameters  that can be adjusted Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted Default: []</param>
        </member>
        <member name="M:HalconDotNet.HScatteredDataInterpolator.InterpolateScatteredData(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Interpolation of scattered data using a scattered data interpolator.
              Instance represents: Handle of the scattered data interpolator
            </summary>
            <param name="row">Row coordinates of points  to be interpolated</param>
            <param name="column">Column coordinates of points  to be interpolated</param>
            <returns>Values of interpolated points</returns>
        </member>
        <member name="M:HalconDotNet.HScatteredDataInterpolator.InterpolateScatteredData(System.Double,System.Double)">
            <summary>
              Interpolation of scattered data using a scattered data interpolator.
              Instance represents: Handle of the scattered data interpolator
            </summary>
            <param name="row">Row coordinates of points  to be interpolated</param>
            <param name="column">Column coordinates of points  to be interpolated</param>
            <returns>Values of interpolated points</returns>
        </member>
        <member name="M:HalconDotNet.HScatteredDataInterpolator.CreateScatteredDataInterpolator(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Creates an interpolator for the interpolation of scattered data.
              Modified instance represents: Handle of the scattered data interpolator
            </summary>
            <param name="method">Method for the interpolation Default: "thin_plate_splines"</param>
            <param name="rows">Row coordinates of the points used  for the interpolation</param>
            <param name="columns">Column coordinates of the points used  for the interpolation</param>
            <param name="values">Values of the points used  for the interpolation</param>
            <param name="genParamNames">Names of the generic parameters  that can be adjusted Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted Default: []</param>
        </member>
        <member name="T:HalconDotNet.HSheetOfLightModel">
            <summary>Represents an instance of the data structure required to perform 3D measurements with the sheet-of-light technique.</summary>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.#ctor(System.String)">
            <summary>
              Read a sheet-of-light model from a file and create a new model.
              Modified instance represents: Handle of the sheet-of-light model.
            </summary>
            <param name="fileName">Name of the sheet-of-light model file. Default: "sheet_of_light_model.solm"</param>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.#ctor(HalconDotNet.HRegion,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a model to perform 3D-measurements using the sheet-of-light technique.
              Modified instance represents: Handle for using and accessing the sheet-of-light model.
            </summary>
            <param name="profileRegion">Region of the images containing the profiles to be processed. If the provided region is not rectangular, its smallest enclosing rectangle will be used.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the sheet-of-light model. Default: "min_gray"</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the sheet-of-light model. Default: 50</param>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.#ctor(HalconDotNet.HRegion,System.String,System.Int32)">
            <summary>
              Create a model to perform 3D-measurements using the sheet-of-light technique.
              Modified instance represents: Handle for using and accessing the sheet-of-light model.
            </summary>
            <param name="profileRegion">Region of the images containing the profiles to be processed. If the provided region is not rectangular, its smallest enclosing rectangle will be used.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the sheet-of-light model. Default: "min_gray"</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the sheet-of-light model. Default: 50</param>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.ReadSheetOfLightModel(System.String)">
            <summary>
              Read a sheet-of-light model from a file and create a new model.
              Modified instance represents: Handle of the sheet-of-light model.
            </summary>
            <param name="fileName">Name of the sheet-of-light model file. Default: "sheet_of_light_model.solm"</param>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.WriteSheetOfLightModel(System.String)">
            <summary>
              Write a sheet-of-light model to a file.
              Instance represents: Handle of the sheet-of-light model.
            </summary>
            <param name="fileName">Name of the sheet-of-light model file. Default: "sheet_of_light_model.solm"</param>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.DeserializeSheetOfLightModel(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a sheet-of-light model.
              Modified instance represents: Handle of the sheet-of-light model.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.SerializeSheetOfLightModel">
            <summary>
              Serialize a sheet-of-light model.
              Instance represents: Handle of the sheet-of-light model.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.CalibrateSheetOfLight">
            <summary>
              Calibrate a sheet-of-light setup with a 3D calibration object.
              Instance represents: Handle of the sheet-of-light model.
            </summary>
            <returns>Average back projection error of the optimization.</returns>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.GetSheetOfLightResultObjectModel3d">
            <summary>
              Get the result of a calibrated measurement performed with the  sheet-of-light technique as a 3D object model.
              Instance represents: Handle for accessing the sheet-of-light model.
            </summary>
            <returns>Handle of the resulting 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.GetSheetOfLightResult(HalconDotNet.HTuple)">
            <summary>
              Get the iconic results of a measurement performed with the sheet-of light technique.
              Instance represents: Handle of the sheet-of-light model to be used.
            </summary>
            <param name="resultName">Specify which result of the measurement shall be provided. Default: "disparity"</param>
            <returns>Desired measurement result.</returns>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.GetSheetOfLightResult(System.String)">
            <summary>
              Get the iconic results of a measurement performed with the sheet-of light technique.
              Instance represents: Handle of the sheet-of-light model to be used.
            </summary>
            <param name="resultName">Specify which result of the measurement shall be provided. Default: "disparity"</param>
            <returns>Desired measurement result.</returns>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.ApplySheetOfLightCalibration(HalconDotNet.HImage)">
            <summary>
              Apply the calibration transformations to the input disparity image.
              Instance represents: Handle of the sheet-of-light model.
            </summary>
            <param name="disparity">Height or range image to be calibrated.</param>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.SetProfileSheetOfLight(HalconDotNet.HImage,HalconDotNet.HTuple)">
            <summary>
              Set sheet of light profiles by measured disparities.
              Instance represents: Handle of the sheet-of-light model.
            </summary>
            <param name="profileDisparityImage">Disparity image that contains several profiles.</param>
            <param name="movementPoses">Poses describing the movement of the scene under measurement between the previously processed profile image and the current profile image.</param>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.MeasureProfileSheetOfLight(HalconDotNet.HImage,HalconDotNet.HTuple)">
            <summary>
              Process the profile image provided as input and store the resulting disparity to the sheet-of-light model.
              Instance represents: Handle of the sheet-of-light model.
            </summary>
            <param name="profileImage">Input image.</param>
            <param name="movementPose">Pose describing the movement of the scene under measurement between the previously processed profile image and the current profile image.</param>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.SetSheetOfLightParam(System.String,HalconDotNet.HTuple)">
            <summary>
              Set selected parameters of the sheet-of-light model.
              Instance represents: Handle of the sheet-of-light model.
            </summary>
            <param name="genParamName">Name of the model parameter that shall be adjusted for the sheet-of-light model. Default: "method"</param>
            <param name="genParamValue">Value of the model parameter that shall be adjusted for the sheet-of-light model. Default: "center_of_gravity"</param>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.SetSheetOfLightParam(System.String,System.String)">
            <summary>
              Set selected parameters of the sheet-of-light model.
              Instance represents: Handle of the sheet-of-light model.
            </summary>
            <param name="genParamName">Name of the model parameter that shall be adjusted for the sheet-of-light model. Default: "method"</param>
            <param name="genParamValue">Value of the model parameter that shall be adjusted for the sheet-of-light model. Default: "center_of_gravity"</param>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.GetSheetOfLightParam(System.String)">
            <summary>
              Get the value of a parameter, which has been set in a sheet-of-light model.
              Instance represents: Handle of the sheet-of-light model.
            </summary>
            <param name="genParamName">Name of the generic parameter that shall be queried. Default: "method"</param>
            <returns>Value of the model parameter that shall be queried.</returns>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.QuerySheetOfLightParams(System.String)">
            <summary>
              For a given sheet-of-light model get the names of the generic iconic or control parameters that can be used in the different sheet-of-light operators.
              Instance represents: Handle of the sheet-of-light model.
            </summary>
            <param name="queryName">Name of the parameter group. Default: "create_model_params"</param>
            <returns>List containing the names of the supported generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.ResetSheetOfLightModel">
            <summary>
              Reset a sheet-of-light model.
              Instance represents: Handle of the sheet-of-light model.
            </summary>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.CreateSheetOfLightModel(HalconDotNet.HRegion,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a model to perform 3D-measurements using the sheet-of-light technique.
              Modified instance represents: Handle for using and accessing the sheet-of-light model.
            </summary>
            <param name="profileRegion">Region of the images containing the profiles to be processed. If the provided region is not rectangular, its smallest enclosing rectangle will be used.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the sheet-of-light model. Default: "min_gray"</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the sheet-of-light model. Default: 50</param>
        </member>
        <member name="M:HalconDotNet.HSheetOfLightModel.CreateSheetOfLightModel(HalconDotNet.HRegion,System.String,System.Int32)">
            <summary>
              Create a model to perform 3D-measurements using the sheet-of-light technique.
              Modified instance represents: Handle for using and accessing the sheet-of-light model.
            </summary>
            <param name="profileRegion">Region of the images containing the profiles to be processed. If the provided region is not rectangular, its smallest enclosing rectangle will be used.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the sheet-of-light model. Default: "min_gray"</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the sheet-of-light model. Default: 50</param>
        </member>
        <member name="T:HalconDotNet.HImage">
            <summary>Represents an instance of an image object(-array).</summary>
        </member>
        <member name="T:HalconDotNet.HObject">
            <summary>Represents an instance of an iconic object(-array). Base class for images, regions and XLDs</summary>
        </member>
        <member name="M:HalconDotNet.HObject.#ctor">
            <summary>Create an uninitialized iconic object</summary>
        </member>
        <member name="M:HalconDotNet.HObject.ObjDiff(HalconDotNet.HObject)">
            <summary>
              Calculate the difference of two object tuples.
              Instance represents: Object tuple 1.
            </summary>
            <param name="objectsSub">Object tuple 2.</param>
            <returns>Objects from Objects that are not part of ObjectsSub.</returns>
        </member>
        <member name="M:HalconDotNet.HObject.IntegerToObj(HalconDotNet.HTuple)">
            <summary>
              Convert an "integer number" into an iconic object.
              Modified instance represents: Created objects.
            </summary>
            <param name="surrogateTuple">Tuple of object surrogates.</param>
        </member>
        <member name="M:HalconDotNet.HObject.IntegerToObj(System.IntPtr)">
            <summary>
              Convert an "integer number" into an iconic object.
              Modified instance represents: Created objects.
            </summary>
            <param name="surrogateTuple">Tuple of object surrogates.</param>
        </member>
        <member name="M:HalconDotNet.HObject.ObjToInteger(System.Int32,System.Int32)">
            <summary>
              Convert an iconic object into an "integer number."
              Instance represents: Objects for which the surrogates are to be returned.
            </summary>
            <param name="index">Starting index of the surrogates to be returned. Default: 1</param>
            <param name="number">Number of surrogates to be returned. Default: -1</param>
            <returns>Tuple containing the surrogates.</returns>
        </member>
        <member name="M:HalconDotNet.HObject.CopyObj(System.Int32,System.Int32)">
            <summary>
              Copy an iconic object in the HALCON database.
              Instance represents: Objects to be copied.
            </summary>
            <param name="index">Starting index of the objects to be copied. Default: 1</param>
            <param name="numObj">Number of objects to be copied or -1. Default: 1</param>
            <returns>Copied objects.</returns>
        </member>
        <member name="M:HalconDotNet.HObject.ConcatObj(HalconDotNet.HObject)">
            <summary>
              Concatenate two iconic object tuples.
              Instance represents: Object tuple 1.
            </summary>
            <param name="objects2">Object tuple 2.</param>
            <returns>Concatenated objects.</returns>
        </member>
        <member name="M:HalconDotNet.HObject.SelectObj(HalconDotNet.HTuple)">
            <summary>
              Select objects from an object tuple.
              Instance represents: Input objects.
            </summary>
            <param name="index">Indices of the objects to be selected. Default: 1</param>
            <returns>Selected objects.</returns>
        </member>
        <member name="M:HalconDotNet.HObject.SelectObj(System.Int32)">
            <summary>
              Select objects from an object tuple.
              Instance represents: Input objects.
            </summary>
            <param name="index">Indices of the objects to be selected. Default: 1</param>
            <returns>Selected objects.</returns>
        </member>
        <member name="M:HalconDotNet.HObject.CompareObj(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>
              Compare iconic objects regarding equality.
              Instance represents: Reference objects.
            </summary>
            <param name="objects2">Test objects.</param>
            <param name="epsilon">Maximum allowed difference between two gray values or  coordinates etc. Default: 0.0</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HObject.CompareObj(HalconDotNet.HObject,System.Double)">
            <summary>
              Compare iconic objects regarding equality.
              Instance represents: Reference objects.
            </summary>
            <param name="objects2">Test objects.</param>
            <param name="epsilon">Maximum allowed difference between two gray values or  coordinates etc. Default: 0.0</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HObject.TestEqualObj(HalconDotNet.HObject)">
            <summary>
              Compare image objects regarding equality.
              Instance represents: Test objects.
            </summary>
            <param name="objects2">Comparative objects.</param>
            <returns>boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HObject.CountObj">
            <summary>
              Number of objects in a tuple.
              Instance represents: Objects to be examined.
            </summary>
            <returns>Number of objects in the tuple Objects.</returns>
        </member>
        <member name="M:HalconDotNet.HObject.GetChannelInfo(System.String,HalconDotNet.HTuple)">
            <summary>
              Informations about the components of an image object.
              Instance represents: Image object to be examined.
            </summary>
            <param name="request">Required information about object components. Default: "creator"</param>
            <param name="channel">Components to be examined (0 for region/XLD). Default: 0</param>
            <returns>Requested information.</returns>
        </member>
        <member name="M:HalconDotNet.HObject.GetChannelInfo(System.String,System.Int32)">
            <summary>
              Informations about the components of an image object.
              Instance represents: Image object to be examined.
            </summary>
            <param name="request">Required information about object components. Default: "creator"</param>
            <param name="channel">Components to be examined (0 for region/XLD). Default: 0</param>
            <returns>Requested information.</returns>
        </member>
        <member name="M:HalconDotNet.HObject.GetObjClass">
            <summary>
              Name of the class of an image object.
              Instance represents: Image objects to be examined.
            </summary>
            <returns>Name of class.</returns>
        </member>
        <member name="M:HalconDotNet.HObject.GenEmptyObj">
            <summary>
              Create an empty object tuple.
              Modified instance represents: No objects.
            </summary>
        </member>
        <member name="M:HalconDotNet.HObject.DispObj(HalconDotNet.HWindow)">
            <summary>
              Displays image objects (image, region, XLD).
              Instance represents: Image object to be displayed.
            </summary>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HObject.ReadObject(System.String)">
            <summary>
              Read an iconic object.
              Modified instance represents: Iconic object.
            </summary>
            <param name="fileName">Name of file.</param>
        </member>
        <member name="M:HalconDotNet.HObject.WriteObject(System.String)">
            <summary>
              Write an iconic object.
              Instance represents: Iconic object.
            </summary>
            <param name="fileName">Name of file.</param>
        </member>
        <member name="M:HalconDotNet.HObject.DeserializeObject(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized iconic object.
              Modified instance represents: Iconic object.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HObject.SerializeObject">
            <summary>
              Serialize an iconic object.
              Instance represents: Iconic object.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="P:HalconDotNet.HObject.Item(HalconDotNet.HTuple)">
            <summary>Returns the iconic object(s) at the specified index</summary>
        </member>
        <member name="M:HalconDotNet.HImage.#ctor">
            <summary>Create an uninitialized iconic object</summary>
        </member>
        <member name="M:HalconDotNet.HImage.#ctor(System.String,System.Int32,System.Int32,System.IntPtr)">
            <summary>
              Create an image from a pointer to the pixels.
              Modified instance represents: Created image with new image matrix.
            </summary>
            <param name="type">Pixel type. Default: "byte"</param>
            <param name="width">Width of image. Default: 512</param>
            <param name="height">Height of image. Default: 512</param>
            <param name="pixelPointer">Pointer to first gray value.</param>
        </member>
        <member name="M:HalconDotNet.HImage.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
              Create an image with constant gray value.
              Modified instance represents: Created image with new image matrix.
            </summary>
            <param name="type">Pixel type. Default: "byte"</param>
            <param name="width">Width of image. Default: 512</param>
            <param name="height">Height of image. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HImage.#ctor(HalconDotNet.HTuple)">
            <summary>
              Read an image with different file formats.
              Modified instance represents: Read image.
            </summary>
            <param name="fileName">Name of the image to be read. Default: "fabrik"</param>
        </member>
        <member name="M:HalconDotNet.HImage.#ctor(System.String)">
            <summary>
              Read an image with different file formats.
              Modified instance represents: Read image.
            </summary>
            <param name="fileName">Name of the image to be read. Default: "fabrik"</param>
        </member>
        <member name="M:HalconDotNet.HImage.op_UnaryNegation(HalconDotNet.HImage)">
            <summary>Inverts an image</summary>
        </member>
        <member name="M:HalconDotNet.HImage.op_Addition(HalconDotNet.HImage,HalconDotNet.HImage)">
            <summary>Adds two images</summary>
        </member>
        <member name="M:HalconDotNet.HImage.op_Subtraction(HalconDotNet.HImage,HalconDotNet.HImage)">
            <summary>Subtracts image2 from image1</summary>
        </member>
        <member name="M:HalconDotNet.HImage.op_Multiply(HalconDotNet.HImage,HalconDotNet.HImage)">
            <summary>Multiplies two images</summary>
        </member>
        <member name="M:HalconDotNet.HImage.op_Addition(HalconDotNet.HImage,System.Double)">
            <summary>Adds a constant gray value offset</summary>
        </member>
        <member name="M:HalconDotNet.HImage.op_Addition(System.Double,HalconDotNet.HImage)">
            <summary>Adds a constant gray value offset</summary>
        </member>
        <member name="M:HalconDotNet.HImage.op_Subtraction(HalconDotNet.HImage,System.Double)">
            <summary>Subtracts a constant gray value offset</summary>
        </member>
        <member name="M:HalconDotNet.HImage.op_Multiply(HalconDotNet.HImage,System.Double)">
            <summary>Scales an image by the specified factor</summary>
        </member>
        <member name="M:HalconDotNet.HImage.op_Multiply(System.Double,HalconDotNet.HImage)">
            <summary>Scales an image by the specified factor</summary>
        </member>
        <member name="M:HalconDotNet.HImage.op_Division(HalconDotNet.HImage,System.Double)">
            <summary>Scales an image by the specified divisor</summary>
        </member>
        <member name="M:HalconDotNet.HImage.op_GreaterThanOrEqual(HalconDotNet.HImage,HalconDotNet.HImage)">
            <summary>Segment image using dynamic threshold</summary>
        </member>
        <member name="M:HalconDotNet.HImage.op_LessThanOrEqual(HalconDotNet.HImage,HalconDotNet.HImage)">
            <summary>Segment image using dynamic threshold</summary>
        </member>
        <member name="M:HalconDotNet.HImage.op_GreaterThanOrEqual(HalconDotNet.HImage,System.Double)">
            <summary>Segment image using constant threshold</summary>
        </member>
        <member name="M:HalconDotNet.HImage.op_LessThanOrEqual(HalconDotNet.HImage,System.Double)">
            <summary>Segment image using constant threshold</summary>
        </member>
        <member name="M:HalconDotNet.HImage.op_GreaterThanOrEqual(System.Double,HalconDotNet.HImage)">
            <summary>Segment image using constant threshold</summary>
        </member>
        <member name="M:HalconDotNet.HImage.op_LessThanOrEqual(System.Double,HalconDotNet.HImage)">
            <summary>Segment image using constant threshold</summary>
        </member>
        <member name="M:HalconDotNet.HImage.op_BitwiseAnd(HalconDotNet.HImage,HalconDotNet.HRegion)">
            <summary>Reduces the domain of an image</summary>
        </member>
        <member name="M:HalconDotNet.HImage.op_Implicit(HalconDotNet.HImage)~HalconDotNet.HRegion">
            <summary>Returns the domain of an image</summary>
        </member>
        <member name="M:HalconDotNet.HImage.WienerFilterNi(HalconDotNet.HImage,HalconDotNet.HRegion,System.Int32,System.Int32)">
            <summary>
              Image restoration by Wiener filtering.
              Instance represents: Corrupted image.
            </summary>
            <param name="psf">impulse response (PSF) of degradation (in spatial domain).</param>
            <param name="noiseRegion">Region for noise estimation.</param>
            <param name="maskWidth">Width of filter mask. Default: 3</param>
            <param name="maskHeight">Height of filter mask. Default: 3</param>
            <returns>Restored image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.WienerFilter(HalconDotNet.HImage,HalconDotNet.HImage)">
            <summary>
              Image restoration by Wiener filtering.
              Instance represents: Corrupted image.
            </summary>
            <param name="psf">impulse response (PSF) of degradation (in spatial domain).</param>
            <param name="filteredImage">Smoothed version of corrupted image.</param>
            <returns>Restored image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenPsfMotion(System.Int32,System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
              Generate an impulse response of a (linearly) motion blurring.
              Modified instance represents: Impulse response of motion-blur.
            </summary>
            <param name="PSFwidth">Width of impulse response image. Default: 256</param>
            <param name="PSFheight">Height of impulse response image. Default: 256</param>
            <param name="blurring">Degree of motion-blur. Default: 20.0</param>
            <param name="angle">Angle between direction of motion and x-axis (anticlockwise). Default: 0</param>
            <param name="type">PSF prototype resp. type of motion. Default: 3</param>
        </member>
        <member name="M:HalconDotNet.HImage.SimulateMotion(System.Double,System.Int32,System.Int32)">
            <summary>
              Simulation of (linearly) motion blur.
              Instance represents: image to be blurred.
            </summary>
            <param name="blurring">extent of blurring. Default: 20.0</param>
            <param name="angle">Angle between direction of motion and x-axis (anticlockwise). Default: 0</param>
            <param name="type">impulse response of motion blur. Default: 3</param>
            <returns>motion blurred image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenPsfDefocus(System.Int32,System.Int32,System.Double)">
            <summary>
              Generate an impulse response of an uniform out-of-focus blurring.
              Modified instance represents: Impulse response of uniform out-of-focus blurring.
            </summary>
            <param name="PSFwidth">Width of result image. Default: 256</param>
            <param name="PSFheight">Height of result image. Default: 256</param>
            <param name="blurring">Degree of Blurring. Default: 5.0</param>
        </member>
        <member name="M:HalconDotNet.HImage.SimulateDefocus(System.Double)">
            <summary>
              Simulate an uniform out-of-focus blurring of an image.
              Instance represents: Image to blur.
            </summary>
            <param name="blurring">Degree of blurring. Default: 5.0</param>
            <returns>Blurred image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CompareExtVariationModel(HalconDotNet.HVariationModel,System.String)">
            <summary>
              Compare an image to a variation model.
              Instance represents: Image of the object to be compared.
            </summary>
            <param name="modelID">ID of the variation model.</param>
            <param name="mode">Method used for comparing the variation model. Default: "absolute"</param>
            <returns>Region containing the points that differ substantially from the model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CompareVariationModel(HalconDotNet.HVariationModel)">
            <summary>
              Compare an image to a variation model.
              Instance represents: Image of the object to be compared.
            </summary>
            <param name="modelID">ID of the variation model.</param>
            <returns>Region containing the points that differ substantially from the model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.TrainVariationModel(HalconDotNet.HVariationModel)">
            <summary>
              Train a variation model.
              Instance represents: Images of the object to be trained.
            </summary>
            <param name="modelID">ID of the variation model.</param>
        </member>
        <member name="M:HalconDotNet.HImage.ProjMatchPointsDistortionRansacGuided(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,HalconDotNet.HHomMat2D,System.Double,System.Double,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,System.Int32,System.Double@,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute a projective transformation matrix and the radial distortion coefficient between two images by finding correspondences between points based on known approximations of the projective transformation matrix and the radial distortion coefficient.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="grayMatchMethod">Gray value match metric. Default: "ncc"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="homMat2DGuide">Approximation of the homogeneous projective transformation matrix between the two images.</param>
            <param name="kappaGuide">Approximation of the radial distortion coefficient in the two images.</param>
            <param name="distanceTolerance">Tolerance for the matching search window. Default: 20.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 0.7</param>
            <param name="estimationMethod">Algorithm for the computation of the projective transformation matrix. Default: "gold_standard"</param>
            <param name="distanceThreshold">Threshold for transformation consistency check. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="kappa">Computed radial distortion coefficient.</param>
            <param name="error">Root-Mean-Square transformation error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed homogeneous projective transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ProjMatchPointsDistortionRansacGuided(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,HalconDotNet.HHomMat2D,System.Double,System.Double,System.Int32,System.String,System.Double,System.Int32,System.Double@,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute a projective transformation matrix and the radial distortion coefficient between two images by finding correspondences between points based on known approximations of the projective transformation matrix and the radial distortion coefficient.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="grayMatchMethod">Gray value match metric. Default: "ncc"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="homMat2DGuide">Approximation of the homogeneous projective transformation matrix between the two images.</param>
            <param name="kappaGuide">Approximation of the radial distortion coefficient in the two images.</param>
            <param name="distanceTolerance">Tolerance for the matching search window. Default: 20.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 0.7</param>
            <param name="estimationMethod">Algorithm for the computation of the projective transformation matrix. Default: "gold_standard"</param>
            <param name="distanceThreshold">Threshold for transformation consistency check. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="kappa">Computed radial distortion coefficient.</param>
            <param name="error">Root-Mean-Square transformation error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed homogeneous projective transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ProjMatchPointsDistortionRansac(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,System.Int32,System.Double@,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute a projective transformation matrix between two images and the radial distortion coefficient by automatically finding correspondences between points.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="grayMatchMethod">Gray value match metric. Default: "ncc"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate offset of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate offset of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative rotation of the second image with respect to the first image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 0.7</param>
            <param name="estimationMethod">Algorithm for the computation of the projective transformation matrix. Default: "gold_standard"</param>
            <param name="distanceThreshold">Threshold for the transformation consistency check. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="kappa">Computed radial distortion coefficient.</param>
            <param name="error">Root-Mean-Square transformation error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed homogeneous projective transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ProjMatchPointsDistortionRansac(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.String,System.Double,System.Int32,System.Double@,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute a projective transformation matrix between two images and the radial distortion coefficient by automatically finding correspondences between points.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="grayMatchMethod">Gray value match metric. Default: "ncc"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate offset of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate offset of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative rotation of the second image with respect to the first image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 0.7</param>
            <param name="estimationMethod">Algorithm for the computation of the projective transformation matrix. Default: "gold_standard"</param>
            <param name="distanceThreshold">Threshold for the transformation consistency check. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="kappa">Computed radial distortion coefficient.</param>
            <param name="error">Root-Mean-Square transformation error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed homogeneous projective transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ProjMatchPointsRansacGuided(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,HalconDotNet.HHomMat2D,System.Double,HalconDotNet.HTuple,System.String,System.Double,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute a projective transformation matrix between two images by finding correspondences between points based on a known approximation of the projective transformation matrix.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="homMat2DGuide">Approximation of the Homogeneous projective transformation matrix between the two images.</param>
            <param name="distanceTolerance">Tolerance for the matching search window. Default: 20.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Transformation matrix estimation algorithm. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Threshold for transformation consistency check. Default: 0.2</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Homogeneous projective transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ProjMatchPointsRansacGuided(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,HalconDotNet.HHomMat2D,System.Double,System.Int32,System.String,System.Double,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute a projective transformation matrix between two images by finding correspondences between points based on a known approximation of the projective transformation matrix.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="homMat2DGuide">Approximation of the Homogeneous projective transformation matrix between the two images.</param>
            <param name="distanceTolerance">Tolerance for the matching search window. Default: 20.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Transformation matrix estimation algorithm. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Threshold for transformation consistency check. Default: 0.2</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Homogeneous projective transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ProjMatchPointsRansac(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Double,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute a projective transformation matrix between two images by finding correspondences between points.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift. Default: 0</param>
            <param name="colMove">Average column coordinate shift. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 256</param>
            <param name="colTolerance">Half width of matching search window. Default: 256</param>
            <param name="rotation">Range of rotation angles. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Transformation matrix estimation algorithm. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Threshold for transformation consistency check. Default: 0.2</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Homogeneous projective transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ProjMatchPointsRansac(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.String,System.Double,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute a projective transformation matrix between two images by finding correspondences between points.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift. Default: 0</param>
            <param name="colMove">Average column coordinate shift. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 256</param>
            <param name="colTolerance">Half width of matching search window. Default: 256</param>
            <param name="rotation">Range of rotation angles. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Transformation matrix estimation algorithm. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Threshold for transformation consistency check. Default: 0.2</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Homogeneous projective transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ReceiveImage(HalconDotNet.HSocket)">
            <summary>
              Receive an image over a socket connection.
              Modified instance represents: Received image.
            </summary>
            <param name="socket">Socket number.</param>
        </member>
        <member name="M:HalconDotNet.HImage.SendImage(HalconDotNet.HSocket)">
            <summary>
              Send an image over a socket connection.
              Instance represents: Image to be sent.
            </summary>
            <param name="socket">Socket number.</param>
        </member>
        <member name="M:HalconDotNet.HImage.BinocularDistanceMs(HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HPose,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Compute the distance values for a rectified stereo image pair using multi-scanline optimization.
              Instance represents: Rectified image of camera 1.
            </summary>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="score">Score of the calculated disparity.</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <param name="relPoseRect">Point transformation from the rectified camera 2 to the rectified camera 1.</param>
            <param name="minDisparity">Minimum of the expected disparities. Default: -30</param>
            <param name="maxDisparity">Maximum of the expected disparities. Default: 30</param>
            <param name="surfaceSmoothing">Smoothing of surfaces. Default: 50</param>
            <param name="edgeSmoothing">Smoothing of edges. Default: 50</param>
            <param name="genParamName">Parameter name(s) for the multi-scanline algorithm. Default: []</param>
            <param name="genParamValue">Parameter value(s) for the multi-scanline algorithm. Default: []</param>
            <returns>Distance image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BinocularDistanceMs(HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HPose,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
              Compute the distance values for a rectified stereo image pair using multi-scanline optimization.
              Instance represents: Rectified image of camera 1.
            </summary>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="score">Score of the calculated disparity.</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <param name="relPoseRect">Point transformation from the rectified camera 2 to the rectified camera 1.</param>
            <param name="minDisparity">Minimum of the expected disparities. Default: -30</param>
            <param name="maxDisparity">Maximum of the expected disparities. Default: 30</param>
            <param name="surfaceSmoothing">Smoothing of surfaces. Default: 50</param>
            <param name="edgeSmoothing">Smoothing of edges. Default: 50</param>
            <param name="genParamName">Parameter name(s) for the multi-scanline algorithm. Default: []</param>
            <param name="genParamValue">Parameter value(s) for the multi-scanline algorithm. Default: []</param>
            <returns>Distance image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BinocularDisparityMs(HalconDotNet.HImage,HalconDotNet.HImage@,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Compute the disparities of a rectified stereo image pair using multi-scanline optimization.
              Instance represents: Rectified image of camera 1.
            </summary>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="score">Score of the calculated disparity.</param>
            <param name="minDisparity">Minimum of the expected disparities. Default: -30</param>
            <param name="maxDisparity">Maximum of the expected disparities. Default: 30</param>
            <param name="surfaceSmoothing">Smoothing of surfaces. Default: 50</param>
            <param name="edgeSmoothing">Smoothing of edges. Default: 50</param>
            <param name="genParamName">Parameter name(s) for the multi-scanline algorithm. Default: []</param>
            <param name="genParamValue">Parameter value(s) for the multi-scanline algorithm. Default: []</param>
            <returns>Disparity map.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BinocularDisparityMs(HalconDotNet.HImage,HalconDotNet.HImage@,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
              Compute the disparities of a rectified stereo image pair using multi-scanline optimization.
              Instance represents: Rectified image of camera 1.
            </summary>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="score">Score of the calculated disparity.</param>
            <param name="minDisparity">Minimum of the expected disparities. Default: -30</param>
            <param name="maxDisparity">Maximum of the expected disparities. Default: 30</param>
            <param name="surfaceSmoothing">Smoothing of surfaces. Default: 50</param>
            <param name="edgeSmoothing">Smoothing of edges. Default: 50</param>
            <param name="genParamName">Parameter name(s) for the multi-scanline algorithm. Default: []</param>
            <param name="genParamValue">Parameter value(s) for the multi-scanline algorithm. Default: []</param>
            <returns>Disparity map.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BinocularDistanceMg(HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HPose,System.Double,System.Double,System.Double,System.Double,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Compute the distance values for a rectified stereo image pair using multigrid methods.
              Instance represents: Rectified image of camera 1.
            </summary>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="score">Score of the calculated disparity if CalculateScore is set to 'true'.</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <param name="relPoseRect">Point transformation from the rectified camera 2 to the rectified camera 1.</param>
            <param name="grayConstancy">Weight of the gray value constancy in the data term. Default: 1.0</param>
            <param name="gradientConstancy">Weight of the gradient constancy in the data term. Default: 30.0</param>
            <param name="smoothness">Weight of the smoothness term in relation to the data term. Default: 5.0</param>
            <param name="initialGuess">Initial guess of the disparity. Default: 0.0</param>
            <param name="calculateScore">Should the quality measure be returned in Score? Default: "false"</param>
            <param name="MGParamName">Parameter name(s) for the multigrid algorithm. Default: "default_parameters"</param>
            <param name="MGParamValue">Parameter value(s) for the multigrid algorithm. Default: "fast_accurate"</param>
            <returns>Distance image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BinocularDistanceMg(HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HPose,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.String)">
            <summary>
              Compute the distance values for a rectified stereo image pair using multigrid methods.
              Instance represents: Rectified image of camera 1.
            </summary>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="score">Score of the calculated disparity if CalculateScore is set to 'true'.</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <param name="relPoseRect">Point transformation from the rectified camera 2 to the rectified camera 1.</param>
            <param name="grayConstancy">Weight of the gray value constancy in the data term. Default: 1.0</param>
            <param name="gradientConstancy">Weight of the gradient constancy in the data term. Default: 30.0</param>
            <param name="smoothness">Weight of the smoothness term in relation to the data term. Default: 5.0</param>
            <param name="initialGuess">Initial guess of the disparity. Default: 0.0</param>
            <param name="calculateScore">Should the quality measure be returned in Score? Default: "false"</param>
            <param name="MGParamName">Parameter name(s) for the multigrid algorithm. Default: "default_parameters"</param>
            <param name="MGParamValue">Parameter value(s) for the multigrid algorithm. Default: "fast_accurate"</param>
            <returns>Distance image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BinocularDisparityMg(HalconDotNet.HImage,HalconDotNet.HImage@,System.Double,System.Double,System.Double,System.Double,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Compute the disparities of a rectified stereo image pair using multigrid methods.
              Instance represents: Rectified image of camera 1.
            </summary>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="score">Score of the calculated disparity if CalculateScore is set to 'true'.</param>
            <param name="grayConstancy">Weight of the gray value constancy in the data term. Default: 1.0</param>
            <param name="gradientConstancy">Weight of the gradient constancy in the data term. Default: 30.0</param>
            <param name="smoothness">Weight of the smoothness term in relation to the data term. Default: 5.0</param>
            <param name="initialGuess">Initial guess of the disparity. Default: 0.0</param>
            <param name="calculateScore">Should the quality measure should be returned in Score? Default: "false"</param>
            <param name="MGParamName">Parameter name(s) for the multigrid algorithm. Default: "default_parameters"</param>
            <param name="MGParamValue">Parameter value(s) for the multigrid algorithm. Default: "fast_accurate"</param>
            <returns>Disparity map.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BinocularDisparityMg(HalconDotNet.HImage,HalconDotNet.HImage@,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.String)">
            <summary>
              Compute the disparities of a rectified stereo image pair using multigrid methods.
              Instance represents: Rectified image of camera 1.
            </summary>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="score">Score of the calculated disparity if CalculateScore is set to 'true'.</param>
            <param name="grayConstancy">Weight of the gray value constancy in the data term. Default: 1.0</param>
            <param name="gradientConstancy">Weight of the gradient constancy in the data term. Default: 30.0</param>
            <param name="smoothness">Weight of the smoothness term in relation to the data term. Default: 5.0</param>
            <param name="initialGuess">Initial guess of the disparity. Default: 0.0</param>
            <param name="calculateScore">Should the quality measure should be returned in Score? Default: "false"</param>
            <param name="MGParamName">Parameter name(s) for the multigrid algorithm. Default: "default_parameters"</param>
            <param name="MGParamValue">Parameter value(s) for the multigrid algorithm. Default: "fast_accurate"</param>
            <returns>Disparity map.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenBinocularProjRectification(HalconDotNet.HHomMat2D,HalconDotNet.HTuple,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple@,HalconDotNet.HHomMat2D@,HalconDotNet.HHomMat2D@)">
            <summary>
              Compute the projective rectification of weakly calibrated binocular stereo images.
              Modified instance represents: Image coding the rectification of the 1. image.
            </summary>
            <param name="FMatrix">Fundamental matrix.</param>
            <param name="covFMat">9x9 covariance matrix of the fundamental matrix. Default: []</param>
            <param name="width1">Width of the 1. image. Default: 512</param>
            <param name="height1">Height of the 1. image. Default: 512</param>
            <param name="width2">Width of the 2. image. Default: 512</param>
            <param name="height2">Height of the 2. image. Default: 512</param>
            <param name="subSampling">Subsampling factor. Default: 1</param>
            <param name="mapping">Type of mapping. Default: "no_map"</param>
            <param name="covFMatRect">9x9 covariance matrix of the rectified fundamental matrix.</param>
            <param name="h1">Projective transformation of the 1. image.</param>
            <param name="h2">Projective transformation of the 2. image.</param>
            <returns>Image coding the rectification of the 2. image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenBinocularProjRectification(HalconDotNet.HHomMat2D,HalconDotNet.HTuple,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,HalconDotNet.HTuple@,HalconDotNet.HHomMat2D@,HalconDotNet.HHomMat2D@)">
            <summary>
              Compute the projective rectification of weakly calibrated binocular stereo images.
              Modified instance represents: Image coding the rectification of the 1. image.
            </summary>
            <param name="FMatrix">Fundamental matrix.</param>
            <param name="covFMat">9x9 covariance matrix of the fundamental matrix. Default: []</param>
            <param name="width1">Width of the 1. image. Default: 512</param>
            <param name="height1">Height of the 1. image. Default: 512</param>
            <param name="width2">Width of the 2. image. Default: 512</param>
            <param name="height2">Height of the 2. image. Default: 512</param>
            <param name="subSampling">Subsampling factor. Default: 1</param>
            <param name="mapping">Type of mapping. Default: "no_map"</param>
            <param name="covFMatRect">9x9 covariance matrix of the rectified fundamental matrix.</param>
            <param name="h1">Projective transformation of the 1. image.</param>
            <param name="h2">Projective transformation of the 2. image.</param>
            <returns>Image coding the rectification of the 2. image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MatchFundamentalMatrixDistortionRansac(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,System.Int32,System.Double@,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the fundamental matrix and the radial distortion coefficient for a pair of stereo images by automatically finding correspondences between image points.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="grayMatchMethod">Gray value match metric. Default: "ncc"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate offset of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate offset of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative rotation of the second image with respect to the first image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 0.7</param>
            <param name="estimationMethod">Algorithm for the computation of the fundamental matrix and for special camera orientations. Default: "gold_standard"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="kappa">Computed radial distortion coefficient.</param>
            <param name="error">Root-Mean-Square epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed fundamental matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MatchFundamentalMatrixDistortionRansac(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.String,System.Double,System.Int32,System.Double@,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the fundamental matrix and the radial distortion coefficient for a pair of stereo images by automatically finding correspondences between image points.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="grayMatchMethod">Gray value match metric. Default: "ncc"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate offset of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate offset of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative rotation of the second image with respect to the first image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 0.7</param>
            <param name="estimationMethod">Algorithm for the computation of the fundamental matrix and for special camera orientations. Default: "gold_standard"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="kappa">Computed radial distortion coefficient.</param>
            <param name="error">Root-Mean-Square epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed fundamental matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MatchRelPoseRansac(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the relative orientation between two cameras by automatically finding correspondences between image points.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="camPar1">Parameters of the 1st camera.</param>
            <param name="camPar2">Parameters of the 2nd camera.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate shift of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative orientation of the right image with respect to the left image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Algorithm for the computation of the relative pose and for special pose types. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="covRelPose">6x6 covariance matrix of the relative orientation.</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed relative orientation of the cameras (3D pose).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MatchRelPoseRansac(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.String,System.Double,System.Int32,HalconDotNet.HTuple@,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the relative orientation between two cameras by automatically finding correspondences between image points.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="camPar1">Parameters of the 1st camera.</param>
            <param name="camPar2">Parameters of the 2nd camera.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate shift of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative orientation of the right image with respect to the left image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Algorithm for the computation of the relative pose and for special pose types. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="covRelPose">6x6 covariance matrix of the relative orientation.</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed relative orientation of the cameras (3D pose).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MatchEssentialMatrixRansac(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HHomMat2D,HalconDotNet.HHomMat2D,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the essential matrix for a pair of stereo images by automatically finding correspondences between image points.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="camMat1">Camera matrix of the 1st camera.</param>
            <param name="camMat2">Camera matrix of the 2nd camera.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate shift of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative orientation of the right image with respect to the left image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Algorithm for the computation of the essential matrix and for special camera orientations. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="covEMat">9x9 covariance matrix of the essential matrix.</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed essential matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MatchEssentialMatrixRansac(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HHomMat2D,HalconDotNet.HHomMat2D,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.String,System.Double,System.Int32,HalconDotNet.HTuple@,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the essential matrix for a pair of stereo images by automatically finding correspondences between image points.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="camMat1">Camera matrix of the 1st camera.</param>
            <param name="camMat2">Camera matrix of the 2nd camera.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate shift of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative orientation of the right image with respect to the left image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Algorithm for the computation of the essential matrix and for special camera orientations. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="covEMat">9x9 covariance matrix of the essential matrix.</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed essential matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MatchFundamentalMatrixRansac(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple@,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the fundamental matrix for a pair of stereo images by automatically finding correspondences between image points.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate shift of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative orientation of the right image with respect to the left image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Algorithm for the computation of the fundamental matrix and for special camera orientations. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="covFMat">9x9 covariance matrix of the fundamental matrix.</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed fundamental matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MatchFundamentalMatrixRansac(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.String,System.Double,System.Int32,HalconDotNet.HTuple@,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the fundamental matrix for a pair of stereo images by automatically finding correspondences between image points.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate shift of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative orientation of the right image with respect to the left image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Algorithm for the computation of the fundamental matrix and for special camera orientations. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="covFMat">9x9 covariance matrix of the fundamental matrix.</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>Computed fundamental matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BinocularDistance(HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HPose,System.String,System.Int32,System.Int32,HalconDotNet.HTuple,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Compute the distance values for a rectified stereo image pair using correlation techniques.
              Instance represents: Rectified image of camera 1.
            </summary>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="score">Evaluation of a distance value.</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <param name="relPoseRect">Point transformation from the rectified camera 2 to the rectified camera 1.</param>
            <param name="method">Matching function. Default: "ncc"</param>
            <param name="maskWidth">Width of the correlation window. Default: 11</param>
            <param name="maskHeight">Height of the correlation window. Default: 11</param>
            <param name="textureThresh">Variance threshold of textured image regions. Default: 0.0</param>
            <param name="minDisparity">Minimum of the expected disparities. Default: 0</param>
            <param name="maxDisparity">Maximum of the expected disparities. Default: 30</param>
            <param name="numLevels">Number of pyramid levels. Default: 1</param>
            <param name="scoreThresh">Threshold of the correlation function. Default: 0.0</param>
            <param name="filter">Downstream filters. Default: "none"</param>
            <param name="subDistance">Distance interpolation. Default: "none"</param>
            <returns>Distance image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BinocularDistance(HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HPose,System.String,System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.String,System.String)">
            <summary>
              Compute the distance values for a rectified stereo image pair using correlation techniques.
              Instance represents: Rectified image of camera 1.
            </summary>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="score">Evaluation of a distance value.</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <param name="relPoseRect">Point transformation from the rectified camera 2 to the rectified camera 1.</param>
            <param name="method">Matching function. Default: "ncc"</param>
            <param name="maskWidth">Width of the correlation window. Default: 11</param>
            <param name="maskHeight">Height of the correlation window. Default: 11</param>
            <param name="textureThresh">Variance threshold of textured image regions. Default: 0.0</param>
            <param name="minDisparity">Minimum of the expected disparities. Default: 0</param>
            <param name="maxDisparity">Maximum of the expected disparities. Default: 30</param>
            <param name="numLevels">Number of pyramid levels. Default: 1</param>
            <param name="scoreThresh">Threshold of the correlation function. Default: 0.0</param>
            <param name="filter">Downstream filters. Default: "none"</param>
            <param name="subDistance">Distance interpolation. Default: "none"</param>
            <returns>Distance image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BinocularDisparity(HalconDotNet.HImage,HalconDotNet.HImage@,System.String,System.Int32,System.Int32,HalconDotNet.HTuple,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Compute the disparities of a rectified image pair using correlation techniques.
              Instance represents: Rectified image of camera 1.
            </summary>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="score">Evaluation of the disparity values.</param>
            <param name="method">Matching function. Default: "ncc"</param>
            <param name="maskWidth">Width of the correlation window. Default: 11</param>
            <param name="maskHeight">Height of the correlation window. Default: 11</param>
            <param name="textureThresh">Variance threshold of textured image regions. Default: 0.0</param>
            <param name="minDisparity">Minimum of the expected disparities. Default: -30</param>
            <param name="maxDisparity">Maximum of the expected disparities. Default: 30</param>
            <param name="numLevels">Number of pyramid levels. Default: 1</param>
            <param name="scoreThresh">Threshold of the correlation function. Default: 0.5</param>
            <param name="filter">Downstream filters. Default: "none"</param>
            <param name="subDisparity">Subpixel interpolation of disparities. Default: "none"</param>
            <returns>Disparity map.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BinocularDisparity(HalconDotNet.HImage,HalconDotNet.HImage@,System.String,System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.String,System.String)">
            <summary>
              Compute the disparities of a rectified image pair using correlation techniques.
              Instance represents: Rectified image of camera 1.
            </summary>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="score">Evaluation of the disparity values.</param>
            <param name="method">Matching function. Default: "ncc"</param>
            <param name="maskWidth">Width of the correlation window. Default: 11</param>
            <param name="maskHeight">Height of the correlation window. Default: 11</param>
            <param name="textureThresh">Variance threshold of textured image regions. Default: 0.0</param>
            <param name="minDisparity">Minimum of the expected disparities. Default: -30</param>
            <param name="maxDisparity">Maximum of the expected disparities. Default: 30</param>
            <param name="numLevels">Number of pyramid levels. Default: 1</param>
            <param name="scoreThresh">Threshold of the correlation function. Default: 0.5</param>
            <param name="filter">Downstream filters. Default: "none"</param>
            <param name="subDisparity">Subpixel interpolation of disparities. Default: "none"</param>
            <returns>Disparity map.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenBinocularRectificationMap(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HPose,System.Double,System.String,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HPose@,HalconDotNet.HPose@,HalconDotNet.HPose@)">
            <summary>
              Generate transformation maps that describe the mapping of the images of a binocular camera pair to a common rectified image plane.
              Modified instance represents: Image containing the mapping data of camera 1.
            </summary>
            <param name="camParam1">Internal parameters of the projective camera 1.</param>
            <param name="camParam2">Internal parameters of the projective camera 2.</param>
            <param name="relPose">Point transformation from camera 2 to camera 1.</param>
            <param name="subSampling">Factor of sub sampling. Default: 1.0</param>
            <param name="method">Type of rectification. Default: "geometric"</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
            <param name="camParamRect1">Rectified internal parameters of the projective camera 1.</param>
            <param name="camParamRect2">Rectified internal parameters of the projective camera 2.</param>
            <param name="camPoseRect1">Point transformation from the rectified camera 1 to 			the original camera 1.</param>
            <param name="camPoseRect2">Point transformation from the rectified camera 1 to 			the original camera 1.</param>
            <param name="relPoseRect">Point transformation from the rectified camera 2 to 			the rectified camera 1.</param>
            <returns>Image containing the mapping data of camera 2.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GetSheetOfLightResult(HalconDotNet.HSheetOfLightModel,HalconDotNet.HTuple)">
            <summary>
              Get the iconic results of a measurement performed with the sheet-of light technique.
              Modified instance represents: Desired measurement result.
            </summary>
            <param name="sheetOfLightModelID">Handle of the sheet-of-light model to be used.</param>
            <param name="resultName">Specify which result of the measurement shall be provided. Default: "disparity"</param>
        </member>
        <member name="M:HalconDotNet.HImage.GetSheetOfLightResult(HalconDotNet.HSheetOfLightModel,System.String)">
            <summary>
              Get the iconic results of a measurement performed with the sheet-of light technique.
              Modified instance represents: Desired measurement result.
            </summary>
            <param name="sheetOfLightModelID">Handle of the sheet-of-light model to be used.</param>
            <param name="resultName">Specify which result of the measurement shall be provided. Default: "disparity"</param>
        </member>
        <member name="M:HalconDotNet.HImage.ApplySheetOfLightCalibration(HalconDotNet.HSheetOfLightModel)">
            <summary>
              Apply the calibration transformations to the input disparity image.
              Instance represents: Height or range image to be calibrated.
            </summary>
            <param name="sheetOfLightModelID">Handle of the sheet-of-light model.</param>
        </member>
        <member name="M:HalconDotNet.HImage.SetProfileSheetOfLight(HalconDotNet.HSheetOfLightModel,HalconDotNet.HTuple)">
            <summary>
              Set sheet of light profiles by measured disparities.
              Instance represents: Disparity image that contains several profiles.
            </summary>
            <param name="sheetOfLightModelID">Handle of the sheet-of-light model.</param>
            <param name="movementPoses">Poses describing the movement of the scene under measurement between the previously processed profile image and the current profile image.</param>
        </member>
        <member name="M:HalconDotNet.HImage.MeasureProfileSheetOfLight(HalconDotNet.HSheetOfLightModel,HalconDotNet.HTuple)">
            <summary>
              Process the profile image provided as input and store the resulting disparity to the sheet-of-light model.
              Instance represents: Input image.
            </summary>
            <param name="sheetOfLightModelID">Handle of the sheet-of-light model.</param>
            <param name="movementPose">Pose describing the movement of the scene under measurement between the previously processed profile image and the current profile image.</param>
        </member>
        <member name="M:HalconDotNet.HImage.ShadeHeightField(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Shade a height field.
              Instance represents: Height field to be shaded.
            </summary>
            <param name="slant">Angle between the light source and the positive z-axis (in degrees). Default: 0.0</param>
            <param name="tilt">Angle between the light source and the x-axis after projection into the xy-plane (in degrees). Default: 0.0</param>
            <param name="albedo">Amount of light reflected by the surface. Default: 1.0</param>
            <param name="ambient">Amount of ambient light. Default: 0.0</param>
            <param name="shadows">Should shadows be calculated? Default: "false"</param>
            <returns>Shaded image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ShadeHeightField(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
              Shade a height field.
              Instance represents: Height field to be shaded.
            </summary>
            <param name="slant">Angle between the light source and the positive z-axis (in degrees). Default: 0.0</param>
            <param name="tilt">Angle between the light source and the x-axis after projection into the xy-plane (in degrees). Default: 0.0</param>
            <param name="albedo">Amount of light reflected by the surface. Default: 1.0</param>
            <param name="ambient">Amount of ambient light. Default: 0.0</param>
            <param name="shadows">Should shadows be calculated? Default: "false"</param>
            <returns>Shaded image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EstimateAlAm(HalconDotNet.HTuple@)">
            <summary>
              Estimate the albedo of a surface and the amount of ambient light.
              Instance represents: Image for which albedo and ambient are to be estimated.
            </summary>
            <param name="ambient">Amount of ambient light.</param>
            <returns>Amount of light reflected by the surface.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EstimateAlAm(System.Double@)">
            <summary>
              Estimate the albedo of a surface and the amount of ambient light.
              Instance represents: Image for which albedo and ambient are to be estimated.
            </summary>
            <param name="ambient">Amount of ambient light.</param>
            <returns>Amount of light reflected by the surface.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EstimateSlAlZc(HalconDotNet.HTuple@)">
            <summary>
              Estimate the slant of a light source and the albedo of a surface.
              Instance represents: Image for which slant and albedo are to be estimated.
            </summary>
            <param name="albedo">Amount of light reflected by the surface.</param>
            <returns>Angle of the light sources and the positive z-axis (in degrees).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EstimateSlAlZc(System.Double@)">
            <summary>
              Estimate the slant of a light source and the albedo of a surface.
              Instance represents: Image for which slant and albedo are to be estimated.
            </summary>
            <param name="albedo">Amount of light reflected by the surface.</param>
            <returns>Angle of the light sources and the positive z-axis (in degrees).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EstimateSlAlLr(HalconDotNet.HTuple@)">
            <summary>
              Estimate the slant of a light source and the albedo of a surface.
              Instance represents: Image for which slant and albedo are to be estimated.
            </summary>
            <param name="albedo">Amount of light reflected by the surface.</param>
            <returns>Angle between the light sources and the positive z-axis (in degrees).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EstimateSlAlLr(System.Double@)">
            <summary>
              Estimate the slant of a light source and the albedo of a surface.
              Instance represents: Image for which slant and albedo are to be estimated.
            </summary>
            <param name="albedo">Amount of light reflected by the surface.</param>
            <returns>Angle between the light sources and the positive z-axis (in degrees).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EstimateTiltZc">
            <summary>
              Estimate the tilt of a light source.
              Instance represents: Image for which the tilt is to be estimated.
            </summary>
            <returns>Angle between the light source and the x-axis after projection into the xy-plane (in degrees).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EstimateTiltLr">
            <summary>
              Estimate the tilt of a light source.
              Instance represents: Image for which the tilt is to be estimated.
            </summary>
            <returns>Angle between the light source and the x-axis after projection into the xy-plane (in degrees).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PhotStereo(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Reconstruct a surface from at least three gray value images.
              Instance represents: Shaded input image with at least three channels.
            </summary>
            <param name="slants">Angle between the light sources and the positive z-axis (in degrees). Default: 45.0</param>
            <param name="tilts">Angle between the light source and the x-axis after projection into the xy-plane (in degrees). Default: 45.0</param>
            <returns>Reconstructed height field.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ReconstructHeightFieldFromGradient(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Reconstruct a surface from surface gradients.
              Instance represents: The gradient field of the image.
            </summary>
            <param name="reconstructionMethod">Type of the reconstruction method. Default: "poisson"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Reconstructed height field.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PhotometricStereo(HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Reconstruct a surface according to the photometric stereo technique.
              Instance represents: Array with at least three input images with different directions of illumination.
            </summary>
            <param name="gradient">The gradient field of the surface.</param>
            <param name="albedo">The albedo of the surface.</param>
            <param name="slants">Angle between the object plane and the direction of  illumination (in degrees). Default: 45.0</param>
            <param name="tilts">Angle of the direction of illumination within the object plane (in degrees). Default: 45.0</param>
            <param name="resultType">Types of the requested results. Default: "all"</param>
            <param name="reconstructionMethod">Type of the reconstruction method. Default: "poisson"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Reconstructed height field.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SfsPentland(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Reconstruct a surface from a gray value image.
              Instance represents: Shaded input image.
            </summary>
            <param name="slant">Angle between the light source and the positive z-axis (in degrees). Default: 45.0</param>
            <param name="tilt">Angle between the light source and the x-axis after projection into the xy-plane (in degrees). Default: 45.0</param>
            <param name="albedo">Amount of light reflected by the surface. Default: 1.0</param>
            <param name="ambient">Amount of ambient light. Default: 0.0</param>
            <returns>Reconstructed height field.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SfsPentland(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Reconstruct a surface from a gray value image.
              Instance represents: Shaded input image.
            </summary>
            <param name="slant">Angle between the light source and the positive z-axis (in degrees). Default: 45.0</param>
            <param name="tilt">Angle between the light source and the x-axis after projection into the xy-plane (in degrees). Default: 45.0</param>
            <param name="albedo">Amount of light reflected by the surface. Default: 1.0</param>
            <param name="ambient">Amount of ambient light. Default: 0.0</param>
            <returns>Reconstructed height field.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SfsOrigLr(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Reconstruct a surface from a gray value image.
              Instance represents: Shaded input image.
            </summary>
            <param name="slant">Angle between the light source and the positive z-axis (in degrees). Default: 45.0</param>
            <param name="tilt">Angle between the light source and the x-axis after projection into the xy-plane (in degrees). Default: 45.0</param>
            <param name="albedo">Amount of light reflected by the surface. Default: 1.0</param>
            <param name="ambient">Amount of ambient light. Default: 0.0</param>
            <returns>Reconstructed height field.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SfsOrigLr(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Reconstruct a surface from a gray value image.
              Instance represents: Shaded input image.
            </summary>
            <param name="slant">Angle between the light source and the positive z-axis (in degrees). Default: 45.0</param>
            <param name="tilt">Angle between the light source and the x-axis after projection into the xy-plane (in degrees). Default: 45.0</param>
            <param name="albedo">Amount of light reflected by the surface. Default: 1.0</param>
            <param name="ambient">Amount of ambient light. Default: 0.0</param>
            <returns>Reconstructed height field.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SfsModLr(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Reconstruct a surface from a gray value image.
              Instance represents: Shaded input image.
            </summary>
            <param name="slant">Angle between the light source and the positive z-axis (in degrees). Default: 45.0</param>
            <param name="tilt">Angle between the light source and the x-axis after projection into the xy-plane (in degrees). Default: 45.0</param>
            <param name="albedo">Amount of light reflected by the surface. Default: 1.0</param>
            <param name="ambient">Amount of ambient light. Default: 0.0</param>
            <returns>Reconstructed height field.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SfsModLr(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Reconstruct a surface from a gray value image.
              Instance represents: Shaded input image.
            </summary>
            <param name="slant">Angle between the light source and the positive z-axis (in degrees). Default: 45.0</param>
            <param name="tilt">Angle between the light source and the x-axis after projection into the xy-plane (in degrees). Default: 45.0</param>
            <param name="albedo">Amount of light reflected by the surface. Default: 1.0</param>
            <param name="ambient">Amount of ambient light. Default: 0.0</param>
            <returns>Reconstructed height field.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindText(HalconDotNet.HTextModel)">
            <summary>
              Find text in an image.
              Instance represents: Input image.
            </summary>
            <param name="textModel">Text model specifying the text to be segmented.</param>
            <returns>Result of the segmentation.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ClassifyImageClassLut(HalconDotNet.HClassLUT)">
            <summary>
              Classify a byte image using a look-up table.
              Instance represents: Input image.
            </summary>
            <param name="classLUTHandle">Handle of the LUT classifier.</param>
            <returns>Segmented classes.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ClassifyImageClassKnn(HalconDotNet.HImage@,HalconDotNet.HClassKnn,System.Double)">
            <summary>
              Classify an image with a k-Nearest-Neighbor classifier.
              Instance represents: Input image.
            </summary>
            <param name="distanceImage">Distance of the pixel's nearest neighbor.</param>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
            <param name="rejectionThreshold">Threshold for the rejection of the classification. Default: 0.5</param>
            <returns>Segmented classes.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AddSamplesImageClassKnn(HalconDotNet.HRegion,HalconDotNet.HClassKnn)">
            <summary>
              Add training samples from an image to the training data of a k-Nearest-Neighbor classifier.
              Instance represents: Training image.
            </summary>
            <param name="classRegions">Regions of the classes to be trained.</param>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
        </member>
        <member name="M:HalconDotNet.HImage.ClassifyImageClassGmm(HalconDotNet.HClassGmm,System.Double)">
            <summary>
              Classify an image with a Gaussian Mixture Model.
              Instance represents: Input image.
            </summary>
            <param name="GMMHandle">GMM handle.</param>
            <param name="rejectionThreshold">Threshold for the rejection of the classification. Default: 0.5</param>
            <returns>Segmented classes.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AddSamplesImageClassGmm(HalconDotNet.HRegion,HalconDotNet.HClassGmm,System.Double)">
            <summary>
              Add training samples from an image to the training data of a Gaussian Mixture Model.
              Instance represents: Training image.
            </summary>
            <param name="classRegions">Regions of the classes to be trained.</param>
            <param name="GMMHandle">GMM handle.</param>
            <param name="randomize">Standard deviation of the Gaussian noise added to the training data. Default: 0.0</param>
        </member>
        <member name="M:HalconDotNet.HImage.ClassifyImageClassSvm(HalconDotNet.HClassSvm)">
            <summary>
              Classify an image with a support vector machine.
              Instance represents: Input image.
            </summary>
            <param name="SVMHandle">SVM handle.</param>
            <returns>Segmented classes.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AddSamplesImageClassSvm(HalconDotNet.HRegion,HalconDotNet.HClassSvm)">
            <summary>
              Add training samples from an image to the training data of a support vector machine.
              Instance represents: Training image.
            </summary>
            <param name="classRegions">Regions of the classes to be trained.</param>
            <param name="SVMHandle">SVM handle.</param>
        </member>
        <member name="M:HalconDotNet.HImage.ClassifyImageClassMlp(HalconDotNet.HClassMlp,System.Double)">
            <summary>
              Classify an image with a multilayer perceptron.
              Instance represents: Input image.
            </summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="rejectionThreshold">Threshold for the rejection of the classification. Default: 0.5</param>
            <returns>Segmented classes.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AddSamplesImageClassMlp(HalconDotNet.HRegion,HalconDotNet.HClassMlp)">
            <summary>
              Add training samples from an image to the training data of a multilayer perceptron.
              Instance represents: Training image.
            </summary>
            <param name="classRegions">Regions of the classes to be trained.</param>
            <param name="MLPHandle">MLP handle.</param>
        </member>
        <member name="M:HalconDotNet.HImage.LearnNdimNorm(HalconDotNet.HRegion,HalconDotNet.HRegion,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,System.Double@)">
            <summary>
              Construct classes for class_ndim_norm.
              Instance represents: Multi-channel training image.
            </summary>
            <param name="foreground">Foreground pixels to be trained.</param>
            <param name="background">Background pixels to be trained (rejection class).</param>
            <param name="metric">Metric to be used. Default: "euclid"</param>
            <param name="distance">Maximum cluster radius. Default: 10.0</param>
            <param name="minNumberPercent">The ratio of the number of pixels in a cluster to the total number of pixels (in percent) must be larger than MinNumberPercent (otherwise the cluster is not output). Default: 0.01</param>
            <param name="center">Coordinates of all cluster centers.</param>
            <param name="quality">Overlap of the rejection class with the classified objects (1: no overlap).</param>
            <returns>Cluster radii or half edge lengths.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LearnNdimNorm(HalconDotNet.HRegion,HalconDotNet.HRegion,System.String,System.Double,System.Double,HalconDotNet.HTuple@,System.Double@)">
            <summary>
              Construct classes for class_ndim_norm.
              Instance represents: Multi-channel training image.
            </summary>
            <param name="foreground">Foreground pixels to be trained.</param>
            <param name="background">Background pixels to be trained (rejection class).</param>
            <param name="metric">Metric to be used. Default: "euclid"</param>
            <param name="distance">Maximum cluster radius. Default: 10.0</param>
            <param name="minNumberPercent">The ratio of the number of pixels in a cluster to the total number of pixels (in percent) must be larger than MinNumberPercent (otherwise the cluster is not output). Default: 0.01</param>
            <param name="center">Coordinates of all cluster centers.</param>
            <param name="quality">Overlap of the rejection class with the classified objects (1: no overlap).</param>
            <returns>Cluster radii or half edge lengths.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LearnNdimBox(HalconDotNet.HRegion,HalconDotNet.HRegion,HalconDotNet.HClassBox)">
            <summary>
              Train a classificator using a multi-channel image.
              Instance represents: Multi-channel training image.
            </summary>
            <param name="foreground">Foreground pixels to be trained.</param>
            <param name="background">Background pixels to be trained (rejection class).</param>
            <param name="classifHandle">Handle of the classifier.</param>
        </member>
        <member name="M:HalconDotNet.HImage.ClassNdimBox(HalconDotNet.HClassBox)">
            <summary>
              Classify pixels using hyper-cuboids.
              Instance represents: Multi channel input image.
            </summary>
            <param name="classifHandle">Handle of the classifier.</param>
            <returns>Classification result.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ClassNdimNorm(System.String,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Classify pixels using hyper-spheres or hyper-cubes.
              Instance represents: Multi channel input image.
            </summary>
            <param name="metric">Metric to be used. Default: "euclid"</param>
            <param name="singleMultiple">Return one region or one region for each cluster. Default: "single"</param>
            <param name="radius">Cluster radii or half edge lengths (returned by learn_ndim_norm).</param>
            <param name="center">Coordinates of the cluster centers (returned by learn_ndim_norm).</param>
            <returns>Classification result.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ClassNdimNorm(System.String,System.String,System.Double,System.Double)">
            <summary>
              Classify pixels using hyper-spheres or hyper-cubes.
              Instance represents: Multi channel input image.
            </summary>
            <param name="metric">Metric to be used. Default: "euclid"</param>
            <param name="singleMultiple">Return one region or one region for each cluster. Default: "single"</param>
            <param name="radius">Cluster radii or half edge lengths (returned by learn_ndim_norm).</param>
            <param name="center">Coordinates of the cluster centers (returned by learn_ndim_norm).</param>
            <returns>Classification result.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Class2dimSup(HalconDotNet.HImage,HalconDotNet.HRegion)">
            <summary>
              Segment an image using two-dimensional pixel classification.
              Instance represents: Input image (first channel).
            </summary>
            <param name="imageRow">Input image (second channel).</param>
            <param name="featureSpace">Region defining the feature space.</param>
            <returns>Classified regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Class2dimUnsup(HalconDotNet.HImage,System.Int32,System.Int32)">
            <summary>
              Segment two images by clustering.
              Instance represents: First input image.
            </summary>
            <param name="image2">Second input image.</param>
            <param name="threshold">Threshold (maximum distance to the cluster's center). Default: 15</param>
            <param name="numClasses">Number of classes (cluster centers). Default: 5</param>
            <returns>Classification result.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CheckDifference(HalconDotNet.HImage,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Compare two images pixel by pixel.
              Instance represents: Input image.
            </summary>
            <param name="pattern">Comparison image.</param>
            <param name="mode">Mode: return similar or different pixels. Default: "diff_outside"</param>
            <param name="diffLowerBound">Lower bound of the tolerated gray value difference. Default: -5</param>
            <param name="diffUpperBound">Upper bound of the tolerated gray value difference. Default: 5</param>
            <param name="grayOffset">Offset gray value subtracted from the input image. Default: 0</param>
            <param name="addRow">Row coordinate by which the comparison image is translated. Default: 0</param>
            <param name="addCol">Column coordinate by which the comparison image is translated. Default: 0</param>
            <returns>Points in which the two images are similar/different.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CharThreshold(HalconDotNet.HRegion,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Perform a threshold segmentation for extracting characters.
              Instance represents: Input image.
            </summary>
            <param name="histoRegion">Region in which the histogram is computed.</param>
            <param name="sigma">Sigma for the Gaussian smoothing of the histogram. Default: 2.0</param>
            <param name="percent">Percentage for the gray value difference. Default: 95</param>
            <param name="threshold">Calculated threshold.</param>
            <returns>Dark regions (characters).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CharThreshold(HalconDotNet.HRegion,System.Double,System.Double,System.Int32@)">
            <summary>
              Perform a threshold segmentation for extracting characters.
              Instance represents: Input image.
            </summary>
            <param name="histoRegion">Region in which the histogram is computed.</param>
            <param name="sigma">Sigma for the Gaussian smoothing of the histogram. Default: 2.0</param>
            <param name="percent">Percentage for the gray value difference. Default: 95</param>
            <param name="threshold">Calculated threshold.</param>
            <returns>Dark regions (characters).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LabelToRegion">
            <summary>
              Extract regions with equal gray values from an image.
              Instance represents: Label image.
            </summary>
            <returns>Regions having a constant gray value.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.NonmaxSuppressionAmp(System.String)">
            <summary>
              Suppress non-maximum points on an edge.
              Instance represents: Amplitude (gradient magnitude) image.
            </summary>
            <param name="mode">Select horizontal/vertical or undirected NMS. Default: "hvnms"</param>
            <returns>Image with thinned edge regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.NonmaxSuppressionDir(HalconDotNet.HImage,System.String)">
            <summary>
              Suppress non-maximum points on an edge using a direction image.
              Instance represents: Amplitude (gradient magnitude) image.
            </summary>
            <param name="imgDir">Direction image.</param>
            <param name="mode">Select non-maximum-suppression or interpolating NMS. Default: "nms"</param>
            <returns>Image with thinned edge regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.HysteresisThreshold(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32)">
            <summary>
              Perform a hysteresis threshold operation on an image.
              Instance represents: Input image.
            </summary>
            <param name="low">Lower threshold for the gray values. Default: 30</param>
            <param name="high">Upper threshold for the gray values. Default: 60</param>
            <param name="maxLength">Maximum length of a path of "potential" points to reach a "secure" point. Default: 10</param>
            <returns>Segmented region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.HysteresisThreshold(System.Int32,System.Int32,System.Int32)">
            <summary>
              Perform a hysteresis threshold operation on an image.
              Instance represents: Input image.
            </summary>
            <param name="low">Lower threshold for the gray values. Default: 30</param>
            <param name="high">Upper threshold for the gray values. Default: 60</param>
            <param name="maxLength">Maximum length of a path of "potential" points to reach a "secure" point. Default: 10</param>
            <returns>Segmented region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BinaryThreshold(System.String,System.String,HalconDotNet.HTuple@)">
            <summary>
              Segment an image using binary thresholding.
              Instance represents: Input Image.
            </summary>
            <param name="method">Segmentation method. Default: "max_separability"</param>
            <param name="lightDark">Extract foreground or background? Default: "dark"</param>
            <param name="usedThreshold">Used threshold.</param>
            <returns>Segmented output region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BinaryThreshold(System.String,System.String,System.Int32@)">
            <summary>
              Segment an image using binary thresholding.
              Instance represents: Input Image.
            </summary>
            <param name="method">Segmentation method. Default: "max_separability"</param>
            <param name="lightDark">Extract foreground or background? Default: "dark"</param>
            <param name="usedThreshold">Used threshold.</param>
            <returns>Segmented output region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LocalThreshold(System.String,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Segment an image using local thresholding.
              Instance represents: Input Image.
            </summary>
            <param name="method">Segmentation method. Default: "adapted_std_deviation"</param>
            <param name="lightDark">Extract foreground or background? Default: "dark"</param>
            <param name="genParamName">List of generic parameter names. Default: []</param>
            <param name="genParamValue">List of generic parameter values. Default: []</param>
            <returns>Segmented output region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LocalThreshold(System.String,System.String,System.String,System.Int32)">
            <summary>
              Segment an image using local thresholding.
              Instance represents: Input Image.
            </summary>
            <param name="method">Segmentation method. Default: "adapted_std_deviation"</param>
            <param name="lightDark">Extract foreground or background? Default: "dark"</param>
            <param name="genParamName">List of generic parameter names. Default: []</param>
            <param name="genParamValue">List of generic parameter values. Default: []</param>
            <returns>Segmented output region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.VarThreshold(System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Threshold an image by local mean and standard deviation analysis.
              Instance represents: Input image.
            </summary>
            <param name="maskWidth">Mask width for mean and deviation calculation. Default: 15</param>
            <param name="maskHeight">Mask height for mean and deviation calculation. Default: 15</param>
            <param name="stdDevScale">Factor for the standard deviation of the gray values. Default: 0.2</param>
            <param name="absThreshold">Minimum gray value difference from the mean. Default: 2</param>
            <param name="lightDark">Threshold type. Default: "dark"</param>
            <returns>Segmented regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.VarThreshold(System.Int32,System.Int32,System.Double,System.Double,System.String)">
            <summary>
              Threshold an image by local mean and standard deviation analysis.
              Instance represents: Input image.
            </summary>
            <param name="maskWidth">Mask width for mean and deviation calculation. Default: 15</param>
            <param name="maskHeight">Mask height for mean and deviation calculation. Default: 15</param>
            <param name="stdDevScale">Factor for the standard deviation of the gray values. Default: 0.2</param>
            <param name="absThreshold">Minimum gray value difference from the mean. Default: 2</param>
            <param name="lightDark">Threshold type. Default: "dark"</param>
            <returns>Segmented regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DynThreshold(HalconDotNet.HImage,HalconDotNet.HTuple,System.String)">
            <summary>
              Segment an image using a local threshold.
              Instance represents: Input image.
            </summary>
            <param name="thresholdImage">Image containing the local thresholds.</param>
            <param name="offset">Offset applied to ThresholdImage. Default: 5.0</param>
            <param name="lightDark">Extract light, dark or similar areas? Default: "light"</param>
            <returns>Segmented regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DynThreshold(HalconDotNet.HImage,System.Double,System.String)">
            <summary>
              Segment an image using a local threshold.
              Instance represents: Input image.
            </summary>
            <param name="thresholdImage">Image containing the local thresholds.</param>
            <param name="offset">Offset applied to ThresholdImage. Default: 5.0</param>
            <param name="lightDark">Extract light, dark or similar areas? Default: "light"</param>
            <returns>Segmented regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Threshold(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Segment an image using global threshold.
              Instance represents: Input image.
            </summary>
            <param name="minGray">Lower threshold for the gray values. Default: 128.0</param>
            <param name="maxGray">Upper threshold for the gray values. Default: 255.0</param>
            <returns>Segmented region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Threshold(System.Double,System.Double)">
            <summary>
              Segment an image using global threshold.
              Instance represents: Input image.
            </summary>
            <param name="minGray">Lower threshold for the gray values. Default: 128.0</param>
            <param name="maxGray">Upper threshold for the gray values. Default: 255.0</param>
            <returns>Segmented region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ThresholdSubPix(HalconDotNet.HTuple)">
            <summary>
              Extract level crossings from an image with subpixel accuracy.
              Instance represents: Input image.
            </summary>
            <param name="threshold">Threshold for the level crossings. Default: 128</param>
            <returns>Extracted level crossings.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ThresholdSubPix(System.Double)">
            <summary>
              Extract level crossings from an image with subpixel accuracy.
              Instance represents: Input image.
            </summary>
            <param name="threshold">Threshold for the level crossings. Default: 128</param>
            <returns>Extracted level crossings.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.RegiongrowingN(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32)">
            <summary>
              Segment an image using regiongrowing for multi-channel images.
              Instance represents: Input image.
            </summary>
            <param name="metric">Metric for the distance of the feature vectors. Default: "2-norm"</param>
            <param name="minTolerance">Lower threshold for the features' distance. Default: 0.0</param>
            <param name="maxTolerance">Upper threshold for the features' distance. Default: 20.0</param>
            <param name="minSize">Minimum size of the output regions. Default: 30</param>
            <returns>Segmented regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.RegiongrowingN(System.String,System.Double,System.Double,System.Int32)">
            <summary>
              Segment an image using regiongrowing for multi-channel images.
              Instance represents: Input image.
            </summary>
            <param name="metric">Metric for the distance of the feature vectors. Default: "2-norm"</param>
            <param name="minTolerance">Lower threshold for the features' distance. Default: 0.0</param>
            <param name="maxTolerance">Upper threshold for the features' distance. Default: 20.0</param>
            <param name="minSize">Minimum size of the output regions. Default: 30</param>
            <returns>Segmented regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Regiongrowing(System.Int32,System.Int32,HalconDotNet.HTuple,System.Int32)">
            <summary>
              Segment an image using regiongrowing.
              Instance represents: Input image.
            </summary>
            <param name="row">Vertical distance between tested pixels (height of the raster). Default: 3</param>
            <param name="column">Horizontal distance between tested pixels (height of the raster). Default: 3</param>
            <param name="tolerance">Points with a gray value difference less then or equal to tolerance are accumulated into the same object. Default: 6.0</param>
            <param name="minSize">Minimum size of the output regions. Default: 100</param>
            <returns>Segmented regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Regiongrowing(System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
              Segment an image using regiongrowing.
              Instance represents: Input image.
            </summary>
            <param name="row">Vertical distance between tested pixels (height of the raster). Default: 3</param>
            <param name="column">Horizontal distance between tested pixels (height of the raster). Default: 3</param>
            <param name="tolerance">Points with a gray value difference less then or equal to tolerance are accumulated into the same object. Default: 6.0</param>
            <param name="minSize">Minimum size of the output regions. Default: 100</param>
            <returns>Segmented regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.RegiongrowingMean(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Int32)">
            <summary>
              Perform a regiongrowing using mean gray values.
              Instance represents: Input image.
            </summary>
            <param name="startRows">Row coordinates of the starting points. Default: []</param>
            <param name="startColumns">Column coordinates of the starting points. Default: []</param>
            <param name="tolerance">Maximum deviation from the mean. Default: 5.0</param>
            <param name="minSize">Minimum size of a region. Default: 100</param>
            <returns>Segmented regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.RegiongrowingMean(System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
              Perform a regiongrowing using mean gray values.
              Instance represents: Input image.
            </summary>
            <param name="startRows">Row coordinates of the starting points. Default: []</param>
            <param name="startColumns">Column coordinates of the starting points. Default: []</param>
            <param name="tolerance">Maximum deviation from the mean. Default: 5.0</param>
            <param name="minSize">Minimum size of a region. Default: 100</param>
            <returns>Segmented regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Pouring(System.String,System.Int32,System.Int32)">
            <summary>
              Segment an image by "pouring water" over it.
              Instance represents: Input image.
            </summary>
            <param name="mode">Mode of operation. Default: "all"</param>
            <param name="minGray">All gray values smaller than this threshold are disregarded. Default: 0</param>
            <param name="maxGray">All gray values larger than this threshold are disregarded. Default: 255</param>
            <returns>Segmented regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.WatershedsThreshold(HalconDotNet.HTuple)">
            <summary>
              Extract watershed basins from an image using a threshold.
              Instance represents: Image to be segmented.
            </summary>
            <param name="threshold">Threshold for the watersheds. Default: 10</param>
            <returns>Segments found (dark basins).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.WatershedsThreshold(System.Int32)">
            <summary>
              Extract watershed basins from an image using a threshold.
              Instance represents: Image to be segmented.
            </summary>
            <param name="threshold">Threshold for the watersheds. Default: 10</param>
            <returns>Segments found (dark basins).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Watersheds(HalconDotNet.HRegion@)">
            <summary>
              Extract watersheds and basins from an image.
              Instance represents: Input image.
            </summary>
            <param name="watersheds">Watersheds between the basins.</param>
            <returns>Segmented basins.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ZeroCrossing">
            <summary>
              Extract zero crossings from an image.
              Instance represents: Input image.
            </summary>
            <returns>Zero crossings.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ZeroCrossingSubPix">
            <summary>
              Extract zero crossings from an image with subpixel accuracy.
              Instance represents: Input image.
            </summary>
            <returns>Extracted zero crossings.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DualThreshold(System.Int32,System.Double,System.Double)">
            <summary>
              Threshold operator for signed images.
              Instance represents: Input image.
            </summary>
            <param name="minSize">Regions smaller than MinSize are suppressed. Default: 20</param>
            <param name="minGray">Regions whose maximum absolute gray value is smaller than MinGray are suppressed. Default: 5.0</param>
            <param name="threshold">Regions that have a gray value smaller than Threshold (or larger than -Threshold) are suppressed. Default: 2.0</param>
            <returns>Positive and negative regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ExpandLine(System.Int32,System.String,System.String,HalconDotNet.HTuple)">
            <summary>
              Expand a region starting at a given line.
              Instance represents: Input image.
            </summary>
            <param name="coordinate">Row or column coordinate. Default: 256</param>
            <param name="expandType">Stopping criterion. Default: "gradient"</param>
            <param name="rowColumn">Segmentation mode (row or column). Default: "row"</param>
            <param name="threshold">Threshold for the expansion. Default: 3.0</param>
            <returns>Extracted segments.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ExpandLine(System.Int32,System.String,System.String,System.Double)">
            <summary>
              Expand a region starting at a given line.
              Instance represents: Input image.
            </summary>
            <param name="coordinate">Row or column coordinate. Default: 256</param>
            <param name="expandType">Stopping criterion. Default: "gradient"</param>
            <param name="rowColumn">Segmentation mode (row or column). Default: "row"</param>
            <param name="threshold">Threshold for the expansion. Default: 3.0</param>
            <returns>Extracted segments.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LocalMin">
            <summary>
              Detect all local minima in an image.
              Instance represents: Image to be processed.
            </summary>
            <returns>Extracted local minima as regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Lowlands">
            <summary>
              Detect all gray value lowlands.
              Instance represents: Image to be processed.
            </summary>
            <returns>Extracted lowlands as regions (one region for each lowland).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LowlandsCenter">
            <summary>
              Detect the centers of all gray value lowlands.
              Instance represents: Image to be processed.
            </summary>
            <returns>Centers of gravity of the extracted lowlands as regions (one region for each lowland).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LocalMax">
            <summary>
              Detect all local maxima in an image.
              Instance represents: Input image.
            </summary>
            <returns>Extracted local maxima as a region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Plateaus">
            <summary>
              Detect all gray value plateaus.
              Instance represents: Input image.
            </summary>
            <returns>Extracted plateaus as regions (one region for each plateau).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PlateausCenter">
            <summary>
              Detect the centers of all gray value plateaus.
              Instance represents: Input image.
            </summary>
            <returns>Centers of gravity of the extracted plateaus as regions (one region for each plateau).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AutoThreshold(HalconDotNet.HTuple)">
            <summary>
              Segment an image using thresholds determined from its histogram.
              Instance represents: Input image.
            </summary>
            <param name="sigma">Sigma for the Gaussian smoothing of the histogram. Default: 2.0</param>
            <returns>Regions with gray values within the automatically determined intervals.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AutoThreshold(System.Double)">
            <summary>
              Segment an image using thresholds determined from its histogram.
              Instance represents: Input image.
            </summary>
            <param name="sigma">Sigma for the Gaussian smoothing of the histogram. Default: 2.0</param>
            <returns>Regions with gray values within the automatically determined intervals.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BinThreshold">
            <summary>
              Segment an image using an automatically determined threshold.
              Instance represents: Input image.
            </summary>
            <returns>Dark regions of the image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FastThreshold(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32)">
            <summary>
              Fast thresholding of images using global thresholds.
              Instance represents: Input image.
            </summary>
            <param name="minGray">Lower threshold for the gray values. Default: 128</param>
            <param name="maxGray">Upper threshold for the gray values. Default: 255.0</param>
            <param name="minSize">Minimum size of objects to be extracted. Default: 20</param>
            <returns>Segmented regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FastThreshold(System.Double,System.Double,System.Int32)">
            <summary>
              Fast thresholding of images using global thresholds.
              Instance represents: Input image.
            </summary>
            <param name="minGray">Lower threshold for the gray values. Default: 128</param>
            <param name="maxGray">Upper threshold for the gray values. Default: 255.0</param>
            <param name="minSize">Minimum size of objects to be extracted. Default: 20</param>
            <returns>Segmented regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ExpandGray(HalconDotNet.HRegion,HalconDotNet.HRegion,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple)">
            <summary>
              Fill gaps between regions (depending on gray value or color) or split overlapping regions.
              Instance represents: Image (possibly multi-channel) for gray value or color comparison.
            </summary>
            <param name="regions">Regions for which the gaps are to be closed, or which are to be separated.</param>
            <param name="forbiddenArea">Regions in which no expansion takes place.</param>
            <param name="iterations">Number of iterations. Default: "maximal"</param>
            <param name="mode">Expansion mode. Default: "image"</param>
            <param name="threshold">Maximum difference between the gray value or color at the region's border and a candidate for expansion. Default: 32</param>
            <returns>Expanded or separated regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ExpandGray(HalconDotNet.HRegion,HalconDotNet.HRegion,System.String,System.String,System.Int32)">
            <summary>
              Fill gaps between regions (depending on gray value or color) or split overlapping regions.
              Instance represents: Image (possibly multi-channel) for gray value or color comparison.
            </summary>
            <param name="regions">Regions for which the gaps are to be closed, or which are to be separated.</param>
            <param name="forbiddenArea">Regions in which no expansion takes place.</param>
            <param name="iterations">Number of iterations. Default: "maximal"</param>
            <param name="mode">Expansion mode. Default: "image"</param>
            <param name="threshold">Maximum difference between the gray value or color at the region's border and a candidate for expansion. Default: 32</param>
            <returns>Expanded or separated regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ExpandGrayRef(HalconDotNet.HRegion,HalconDotNet.HRegion,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Fill gaps between regions (depending on gray value or color) or split overlapping regions.
              Instance represents: Image (possibly multi-channel) for gray value or color comparison.
            </summary>
            <param name="regions">Regions for which the gaps are to be closed, or which are to be separated.</param>
            <param name="forbiddenArea">Regions in which no expansion takes place.</param>
            <param name="iterations">Number of iterations. Default: "maximal"</param>
            <param name="mode">Expansion mode. Default: "image"</param>
            <param name="refGray">Reference gray value or color for comparison. Default: 128</param>
            <param name="threshold">Maximum difference between the reference gray value or color and a candidate for expansion. Default: 32</param>
            <returns>Expanded or separated regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ExpandGrayRef(HalconDotNet.HRegion,HalconDotNet.HRegion,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Fill gaps between regions (depending on gray value or color) or split overlapping regions.
              Instance represents: Image (possibly multi-channel) for gray value or color comparison.
            </summary>
            <param name="regions">Regions for which the gaps are to be closed, or which are to be separated.</param>
            <param name="forbiddenArea">Regions in which no expansion takes place.</param>
            <param name="iterations">Number of iterations. Default: "maximal"</param>
            <param name="mode">Expansion mode. Default: "image"</param>
            <param name="refGray">Reference gray value or color for comparison. Default: 128</param>
            <param name="threshold">Maximum difference between the reference gray value or color and a candidate for expansion. Default: 32</param>
            <returns>Expanded or separated regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ObjDiff(HalconDotNet.HImage)">
            <summary>
              Calculate the difference of two object tuples.
              Instance represents: Object tuple 1.
            </summary>
            <param name="objectsSub">Object tuple 2.</param>
            <returns>Objects from Objects that are not part of ObjectsSub.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SetGrayval(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set single gray values in an image.
              Instance represents: Image to be modified.
            </summary>
            <param name="row">Row coordinates of the pixels to be modified. Default: 0</param>
            <param name="column">Column coordinates of the pixels to be modified. Default: 0</param>
            <param name="grayval">Gray values to be used. Default: 255.0</param>
        </member>
        <member name="M:HalconDotNet.HImage.SetGrayval(System.Int32,System.Int32,System.Double)">
            <summary>
              Set single gray values in an image.
              Instance represents: Image to be modified.
            </summary>
            <param name="row">Row coordinates of the pixels to be modified. Default: 0</param>
            <param name="column">Column coordinates of the pixels to be modified. Default: 0</param>
            <param name="grayval">Gray values to be used. Default: 255.0</param>
        </member>
        <member name="M:HalconDotNet.HImage.PaintXld(HalconDotNet.HXLD,HalconDotNet.HTuple)">
            <summary>
              Paint XLD objects into an image.
              Instance represents: Image in which the xld objects are to be painted.
            </summary>
            <param name="XLD">XLD objects to be painted into the input image.</param>
            <param name="grayval">Desired gray value of the xld object. Default: 255.0</param>
            <returns>Image containing the result.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PaintXld(HalconDotNet.HXLD,System.Double)">
            <summary>
              Paint XLD objects into an image.
              Instance represents: Image in which the xld objects are to be painted.
            </summary>
            <param name="XLD">XLD objects to be painted into the input image.</param>
            <param name="grayval">Desired gray value of the xld object. Default: 255.0</param>
            <returns>Image containing the result.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PaintRegion(HalconDotNet.HRegion,HalconDotNet.HTuple,System.String)">
            <summary>
              Paint regions into an image.
              Instance represents: Image in which the regions are to be painted.
            </summary>
            <param name="region">Regions to be painted into the input image.</param>
            <param name="grayval">Desired gray values of the regions. Default: 255.0</param>
            <param name="type">Paint regions filled or as boundaries. Default: "fill"</param>
            <returns>Image containing the result.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PaintRegion(HalconDotNet.HRegion,System.Double,System.String)">
            <summary>
              Paint regions into an image.
              Instance represents: Image in which the regions are to be painted.
            </summary>
            <param name="region">Regions to be painted into the input image.</param>
            <param name="grayval">Desired gray values of the regions. Default: 255.0</param>
            <param name="type">Paint regions filled or as boundaries. Default: "fill"</param>
            <returns>Image containing the result.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.OverpaintRegion(HalconDotNet.HRegion,HalconDotNet.HTuple,System.String)">
            <summary>
              Overpaint regions in an image.
              Instance represents: Image in which the regions are to be painted.
            </summary>
            <param name="region">Regions to be painted into the input image.</param>
            <param name="grayval">Desired gray values of the regions. Default: 255.0</param>
            <param name="type">Paint regions filled or as boundaries. Default: "fill"</param>
        </member>
        <member name="M:HalconDotNet.HImage.OverpaintRegion(HalconDotNet.HRegion,System.Double,System.String)">
            <summary>
              Overpaint regions in an image.
              Instance represents: Image in which the regions are to be painted.
            </summary>
            <param name="region">Regions to be painted into the input image.</param>
            <param name="grayval">Desired gray values of the regions. Default: 255.0</param>
            <param name="type">Paint regions filled or as boundaries. Default: "fill"</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenImageProto(HalconDotNet.HTuple)">
            <summary>
              Create an image with a specified constant gray value.
              Instance represents: Input image.
            </summary>
            <param name="grayval">Gray value to be used for the output image. Default: 0</param>
            <returns>Image with constant gray value.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenImageProto(System.Double)">
            <summary>
              Create an image with a specified constant gray value.
              Instance represents: Input image.
            </summary>
            <param name="grayval">Gray value to be used for the output image. Default: 0</param>
            <returns>Image with constant gray value.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PaintGray(HalconDotNet.HImage)">
            <summary>
              Paint the gray values of an image into another image.
              Instance represents: Input image containing the desired gray values.
            </summary>
            <param name="imageDestination">Input image to be painted over.</param>
            <returns>Result image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.OverpaintGray(HalconDotNet.HImage)">
            <summary>
              Overpaint the gray values of an image.
              Instance represents: Input image to be painted over.
            </summary>
            <param name="imageSource">Input image containing the desired gray values.</param>
        </member>
        <member name="M:HalconDotNet.HImage.CopyObj(System.Int32,System.Int32)">
            <summary>
              Copy an iconic object in the HALCON database.
              Instance represents: Objects to be copied.
            </summary>
            <param name="index">Starting index of the objects to be copied. Default: 1</param>
            <param name="numObj">Number of objects to be copied or -1. Default: 1</param>
            <returns>Copied objects.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ConcatObj(HalconDotNet.HImage)">
            <summary>
              Concatenate two iconic object tuples.
              Instance represents: Object tuple 1.
            </summary>
            <param name="objects2">Object tuple 2.</param>
            <returns>Concatenated objects.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CopyImage">
            <summary>
              Copy an image and allocate new memory for it.
              Instance represents: Image to be copied.
            </summary>
            <returns>Copied image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SelectObj(HalconDotNet.HTuple)">
            <summary>
              Select objects from an object tuple.
              Instance represents: Input objects.
            </summary>
            <param name="index">Indices of the objects to be selected. Default: 1</param>
            <returns>Selected objects.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SelectObj(System.Int32)">
            <summary>
              Select objects from an object tuple.
              Instance represents: Input objects.
            </summary>
            <param name="index">Indices of the objects to be selected. Default: 1</param>
            <returns>Selected objects.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CompareObj(HalconDotNet.HImage,HalconDotNet.HTuple)">
            <summary>
              Compare iconic objects regarding equality.
              Instance represents: Reference objects.
            </summary>
            <param name="objects2">Test objects.</param>
            <param name="epsilon">Maximum allowed difference between two gray values or  coordinates etc. Default: 0.0</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CompareObj(HalconDotNet.HImage,System.Double)">
            <summary>
              Compare iconic objects regarding equality.
              Instance represents: Reference objects.
            </summary>
            <param name="objects2">Test objects.</param>
            <param name="epsilon">Maximum allowed difference between two gray values or  coordinates etc. Default: 0.0</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.TestEqualObj(HalconDotNet.HImage)">
            <summary>
              Compare image objects regarding equality.
              Instance represents: Test objects.
            </summary>
            <param name="objects2">Comparative objects.</param>
            <returns>boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenImageInterleaved(System.IntPtr,System.String,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Create a three-channel image from a pointer to the interleaved pixels.
              Modified instance represents: Created image with new image matrix.
            </summary>
            <param name="pixelPointer">Pointer to interleaved pixels.</param>
            <param name="colorFormat">Format of the input pixels. Default: "rgb"</param>
            <param name="originalWidth">Width of input image. Default: 512</param>
            <param name="originalHeight">Height of input image. Default: 512</param>
            <param name="alignment">Reserved.</param>
            <param name="type">Pixel type of output image. Default: "byte"</param>
            <param name="imageWidth">Width of output image. Default: 0</param>
            <param name="imageHeight">Height of output image. Default: 0</param>
            <param name="startRow">Line number of upper left corner of desired image part. Default: 0</param>
            <param name="startColumn">Column number of upper left corner of desired image part. Default: 0</param>
            <param name="bitsPerChannel">Number of used bits per pixel and channel of the output image (-1: All bits are used). Default: -1</param>
            <param name="bitShift">Number of bits that the color values of the input pixels are shifted to the right (only uint2 images). Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenImage3(System.String,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
              Create an image from three pointers to the pixels (red/green/blue).
              Modified instance represents: Created image with new image matrix.
            </summary>
            <param name="type">Pixel type. Default: "byte"</param>
            <param name="width">Width of image. Default: 512</param>
            <param name="height">Height of image. Default: 512</param>
            <param name="pixelPointerRed">Pointer to first red value (channel 1).</param>
            <param name="pixelPointerGreen">Pointer to first green value (channel 2).</param>
            <param name="pixelPointerBlue">Pointer to first blue value (channel 3).</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenImage1(System.String,System.Int32,System.Int32,System.IntPtr)">
            <summary>
              Create an image from a pointer to the pixels.
              Modified instance represents: Created image with new image matrix.
            </summary>
            <param name="type">Pixel type. Default: "byte"</param>
            <param name="width">Width of image. Default: 512</param>
            <param name="height">Height of image. Default: 512</param>
            <param name="pixelPointer">Pointer to first gray value.</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenImageConst(System.String,System.Int32,System.Int32)">
            <summary>
              Create an image with constant gray value.
              Modified instance represents: Created image with new image matrix.
            </summary>
            <param name="type">Pixel type. Default: "byte"</param>
            <param name="width">Width of image. Default: 512</param>
            <param name="height">Height of image. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenImageGrayRamp(System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Create a gray value ramp.
              Modified instance represents: Created image with new image matrix.
            </summary>
            <param name="alpha">Gradient in line direction. Default: 1.0</param>
            <param name="beta">Gradient in column direction. Default: 1.0</param>
            <param name="mean">Mean gray value. Default: 128</param>
            <param name="row">Line index of reference point. Default: 256</param>
            <param name="column">Column index of reference point. Default: 256</param>
            <param name="width">Width of image. Default: 512</param>
            <param name="height">Height of image. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenImage3Extern(System.String,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
              Create a three-channel image from three pointers on the pixels with storage management.
              Modified instance represents: Created HALCON image.
            </summary>
            <param name="type">Pixel type. Default: "byte"</param>
            <param name="width">Width of image. Default: 512</param>
            <param name="height">Height of image. Default: 512</param>
            <param name="pointerRed">Pointer to the first gray value of the first channel.</param>
            <param name="pointerGreen">Pointer to the first gray value of the second channel.</param>
            <param name="pointerBlue">Pointer to the first gray value of the third channel.</param>
            <param name="clearProc">Pointer to the procedure re-releasing the memory of the image when deleting the object. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenImage1Extern(System.String,System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
              Create an image from a pointer on the pixels with storage management.
              Modified instance represents: Created HALCON image.
            </summary>
            <param name="type">Pixel type. Default: "byte"</param>
            <param name="width">Width of image. Default: 512</param>
            <param name="height">Height of image. Default: 512</param>
            <param name="pixelPointer">Pointer to the first gray value.</param>
            <param name="clearProc">Pointer to the procedure re-releasing the memory of the image when deleting the object. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenImage1Rect(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.IntPtr)">
            <summary>
              Create an image with a rectangular domain from a pointer on the pixels (with storage management).
              Modified instance represents: Created HALCON image.
            </summary>
            <param name="pixelPointer">Pointer to the first pixel.</param>
            <param name="width">Width of the image. Default: 512</param>
            <param name="height">Height of the image. Default: 512</param>
            <param name="verticalPitch">Distance (in bytes) between pixel m in row n and pixel m in row n+1 of the 'input image'.</param>
            <param name="horizontalBitPitch">Distance between two neighboring pixels in bits . Default: 8</param>
            <param name="bitsPerPixel">Number of used bits per pixel. Default: 8</param>
            <param name="doCopy">Copy image data. Default: "false"</param>
            <param name="clearProc">Pointer to the procedure releasing the memory of the image when deleting the object. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HImage.GetImagePointer1Rect(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Access to the image data pointer and the image data inside the smallest rectangle of the domain of the input image.
              Instance represents: Input image (Himage).
            </summary>
            <param name="width">Width of the output image.</param>
            <param name="height">Height of the output image.</param>
            <param name="verticalPitch">Width(input image)*(HorizontalBitPitch/8).</param>
            <param name="horizontalBitPitch">Distance between two neighboring pixels in bits .</param>
            <param name="bitsPerPixel">Number of used bits per pixel.</param>
            <returns>Pointer to the image data.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GetImagePointer3(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Access the pointers of a colored image.
              Instance represents: Input image.
            </summary>
            <param name="pointerRed">Pointer to the pixels of the first channel.</param>
            <param name="pointerGreen">Pointer to the pixels of the second channel.</param>
            <param name="pointerBlue">Pointer to the pixels of the third channel.</param>
            <param name="type">Type of image.</param>
            <param name="width">Width of image.</param>
            <param name="height">Height of image.</param>
        </member>
        <member name="M:HalconDotNet.HImage.GetImagePointer3(System.IntPtr@,System.IntPtr@,System.IntPtr@,System.String@,System.Int32@,System.Int32@)">
            <summary>
              Access the pointers of a colored image.
              Instance represents: Input image.
            </summary>
            <param name="pointerRed">Pointer to the pixels of the first channel.</param>
            <param name="pointerGreen">Pointer to the pixels of the second channel.</param>
            <param name="pointerBlue">Pointer to the pixels of the third channel.</param>
            <param name="type">Type of image.</param>
            <param name="width">Width of image.</param>
            <param name="height">Height of image.</param>
        </member>
        <member name="M:HalconDotNet.HImage.GetImagePointer1(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Access the pointer of a channel.
              Instance represents: Input image.
            </summary>
            <param name="type">Type of image.</param>
            <param name="width">Width of image.</param>
            <param name="height">Height of image.</param>
            <returns>Pointer to the image data in the HALCON database.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GetImagePointer1(System.String@,System.Int32@,System.Int32@)">
            <summary>
              Access the pointer of a channel.
              Instance represents: Input image.
            </summary>
            <param name="type">Type of image.</param>
            <param name="width">Width of image.</param>
            <param name="height">Height of image.</param>
            <returns>Pointer to the image data in the HALCON database.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GetImageType">
            <summary>
              Return the type of an image.
              Instance represents: Input image.
            </summary>
            <returns>Type of image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GetImageSize(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Return the size of an image.
              Instance represents: Input image.
            </summary>
            <param name="width">Width of image.</param>
            <param name="height">Height of image.</param>
        </member>
        <member name="M:HalconDotNet.HImage.GetImageSize(System.Int32@,System.Int32@)">
            <summary>
              Return the size of an image.
              Instance represents: Input image.
            </summary>
            <param name="width">Width of image.</param>
            <param name="height">Height of image.</param>
        </member>
        <member name="M:HalconDotNet.HImage.GetImageTime(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Request time at which the image was created.
              Instance represents: Input image.
            </summary>
            <param name="second">Seconds (0..59).</param>
            <param name="minute">Minutes (0..59).</param>
            <param name="hour">Hours (0..23).</param>
            <param name="day">Day of the month (1..31).</param>
            <param name="YDay">Day of the year (1..366).</param>
            <param name="month">Month (1..12).</param>
            <param name="year">Year (xxxx).</param>
            <returns>Milliseconds (0..999).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GetGrayvalInterpolated(HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Return gray values of an image at the positions given by tuples of rows and columns.
              Instance represents: Image whose gray values are to be accessed.
            </summary>
            <param name="row">Row coordinates of positions. Default: 0</param>
            <param name="column">Column coordinates of positions. Default: 0</param>
            <param name="interpolation">Interpolation method. Default: "bilinear"</param>
            <returns>Gray values of the selected image coordinates.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GetGrayvalInterpolated(System.Double,System.Double,System.String)">
            <summary>
              Return gray values of an image at the positions given by tuples of rows and columns.
              Instance represents: Image whose gray values are to be accessed.
            </summary>
            <param name="row">Row coordinates of positions. Default: 0</param>
            <param name="column">Column coordinates of positions. Default: 0</param>
            <param name="interpolation">Interpolation method. Default: "bilinear"</param>
            <returns>Gray values of the selected image coordinates.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GetGrayval(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Access the gray values of an image object.
              Instance represents: Image whose gray value is to be accessed.
            </summary>
            <param name="row">Row coordinates of pixels to be viewed. Default: 0</param>
            <param name="column">Column coordinates of pixels to be viewed. Default: 0</param>
            <returns>Gray values of indicated pixels.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GetGrayval(System.Int32,System.Int32)">
            <summary>
              Access the gray values of an image object.
              Instance represents: Image whose gray value is to be accessed.
            </summary>
            <param name="row">Row coordinates of pixels to be viewed. Default: 0</param>
            <param name="column">Column coordinates of pixels to be viewed. Default: 0</param>
            <returns>Gray values of indicated pixels.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DoOcvSimple(HalconDotNet.HOCV,HalconDotNet.HTuple,System.String,System.String,System.String,System.String,System.Double)">
            <summary>
              Verification of a pattern using an OCV tool.
              Instance represents: Characters to be verified.
            </summary>
            <param name="OCVHandle">Handle of the OCV tool.</param>
            <param name="patternName">Name of the character. Default: "a"</param>
            <param name="adaptPos">Adaption to vertical and horizontal translation. Default: "true"</param>
            <param name="adaptSize">Adaption to vertical and horizontal scaling of the size. Default: "true"</param>
            <param name="adaptAngle">Adaption to changes of the orientation (not implemented). Default: "false"</param>
            <param name="adaptGray">Adaption to additive and scaling gray value changes. Default: "true"</param>
            <param name="threshold">Minimum difference between objects. Default: 10</param>
            <returns>Evaluation of the character.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DoOcvSimple(HalconDotNet.HOCV,System.String,System.String,System.String,System.String,System.String,System.Double)">
            <summary>
              Verification of a pattern using an OCV tool.
              Instance represents: Characters to be verified.
            </summary>
            <param name="OCVHandle">Handle of the OCV tool.</param>
            <param name="patternName">Name of the character. Default: "a"</param>
            <param name="adaptPos">Adaption to vertical and horizontal translation. Default: "true"</param>
            <param name="adaptSize">Adaption to vertical and horizontal scaling of the size. Default: "true"</param>
            <param name="adaptAngle">Adaption to changes of the orientation (not implemented). Default: "false"</param>
            <param name="adaptGray">Adaption to additive and scaling gray value changes. Default: "true"</param>
            <param name="threshold">Minimum difference between objects. Default: 10</param>
            <returns>Evaluation of the character.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.TraindOcvProj(HalconDotNet.HOCV,HalconDotNet.HTuple,System.String)">
            <summary>
              Training of an OCV tool.
              Instance represents: Pattern to be trained.
            </summary>
            <param name="OCVHandle">Handle of the OCV tool to be trained.</param>
            <param name="name">Name(s) of the object(s) to analyse. Default: "a"</param>
            <param name="mode">Mode for training (only one mode implemented). Default: "single"</param>
        </member>
        <member name="M:HalconDotNet.HImage.TraindOcvProj(HalconDotNet.HOCV,System.String,System.String)">
            <summary>
              Training of an OCV tool.
              Instance represents: Pattern to be trained.
            </summary>
            <param name="OCVHandle">Handle of the OCV tool to be trained.</param>
            <param name="name">Name(s) of the object(s) to analyse. Default: "a"</param>
            <param name="mode">Mode for training (only one mode implemented). Default: "single"</param>
        </member>
        <member name="M:HalconDotNet.HImage.GetFeaturesOcrClassKnn(HalconDotNet.HOCRKnn,System.String)">
            <summary>
              Compute the features of a character.
              Instance represents: Input character.
            </summary>
            <param name="OCRHandle">Handle of the k-NN classifier.</param>
            <param name="transform">Should the feature vector be transformed with the preprocessing? Default: "true"</param>
            <returns>Feature vector of the character.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GetFeaturesOcrClassSvm(HalconDotNet.HOCRSvm,System.String)">
            <summary>
              Compute the features of a character.
              Instance represents: Input character.
            </summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="transform">Should the feature vector be transformed with the preprocessing? Default: "true"</param>
            <returns>Feature vector of the character.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GetFeaturesOcrClassMlp(HalconDotNet.HOCRMlp,System.String)">
            <summary>
              Compute the features of a character.
              Instance represents: Input character.
            </summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="transform">Should the feature vector be transformed with the preprocessing? Default: "true"</param>
            <returns>Feature vector of the character.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CropDomainRel(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Cut out an image area relative to the domain.
              Instance represents: Input image.
            </summary>
            <param name="top">Number of rows clipped at the top. Default: -1</param>
            <param name="left">Number of columns clipped at the left. Default: -1</param>
            <param name="bottom">Number of rows clipped at the bottom. Default: -1</param>
            <param name="right">Number of columns clipped at the right. Default: -1</param>
            <returns>Image area.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.OcrGetFeatures(HalconDotNet.HOCRBox)">
            <summary>
              Access the features which correspond to a character.
              Instance represents: Characters to be trained.
            </summary>
            <param name="ocrHandle">ID of the desired OCR-classifier.</param>
            <returns>Feature vector.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.WriteOcrTrainfImage(HalconDotNet.HTuple,System.String)">
            <summary>
              Write characters into a training file.
              Instance represents: Characters to be trained.
            </summary>
            <param name="classVal">Class (name) of the characters.</param>
            <param name="trainingFile">Name of the training file. Default: "train_ocr"</param>
        </member>
        <member name="M:HalconDotNet.HImage.WriteOcrTrainfImage(System.String,System.String)">
            <summary>
              Write characters into a training file.
              Instance represents: Characters to be trained.
            </summary>
            <param name="classVal">Class (name) of the characters.</param>
            <param name="trainingFile">Name of the training file. Default: "train_ocr"</param>
        </member>
        <member name="M:HalconDotNet.HImage.ReadOcrTrainfSelect(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Read training specific characters from files and convert to images.
              Modified instance represents: Images read from file.
            </summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="searchNames">Names of the characters to be extracted. Default: "0"</param>
            <returns>Names of the read characters.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ReadOcrTrainfSelect(System.String,System.String)">
            <summary>
              Read training specific characters from files and convert to images.
              Modified instance represents: Images read from file.
            </summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="searchNames">Names of the characters to be extracted. Default: "0"</param>
            <returns>Names of the read characters.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ReadOcrTrainf(HalconDotNet.HTuple)">
            <summary>
              Read training characters from files and convert to images.
              Modified instance represents: Images read from file.
            </summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <returns>Names of the read characters.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ReadOcrTrainf(System.String)">
            <summary>
              Read training characters from files and convert to images.
              Modified instance represents: Images read from file.
            </summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <returns>Names of the read characters.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayBothat(HalconDotNet.HImage)">
            <summary>
              Perform a gray value bottom hat transformation on an image.
              Instance represents: Input image.
            </summary>
            <param name="SE">Structuring element.</param>
            <returns>Bottom hat image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayTophat(HalconDotNet.HImage)">
            <summary>
              Perform a gray value top hat transformation on an image.
              Instance represents: Input image.
            </summary>
            <param name="SE">Structuring element.</param>
            <returns>Top hat image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayClosing(HalconDotNet.HImage)">
            <summary>
              Perform a gray value closing on an image.
              Instance represents: Input image.
            </summary>
            <param name="SE">Structuring element.</param>
            <returns>Gray-closed image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayOpening(HalconDotNet.HImage)">
            <summary>
              Perform a gray value opening on an image.
              Instance represents: Input image.
            </summary>
            <param name="SE">Structuring element.</param>
            <returns>Gray-opened image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayDilation(HalconDotNet.HImage)">
            <summary>
              Perform a gray value dilation on an image.
              Instance represents: Input image.
            </summary>
            <param name="SE">Structuring element.</param>
            <returns>Gray-dilated image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayErosion(HalconDotNet.HImage)">
            <summary>
              Perform a gray value erosion on an image.
              Instance represents: Input image.
            </summary>
            <param name="SE">Structuring element.</param>
            <returns>Gray-eroded image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ReadGraySe(System.String)">
            <summary>
              Load a structuring element for gray morphology.
              Modified instance represents: Generated structuring element.
            </summary>
            <param name="fileName">Name of the file containing the structuring element.</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenDiscSe(System.String,System.Int32,System.Int32,HalconDotNet.HTuple)">
            <summary>
              Generate ellipsoidal structuring elements for gray morphology.
              Modified instance represents: Generated structuring element.
            </summary>
            <param name="type">Pixel type. Default: "byte"</param>
            <param name="width">Width of the structuring element. Default: 5</param>
            <param name="height">Height of the structuring element. Default: 5</param>
            <param name="smax">Maximum gray value of the structuring element. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenDiscSe(System.String,System.Int32,System.Int32,System.Double)">
            <summary>
              Generate ellipsoidal structuring elements for gray morphology.
              Modified instance represents: Generated structuring element.
            </summary>
            <param name="type">Pixel type. Default: "byte"</param>
            <param name="width">Width of the structuring element. Default: 5</param>
            <param name="height">Height of the structuring element. Default: 5</param>
            <param name="smax">Maximum gray value of the structuring element. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HImage.MeasureThresh(HalconDotNet.HMeasure,System.Double,System.Double,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Extracting points with a particular gray value along a rectangle or an annular arc.
              Instance represents: Input image.
            </summary>
            <param name="measureHandle">Measure object handle.</param>
            <param name="sigma">Sigma of gaussian smoothing. Default: 1.0</param>
            <param name="threshold">Threshold. Default: 128.0</param>
            <param name="select">Selection of points. Default: "all"</param>
            <param name="rowThresh">Row coordinates of points with threshold value.</param>
            <param name="columnThresh">Column coordinates of points with threshold value.</param>
            <param name="distance">Distance between consecutive points.</param>
        </member>
        <member name="M:HalconDotNet.HImage.MeasureProjection(HalconDotNet.HMeasure)">
            <summary>
              Extract a gray value profile perpendicular to a rectangle or annular arc.
              Instance represents: Input image.
            </summary>
            <param name="measureHandle">Measure object handle.</param>
            <returns>Gray value profile.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FuzzyMeasurePairing(HalconDotNet.HMeasure,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Extract straight edge pairs perpendicular to a rectangle or an annular arc.
              Instance represents: Input image.
            </summary>
            <param name="measureHandle">Measure object handle.</param>
            <param name="sigma">Sigma of Gaussian smoothing. Default: 1.0</param>
            <param name="ampThresh">Minimum edge amplitude. Default: 30.0</param>
            <param name="fuzzyThresh">Minimum fuzzy value. Default: 0.5</param>
            <param name="transition">Select the first gray value transition of the edge pairs. Default: "all"</param>
            <param name="pairing">Constraint of pairing. Default: "no_restriction"</param>
            <param name="numPairs">Number of edge pairs. Default: 10</param>
            <param name="rowEdgeFirst">Row coordinate of the first edge.</param>
            <param name="columnEdgeFirst">Column coordinate of the first edge.</param>
            <param name="amplitudeFirst">Edge amplitude of the first edge (with sign).</param>
            <param name="rowEdgeSecond">Row coordinate of the second edge.</param>
            <param name="columnEdgeSecond">Column coordinate of the second edge.</param>
            <param name="amplitudeSecond">Edge amplitude of the second edge (with sign).</param>
            <param name="rowPairCenter">Row coordinate of the center of the edge pair.</param>
            <param name="columnPairCenter">Column coordinate of the center of the edge pair.</param>
            <param name="fuzzyScore">Fuzzy evaluation of the edge pair.</param>
            <param name="intraDistance">Distance between the edges of the edge pair.</param>
        </member>
        <member name="M:HalconDotNet.HImage.FuzzyMeasurePairs(HalconDotNet.HMeasure,System.Double,System.Double,System.Double,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Extract straight edge pairs perpendicular to a rectangle or an annular arc.
              Instance represents: Input image.
            </summary>
            <param name="measureHandle">Measure object handle.</param>
            <param name="sigma">Sigma of Gaussian smoothing. Default: 1.0</param>
            <param name="ampThresh">Minimum edge amplitude. Default: 30.0</param>
            <param name="fuzzyThresh">Minimum fuzzy value. Default: 0.5</param>
            <param name="transition">Select the first gray value transition of the edge pairs. Default: "all"</param>
            <param name="rowEdgeFirst">Row coordinate of the first edge point.</param>
            <param name="columnEdgeFirst">Column coordinate of the first edge point.</param>
            <param name="amplitudeFirst">Edge amplitude of the first edge (with sign).</param>
            <param name="rowEdgeSecond">Row coordinate of the second edge point.</param>
            <param name="columnEdgeSecond">Column coordinate of the second edge point.</param>
            <param name="amplitudeSecond">Edge amplitude of the second edge (with sign).</param>
            <param name="rowEdgeCenter">Row coordinate of the center of the edge pair.</param>
            <param name="columnEdgeCenter">Column coordinate of the center of the edge pair.</param>
            <param name="fuzzyScore">Fuzzy evaluation of the edge pair.</param>
            <param name="intraDistance">Distance between edges of an edge pair.</param>
            <param name="interDistance">Distance between consecutive edge pairs.</param>
        </member>
        <member name="M:HalconDotNet.HImage.FuzzyMeasurePos(HalconDotNet.HMeasure,System.Double,System.Double,System.Double,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Extract straight edges perpendicular to a rectangle or an annular arc.
              Instance represents: Input image.
            </summary>
            <param name="measureHandle">Measure object handle.</param>
            <param name="sigma">Sigma of Gaussian smoothing. Default: 1.0</param>
            <param name="ampThresh">Minimum edge amplitude. Default: 30.0</param>
            <param name="fuzzyThresh">Minimum fuzzy value. Default: 0.5</param>
            <param name="transition">Select light/dark or dark/light edges. Default: "all"</param>
            <param name="rowEdge">Row coordinate of the edge point.</param>
            <param name="columnEdge">Column coordinate of the edge point.</param>
            <param name="amplitude">Edge amplitude of the edge (with sign).</param>
            <param name="fuzzyScore">Fuzzy evaluation of the edges.</param>
            <param name="distance">Distance between consecutive edges.</param>
        </member>
        <member name="M:HalconDotNet.HImage.MeasurePairs(HalconDotNet.HMeasure,System.Double,System.Double,System.String,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Extract straight edge pairs perpendicular to a rectangle or annular arc.
              Instance represents: Input image.
            </summary>
            <param name="measureHandle">Measure object handle.</param>
            <param name="sigma">Sigma of gaussian smoothing. Default: 1.0</param>
            <param name="threshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="transition">Type of gray value transition that determines how edges are grouped to edge pairs. Default: "all"</param>
            <param name="select">Selection of edge pairs. Default: "all"</param>
            <param name="rowEdgeFirst">Row coordinate of the center of the first edge.</param>
            <param name="columnEdgeFirst">Column coordinate of the center of the first edge.</param>
            <param name="amplitudeFirst">Edge amplitude of the first edge (with sign).</param>
            <param name="rowEdgeSecond">Row coordinate of the center of the second edge.</param>
            <param name="columnEdgeSecond">Column coordinate of the center of the second edge.</param>
            <param name="amplitudeSecond">Edge amplitude of the second edge (with sign).</param>
            <param name="intraDistance">Distance between edges of an edge pair.</param>
            <param name="interDistance">Distance between consecutive edge pairs.</param>
        </member>
        <member name="M:HalconDotNet.HImage.MeasurePos(HalconDotNet.HMeasure,System.Double,System.Double,System.String,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Extract straight edges perpendicular to a rectangle or annular arc.
              Instance represents: Input image.
            </summary>
            <param name="measureHandle">Measure object handle.</param>
            <param name="sigma">Sigma of gaussian smoothing. Default: 1.0</param>
            <param name="threshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="transition">Light/dark or dark/light edge. Default: "all"</param>
            <param name="select">Selection of end points. Default: "all"</param>
            <param name="rowEdge">Row coordinate of the center of the edge.</param>
            <param name="columnEdge">Column coordinate of the center of the edge.</param>
            <param name="amplitude">Edge amplitude of the edge (with sign).</param>
            <param name="distance">Distance between consecutive edges.</param>
        </member>
        <member name="M:HalconDotNet.HImage.ApplySampleIdentifier(HalconDotNet.HSampleIdentifier,System.Int32,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Identify objects with a sample identifier. 
              Instance represents: Image showing the object to be identified.
            </summary>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
            <param name="numResults">Number of suggested object indices. Default: 1</param>
            <param name="ratingThreshold">Rating threshold. Default: 0.0</param>
            <param name="genParamName">Generic parameter name. Default: []</param>
            <param name="genParamValue">Generic parameter value. Default: []</param>
            <param name="rating">Rating value of the identified object.</param>
            <returns>Index of the identified object.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ApplySampleIdentifier(HalconDotNet.HSampleIdentifier,System.Int32,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double@)">
            <summary>
              Identify objects with a sample identifier. 
              Instance represents: Image showing the object to be identified.
            </summary>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
            <param name="numResults">Number of suggested object indices. Default: 1</param>
            <param name="ratingThreshold">Rating threshold. Default: 0.0</param>
            <param name="genParamName">Generic parameter name. Default: []</param>
            <param name="genParamValue">Generic parameter value. Default: []</param>
            <param name="rating">Rating value of the identified object.</param>
            <returns>Index of the identified object.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AddSampleIdentifierTrainingData(HalconDotNet.HSampleIdentifier,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add training data to an existing sample identifier. 
              Instance represents: Image that shows an object.
            </summary>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
            <param name="objectIdx">Index of the object visible in the SampleImage.</param>
            <param name="genParamName">Generic parameter name. Default: []</param>
            <param name="genParamValue">Generic parameter value. Default: []</param>
            <returns>Index of the object sample.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AddSampleIdentifierTrainingData(HalconDotNet.HSampleIdentifier,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add training data to an existing sample identifier. 
              Instance represents: Image that shows an object.
            </summary>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
            <param name="objectIdx">Index of the object visible in the SampleImage.</param>
            <param name="genParamName">Generic parameter name. Default: []</param>
            <param name="genParamValue">Generic parameter value. Default: []</param>
            <returns>Index of the object sample.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AddSampleIdentifierPreparationData(HalconDotNet.HSampleIdentifier,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add preparation data to an existing sample identifier. 
              Instance represents: Image that shows an object.
            </summary>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
            <param name="objectIdx">Index of the object visible in the SampleImage. Default: "unknown"</param>
            <param name="genParamName">Generic parameter name. Default: []</param>
            <param name="genParamValue">Generic parameter value. Default: []</param>
            <returns>Index of the object sample.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AddSampleIdentifierPreparationData(HalconDotNet.HSampleIdentifier,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add preparation data to an existing sample identifier. 
              Instance represents: Image that shows an object.
            </summary>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
            <param name="objectIdx">Index of the object visible in the SampleImage. Default: "unknown"</param>
            <param name="genParamName">Generic parameter name. Default: []</param>
            <param name="genParamValue">Generic parameter value. Default: []</param>
            <returns>Index of the object sample.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DetermineShapeModelParams(HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Determine the parameters of a shape model.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="scaleMin">Minimum scale of the model. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the model. Default: 1.1</param>
            <param name="optimization">Kind of optimization. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="parameters">Parameters to be determined automatically. Default: "all"</param>
            <param name="parameterValue">Value of the automatically determined parameter.</param>
            <returns>Name of the automatically determined parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DetermineShapeModelParams(System.Int32,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,System.Int32,System.String,HalconDotNet.HTuple@)">
            <summary>
              Determine the parameters of a shape model.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="scaleMin">Minimum scale of the model. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the model. Default: 1.1</param>
            <param name="optimization">Kind of optimization. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="parameters">Parameters to be determined automatically. Default: "all"</param>
            <param name="parameterValue">Value of the automatically determined parameter.</param>
            <returns>Name of the automatically determined parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindAnisoShapeModels(HalconDotNet.HShapeModel[],HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of multiple anisotropic scale invariant shape models.
              Instance represents: Input image in which the models should be found.
            </summary>
            <param name="modelIDs">Handle of the models.</param>
            <param name="angleStart">Smallest rotation of the models. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the models in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the models in the row direction. Default: 1.1</param>
            <param name="scaleCMin">Minimum scale of the models in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the models in the column direction. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the models to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the models to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the models.</param>
            <param name="column">Column coordinate of the found instances of the models.</param>
            <param name="angle">Rotation angle of the found instances of the models.</param>
            <param name="scaleR">Scale of the found instances of the models in the row direction.</param>
            <param name="scaleC">Scale of the found instances of the models in the column direction.</param>
            <param name="score">Score of the found instances of the models.</param>
            <param name="model">Index of the found instances of the models.</param>
        </member>
        <member name="M:HalconDotNet.HImage.FindAnisoShapeModels(HalconDotNet.HShapeModel,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of multiple anisotropic scale invariant shape models.
              Instance represents: Input image in which the models should be found.
            </summary>
            <param name="modelIDs">Handle of the models.</param>
            <param name="angleStart">Smallest rotation of the models. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the models in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the models in the row direction. Default: 1.1</param>
            <param name="scaleCMin">Minimum scale of the models in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the models in the column direction. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the models to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the models to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the models.</param>
            <param name="column">Column coordinate of the found instances of the models.</param>
            <param name="angle">Rotation angle of the found instances of the models.</param>
            <param name="scaleR">Scale of the found instances of the models in the row direction.</param>
            <param name="scaleC">Scale of the found instances of the models in the column direction.</param>
            <param name="score">Score of the found instances of the models.</param>
            <param name="model">Index of the found instances of the models.</param>
        </member>
        <member name="M:HalconDotNet.HImage.FindScaledShapeModels(HalconDotNet.HShapeModel[],HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of multiple scale invariant shape models.
              Instance represents: Input image in which the models should be found.
            </summary>
            <param name="modelIDs">Handle of the models.</param>
            <param name="angleStart">Smallest rotation of the models. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleMin">Minimum scale of the models. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the models. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the models to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the models to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the models.</param>
            <param name="column">Column coordinate of the found instances of the models.</param>
            <param name="angle">Rotation angle of the found instances of the models.</param>
            <param name="scale">Scale of the found instances of the models.</param>
            <param name="score">Score of the found instances of the models.</param>
            <param name="model">Index of the found instances of the models.</param>
        </member>
        <member name="M:HalconDotNet.HImage.FindScaledShapeModels(HalconDotNet.HShapeModel,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of multiple scale invariant shape models.
              Instance represents: Input image in which the models should be found.
            </summary>
            <param name="modelIDs">Handle of the models.</param>
            <param name="angleStart">Smallest rotation of the models. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleMin">Minimum scale of the models. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the models. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the models to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the models to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the models.</param>
            <param name="column">Column coordinate of the found instances of the models.</param>
            <param name="angle">Rotation angle of the found instances of the models.</param>
            <param name="scale">Scale of the found instances of the models.</param>
            <param name="score">Score of the found instances of the models.</param>
            <param name="model">Index of the found instances of the models.</param>
        </member>
        <member name="M:HalconDotNet.HImage.FindShapeModels(HalconDotNet.HShapeModel[],HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of multiple shape models.
              Instance represents: Input image in which the models should be found.
            </summary>
            <param name="modelIDs">Handle of the models.</param>
            <param name="angleStart">Smallest rotation of the models. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the models to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the models to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the models.</param>
            <param name="column">Column coordinate of the found instances of the models.</param>
            <param name="angle">Rotation angle of the found instances of the models.</param>
            <param name="score">Score of the found instances of the models.</param>
            <param name="model">Index of the found instances of the models.</param>
        </member>
        <member name="M:HalconDotNet.HImage.FindShapeModels(HalconDotNet.HShapeModel,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of multiple shape models.
              Instance represents: Input image in which the models should be found.
            </summary>
            <param name="modelIDs">Handle of the models.</param>
            <param name="angleStart">Smallest rotation of the models. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the models to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the models to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the models.</param>
            <param name="column">Column coordinate of the found instances of the models.</param>
            <param name="angle">Rotation angle of the found instances of the models.</param>
            <param name="score">Score of the found instances of the models.</param>
            <param name="model">Index of the found instances of the models.</param>
        </member>
        <member name="M:HalconDotNet.HImage.FindAnisoShapeModel(HalconDotNet.HShapeModel,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of an anisotropic scale invariant shape model in an image.
              Instance represents: Input image in which the model should be found.
            </summary>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the model in the row direction. Default: 1.1</param>
            <param name="scaleCMin">Minimum scale of the model in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the model in the column direction. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="scaleR">Scale of the found instances of the model in the row direction.</param>
            <param name="scaleC">Scale of the found instances of the model in the column direction.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HImage.FindAnisoShapeModel(HalconDotNet.HShapeModel,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of an anisotropic scale invariant shape model in an image.
              Instance represents: Input image in which the model should be found.
            </summary>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the model in the row direction. Default: 1.1</param>
            <param name="scaleCMin">Minimum scale of the model in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the model in the column direction. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="scaleR">Scale of the found instances of the model in the row direction.</param>
            <param name="scaleC">Scale of the found instances of the model in the column direction.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HImage.FindScaledShapeModel(HalconDotNet.HShapeModel,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a scale invariant shape model in an image.
              Instance represents: Input image in which the model should be found.
            </summary>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleMin">Minimum scale of the model. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the model. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="scale">Scale of the found instances of the model.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HImage.FindScaledShapeModel(HalconDotNet.HShapeModel,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a scale invariant shape model in an image.
              Instance represents: Input image in which the model should be found.
            </summary>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleMin">Minimum scale of the model. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the model. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="scale">Scale of the found instances of the model.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HImage.FindShapeModel(HalconDotNet.HShapeModel,System.Double,System.Double,System.Double,System.Int32,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a shape model in an image.
              Instance represents: Input image in which the model should be found.
            </summary>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HImage.FindShapeModel(HalconDotNet.HShapeModel,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a shape model in an image.
              Instance represents: Input image in which the model should be found.
            </summary>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HImage.SetShapeModelMetric(HalconDotNet.HShapeModel,HalconDotNet.HHomMat2D,System.String)">
            <summary>
              Set the metric of a shape model that was created from XLD contours.
              Instance represents: Input image used for the determination of the polarity.
            </summary>
            <param name="modelID">Handle of the model.</param>
            <param name="homMat2D">Transformation matrix.</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
        </member>
        <member name="M:HalconDotNet.HImage.SetShapeModelParam(HalconDotNet.HShapeModel,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set selected parameters of the shape model.</summary>
            <param name="modelID">Handle of the model.</param>
            <param name="genParamNames">Parameter names.</param>
            <param name="genParamValues">Parameter values.</param>
        </member>
        <member name="M:HalconDotNet.HImage.CreateAnisoShapeModel(HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a shape model for anisotropic scale invariant matching.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.1</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.1</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CreateAnisoShapeModel(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Prepare a shape model for anisotropic scale invariant matching.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.1</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.1</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CreateScaledShapeModel(HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a shape model for scale invariant matching.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleMin">Minimum scale of the pattern. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the pattern. Default: 1.1</param>
            <param name="scaleStep">Scale step length (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CreateScaledShapeModel(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Prepare a shape model for scale invariant matching.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleMin">Minimum scale of the pattern. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the pattern. Default: 1.1</param>
            <param name="scaleStep">Scale step length (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CreateShapeModel(HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a shape model for matching.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CreateShapeModel(System.Int32,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Prepare a shape model for matching.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.InspectShapeModel(HalconDotNet.HRegion@,System.Int32,HalconDotNet.HTuple)">
            <summary>
              Create the representation of a shape model.
              Instance represents: Input image.
            </summary>
            <param name="modelRegions">Model region pyramid</param>
            <param name="numLevels">Number of pyramid levels. Default: 4</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the image and optionally minimum size of the object parts. Default: 30</param>
            <returns>Image pyramid of the input image</returns>
        </member>
        <member name="M:HalconDotNet.HImage.InspectShapeModel(HalconDotNet.HRegion@,System.Int32,System.Int32)">
            <summary>
              Create the representation of a shape model.
              Instance represents: Input image.
            </summary>
            <param name="modelRegions">Model region pyramid</param>
            <param name="numLevels">Number of pyramid levels. Default: 4</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the image and optionally minimum size of the object parts. Default: 30</param>
            <returns>Image pyramid of the input image</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindCalibDescriptorModel(HalconDotNet.HDescriptorModel,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a calibrated descriptor model in an image and return their 3D pose.
              Instance represents: Input image where the model should be found.
            </summary>
            <param name="modelID">The handle to the descriptor model.</param>
            <param name="detectorParamName">The detector's parameter names. Default: []</param>
            <param name="detectorParamValue">Values of the detector's parameters. Default: []</param>
            <param name="descriptorParamName">The descriptor's parameter names. Default: []</param>
            <param name="descriptorParamValue">Values of the descriptor's parameters. Default: []</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.2</param>
            <param name="numMatches">Maximal number of found instances. Default: 1</param>
            <param name="camParam">Camera parameter (inner orientation) obtained from camera calibration.</param>
            <param name="scoreType">Score type to be evaluated in Score. Default: "num_points"</param>
            <param name="score">Score of the found instances according to the ScoreType input.</param>
            <returns>3D pose of the object.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindCalibDescriptorModel(HalconDotNet.HDescriptorModel,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Int32,HalconDotNet.HTuple,System.String,System.Double@)">
            <summary>
              Find the best matches of a calibrated descriptor model in an image and return their 3D pose.
              Instance represents: Input image where the model should be found.
            </summary>
            <param name="modelID">The handle to the descriptor model.</param>
            <param name="detectorParamName">The detector's parameter names. Default: []</param>
            <param name="detectorParamValue">Values of the detector's parameters. Default: []</param>
            <param name="descriptorParamName">The descriptor's parameter names. Default: []</param>
            <param name="descriptorParamValue">Values of the descriptor's parameters. Default: []</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.2</param>
            <param name="numMatches">Maximal number of found instances. Default: 1</param>
            <param name="camParam">Camera parameter (inner orientation) obtained from camera calibration.</param>
            <param name="scoreType">Score type to be evaluated in Score. Default: "num_points"</param>
            <param name="score">Score of the found instances according to the ScoreType input.</param>
            <returns>3D pose of the object.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindUncalibDescriptorModel(HalconDotNet.HDescriptorModel,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a descriptor model in an image.
              Instance represents: Input image where the model should be found.
            </summary>
            <param name="modelID">The handle to the descriptor model.</param>
            <param name="detectorParamName">The detector's parameter names. Default: []</param>
            <param name="detectorParamValue">Values of the detector's parameters. Default: []</param>
            <param name="descriptorParamName">The descriptor's parameter names. Default: []</param>
            <param name="descriptorParamValue">Values of the descriptor's parameters. Default: []</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.2</param>
            <param name="numMatches">Maximal number of found instances. Default: 1</param>
            <param name="scoreType">Score type to be evaluated in Score. Default: "num_points"</param>
            <param name="score">Score of the found instances according to the ScoreType input.</param>
            <returns>Homography between model and found instance.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindUncalibDescriptorModel(HalconDotNet.HDescriptorModel,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Int32,System.String,System.Double@)">
            <summary>
              Find the best matches of a descriptor model in an image.
              Instance represents: Input image where the model should be found.
            </summary>
            <param name="modelID">The handle to the descriptor model.</param>
            <param name="detectorParamName">The detector's parameter names. Default: []</param>
            <param name="detectorParamValue">Values of the detector's parameters. Default: []</param>
            <param name="descriptorParamName">The descriptor's parameter names. Default: []</param>
            <param name="descriptorParamValue">Values of the descriptor's parameters. Default: []</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.2</param>
            <param name="numMatches">Maximal number of found instances. Default: 1</param>
            <param name="scoreType">Score type to be evaluated in Score. Default: "num_points"</param>
            <param name="score">Score of the found instances according to the ScoreType input.</param>
            <returns>Homography between model and found instance.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CreateCalibDescriptorModel(HalconDotNet.HTuple,HalconDotNet.HPose,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32)">
            <summary>
              Create a descriptor model for calibrated perspective matching.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="camParam">The parameters of the internal orientation of the camera.</param>
            <param name="referencePose">The reference pose of the object in the reference image.</param>
            <param name="detectorType">The type of the detector. Default: "lepetit"</param>
            <param name="detectorParamName">The detector's parameter names. Default: []</param>
            <param name="detectorParamValue">Values of the detector's parameters. Default: []</param>
            <param name="descriptorParamName">The descriptor's parameter names. Default: []</param>
            <param name="descriptorParamValue">Values of the descriptor's parameters. Default: []</param>
            <param name="seed">The seed for the random number generator. Default: 42</param>
            <returns>The handle to the descriptor model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CreateUncalibDescriptorModel(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32)">
            <summary>
              Prepare a descriptor model for interest point matching.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="detectorType">The type of the detector. Default: "lepetit"</param>
            <param name="detectorParamName">The detector's parameter names. Default: []</param>
            <param name="detectorParamValue">Values of the detector's parameters. Default: []</param>
            <param name="descriptorParamName">The descriptor's parameter names. Default: []</param>
            <param name="descriptorParamValue">Values of the descriptor's parameters. Default: []</param>
            <param name="seed">The seed for the random number generator. Default: 42</param>
            <returns>The handle to the descriptor model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DetermineDeformableModelParams(HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Determine the parameters of a deformable model.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="scaleMin">Minimum scale of the model. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the model. Default: 1.1</param>
            <param name="optimization">Kind of optimization. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The general parameter names. Default: []</param>
            <param name="paramValue">Values of the general parameter. Default: []</param>
            <param name="parameters">Parameters to be determined automatically. Default: "all"</param>
            <param name="parameterValue">Value of the automatically determined parameter.</param>
            <returns>Name of the automatically determined parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DetermineDeformableModelParams(System.Int32,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple@)">
            <summary>
              Determine the parameters of a deformable model.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="scaleMin">Minimum scale of the model. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the model. Default: 1.1</param>
            <param name="optimization">Kind of optimization. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The general parameter names. Default: []</param>
            <param name="paramValue">Values of the general parameter. Default: []</param>
            <param name="parameters">Parameters to be determined automatically. Default: "all"</param>
            <param name="parameterValue">Value of the automatically determined parameter.</param>
            <returns>Name of the automatically determined parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindLocalDeformableModel(HalconDotNet.HImage@,HalconDotNet.HXLDCont@,HalconDotNet.HDeformableModel,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,HalconDotNet.HTuple,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a local deformable model in an image.
              Instance represents: Input image in which the model should be found.
            </summary>
            <param name="vectorField">Vector field of the rectification transformation.</param>
            <param name="deformedContours">Contours of the found instances of the model.</param>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleCMin">Minimum scale of the model in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the model in column direction. Default: 1.0</param>
            <param name="minScore">Minumum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 1.0</param>
            <param name="numLevels">Number of pyramid levels used in the matching. Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="resultType">Switch for requested iconic result. Default: []</param>
            <param name="paramName">The general parameter names. Default: []</param>
            <param name="paramValue">Values of the general parameters. Default: []</param>
            <param name="score">Scores of the found instances of the model.</param>
            <param name="row">Row coordinates of the found instances of the model.</param>
            <param name="column">Column coordinates of the found instances of the model.</param>
            <returns>Rectified image of the found model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindLocalDeformableModel(HalconDotNet.HImage@,HalconDotNet.HXLDCont@,HalconDotNet.HDeformableModel,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a local deformable model in an image.
              Instance represents: Input image in which the model should be found.
            </summary>
            <param name="vectorField">Vector field of the rectification transformation.</param>
            <param name="deformedContours">Contours of the found instances of the model.</param>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleCMin">Minimum scale of the model in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the model in column direction. Default: 1.0</param>
            <param name="minScore">Minumum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 1.0</param>
            <param name="numLevels">Number of pyramid levels used in the matching. Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="resultType">Switch for requested iconic result. Default: []</param>
            <param name="paramName">The general parameter names. Default: []</param>
            <param name="paramValue">Values of the general parameters. Default: []</param>
            <param name="score">Scores of the found instances of the model.</param>
            <param name="row">Row coordinates of the found instances of the model.</param>
            <param name="column">Column coordinates of the found instances of the model.</param>
            <returns>Rectified image of the found model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindPlanarCalibDeformableModel(HalconDotNet.HDeformableModel,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,HalconDotNet.HTuple,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a calibrated deformable model in an image and return their 3D pose.
              Instance represents: Input image in which the model should be found.
            </summary>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleCMin">Minimum scale of the model in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the model in column direction. Default: 1.0</param>
            <param name="minScore">Minumum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 1.0</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="paramName">The general parameter names. Default: []</param>
            <param name="paramValue">Values of the general parameters. Default: []</param>
            <param name="covPose">6 standard deviations or 36 covariances of the pose parameters.</param>
            <param name="score">Score of the found instances of the model.</param>
            <returns>Pose of the object.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindPlanarCalibDeformableModel(HalconDotNet.HDeformableModel,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a calibrated deformable model in an image and return their 3D pose.
              Instance represents: Input image in which the model should be found.
            </summary>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleCMin">Minimum scale of the model in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the model in column direction. Default: 1.0</param>
            <param name="minScore">Minumum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 1.0</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="paramName">The general parameter names. Default: []</param>
            <param name="paramValue">Values of the general parameters. Default: []</param>
            <param name="covPose">6 standard deviations or 36 covariances of the pose parameters.</param>
            <param name="score">Score of the found instances of the model.</param>
            <returns>Pose of the object.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindPlanarUncalibDeformableModel(HalconDotNet.HDeformableModel,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,HalconDotNet.HTuple,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a planar projective invariant deformable model in an image.
              Instance represents: Input image in which the model should be found.
            </summary>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleCMin">Minimum scale of the model in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the model in column direction. Default: 1.0</param>
            <param name="minScore">Minumum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 1.0</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="paramName">The general parameter names. Default: []</param>
            <param name="paramValue">Values of the general parameters. Default: []</param>
            <param name="score">Score of the found instances of the model.</param>
            <returns>Homographies between model and found instances.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindPlanarUncalibDeformableModel(HalconDotNet.HDeformableModel,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a planar projective invariant deformable model in an image.
              Instance represents: Input image in which the model should be found.
            </summary>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleCMin">Minimum scale of the model in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the model in column direction. Default: 1.0</param>
            <param name="minScore">Minumum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 1.0</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="paramName">The general parameter names. Default: []</param>
            <param name="paramValue">Values of the general parameters. Default: []</param>
            <param name="score">Score of the found instances of the model.</param>
            <returns>Homographies between model and found instances.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SetLocalDeformableModelMetric(HalconDotNet.HImage,HalconDotNet.HDeformableModel,System.String)">
            <summary>
              Set the metric of a local deformable model that was created from XLD contours.
              Instance represents: Input image used for the determination of the polarity.
            </summary>
            <param name="vectorField">Vector field of the local deformation.</param>
            <param name="modelID">Handle of the model.</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
        </member>
        <member name="M:HalconDotNet.HImage.SetPlanarCalibDeformableModelMetric(HalconDotNet.HDeformableModel,HalconDotNet.HPose,System.String)">
            <summary>
              Set the metric of a planar calibrated deformable model that was created from XLD contours.
              Instance represents: Input image used for the determination of the polarity.
            </summary>
            <param name="modelID">Handle of the model.</param>
            <param name="pose">Pose of the model in the image.</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
        </member>
        <member name="M:HalconDotNet.HImage.SetPlanarUncalibDeformableModelMetric(HalconDotNet.HDeformableModel,HalconDotNet.HHomMat2D,System.String)">
            <summary>
              Set the metric of a planar uncalibrated deformable model that was created from XLD contours.
              Instance represents: Input image used for the determination of the polarity.
            </summary>
            <param name="modelID">Handle of the model.</param>
            <param name="homMat2D">Transformation matrix.</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
        </member>
        <member name="M:HalconDotNet.HImage.CreateLocalDeformableModel(HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Creates a deformable model for local, deformable matching.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "none"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Thresholds or hysteresis thresholds for the contrast of the object in the template image. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameters. Default: []</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CreateLocalDeformableModel(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Creates a deformable model for local, deformable matching.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "none"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Thresholds or hysteresis thresholds for the contrast of the object in the template image. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameters. Default: []</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CreatePlanarCalibDeformableModel(HalconDotNet.HTuple,HalconDotNet.HPose,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a deformable model for calibrated perspective matching.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="camParam">The parameters of the internal orientation of the camera.</param>
            <param name="referencePose">The reference pose of the object in the reference image.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "none"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Thresholds or hysteresis thresholds for the contrast of the object in the template image. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The parameter names. Default: []</param>
            <param name="paramValue">Values of the parameters. Default: []</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CreatePlanarCalibDeformableModel(HalconDotNet.HTuple,HalconDotNet.HPose,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a deformable model for calibrated perspective matching.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="camParam">The parameters of the internal orientation of the camera.</param>
            <param name="referencePose">The reference pose of the object in the reference image.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "none"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Thresholds or hysteresis thresholds for the contrast of the object in the template image. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The parameter names. Default: []</param>
            <param name="paramValue">Values of the parameters. Default: []</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CreatePlanarUncalibDeformableModel(HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Creates a deformable model for uncalibrated, perspective matching.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "none"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Thresholds or hysteresis thresholds for the contrast of the object in the template image. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameter. Default: []</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CreatePlanarUncalibDeformableModel(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Creates a deformable model for uncalibrated, perspective matching.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "none"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Thresholds or hysteresis thresholds for the contrast of the object in the template image. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameter. Default: []</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindNccModel(HalconDotNet.HNCCModel,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of an NCC model in an image.
              Instance represents: Input image in which the model should be found.
            </summary>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.8</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy. Default: "true"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HImage.FindNccModel(HalconDotNet.HNCCModel,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of an NCC model in an image.
              Instance represents: Input image in which the model should be found.
            </summary>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.8</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy. Default: "true"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HImage.SetNccModelParam(HalconDotNet.HNCCModel,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set selected parameters of the NCC model.</summary>
            <param name="modelID">Handle of the model.</param>
            <param name="genParamNames">Parameter names.</param>
            <param name="genParamValues">Parameter values.</param>
        </member>
        <member name="M:HalconDotNet.HImage.CreateNccModel(HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.String)">
            <summary>
              Prepare an NCC model for matching.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CreateNccModel(System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary>
              Prepare an NCC model for matching.
              Instance represents: Input image whose domain will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindComponentModel(HalconDotNet.HComponentModel,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Int32,System.Double,System.String,System.String,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a component model in an image.
              Instance represents: Input image in which the component model should be found.
            </summary>
            <param name="componentModelID">Handle of the component model.</param>
            <param name="rootComponent">Index of the root component.</param>
            <param name="angleStartRoot">Smallest rotation of the root component Default: -0.39</param>
            <param name="angleExtentRoot">Extent of the rotation of the root component. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the component model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the component model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the component models to be found. Default: 0.5</param>
            <param name="ifRootNotFound">Behavior if the root component is missing. Default: "stop_search"</param>
            <param name="ifComponentNotFound">Behavior if a component is missing. Default: "prune_branch"</param>
            <param name="posePrediction">Pose prediction of components that are not found. Default: "none"</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found. Default: 0.5</param>
            <param name="subPixelComp">Subpixel accuracy of the component poses if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevelsComp">Number of pyramid levels for the components used in the matching (and lowest pyramid level to use if $|NumLevelsComp| = 2n$). Default: 0</param>
            <param name="greedinessComp">"Greediness" of the search heuristic for the components (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="modelEnd">End index of each found instance of the component model in the tuples describing the component matches.</param>
            <param name="score">Score of the found instances of the component model.</param>
            <param name="rowComp">Row coordinate of the found component matches.</param>
            <param name="columnComp">Column coordinate of the found component matches.</param>
            <param name="angleComp">Rotation angle of the found component matches.</param>
            <param name="scoreComp">Score of the found component matches.</param>
            <param name="modelComp">Index of the found components.</param>
            <returns>Start index of each found instance of the component model in the tuples describing the component matches.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindComponentModel(HalconDotNet.HComponentModel,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,System.String,System.String,System.Double,System.String,System.Int32,System.Double,System.Int32@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32@)">
            <summary>
              Find the best matches of a component model in an image.
              Instance represents: Input image in which the component model should be found.
            </summary>
            <param name="componentModelID">Handle of the component model.</param>
            <param name="rootComponent">Index of the root component.</param>
            <param name="angleStartRoot">Smallest rotation of the root component Default: -0.39</param>
            <param name="angleExtentRoot">Extent of the rotation of the root component. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the component model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the component model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the component models to be found. Default: 0.5</param>
            <param name="ifRootNotFound">Behavior if the root component is missing. Default: "stop_search"</param>
            <param name="ifComponentNotFound">Behavior if a component is missing. Default: "prune_branch"</param>
            <param name="posePrediction">Pose prediction of components that are not found. Default: "none"</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found. Default: 0.5</param>
            <param name="subPixelComp">Subpixel accuracy of the component poses if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevelsComp">Number of pyramid levels for the components used in the matching (and lowest pyramid level to use if $|NumLevelsComp| = 2n$). Default: 0</param>
            <param name="greedinessComp">"Greediness" of the search heuristic for the components (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="modelEnd">End index of each found instance of the component model in the tuples describing the component matches.</param>
            <param name="score">Score of the found instances of the component model.</param>
            <param name="rowComp">Row coordinate of the found component matches.</param>
            <param name="columnComp">Column coordinate of the found component matches.</param>
            <param name="angleComp">Rotation angle of the found component matches.</param>
            <param name="scoreComp">Score of the found component matches.</param>
            <param name="modelComp">Index of the found components.</param>
            <returns>Start index of each found instance of the component model in the tuples describing the component matches.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CreateComponentModel(HalconDotNet.HRegion,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Prepare a component model for matching based on explicitly specified components and relations.
              Instance represents: Input image from which the shape models of the model components should be created.
            </summary>
            <param name="componentRegions">Input regions from which the shape models of the model components should be created.</param>
            <param name="variationRow">Variation of the model components in row direction.</param>
            <param name="variationColumn">Variation of the model components in column direction.</param>
            <param name="variationAngle">Angle variation of the model components.</param>
            <param name="angleStart">Smallest rotation of the component model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation of the component model. Default: 0.79</param>
            <param name="contrastLowComp">Lower hysteresis threshold for the contrast of the components in the model image. Default: "auto"</param>
            <param name="contrastHighComp">Upper hysteresis threshold for the contrast of the components in the model image. Default: "auto"</param>
            <param name="minSizeComp">Minimum size of the contour regions in the model. Default: "auto"</param>
            <param name="minContrastComp">Minimum contrast of the components in the search images. Default: "auto"</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found. Default: 0.5</param>
            <param name="numLevelsComp">Maximum number of pyramid levels for the components. Default: "auto"</param>
            <param name="angleStepComp">Step length of the angles (resolution) for the components. Default: "auto"</param>
            <param name="optimizationComp">Kind of optimization for the components. Default: "auto"</param>
            <param name="metricComp">Match metric used for the components. Default: "use_polarity"</param>
            <param name="pregenerationComp">Complete pregeneration of the shape models for the components if equal to 'true'. Default: "false"</param>
            <param name="rootRanking">Ranking of the model components expressing the suitability to act as the root component.</param>
            <returns>Handle of the component model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CreateComponentModel(HalconDotNet.HRegion,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Double,System.String,System.String,System.String,System.Int32@)">
            <summary>
              Prepare a component model for matching based on explicitly specified components and relations.
              Instance represents: Input image from which the shape models of the model components should be created.
            </summary>
            <param name="componentRegions">Input regions from which the shape models of the model components should be created.</param>
            <param name="variationRow">Variation of the model components in row direction.</param>
            <param name="variationColumn">Variation of the model components in column direction.</param>
            <param name="variationAngle">Angle variation of the model components.</param>
            <param name="angleStart">Smallest rotation of the component model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation of the component model. Default: 0.79</param>
            <param name="contrastLowComp">Lower hysteresis threshold for the contrast of the components in the model image. Default: "auto"</param>
            <param name="contrastHighComp">Upper hysteresis threshold for the contrast of the components in the model image. Default: "auto"</param>
            <param name="minSizeComp">Minimum size of the contour regions in the model. Default: "auto"</param>
            <param name="minContrastComp">Minimum contrast of the components in the search images. Default: "auto"</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found. Default: 0.5</param>
            <param name="numLevelsComp">Maximum number of pyramid levels for the components. Default: "auto"</param>
            <param name="angleStepComp">Step length of the angles (resolution) for the components. Default: "auto"</param>
            <param name="optimizationComp">Kind of optimization for the components. Default: "auto"</param>
            <param name="metricComp">Match metric used for the components. Default: "use_polarity"</param>
            <param name="pregenerationComp">Complete pregeneration of the shape models for the components if equal to 'true'. Default: "false"</param>
            <param name="rootRanking">Ranking of the model components expressing the suitability to act as the root component.</param>
            <returns>Handle of the component model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ClusterModelComponents(HalconDotNet.HComponentTraining,System.String,System.Double,System.Double)">
            <summary>
              Adopt new parameters that are used to create the model components into the training result.
              Instance represents: Training images that were used for training the model components.
            </summary>
            <param name="componentTrainingID">Handle of the training result.</param>
            <param name="ambiguityCriterion">Criterion for solving the ambiguities. Default: "rigidity"</param>
            <param name="maxContourOverlap">Maximum contour overlap of the found initial components. Default: 0.2</param>
            <param name="clusterThreshold">Threshold for clustering the initial components. Default: 0.5</param>
            <returns>Contour regions of rigid model components.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.TrainModelComponents(HalconDotNet.HRegion,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.String,System.Double,System.Double,HalconDotNet.HComponentTraining@)">
            <summary>
              Train components and relations for the component-based matching.
              Instance represents: Input image from which the shape models of the initial components should be created.
            </summary>
            <param name="initialComponents">Contour regions or enclosing regions of the initial components.</param>
            <param name="trainingImages">Training images that are used for training the model components.</param>
            <param name="contrastLow">Lower hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="contrastHigh">Upper hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="minSize">Minimum size of connected contour regions. Default: "auto"</param>
            <param name="minScore">Minimum score of the instances of the initial components to be found. Default: 0.5</param>
            <param name="searchRowTol">Search tolerance in row direction. Default: -1</param>
            <param name="searchColumnTol">Search tolerance in column direction. Default: -1</param>
            <param name="searchAngleTol">Angle search tolerance. Default: -1</param>
            <param name="trainingEmphasis">Decision whether the training emphasis should lie on a fast computation or on a high robustness. Default: "speed"</param>
            <param name="ambiguityCriterion">Criterion for solving ambiguous matches of the initial components in the training images. Default: "rigidity"</param>
            <param name="maxContourOverlap">Maximum contour overlap of the found initial components in a training image. Default: 0.2</param>
            <param name="clusterThreshold">Threshold for clustering the initial components. Default: 0.5</param>
            <param name="componentTrainingID">Handle of the training result.</param>
            <returns>Contour regions of rigid model components.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.TrainModelComponents(HalconDotNet.HRegion,HalconDotNet.HImage,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Double,System.String,System.String,System.Double,System.Double,HalconDotNet.HComponentTraining@)">
            <summary>
              Train components and relations for the component-based matching.
              Instance represents: Input image from which the shape models of the initial components should be created.
            </summary>
            <param name="initialComponents">Contour regions or enclosing regions of the initial components.</param>
            <param name="trainingImages">Training images that are used for training the model components.</param>
            <param name="contrastLow">Lower hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="contrastHigh">Upper hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="minSize">Minimum size of connected contour regions. Default: "auto"</param>
            <param name="minScore">Minimum score of the instances of the initial components to be found. Default: 0.5</param>
            <param name="searchRowTol">Search tolerance in row direction. Default: -1</param>
            <param name="searchColumnTol">Search tolerance in column direction. Default: -1</param>
            <param name="searchAngleTol">Angle search tolerance. Default: -1</param>
            <param name="trainingEmphasis">Decision whether the training emphasis should lie on a fast computation or on a high robustness. Default: "speed"</param>
            <param name="ambiguityCriterion">Criterion for solving ambiguous matches of the initial components in the training images. Default: "rigidity"</param>
            <param name="maxContourOverlap">Maximum contour overlap of the found initial components in a training image. Default: 0.2</param>
            <param name="clusterThreshold">Threshold for clustering the initial components. Default: 0.5</param>
            <param name="componentTrainingID">Handle of the training result.</param>
            <returns>Contour regions of rigid model components.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenInitialComponents(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Extract the initial components of a component model.
              Instance represents: Input image from which the initial components should be extracted.
            </summary>
            <param name="contrastLow">Lower hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="contrastHigh">Upper hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="minSize">Minimum size of the initial components. Default: "auto"</param>
            <param name="mode">Type of automatic segmentation. Default: "connection"</param>
            <param name="genericName">Names of optional control parameters. Default: []</param>
            <param name="genericValue">Values of optional control parameters. Default: []</param>
            <returns>Contour regions of initial components.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenInitialComponents(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Double)">
            <summary>
              Extract the initial components of a component model.
              Instance represents: Input image from which the initial components should be extracted.
            </summary>
            <param name="contrastLow">Lower hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="contrastHigh">Upper hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="minSize">Minimum size of the initial components. Default: "auto"</param>
            <param name="mode">Type of automatic segmentation. Default: "connection"</param>
            <param name="genericName">Names of optional control parameters. Default: []</param>
            <param name="genericValue">Values of optional control parameters. Default: []</param>
            <returns>Contour regions of initial components.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindShapeModel3d(HalconDotNet.HShapeModel3D,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a 3D shape model in an image.
              Instance represents: Input image in which the model should be found.
            </summary>
            <param name="shapeModel3DID">Handle of the 3D shape model.</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.7</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="genParamNames">Names of (optional) parameters for controlling the behavior of the operator. Default: []</param>
            <param name="genParamValues">Values of the optional generic parameters. Default: []</param>
            <param name="covPose">6 standard deviations or 36 covariances of the pose parameters.</param>
            <param name="score">Score of the found instances of the 3D shape model.</param>
            <returns>3D pose of the 3D shape model.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ChannelsToImage">
            <summary>
              Convert one-channel images into a multichannel image
              Instance represents: One-channel images to be combined into a one-channel image.
            </summary>
            <returns>Multichannel image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ImageToChannels">
            <summary>
              Convert a multichannel image into One-channel images
              Instance represents: Multichannel image to be decomposed.
            </summary>
            <returns>Generated one-channel images.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Compose7(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage)">
            <summary>
              Convert 7 images into a seven-channel image.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="image3">Input image 3.</param>
            <param name="image4">Input image 4.</param>
            <param name="image5">Input image 5.</param>
            <param name="image6">Input image 6.</param>
            <param name="image7">Input image 7.</param>
            <returns>Multichannel image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Compose6(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage)">
            <summary>
              Convert 6 images into a six-channel image.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="image3">Input image 3.</param>
            <param name="image4">Input image 4.</param>
            <param name="image5">Input image 5.</param>
            <param name="image6">Input image 6.</param>
            <returns>Multichannel image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Compose5(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage)">
            <summary>
              Convert 5 images into a five-channel image.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="image3">Input image 3.</param>
            <param name="image4">Input image 4.</param>
            <param name="image5">Input image 5.</param>
            <returns>Multichannel image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Compose4(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage)">
            <summary>
              Convert 4 images into a four-channel image.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="image3">Input image 3.</param>
            <param name="image4">Input image 4.</param>
            <returns>Multichannel image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Compose3(HalconDotNet.HImage,HalconDotNet.HImage)">
            <summary>
              Convert 3 images into a three-channel image.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="image3">Input image 3.</param>
            <returns>Multichannel image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Compose2(HalconDotNet.HImage)">
            <summary>
              Convert two images into a two-channel image.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <returns>Multichannel image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Decompose7(HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HImage@)">
            <summary>
              Convert a seven-channel image into seven images.
              Instance represents: Multichannel image.
            </summary>
            <param name="image2">Output image 2.</param>
            <param name="image3">Output image 3.</param>
            <param name="image4">Output image 4.</param>
            <param name="image5">Output image 5.</param>
            <param name="image6">Output image 6.</param>
            <param name="image7">Output image 7.</param>
            <returns>Output image 1.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Decompose6(HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HImage@)">
            <summary>
              Convert a six-channel image into six images.
              Instance represents: Multichannel image.
            </summary>
            <param name="image2">Output image 2.</param>
            <param name="image3">Output image 3.</param>
            <param name="image4">Output image 4.</param>
            <param name="image5">Output image 5.</param>
            <param name="image6">Output image 6.</param>
            <returns>Output image 1.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Decompose5(HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HImage@)">
            <summary>
              Convert a five-channel image into five images.
              Instance represents: Multichannel image.
            </summary>
            <param name="image2">Output image 2.</param>
            <param name="image3">Output image 3.</param>
            <param name="image4">Output image 4.</param>
            <param name="image5">Output image 5.</param>
            <returns>Output image 1.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Decompose4(HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HImage@)">
            <summary>
              Convert a four-channel image into four images.
              Instance represents: Multichannel image.
            </summary>
            <param name="image2">Output image 2.</param>
            <param name="image3">Output image 3.</param>
            <param name="image4">Output image 4.</param>
            <returns>Output image 1.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Decompose3(HalconDotNet.HImage@,HalconDotNet.HImage@)">
            <summary>
              Convert a three-channel image into three images.
              Instance represents: Multichannel image.
            </summary>
            <param name="image2">Output image 2.</param>
            <param name="image3">Output image 3.</param>
            <returns>Output image 1.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Decompose2(HalconDotNet.HImage@)">
            <summary>
              Convert a two-channel image into two images.
              Instance represents: Multichannel image.
            </summary>
            <param name="image2">Output image 2.</param>
            <returns>Output image 1.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CountChannels">
            <summary>
              Count channels of image.
              Instance represents: One- or multichannel image.
            </summary>
            <returns>Number of channels.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AppendChannel(HalconDotNet.HImage)">
            <summary>
              Append additional matrices (channels) to the image.
              Instance represents: Multichannel image.
            </summary>
            <param name="image">Image to be appended.</param>
            <returns>Image appended by Image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AccessChannel(System.Int32)">
            <summary>
              Access a channel of a multichannel image.
              Instance represents: Multichannel image.
            </summary>
            <param name="channel">Index of channel to be accessed. Default: 1</param>
            <returns>One channel of MultiChannelImage.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.TileImagesOffset(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32)">
            <summary>
              Tile multiple image objects into a large image with explicit positioning information.
              Instance represents: Input images.
            </summary>
            <param name="offsetRow">Row coordinate of the upper left corner of the input images in the output image. Default: 0</param>
            <param name="offsetCol">Column coordinate of the upper left corner of the input images in the output image. Default: 0</param>
            <param name="row1">Row coordinate of the upper left corner of the copied part of the respective input image. Default: -1</param>
            <param name="col1">Column coordinate of the upper left corner of the copied part of the respective input image. Default: -1</param>
            <param name="row2">Row coordinate of the lower right corner of the copied part of the respective input image. Default: -1</param>
            <param name="col2">Column coordinate of the lower right corner of the copied part of the respective input image. Default: -1</param>
            <param name="width">Width of the output image. Default: 512</param>
            <param name="height">Height of the output image. Default: 512</param>
            <returns>Tiled output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.TileImagesOffset(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Tile multiple image objects into a large image with explicit positioning information.
              Instance represents: Input images.
            </summary>
            <param name="offsetRow">Row coordinate of the upper left corner of the input images in the output image. Default: 0</param>
            <param name="offsetCol">Column coordinate of the upper left corner of the input images in the output image. Default: 0</param>
            <param name="row1">Row coordinate of the upper left corner of the copied part of the respective input image. Default: -1</param>
            <param name="col1">Column coordinate of the upper left corner of the copied part of the respective input image. Default: -1</param>
            <param name="row2">Row coordinate of the lower right corner of the copied part of the respective input image. Default: -1</param>
            <param name="col2">Column coordinate of the lower right corner of the copied part of the respective input image. Default: -1</param>
            <param name="width">Width of the output image. Default: 512</param>
            <param name="height">Height of the output image. Default: 512</param>
            <returns>Tiled output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.TileImages(System.Int32,System.String)">
            <summary>
              Tile multiple image objects into a large image.
              Instance represents: Input images.
            </summary>
            <param name="numColumns">Number of columns to use for the output image. Default: 1</param>
            <param name="tileOrder">Order of the input images in the output image. Default: "vertical"</param>
            <returns>Tiled output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.TileChannels(System.Int32,System.String)">
            <summary>
              Tile multiple images into a large image.
              Instance represents: Input image.
            </summary>
            <param name="numColumns">Number of columns to use for the output image. Default: 1</param>
            <param name="tileOrder">Order of the input images in the output image. Default: "vertical"</param>
            <returns>Tiled output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CropDomain">
            <summary>
              Cut out of defined gray values.
              Instance represents: Input image.
            </summary>
            <returns>Image area.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CropRectangle1(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Cut out one or more rectangular image areas.
              Instance represents: Input image.
            </summary>
            <param name="row1">Line index of upper left corner of image area. Default: 100</param>
            <param name="column1">Column index of upper left corner of image area. Default: 100</param>
            <param name="row2">Line index of lower right corner of image area. Default: 200</param>
            <param name="column2">Column index of lower right corner of image area. Default: 200</param>
            <returns>Image area.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CropRectangle1(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Cut out one or more rectangular image areas.
              Instance represents: Input image.
            </summary>
            <param name="row1">Line index of upper left corner of image area. Default: 100</param>
            <param name="column1">Column index of upper left corner of image area. Default: 100</param>
            <param name="row2">Line index of lower right corner of image area. Default: 200</param>
            <param name="column2">Column index of lower right corner of image area. Default: 200</param>
            <returns>Image area.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CropPart(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Cut out one or more rectangular image areas.
              Instance represents: Input image.
            </summary>
            <param name="row">Line index of upper left corner of image area. Default: 100</param>
            <param name="column">Column index of upper left corner of image area. Default: 100</param>
            <param name="width">Width of new image. Default: 128</param>
            <param name="height">Height of new image. Default: 128</param>
            <returns>Image area.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CropPart(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Cut out one or more rectangular image areas.
              Instance represents: Input image.
            </summary>
            <param name="row">Line index of upper left corner of image area. Default: 100</param>
            <param name="column">Column index of upper left corner of image area. Default: 100</param>
            <param name="width">Width of new image. Default: 128</param>
            <param name="height">Height of new image. Default: 128</param>
            <returns>Image area.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ChangeFormat(System.Int32,System.Int32)">
            <summary>
              Change image size.
              Instance represents: Input image.
            </summary>
            <param name="width">Width of new image. Default: 512</param>
            <param name="height">Height of new image. Default: 512</param>
            <returns>Image with new format.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ChangeDomain(HalconDotNet.HRegion)">
            <summary>
              Change definition domain of an image.
              Instance represents: Input image.
            </summary>
            <param name="newDomain">New definition domain.</param>
            <returns>Image with new definition domain.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Rectangle1Domain(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Reduce the domain of an image to a rectangle.
              Instance represents: Input image.
            </summary>
            <param name="row1">Line index of upper left corner of image area. Default: 100</param>
            <param name="column1">Column index of upper left corner of image area. Default: 100</param>
            <param name="row2">Line index of lower right corner of image area. Default: 200</param>
            <param name="column2">Column index of lower right corner of image area. Default: 200</param>
            <returns>Image with reduced definition domain.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ReduceDomain(HalconDotNet.HRegion)">
            <summary>
              Reduce the domain of an image.
              Instance represents: Input image.
            </summary>
            <param name="region">New definition domain.</param>
            <returns>Image with reduced definition domain.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FullDomain">
            <summary>
              Expand the domain of an image to maximum.
              Instance represents: Input image.
            </summary>
            <returns>Image with maximum definition domain.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GetDomain">
            <summary>
              Get the domain of an image.
              Instance represents: Input images.
            </summary>
            <returns>Definition domains of input images.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.HoughLinesDir(HalconDotNet.HRegion@,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Detect lines in edge images with the help of the Hough transform using local gradient direction and return them in normal form.
              Instance represents: Image containing the edge direction. The edges are described by the image domain.
            </summary>
            <param name="lines">Regions of the input image that contributed to the local maxima.</param>
            <param name="directionUncertainty">Uncertainty of edge direction (in degrees). Default: 2</param>
            <param name="angleResolution">Resolution in the angle area (in 1/degrees). Default: 4</param>
            <param name="smoothing">Smoothing filter for hough image. Default: "mean"</param>
            <param name="filterSize">Required smoothing filter size. Default: 5</param>
            <param name="threshold">Threshold value in the Hough image. Default: 100</param>
            <param name="angleGap">Minimum distance of two maxima in the Hough image (direction: angle). Default: 5</param>
            <param name="distGap">Minimum distance of two maxima in the Hough image (direction: distance). Default: 5</param>
            <param name="genLines">Create line regions if 'true'. Default: "true"</param>
            <param name="angle">Angles (in radians) of the detected lines' normal vectors.</param>
            <param name="dist">Distance of the detected lines from the origin.</param>
            <returns>Hough transform.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.HoughLineTransDir(System.Int32,System.Int32)">
            <summary>
              Compute the Hough transform for lines using local gradient direction.
              Instance represents: Image containing the edge direction. The edges must be described by the image domain.
            </summary>
            <param name="directionUncertainty">Uncertainty of the edge direction (in degrees). Default: 2</param>
            <param name="angleResolution">Resolution in the angle area (in 1/degrees). Default: 4</param>
            <returns>Hough transform.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindRectificationGrid(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Segment the rectification grid region in the image.
              Instance represents: Input image.
            </summary>
            <param name="minContrast">Minimum contrast. Default: 8.0</param>
            <param name="radius">Radius of the circular structuring element. Default: 7.5</param>
            <returns>Output region containing the rectification grid.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindRectificationGrid(System.Double,System.Double)">
            <summary>
              Segment the rectification grid region in the image.
              Instance represents: Input image.
            </summary>
            <param name="minContrast">Minimum contrast. Default: 8.0</param>
            <param name="radius">Radius of the circular structuring element. Default: 7.5</param>
            <returns>Output region containing the rectification grid.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ConnectGridPoints(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Establish connections between the grid points of the rectification grid.
              Instance represents: Input image.
            </summary>
            <param name="row">Row coordinates of the grid points.</param>
            <param name="column">Column coordinates of the grid points.</param>
            <param name="sigma">Size of the applied Gaussians. Default: 0.9</param>
            <param name="maxDist">Maximum distance of the connecting lines from the grid points. Default: 5.5</param>
            <returns>Output contours.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ConnectGridPoints(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Double)">
            <summary>
              Establish connections between the grid points of the rectification grid.
              Instance represents: Input image.
            </summary>
            <param name="row">Row coordinates of the grid points.</param>
            <param name="column">Column coordinates of the grid points.</param>
            <param name="sigma">Size of the applied Gaussians. Default: 0.9</param>
            <param name="maxDist">Maximum distance of the connecting lines from the grid points. Default: 5.5</param>
            <returns>Output contours.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenGridRectificationMap(HalconDotNet.HXLD,HalconDotNet.HXLD@,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
              Instance represents: Input image.
            </summary>
            <param name="connectingLines">Input contours.</param>
            <param name="meshes">Output contours.</param>
            <param name="gridSpacing">Distance of the grid points in the rectified image.</param>
            <param name="rotation">Rotation to be applied to the point grid. Default: "auto"</param>
            <param name="row">Row coordinates of the grid points.</param>
            <param name="column">Column coordinates of the grid points.</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
            <returns>Image containing the mapping data.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenGridRectificationMap(HalconDotNet.HXLD,HalconDotNet.HXLD@,System.Int32,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
              Instance represents: Input image.
            </summary>
            <param name="connectingLines">Input contours.</param>
            <param name="meshes">Output contours.</param>
            <param name="gridSpacing">Distance of the grid points in the rectified image.</param>
            <param name="rotation">Rotation to be applied to the point grid. Default: "auto"</param>
            <param name="row">Row coordinates of the grid points.</param>
            <param name="column">Column coordinates of the grid points.</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
            <returns>Image containing the mapping data.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.UnprojectCoordinates(HalconDotNet.HWindow,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32@,System.Int32@,HalconDotNet.HTuple@)">
            <summary>
              Calculates image coordinates for a point in a 3D plot window.
              Instance represents: Displayed image.
            </summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row coordinate in the window.</param>
            <param name="column">Column coordinate in the window.</param>
            <param name="imageRow">Row coordinate in the image.</param>
            <param name="imageColumn">Column coordinate in the image.</param>
            <param name="height">Height value.</param>
        </member>
        <member name="M:HalconDotNet.HImage.UnprojectCoordinates(HalconDotNet.HWindow,System.Double,System.Double,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Calculates image coordinates for a point in a 3D plot window.
              Instance represents: Displayed image.
            </summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row coordinate in the window.</param>
            <param name="column">Column coordinate in the window.</param>
            <param name="imageRow">Row coordinate in the image.</param>
            <param name="imageColumn">Column coordinate in the image.</param>
            <param name="height">Height value.</param>
        </member>
        <member name="M:HalconDotNet.HImage.DumpWindowImage(HalconDotNet.HWindow)">
            <summary>
              Write the window content in an image object.
              Modified instance represents: Saved image.
            </summary>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HImage.DispImage(HalconDotNet.HWindow)">
            <summary>
              Displays gray value images.
              Instance represents: Gray value image to display.
            </summary>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HImage.DispChannel(HalconDotNet.HWindow,HalconDotNet.HTuple)">
            <summary>
              Displays images with several channels.
              Instance represents: Multichannel images to be displayed.
            </summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="channel">Number of channel or the numbers of the RGB-channels Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HImage.DispChannel(HalconDotNet.HWindow,System.Int32)">
            <summary>
              Displays images with several channels.
              Instance represents: Multichannel images to be displayed.
            </summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="channel">Number of channel or the numbers of the RGB-channels Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HImage.DispColor(HalconDotNet.HWindow)">
            <summary>
              Displays a color (RGB) image
              Instance represents: Color image to display.
            </summary>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HImage.GnuplotPlotImage(HalconDotNet.HGnuplot,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Visualize images using gnuplot.
              Instance represents: Image to be plotted.
            </summary>
            <param name="gnuplotFileID">Identifier for the gnuplot output stream.</param>
            <param name="samplesX">Number of samples in the x-direction. Default: 64</param>
            <param name="samplesY">Number of samples in the y-direction. Default: 64</param>
            <param name="viewRotX">Rotation of the plot about the x-axis. Default: 60</param>
            <param name="viewRotZ">Rotation of the plot about the z-axis. Default: 30</param>
            <param name="hidden3D">Plot the image with hidden surfaces removed. Default: "hidden3d"</param>
        </member>
        <member name="M:HalconDotNet.HImage.GnuplotPlotImage(HalconDotNet.HGnuplot,System.Int32,System.Int32,System.Double,System.Double,System.String)">
            <summary>
              Visualize images using gnuplot.
              Instance represents: Image to be plotted.
            </summary>
            <param name="gnuplotFileID">Identifier for the gnuplot output stream.</param>
            <param name="samplesX">Number of samples in the x-direction. Default: 64</param>
            <param name="samplesY">Number of samples in the y-direction. Default: 64</param>
            <param name="viewRotX">Rotation of the plot about the x-axis. Default: 60</param>
            <param name="viewRotZ">Rotation of the plot about the z-axis. Default: 30</param>
            <param name="hidden3D">Plot the image with hidden surfaces removed. Default: "hidden3d"</param>
        </member>
        <member name="M:HalconDotNet.HImage.TextureLaws(System.String,System.Int32,System.Int32)">
            <summary>
              Filter an image using a Laws texture filter.
              Instance represents: Images to which the texture transformation is to be applied.
            </summary>
            <param name="filterTypes">Desired filter. Default: "el"</param>
            <param name="shift">Shift to reduce the gray value dynamics. Default: 2</param>
            <param name="filterSize">Size of the filter kernel. Default: 5</param>
            <returns>Texture images.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DeviationImage(System.Int32,System.Int32)">
            <summary>
              Calculate the standard deviation of gray values within rectangular windows.
              Instance represents: Image for which the standard deviation is to be calculated.
            </summary>
            <param name="width">Width of the mask in which the standard deviation is calculated. Default: 11</param>
            <param name="height">Height of the mask in which the standard deviation is calculated. Default: 11</param>
            <returns>Image containing the standard deviation.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EntropyImage(System.Int32,System.Int32)">
            <summary>
              Calculate the entropy of gray values within a rectangular window.
              Instance represents: Image for which the entropy is to be calculated.
            </summary>
            <param name="width">Width of the mask in which the entropy is calculated. Default: 9</param>
            <param name="height">Height of the mask in which the entropy is calculated. Default: 9</param>
            <returns>Entropy image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.IsotropicDiffusion(System.Double,System.Int32)">
            <summary>
              Perform an isotropic diffusion of an image.
              Instance represents: Input image.
            </summary>
            <param name="sigma">Standard deviation of the Gauss distribution. Default: 1.0</param>
            <param name="iterations">Number of iterations. Default: 10</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AnisotropicDiffusion(System.String,System.Double,System.Double,System.Int32)">
            <summary>
              Perform an anisotropic diffusion of an image.
              Instance represents: Input image.
            </summary>
            <param name="mode">Diffusion coefficient as a function of the edge amplitude. Default: "weickert"</param>
            <param name="contrast">Contrast parameter. Default: 5.0</param>
            <param name="theta">Time step. Default: 1.0</param>
            <param name="iterations">Number of iterations. Default: 10</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SmoothImage(System.String,System.Double)">
            <summary>
              Smooth an image using various filters.
              Instance represents: Image to be smoothed.
            </summary>
            <param name="filter">Filter. Default: "deriche2"</param>
            <param name="alpha">Filterparameter: small values cause strong smoothing (vice versa by using bei 'gauss'). Default: 0.5</param>
            <returns>Smoothed image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SigmaImage(System.Int32,System.Int32,System.Int32)">
            <summary>
              Non-linear smoothing with the sigma filter.
              Instance represents: Image to be smoothed.
            </summary>
            <param name="maskHeight">Height of the mask (number of lines). Default: 5</param>
            <param name="maskWidth">Width of the mask (number of columns). Default: 5</param>
            <param name="sigma">Max. deviation to the average. Default: 3</param>
            <returns>Smoothed image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MidrangeImage(HalconDotNet.HRegion,HalconDotNet.HTuple)">
            <summary>
              Calculate the average of maximum and minimum inside any mask.
              Instance represents: Image to be filtered.
            </summary>
            <param name="mask">Filter mask.</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
            <returns>Filtered image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MidrangeImage(HalconDotNet.HRegion,System.String)">
            <summary>
              Calculate the average of maximum and minimum inside any mask.
              Instance represents: Image to be filtered.
            </summary>
            <param name="mask">Filter mask.</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
            <returns>Filtered image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.TrimmedMean(HalconDotNet.HRegion,System.Int32,HalconDotNet.HTuple)">
            <summary>
              Smooth an image with an arbitrary rank mask.
              Instance represents: Image to be filtered.
            </summary>
            <param name="mask">Image whose region serves as filter mask.</param>
            <param name="number">Number of averaged pixels. Typical value:       Surface(Mask) / 2. Default: 5</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
            <returns>Filtered output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.TrimmedMean(HalconDotNet.HRegion,System.Int32,System.String)">
            <summary>
              Smooth an image with an arbitrary rank mask.
              Instance represents: Image to be filtered.
            </summary>
            <param name="mask">Image whose region serves as filter mask.</param>
            <param name="number">Number of averaged pixels. Typical value:       Surface(Mask) / 2. Default: 5</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
            <returns>Filtered output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MedianSeparate(System.Int32,System.Int32,HalconDotNet.HTuple)">
            <summary>
              Separated median filtering with rectangle masks.
              Instance represents: Image to be filtered.
            </summary>
            <param name="maskWidth">Width of rank mask. Default: 25</param>
            <param name="maskHeight">Height of rank mask. Default: 25</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
            <returns>Median filtered image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MedianSeparate(System.Int32,System.Int32,System.String)">
            <summary>
              Separated median filtering with rectangle masks.
              Instance represents: Image to be filtered.
            </summary>
            <param name="maskWidth">Width of rank mask. Default: 25</param>
            <param name="maskHeight">Height of rank mask. Default: 25</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
            <returns>Median filtered image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MedianRect(System.Int32,System.Int32)">
            <summary>
              Compute a median filter with rectangular masks.
              Instance represents: Image to be filtered.
            </summary>
            <param name="maskWidth">Width of the filter mask. Default: 15</param>
            <param name="maskHeight">Height of the filter mask. Default: 15</param>
            <returns>Filtered image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MedianImage(System.String,System.Int32,HalconDotNet.HTuple)">
            <summary>
              Compute a median filter with various masks.
              Instance represents: Image to be filtered.
            </summary>
            <param name="maskType">Filter mask type. Default: "circle"</param>
            <param name="radius">Radius of the filter mask. Default: 1</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
            <returns>Filtered image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MedianImage(System.String,System.Int32,System.String)">
            <summary>
              Compute a median filter with various masks.
              Instance represents: Image to be filtered.
            </summary>
            <param name="maskType">Filter mask type. Default: "circle"</param>
            <param name="radius">Radius of the filter mask. Default: 1</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
            <returns>Filtered image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MedianWeighted(System.String,System.Int32)">
            <summary>
              Weighted median filtering with different rank masks.
              Instance represents: Image to be filtered.
            </summary>
            <param name="maskType">Type of median mask. Default: "inner"</param>
            <param name="maskSize">mask size. Default: 3</param>
            <returns>Median filtered image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.RankRect(System.Int32,System.Int32,System.Int32)">
            <summary>
              Compute a rank filter with rectangular masks.
              Instance represents: Image to be filtered.
            </summary>
            <param name="maskWidth">Width of the filter mask. Default: 15</param>
            <param name="maskHeight">Height of the filter mask. Default: 15</param>
            <param name="rank">Rank of the output gray value. Default: 5</param>
            <returns>Filtered image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.RankImage(HalconDotNet.HRegion,System.Int32,HalconDotNet.HTuple)">
            <summary>
              Compute a rank filter with arbitrary masks.
              Instance represents: Image to be filtered.
            </summary>
            <param name="mask">Filter mask.</param>
            <param name="rank">Rank of the output gray value. Default: 5</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
            <returns>Filtered image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.RankImage(HalconDotNet.HRegion,System.Int32,System.String)">
            <summary>
              Compute a rank filter with arbitrary masks.
              Instance represents: Image to be filtered.
            </summary>
            <param name="mask">Filter mask.</param>
            <param name="rank">Rank of the output gray value. Default: 5</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
            <returns>Filtered image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DualRank(System.String,System.Int32,System.Int32,HalconDotNet.HTuple)">
            <summary>
              Opening, Median and Closing with circle or rectangle mask.
              Instance represents: Image to be filtered.
            </summary>
            <param name="maskType">Shape of the mask. Default: "circle"</param>
            <param name="radius">Radius of the filter mask. Default: 1</param>
            <param name="modePercent">Filter Mode: 0 corresponds to a gray value opening , 50 corresponds to a median and 100 to a gray values closing. Default: 10</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
            <returns>Filtered Image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DualRank(System.String,System.Int32,System.Int32,System.String)">
            <summary>
              Opening, Median and Closing with circle or rectangle mask.
              Instance represents: Image to be filtered.
            </summary>
            <param name="maskType">Shape of the mask. Default: "circle"</param>
            <param name="radius">Radius of the filter mask. Default: 1</param>
            <param name="modePercent">Filter Mode: 0 corresponds to a gray value opening , 50 corresponds to a median and 100 to a gray values closing. Default: 10</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
            <returns>Filtered Image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MeanImage(System.Int32,System.Int32)">
            <summary>
              Smooth by averaging.
              Instance represents: Image to be smoothed.
            </summary>
            <param name="maskWidth">Width of filter mask. Default: 9</param>
            <param name="maskHeight">Height of filter mask. Default: 9</param>
            <returns>Smoothed image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BinomialFilter(System.Int32,System.Int32)">
            <summary>
              Smooth an image using the binomial filter.
              Instance represents: Input image.
            </summary>
            <param name="maskWidth">Filter width. Default: 5</param>
            <param name="maskHeight">Filter height. Default: 5</param>
            <returns>Smoothed image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GaussImage(System.Int32)">
            <summary>
              Smooth an image using discrete Gaussian functions.
              Instance represents: Image to be smoothed.
            </summary>
            <param name="size">Required filter size. Default: 5</param>
            <returns>Filtered image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GaussFilter(System.Int32)">
            <summary>
              Smooth using discrete gauss functions.
              Instance represents: Image to be smoothed.
            </summary>
            <param name="size">Required filter size. Default: 5</param>
            <returns>Filtered image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EliminateMinMax(System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
              Smooth an image in the spatial domain to suppress noise.
              Instance represents: Image to smooth.
            </summary>
            <param name="maskWidth">Width of filter mask. Default: 3</param>
            <param name="maskHeight">Height of filter mask. Default: 3</param>
            <param name="gap">Gap between local maximum/minimum and all other gray values of the neighborhood. Default: 1.0</param>
            <param name="mode">Replacement rule (1 = next minimum/maximum, 2 = average, 3 =median). Default: 3</param>
            <returns>Smoothed image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AnisotropeDiff(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Smooth an image by edge-preserving anisotropic diffusion.
              Instance represents: Image to be smoothed.
            </summary>
            <param name="percent">For histogram analysis; higher values increase the smoothing effect, typically: 80-90. Default: 80</param>
            <param name="mode">Selection of diffusion function. Default: 1</param>
            <param name="iteration">Number of iterations, typical values: 3-7. Default: 5</param>
            <param name="neighborhoodType">Required neighborhood type. Default: 8</param>
            <returns>Smoothed image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FillInterlace(System.String)">
            <summary>
              Interpolate 2 video half images.
              Instance represents: Gray image consisting of two half images.
            </summary>
            <param name="mode">Instruction whether even or odd lines should be replaced/removed. Default: "odd"</param>
            <returns>Full image with interpolated/removed lines.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.RankN(System.Int32)">
            <summary>
              Return gray values with given rank from multiple channels.
              Instance represents: Multichannel gray image.
            </summary>
            <param name="rankIndex">Rank of the gray value images to return. Default: 2</param>
            <returns>Result of the rank function.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MeanN">
            <summary>
              Average gray values over several channels.
              Instance represents: Multichannel gray image.
            </summary>
            <returns>Result of averaging.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EliminateSp(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Replace values outside of thresholds with average value.
              Instance represents: Input image.
            </summary>
            <param name="maskWidth">Width of filter mask. Default: 3</param>
            <param name="maskHeight">Height of filter mask. Default: 3</param>
            <param name="minThresh">Minimum gray value. Default: 1</param>
            <param name="maxThresh">Maximum gray value. Default: 254</param>
            <returns>Smoothed image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MeanSp(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Suppress salt and pepper noise.
              Instance represents: Input image.
            </summary>
            <param name="maskWidth">Width of filter mask. Default: 3</param>
            <param name="maskHeight">Height of filter mask. Default: 3</param>
            <param name="minThresh">Minimum gray value. Default: 1</param>
            <param name="maxThresh">Maximum gray value. Default: 254</param>
            <returns>Smoothed image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PointsSojka(System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find corners using the Sojka operator.
              Instance represents: Input image.
            </summary>
            <param name="maskSize">Required filter size. Default: 9</param>
            <param name="sigmaW">Sigma of the weight function according to the distance to the corner candidate. Default: 2.5</param>
            <param name="sigmaD">Sigma of the weight function for the distance to the ideal gray value edge. Default: 0.75</param>
            <param name="minGrad">Threshold for the magnitude of the gradient. Default: 30.0</param>
            <param name="minApparentness">Threshold for Apparentness. Default: 90.0</param>
            <param name="minAngle">Threshold for the direction change in a corner point (radians). Default: 0.5</param>
            <param name="subpix">Subpixel precise calculation of the corner points. Default: "false"</param>
            <param name="row">Row coordinates of the detected corner points.</param>
            <param name="column">Column coordinates of the detected corner points.</param>
        </member>
        <member name="M:HalconDotNet.HImage.PointsSojka(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find corners using the Sojka operator.
              Instance represents: Input image.
            </summary>
            <param name="maskSize">Required filter size. Default: 9</param>
            <param name="sigmaW">Sigma of the weight function according to the distance to the corner candidate. Default: 2.5</param>
            <param name="sigmaD">Sigma of the weight function for the distance to the ideal gray value edge. Default: 0.75</param>
            <param name="minGrad">Threshold for the magnitude of the gradient. Default: 30.0</param>
            <param name="minApparentness">Threshold for Apparentness. Default: 90.0</param>
            <param name="minAngle">Threshold for the direction change in a corner point (radians). Default: 0.5</param>
            <param name="subpix">Subpixel precise calculation of the corner points. Default: "false"</param>
            <param name="row">Row coordinates of the detected corner points.</param>
            <param name="column">Column coordinates of the detected corner points.</param>
        </member>
        <member name="M:HalconDotNet.HImage.DotsImage(System.Int32,System.String,System.Int32)">
            <summary>
              Enhance circular dots in an image.
              Instance represents: Input image.
            </summary>
            <param name="diameter">Diameter of the dots to be enhanced. Default: 5</param>
            <param name="filterType">Enhance dark, light, or all dots. Default: "light"</param>
            <param name="pixelShift">Shift of the filter response. Default: 0</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LocalMinSubPix(System.String,System.Double,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Subpixel precise detection of local minima in an image.
              Instance represents: Input image.
            </summary>
            <param name="filter">Method for the calculation of the partial derivatives. Default: "facet"</param>
            <param name="sigma">Sigma of the Gaussian. If Filter is 'facet', Sigma may be 0.0 to avoid the smoothing of the input image.</param>
            <param name="threshold">Minimum absolute value of the eigenvalues of the Hessian matrix. Default: 5.0</param>
            <param name="row">Row coordinates of the detected minima.</param>
            <param name="column">Column coordinates of the detected minima.</param>
        </member>
        <member name="M:HalconDotNet.HImage.LocalMaxSubPix(System.String,System.Double,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Subpixel precise detection of local maxima in an image.
              Instance represents: Input image.
            </summary>
            <param name="filter">Method for the calculation of the partial derivatives. Default: "facet"</param>
            <param name="sigma">Sigma of the Gaussian. If Filter is 'facet', Sigma may be 0.0 to avoid the smoothing of the input image.</param>
            <param name="threshold">Minimum absolute value of the eigenvalues of the Hessian matrix. Default: 5.0</param>
            <param name="row">Row coordinates of the detected maxima.</param>
            <param name="column">Column coordinates of the detected maxima.</param>
        </member>
        <member name="M:HalconDotNet.HImage.SaddlePointsSubPix(System.String,System.Double,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Subpixel precise detection of saddle points in an image.
              Instance represents: Input image.
            </summary>
            <param name="filter">Method for the calculation of the partial derivatives. Default: "facet"</param>
            <param name="sigma">Sigma of the Gaussian. If Filter is 'facet', Sigma may be 0.0 to avoid the smoothing of the input image.</param>
            <param name="threshold">Minimum absolute value of the eigenvalues of the Hessian matrix. Default: 5.0</param>
            <param name="row">Row coordinates of the detected saddle points.</param>
            <param name="column">Column coordinates of the detected saddle points.</param>
        </member>
        <member name="M:HalconDotNet.HImage.CriticalPointsSubPix(System.String,System.Double,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Subpixel precise detection of critical points in an image.
              Instance represents: Input image.
            </summary>
            <param name="filter">Method for the calculation of the partial derivatives. Default: "facet"</param>
            <param name="sigma">Sigma of the Gaussian. If Filter is 'facet', Sigma may be 0.0 to avoid the smoothing of the input image.</param>
            <param name="threshold">Minimum absolute value of the eigenvalues of the Hessian matrix. Default: 5.0</param>
            <param name="rowMin">Row coordinates of the detected minima.</param>
            <param name="columnMin">Column coordinates of the detected minima.</param>
            <param name="rowMax">Row coordinates of the detected maxima.</param>
            <param name="columnMax">Column coordinates of the detected maxima.</param>
            <param name="rowSaddle">Row coordinates of the detected saddle points.</param>
            <param name="columnSaddle">Column coordinates of the detected saddle points.</param>
        </member>
        <member name="M:HalconDotNet.HImage.PointsHarris(System.Double,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Detect points of interest using the Harris operator.
              Instance represents: Input image.
            </summary>
            <param name="sigmaGrad">Amount of smoothing used for the calculation of the gradient. Default: 0.7</param>
            <param name="sigmaSmooth">Amount of smoothing used for the integration of the gradients. Default: 2.0</param>
            <param name="alpha">Weight of the squared trace of the squared gradient matrix. Default: 0.08</param>
            <param name="threshold">Minimum filter response for the points. Default: 1000.0</param>
            <param name="row">Row coordinates of the detected points.</param>
            <param name="column">Column coordinates of the detected points.</param>
        </member>
        <member name="M:HalconDotNet.HImage.PointsHarris(System.Double,System.Double,System.Double,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Detect points of interest using the Harris operator.
              Instance represents: Input image.
            </summary>
            <param name="sigmaGrad">Amount of smoothing used for the calculation of the gradient. Default: 0.7</param>
            <param name="sigmaSmooth">Amount of smoothing used for the integration of the gradients. Default: 2.0</param>
            <param name="alpha">Weight of the squared trace of the squared gradient matrix. Default: 0.08</param>
            <param name="threshold">Minimum filter response for the points. Default: 1000.0</param>
            <param name="row">Row coordinates of the detected points.</param>
            <param name="column">Column coordinates of the detected points.</param>
        </member>
        <member name="M:HalconDotNet.HImage.PointsHarrisBinomial(System.Int32,System.Int32,System.Double,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Detect points of interest using the binomial approximation of the Harris operator.
              Instance represents: Input image.
            </summary>
            <param name="maskSizeGrad">Amount of binomial smoothing used for the calculation of the gradient. Default: 5</param>
            <param name="maskSizeSmooth">Amount of smoothing used for the integration of the gradients. Default: 15</param>
            <param name="alpha">Weight of the squared trace of the squared gradient matrix. Default: 0.08</param>
            <param name="threshold">Minimum filter response for the points. Default: 1000.0</param>
            <param name="subpix">Turn on or off subpixel refinement. Default: "on"</param>
            <param name="row">Row coordinates of the detected points.</param>
            <param name="column">Column coordinates of the detected points.</param>
        </member>
        <member name="M:HalconDotNet.HImage.PointsHarrisBinomial(System.Int32,System.Int32,System.Double,System.Double,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Detect points of interest using the binomial approximation of the Harris operator.
              Instance represents: Input image.
            </summary>
            <param name="maskSizeGrad">Amount of binomial smoothing used for the calculation of the gradient. Default: 5</param>
            <param name="maskSizeSmooth">Amount of smoothing used for the integration of the gradients. Default: 15</param>
            <param name="alpha">Weight of the squared trace of the squared gradient matrix. Default: 0.08</param>
            <param name="threshold">Minimum filter response for the points. Default: 1000.0</param>
            <param name="subpix">Turn on or off subpixel refinement. Default: "on"</param>
            <param name="row">Row coordinates of the detected points.</param>
            <param name="column">Column coordinates of the detected points.</param>
        </member>
        <member name="M:HalconDotNet.HImage.PointsLepetit(System.Int32,System.Int32,System.Int32,System.Int32,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Detect points of interest using the Lepetit operator.
              Instance represents: Input image.
            </summary>
            <param name="radius">Radius of the circle. Default: 3</param>
            <param name="checkNeighbor">Number of checked neighbors on the circle. Default: 1</param>
            <param name="minCheckNeighborDiff">Threshold of grayvalue difference to each circle point. Default: 15</param>
            <param name="minScore">Threshold of grayvalue difference to all circle points. Default: 30</param>
            <param name="subpix">Subpixel accuracy of point coordinates. Default: "interpolation"</param>
            <param name="row">Row-coordinates of the detected points.</param>
            <param name="column">Column-coordinates of the detected points.</param>
        </member>
        <member name="M:HalconDotNet.HImage.PointsFoerstner(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.String,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Detect points of interest using the Foerstner operator.
              Instance represents: Input image.
            </summary>
            <param name="sigmaGrad">Amount of smoothing used for the calculation of the gradient. If Smoothing is 'mean', SigmaGrad is ignored. Default: 1.0</param>
            <param name="sigmaInt">Amount of smoothing used for the integration of the gradients. Default: 2.0</param>
            <param name="sigmaPoints">Amount of smoothing used in the optimization functions. Default: 3.0</param>
            <param name="threshInhom">Threshold for the segmentation of inhomogeneous image areas. Default: 200</param>
            <param name="threshShape">Threshold for the segmentation of point areas. Default: 0.3</param>
            <param name="smoothing">Used smoothing method. Default: "gauss"</param>
            <param name="eliminateDoublets">Elimination of multiply detected points. Default: "false"</param>
            <param name="rowJunctions">Row coordinates of the detected junction points.</param>
            <param name="columnJunctions">Column coordinates of the detected junction points.</param>
            <param name="coRRJunctions">Row part of the covariance matrix of the detected junction points.</param>
            <param name="coRCJunctions">Mixed part of the covariance matrix of the detected junction points.</param>
            <param name="coCCJunctions">Column part of the covariance matrix of the detected junction points.</param>
            <param name="rowArea">Row coordinates of the detected area points.</param>
            <param name="columnArea">Column coordinates of the detected area points.</param>
            <param name="coRRArea">Row part of the covariance matrix of the detected area points.</param>
            <param name="coRCArea">Mixed part of the covariance matrix of the detected area points.</param>
            <param name="coCCArea">Column part of the covariance matrix of the detected area points.</param>
        </member>
        <member name="M:HalconDotNet.HImage.PointsFoerstner(System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Detect points of interest using the Foerstner operator.
              Instance represents: Input image.
            </summary>
            <param name="sigmaGrad">Amount of smoothing used for the calculation of the gradient. If Smoothing is 'mean', SigmaGrad is ignored. Default: 1.0</param>
            <param name="sigmaInt">Amount of smoothing used for the integration of the gradients. Default: 2.0</param>
            <param name="sigmaPoints">Amount of smoothing used in the optimization functions. Default: 3.0</param>
            <param name="threshInhom">Threshold for the segmentation of inhomogeneous image areas. Default: 200</param>
            <param name="threshShape">Threshold for the segmentation of point areas. Default: 0.3</param>
            <param name="smoothing">Used smoothing method. Default: "gauss"</param>
            <param name="eliminateDoublets">Elimination of multiply detected points. Default: "false"</param>
            <param name="rowJunctions">Row coordinates of the detected junction points.</param>
            <param name="columnJunctions">Column coordinates of the detected junction points.</param>
            <param name="coRRJunctions">Row part of the covariance matrix of the detected junction points.</param>
            <param name="coRCJunctions">Mixed part of the covariance matrix of the detected junction points.</param>
            <param name="coCCJunctions">Column part of the covariance matrix of the detected junction points.</param>
            <param name="rowArea">Row coordinates of the detected area points.</param>
            <param name="columnArea">Column coordinates of the detected area points.</param>
            <param name="coRRArea">Row part of the covariance matrix of the detected area points.</param>
            <param name="coRCArea">Mixed part of the covariance matrix of the detected area points.</param>
            <param name="coCCArea">Column part of the covariance matrix of the detected area points.</param>
        </member>
        <member name="M:HalconDotNet.HImage.EstimateNoise(System.String,HalconDotNet.HTuple)">
            <summary>
              Estimate the image noise from a single image.
              Instance represents: Input image.
            </summary>
            <param name="method">Method to estimate the image noise. Default: "foerstner"</param>
            <param name="percent">Percentage of used image points. Default: 20</param>
            <returns>Standard deviation of the image noise.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EstimateNoise(System.String,System.Double)">
            <summary>
              Estimate the image noise from a single image.
              Instance represents: Input image.
            </summary>
            <param name="method">Method to estimate the image noise. Default: "foerstner"</param>
            <param name="percent">Percentage of used image points. Default: 20</param>
            <returns>Standard deviation of the image noise.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.NoiseDistributionMean(HalconDotNet.HRegion,System.Int32)">
            <summary>
              Determine the noise distribution of an image.
              Instance represents: Corresponding image.
            </summary>
            <param name="constRegion">Region from which the noise distribution is to be estimated.</param>
            <param name="filterSize">Size of the mean filter. Default: 21</param>
            <returns>Noise distribution of all input regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AddNoiseWhite(System.Double)">
            <summary>
              Add noise to an image.
              Instance represents: Input image.
            </summary>
            <param name="amp">Maximum noise amplitude. Default: 60.0</param>
            <returns>Noisy image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AddNoiseDistribution(HalconDotNet.HTuple)">
            <summary>
              Add noise to an image.
              Instance represents: Input image.
            </summary>
            <param name="distribution">Noise distribution.</param>
            <returns>Noisy image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DeviationN">
            <summary>
              Calculate standard deviation over several channels.
              Instance represents: Multichannel gray image.
            </summary>
            <returns>Result of calculation.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.InpaintingTexture(HalconDotNet.HRegion,System.Int32,System.Int32,System.Double,System.String,System.Double)">
            <summary>
              Perform an inpainting by texture propagation.
              Instance represents: Input image.
            </summary>
            <param name="region">Inpainting region.</param>
            <param name="maskSize">Size of the inpainting blocks. Default: 9</param>
            <param name="searchSize">Size of the search window. Default: 30</param>
            <param name="anisotropy">Influence of the edge amplitude on the inpainting order. Default: 1.0</param>
            <param name="postIteration">Post-iteration for artifact reduction. Default: "none"</param>
            <param name="smoothness">Gray value tolerance for post-iteration. Default: 1.0</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.InpaintingCt(HalconDotNet.HRegion,System.Double,System.Double,System.Double,System.Double,HalconDotNet.HTuple)">
            <summary>
              Perform an inpainting by coherence transport.
              Instance represents: Input image.
            </summary>
            <param name="region">Inpainting region.</param>
            <param name="epsilon">Radius of the pixel neighborhood. Default: 5.0</param>
            <param name="kappa">Sharpness parameter in percent. Default: 25.0</param>
            <param name="sigma">Pre-smoothing parameter. Default: 1.41</param>
            <param name="rho">Smoothing parameter for the direction estimation. Default: 4.0</param>
            <param name="channelCoefficients">Channel weights. Default: 1</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.InpaintingCt(HalconDotNet.HRegion,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Perform an inpainting by coherence transport.
              Instance represents: Input image.
            </summary>
            <param name="region">Inpainting region.</param>
            <param name="epsilon">Radius of the pixel neighborhood. Default: 5.0</param>
            <param name="kappa">Sharpness parameter in percent. Default: 25.0</param>
            <param name="sigma">Pre-smoothing parameter. Default: 1.41</param>
            <param name="rho">Smoothing parameter for the direction estimation. Default: 4.0</param>
            <param name="channelCoefficients">Channel weights. Default: 1</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.InpaintingMcf(HalconDotNet.HRegion,System.Double,System.Double,System.Int32)">
            <summary>
              Perform an inpainting by smoothing of level lines.
              Instance represents: Input image.
            </summary>
            <param name="region">Inpainting region.</param>
            <param name="sigma">Smoothing for derivative operator. Default: 0.5</param>
            <param name="theta">Time step. Default: 0.5</param>
            <param name="iterations">Number of iterations. Default: 10</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.InpaintingCed(HalconDotNet.HRegion,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
              Perform an inpainting by coherence enhancing diffusion.
              Instance represents: Input image.
            </summary>
            <param name="region">Inpainting region.</param>
            <param name="sigma">Smoothing for derivative operator. Default: 0.5</param>
            <param name="rho">Smoothing for diffusion coefficients. Default: 3.0</param>
            <param name="theta">Time step. Default: 0.5</param>
            <param name="iterations">Number of iterations. Default: 10</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.InpaintingAniso(HalconDotNet.HRegion,System.String,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
              Perform an inpainting by anisotropic diffusion.
              Instance represents: Input image.
            </summary>
            <param name="region">Inpainting region.</param>
            <param name="mode">Type of edge sharpening algorithm. Default: "weickert"</param>
            <param name="contrast">Contrast parameter. Default: 5.0</param>
            <param name="theta">Step size. Default: 0.5</param>
            <param name="iterations">Number of iterations. Default: 10</param>
            <param name="rho">Smoothing coefficient for edge information. Default: 3.0</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.HarmonicInterpolation(HalconDotNet.HRegion,System.Double)">
            <summary>
              Perform a harmonic interpolation on an image region.
              Instance represents: Input image.
            </summary>
            <param name="region">Inpainting region.</param>
            <param name="precision">Computational accuracy. Default: 0.001</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ExpandDomainGray(System.Int32)">
            <summary>
              Expand the domain of an image and set the gray values in the expanded domain.
              Instance represents: Input image with domain to be expanded.
            </summary>
            <param name="expansionRange">Radius of the gray value expansion, measured in pixels. Default: 2</param>
            <returns>Output image with new gray values in the expanded domain.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.TopographicSketch">
            <summary>
              Compute the topographic primal sketch of an image.
              Instance represents: Image for which the topographic primal sketch is to be computed.
            </summary>
            <returns>Label image containing the 11 classes.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LinearTransColor(HalconDotNet.HTuple)">
            <summary>
              Compute an affine transformation of the color values of a multichannel image.
              Instance represents: Multichannel input image.
            </summary>
            <param name="transMat">Transformation matrix for the color values.</param>
            <returns>Multichannel output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenPrincipalCompTrans(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the transformation matrix of the principal component analysis of multichannel images.
              Instance represents: Multichannel input image.
            </summary>
            <param name="transInv">Transformation matrix for the computation of the inverse PCA.</param>
            <param name="mean">Mean gray value of the channels.</param>
            <param name="cov">Covariance matrix of the channels.</param>
            <param name="infoPerComp">Information content of the transformed channels.</param>
            <returns>Transformation matrix for the computation of the PCA.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PrincipalComp(HalconDotNet.HTuple@)">
            <summary>
              Compute the principal components of multichannel images.
              Instance represents: Multichannel input image.
            </summary>
            <param name="infoPerComp">Information content of each output channel.</param>
            <returns>Multichannel output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FuzzyEntropy(HalconDotNet.HRegion,System.Int32,System.Int32)">
            <summary>
              Determine the fuzzy entropy of regions.
              Instance represents: Input image containing the fuzzy membership values.
            </summary>
            <param name="regions">Regions for which the fuzzy entropy is to be calculated.</param>
            <param name="apar">Start of the fuzzy function. Default: 0</param>
            <param name="cpar">End of the fuzzy function. Default: 255</param>
            <returns>Fuzzy entropy of a region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FuzzyPerimeter(HalconDotNet.HRegion,System.Int32,System.Int32)">
            <summary>
              Calculate the fuzzy perimeter of a region.
              Instance represents: Input image containing the fuzzy membership values.
            </summary>
            <param name="regions">Regions for which the fuzzy perimeter is to be calculated.</param>
            <param name="apar">Start of the fuzzy function. Default: 0</param>
            <param name="cpar">End of the fuzzy function. Default: 255</param>
            <returns>Fuzzy perimeter of a region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayClosingShape(HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Perform a grayvalue closing with a selected mask.
              Instance represents: Image for which the minimum gray values are to be calculated.
            </summary>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
            <param name="maskShape">Shape of the mask. Default: "octagon"</param>
            <returns>Image containing the minimum gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayClosingShape(System.Double,System.Double,System.String)">
            <summary>
              Perform a grayvalue closing with a selected mask.
              Instance represents: Image for which the minimum gray values are to be calculated.
            </summary>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
            <param name="maskShape">Shape of the mask. Default: "octagon"</param>
            <returns>Image containing the minimum gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayOpeningShape(HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Perform a gray value opening with a selected mask.
              Instance represents: Image for which the minimum gray values are to be calculated.
            </summary>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
            <param name="maskShape">Shape of the mask. Default: "octagon"</param>
            <returns>Image containing the minimum gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayOpeningShape(System.Double,System.Double,System.String)">
            <summary>
              Perform a gray value opening with a selected mask.
              Instance represents: Image for which the minimum gray values are to be calculated.
            </summary>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
            <param name="maskShape">Shape of the mask. Default: "octagon"</param>
            <returns>Image containing the minimum gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayErosionShape(HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Determine the minimum gray value within a selected mask.
              Instance represents: Image for which the minimum gray values are to be calculated.
            </summary>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
            <param name="maskShape">Shape of the mask. Default: "octagon"</param>
            <returns>Image containing the minimum gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayErosionShape(System.Double,System.Double,System.String)">
            <summary>
              Determine the minimum gray value within a selected mask.
              Instance represents: Image for which the minimum gray values are to be calculated.
            </summary>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
            <param name="maskShape">Shape of the mask. Default: "octagon"</param>
            <returns>Image containing the minimum gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayDilationShape(HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Determine the maximum gray value within a selected mask.
              Instance represents: Image for which the maximum gray values are to be calculated.
            </summary>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
            <param name="maskShape">Shape of the mask. Default: "octagon"</param>
            <returns>Image containing the maximum gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayDilationShape(System.Double,System.Double,System.String)">
            <summary>
              Determine the maximum gray value within a selected mask.
              Instance represents: Image for which the maximum gray values are to be calculated.
            </summary>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
            <param name="maskShape">Shape of the mask. Default: "octagon"</param>
            <returns>Image containing the maximum gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayRangeRect(System.Int32,System.Int32)">
            <summary>
              Determine the gray value range within a rectangle.
              Instance represents: Image for which the gray value range is to be calculated.
            </summary>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
            <returns>Image containing the gray value range.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayClosingRect(System.Int32,System.Int32)">
            <summary>
              Perform a gray value closing with a rectangular mask.
              Instance represents: Input image.
            </summary>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
            <returns>Gray-closed image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayOpeningRect(System.Int32,System.Int32)">
            <summary>
              Perform a gray value opening with a rectangular mask.
              Instance represents: Input image.
            </summary>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
            <returns>Gray-opened image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayErosionRect(System.Int32,System.Int32)">
            <summary>
              Determine the minimum gray value within a rectangle.
              Instance represents: Image for which the minimum gray values are to be calculated.
            </summary>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
            <returns>Image containing the minimum gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayDilationRect(System.Int32,System.Int32)">
            <summary>
              Determine the maximum gray value within a rectangle.
              Instance represents: Image for which the maximum gray values are to be calculated.
            </summary>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
            <returns>Image containing the maximum gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GraySkeleton">
            <summary>
              Thinning of gray value images.
              Instance represents: Image to be thinned.
            </summary>
            <returns>Thinned image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LutTrans(HalconDotNet.HTuple)">
            <summary>
              Transform an image with a gray-value look-up-table
              Instance represents: Image whose gray values are to be transformed.
            </summary>
            <param name="lut">Table containing the transformation.</param>
            <returns>Transformed image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ConvolImage(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Calculate the correlation between an image and an arbitrary filter mask
              Instance represents: Images for which the correlation will be calculated.
            </summary>
            <param name="filterMask">Filter mask as file name or tuple. Default: "sobel"</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
            <returns>Result of the correlation.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ConvolImage(System.String,System.String)">
            <summary>
              Calculate the correlation between an image and an arbitrary filter mask
              Instance represents: Images for which the correlation will be calculated.
            </summary>
            <param name="filterMask">Filter mask as file name or tuple. Default: "sobel"</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
            <returns>Result of the correlation.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ConvertImageType(System.String)">
            <summary>
              Convert the type of an image.
              Instance represents: Image whose image type is to be changed.
            </summary>
            <param name="newType">Desired image type (i.e., type of the gray values). Default: "byte"</param>
            <returns>Converted image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.RealToVectorField(HalconDotNet.HImage,System.String)">
            <summary>
              Convert two real-valued images into a vector field image.
              Instance represents: Vector component in the row direction.
            </summary>
            <param name="col">Vector component in the column direction.</param>
            <param name="type">Semantic kind of the vector field. Default: "vector_field_relative"</param>
            <returns>Displacement vector field.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.VectorFieldToReal(HalconDotNet.HImage@)">
            <summary>
              Convert a vector field image into two real-valued images.
              Instance represents: Vector field.
            </summary>
            <param name="col">Vector component in the column direction.</param>
            <returns>Vector component in the row direction.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.RealToComplex(HalconDotNet.HImage)">
            <summary>
              Convert two real images into a complex image.
              Instance represents: Real part.
            </summary>
            <param name="imageImaginary">Imaginary part.</param>
            <returns>Complex image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ComplexToReal(HalconDotNet.HImage@)">
            <summary>
              Convert a complex image into two real images.
              Instance represents: Complex image.
            </summary>
            <param name="imageImaginary">Imaginary part.</param>
            <returns>Real part.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.RegionToMean(HalconDotNet.HRegion)">
            <summary>
              Paint regions with their average gray value.
              Instance represents: original gray-value image.
            </summary>
            <param name="regions">Input regions.</param>
            <returns>Result image with painted regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayInside">
            <summary>
              Calculate the lowest possible gray value on an arbitrary path to the image border for each point in the image.
              Instance represents: Image being processed.
            </summary>
            <returns>Result image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Symmetry(System.Int32,System.Double,System.Double)">
            <summary>
              Symmetry of gray values along a row.
              Instance represents: Input image.
            </summary>
            <param name="maskSize">Extension of search area. Default: 40</param>
            <param name="direction">Angle of test direction. Default: 0.0</param>
            <param name="exponent">Exponent for weighting. Default: 0.5</param>
            <returns>Symmetry image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SelectGrayvaluesFromChannels(HalconDotNet.HImage)">
            <summary>
              Selection of gray values of a multi-channel image using an index image.
              Instance represents: Multi-channel gray value image.
            </summary>
            <param name="indexImage">Image, where pixel values are interpreted as channel index.</param>
            <returns>Resulting image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DepthFromFocus(HalconDotNet.HImage@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Extract depth using mutiple focus levels.
              Instance represents: Multichannel gray image consisting of multiple focus levels.
            </summary>
            <param name="confidence">Confidence of depth estimation.</param>
            <param name="filter">Filter used to find sharp pixels. Default: "highpass"</param>
            <param name="selection">Method used to find sharp pixels. Default: "next_maximum"</param>
            <returns>Depth image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DepthFromFocus(HalconDotNet.HImage@,System.String,System.String)">
            <summary>
              Extract depth using mutiple focus levels.
              Instance represents: Multichannel gray image consisting of multiple focus levels.
            </summary>
            <param name="confidence">Confidence of depth estimation.</param>
            <param name="filter">Filter used to find sharp pixels. Default: "highpass"</param>
            <param name="selection">Method used to find sharp pixels. Default: "next_maximum"</param>
            <returns>Depth image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SceneFlowUncalib(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Compute the uncalibrated scene flow between two stereo image pairs.
              Instance represents: Input image 1 at time @f$t_{1}$t_1.
            </summary>
            <param name="imageRect2T1">Input image 2 at time @f$t_{1}$t_1.</param>
            <param name="imageRect1T2">Input image 1 at time @f$t_{2}$t_2.</param>
            <param name="imageRect2T2">Input image 2 at time @f$t_{2}$t_2.</param>
            <param name="disparity">Disparity between input images 1 and 2 at time @f$t_{1}$t_1.</param>
            <param name="disparityChange">Estimated change in disparity.</param>
            <param name="smoothingFlow">Weight of the regularization term relative to the data term (derivatives of the optical flow). Default: 40.0</param>
            <param name="smoothingDisparity">Weight of the regularization term relative to the data term (derivatives of the disparity change). Default: 40.0</param>
            <param name="genParamName">Parameter name(s) for the algorithm. Default: "default_parameters"</param>
            <param name="genParamValue">Parameter value(s) for the algorithm. Default: "accurate"</param>
            <returns>Estimated optical flow.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SceneFlowUncalib(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage@,System.Double,System.Double,System.String,System.String)">
            <summary>
              Compute the uncalibrated scene flow between two stereo image pairs.
              Instance represents: Input image 1 at time @f$t_{1}$t_1.
            </summary>
            <param name="imageRect2T1">Input image 2 at time @f$t_{1}$t_1.</param>
            <param name="imageRect1T2">Input image 1 at time @f$t_{2}$t_2.</param>
            <param name="imageRect2T2">Input image 2 at time @f$t_{2}$t_2.</param>
            <param name="disparity">Disparity between input images 1 and 2 at time @f$t_{1}$t_1.</param>
            <param name="disparityChange">Estimated change in disparity.</param>
            <param name="smoothingFlow">Weight of the regularization term relative to the data term (derivatives of the optical flow). Default: 40.0</param>
            <param name="smoothingDisparity">Weight of the regularization term relative to the data term (derivatives of the disparity change). Default: 40.0</param>
            <param name="genParamName">Parameter name(s) for the algorithm. Default: "default_parameters"</param>
            <param name="genParamValue">Parameter value(s) for the algorithm. Default: "accurate"</param>
            <returns>Estimated optical flow.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.UnwarpImageVectorField(HalconDotNet.HImage)">
            <summary>
              Unwarp an image using a vector field.
              Instance represents: Input image.
            </summary>
            <param name="vectorField">Input vector field.</param>
            <returns>Unwarped image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DerivateVectorField(HalconDotNet.HTuple,System.String)">
            <summary>
              Convolve a vector field with derivatives of the Gaussian.
              Instance represents: Input vector field.
            </summary>
            <param name="sigma">Sigma of the Gaussian. Default: 1.0</param>
            <param name="component">Component to be calculated. Default: "mean_curvature"</param>
            <returns>Filtered result images.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DerivateVectorField(System.Double,System.String)">
            <summary>
              Convolve a vector field with derivatives of the Gaussian.
              Instance represents: Input vector field.
            </summary>
            <param name="sigma">Sigma of the Gaussian. Default: 1.0</param>
            <param name="component">Component to be calculated. Default: "mean_curvature"</param>
            <returns>Filtered result images.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.VectorFieldLength(System.String)">
            <summary>
              Compute the length of the vectors of a vector field.
              Instance represents: Input vector field
            </summary>
            <param name="mode">Mode for computing the length of the vectors. Default: "length"</param>
            <returns>Length of the vectors of the vector field.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.OpticalFlowMg(HalconDotNet.HImage,System.String,System.Double,System.Double,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Compute the optical flow between two images.
              Instance represents: Input image 1.
            </summary>
            <param name="imageT2">Input image 2.</param>
            <param name="algorithm">Algorithm for computing the optical flow. Default: "fdrig"</param>
            <param name="smoothingSigma">Standard deviation for initial Gaussian smoothing. Default: 0.8</param>
            <param name="integrationSigma">Standard deviation of the integration filter. Default: 1.0</param>
            <param name="flowSmoothness">Weight of the smoothing term relative to the data term. Default: 20.0</param>
            <param name="gradientConstancy">Weight of the gradient constancy relative to the gray value constancy. Default: 5.0</param>
            <param name="MGParamName">Parameter name(s) for the multigrid algorithm. Default: "default_parameters"</param>
            <param name="MGParamValue">Parameter value(s) for the multigrid algorithm. Default: "accurate"</param>
            <returns>Optical flow.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.OpticalFlowMg(HalconDotNet.HImage,System.String,System.Double,System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>
              Compute the optical flow between two images.
              Instance represents: Input image 1.
            </summary>
            <param name="imageT2">Input image 2.</param>
            <param name="algorithm">Algorithm for computing the optical flow. Default: "fdrig"</param>
            <param name="smoothingSigma">Standard deviation for initial Gaussian smoothing. Default: 0.8</param>
            <param name="integrationSigma">Standard deviation of the integration filter. Default: 1.0</param>
            <param name="flowSmoothness">Weight of the smoothing term relative to the data term. Default: 20.0</param>
            <param name="gradientConstancy">Weight of the gradient constancy relative to the gray value constancy. Default: 5.0</param>
            <param name="MGParamName">Parameter name(s) for the multigrid algorithm. Default: "default_parameters"</param>
            <param name="MGParamValue">Parameter value(s) for the multigrid algorithm. Default: "accurate"</param>
            <returns>Optical flow.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ExhaustiveMatchMg(HalconDotNet.HImage,System.String,System.Int32,System.Int32)">
            <summary>
              Matching a template and an image in a resolution pyramid.
              Instance represents: Input image.
            </summary>
            <param name="imageTemplate">The domain of this image will be matched with Image.</param>
            <param name="mode">Desired matching criterion. Default: "dfd"</param>
            <param name="level">Startlevel in the resolution pyramid (highest resolution: Level 0). Default: 1</param>
            <param name="threshold">Threshold to determine the "region of interest". Default: 30</param>
            <returns>Result image and result region: values of the matching criterion within the determined "region of interest".</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CreateTemplateRot(System.Int32,System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>
              Preparing a pattern for template matching with rotation.
              Instance represents: Input image whose domain will be processed for the pattern matching.
            </summary>
            <param name="numLevel">Maximal number of pyramid levels. Default: 4</param>
            <param name="angleStart">Smallest Rotation of the pattern. Default: -0.39</param>
            <param name="angleExtend">Maximum positive Extension of AngleStart. Default: 0.79</param>
            <param name="angleStep">Step rate (angle precision) of matching. Default: 0.0982</param>
            <param name="optimize">Kind of optimizing. Default: "sort"</param>
            <param name="grayValues">Kind of grayvalues. Default: "original"</param>
            <returns>Template number.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CreateTemplate(System.Int32,System.Int32,System.String,System.String)">
            <summary>
              Preparing a pattern for template matching.
              Instance represents: Input image whose domain will be processed for the pattern matching.
            </summary>
            <param name="firstError">Not yet in use. Default: 255</param>
            <param name="numLevel">Maximal number of pyramid levels. Default: 4</param>
            <param name="optimize">Kind of optimizing. Default: "sort"</param>
            <param name="grayValues">Kind of grayvalues. Default: "original"</param>
            <returns>Template number.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AdaptTemplate(HalconDotNet.HTemplate)">
            <summary>
              Adapting a template to the size of an image.
              Instance represents: Image which determines the size of the later matching.
            </summary>
            <param name="templateID">Template number.</param>
        </member>
        <member name="M:HalconDotNet.HImage.FastMatchMg(HalconDotNet.HTemplate,System.Double,HalconDotNet.HTuple)">
            <summary>
              Searching all good grayvalue matches in a pyramid.
              Instance represents: Input image inside of which the pattern has to be found.
            </summary>
            <param name="templateID">Template number.</param>
            <param name="maxError">Maximal average difference of the grayvalues. Default: 30.0</param>
            <param name="numLevel">Number of levels in the pyramid. Default: 3</param>
            <returns>All points which have an error below a certain threshold.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FastMatchMg(HalconDotNet.HTemplate,System.Double,System.Int32)">
            <summary>
              Searching all good grayvalue matches in a pyramid.
              Instance represents: Input image inside of which the pattern has to be found.
            </summary>
            <param name="templateID">Template number.</param>
            <param name="maxError">Maximal average difference of the grayvalues. Default: 30.0</param>
            <param name="numLevel">Number of levels in the pyramid. Default: 3</param>
            <returns>All points which have an error below a certain threshold.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BestMatchPreMg(HalconDotNet.HTemplate,System.Double,System.String,System.Int32,HalconDotNet.HTuple,System.Double@,System.Double@,System.Double@)">
            <summary>
              Searching the best grayvalue matches in a pre generated pyramid.
              Instance represents: Image pyramid inside of which the pattern has to be found.
            </summary>
            <param name="templateID">Template number.</param>
            <param name="maxError">Maximal average difference of the grayvalues. Default: 30.0</param>
            <param name="subPixel">Exactness in subpixels in case of 'true'. Default: "false"</param>
            <param name="numLevels">Number of the used resolution levels. Default: 3</param>
            <param name="whichLevels">Resolution level up to which the method "best match" is used. Default: "original"</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="error">Average divergence of the grayvalues in the best match.</param>
        </member>
        <member name="M:HalconDotNet.HImage.BestMatchPreMg(HalconDotNet.HTemplate,System.Double,System.String,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
              Searching the best grayvalue matches in a pre generated pyramid.
              Instance represents: Image pyramid inside of which the pattern has to be found.
            </summary>
            <param name="templateID">Template number.</param>
            <param name="maxError">Maximal average difference of the grayvalues. Default: 30.0</param>
            <param name="subPixel">Exactness in subpixels in case of 'true'. Default: "false"</param>
            <param name="numLevels">Number of the used resolution levels. Default: 3</param>
            <param name="whichLevels">Resolution level up to which the method "best match" is used. Default: "original"</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="error">Average divergence of the grayvalues in the best match.</param>
        </member>
        <member name="M:HalconDotNet.HImage.BestMatchMg(HalconDotNet.HTemplate,System.Double,System.String,System.Int32,HalconDotNet.HTuple,System.Double@,System.Double@,System.Double@)">
            <summary>
              Searching the best grayvalue matches in a pyramid.
              Instance represents: Input image inside of which the pattern has to be found.
            </summary>
            <param name="templateID">Template number.</param>
            <param name="maxError">Maximal average difference of the grayvalues. Default: 30.0</param>
            <param name="subPixel">Exactness in subpixels in case of 'true'. Default: "false"</param>
            <param name="numLevels">Number of the used resolution levels. Default: 4</param>
            <param name="whichLevels">Resolution level up to which the method "best match" is used. Default: 2</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="error">Average divergence of the grayvalues in the best match.</param>
        </member>
        <member name="M:HalconDotNet.HImage.BestMatchMg(HalconDotNet.HTemplate,System.Double,System.String,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
              Searching the best grayvalue matches in a pyramid.
              Instance represents: Input image inside of which the pattern has to be found.
            </summary>
            <param name="templateID">Template number.</param>
            <param name="maxError">Maximal average difference of the grayvalues. Default: 30.0</param>
            <param name="subPixel">Exactness in subpixels in case of 'true'. Default: "false"</param>
            <param name="numLevels">Number of the used resolution levels. Default: 4</param>
            <param name="whichLevels">Resolution level up to which the method "best match" is used. Default: 2</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="error">Average divergence of the grayvalues in the best match.</param>
        </member>
        <member name="M:HalconDotNet.HImage.FastMatch(HalconDotNet.HTemplate,System.Double)">
            <summary>
              Searching all good matches of a template and an image.
              Instance represents: Input image inside of which the pattern has to be found.
            </summary>
            <param name="templateID">Template number.</param>
            <param name="maxError">Maximal average difference of the grayvalues. Default: 20.0</param>
            <returns>All points whose error lies below a certain threshold.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BestMatchRotMg(HalconDotNet.HTemplate,System.Double,System.Double,System.Double,System.String,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Searching the best matching of a template and a pyramid with rotation.
              Instance represents: Input image inside of which the pattern has to be found.
            </summary>
            <param name="templateID">Template number.</param>
            <param name="angleStart">Smallest Rotation of the pattern. Default: -0.39</param>
            <param name="angleExtend">Maximum positive Extension of AngleStart. Default: 0.79</param>
            <param name="maxError">Maximum average difference of the grayvalues. Default: 40.0</param>
            <param name="subPixel">Subpixel accuracy in case of 'true'. Default: "false"</param>
            <param name="numLevels">Number of the used resolution levels. Default: 3</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="angle">Rotation angle of pattern.</param>
            <param name="error">Average divergence of the grayvalues of the best match.</param>
        </member>
        <member name="M:HalconDotNet.HImage.BestMatchRotMg(HalconDotNet.HTemplate,System.Double,System.Double,System.Double,System.String,System.Int32,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Searching the best matching of a template and a pyramid with rotation.
              Instance represents: Input image inside of which the pattern has to be found.
            </summary>
            <param name="templateID">Template number.</param>
            <param name="angleStart">Smallest Rotation of the pattern. Default: -0.39</param>
            <param name="angleExtend">Maximum positive Extension of AngleStart. Default: 0.79</param>
            <param name="maxError">Maximum average difference of the grayvalues. Default: 40.0</param>
            <param name="subPixel">Subpixel accuracy in case of 'true'. Default: "false"</param>
            <param name="numLevels">Number of the used resolution levels. Default: 3</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="angle">Rotation angle of pattern.</param>
            <param name="error">Average divergence of the grayvalues of the best match.</param>
        </member>
        <member name="M:HalconDotNet.HImage.BestMatchRot(HalconDotNet.HTemplate,System.Double,System.Double,System.Double,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Searching the best matching of a template and an image with rotation.
              Instance represents: Input image inside of which the pattern has to be found.
            </summary>
            <param name="templateID">Template number.</param>
            <param name="angleStart">Smallest Rotation of the pattern. Default: -0.39</param>
            <param name="angleExtend">Maximum positive Extension of AngleStart. Default: 0.79</param>
            <param name="maxError">Maximum average difference of the grayvalues. Default: 30.0</param>
            <param name="subPixel">Subpixel accuracy in case of 'true'. Default: "false"</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="angle">Rotation angle of pattern.</param>
            <param name="error">Average divergence of the grayvalues of the best match.</param>
        </member>
        <member name="M:HalconDotNet.HImage.BestMatchRot(HalconDotNet.HTemplate,System.Double,System.Double,System.Double,System.String,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Searching the best matching of a template and an image with rotation.
              Instance represents: Input image inside of which the pattern has to be found.
            </summary>
            <param name="templateID">Template number.</param>
            <param name="angleStart">Smallest Rotation of the pattern. Default: -0.39</param>
            <param name="angleExtend">Maximum positive Extension of AngleStart. Default: 0.79</param>
            <param name="maxError">Maximum average difference of the grayvalues. Default: 30.0</param>
            <param name="subPixel">Subpixel accuracy in case of 'true'. Default: "false"</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="angle">Rotation angle of pattern.</param>
            <param name="error">Average divergence of the grayvalues of the best match.</param>
        </member>
        <member name="M:HalconDotNet.HImage.BestMatch(HalconDotNet.HTemplate,System.Double,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Searching the best matching of a template and an image.
              Instance represents: Input image inside of which the pattern has to be found.
            </summary>
            <param name="templateID">Template number.</param>
            <param name="maxError">Maximum average difference of the grayvalues. Default: 20.0</param>
            <param name="subPixel">Subpixel accuracy in case of 'true'. Default: "false"</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="error">Average divergence of the grayvalues of the best match.</param>
        </member>
        <member name="M:HalconDotNet.HImage.BestMatch(HalconDotNet.HTemplate,System.Double,System.String,System.Double@,System.Double@,System.Double@)">
            <summary>
              Searching the best matching of a template and an image.
              Instance represents: Input image inside of which the pattern has to be found.
            </summary>
            <param name="templateID">Template number.</param>
            <param name="maxError">Maximum average difference of the grayvalues. Default: 20.0</param>
            <param name="subPixel">Subpixel accuracy in case of 'true'. Default: "false"</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="error">Average divergence of the grayvalues of the best match.</param>
        </member>
        <member name="M:HalconDotNet.HImage.ExhaustiveMatch(HalconDotNet.HRegion,HalconDotNet.HImage,System.String)">
            <summary>
              Matching of a template and an image.
              Instance represents: Input image.
            </summary>
            <param name="regionOfInterest">Area to be searched in the input image.</param>
            <param name="imageTemplate">This area  will be "matched" by Image within the RegionOfInterest.</param>
            <param name="mode">Desired matching criterion. Default: "dfd"</param>
            <returns>Result image: values of the matching criterion.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CornerResponse(System.Int32,System.Double)">
            <summary>
              Searching corners in images.
              Instance represents: Input image.
            </summary>
            <param name="size">Desired filtersize of the graymask. Default: 3</param>
            <param name="weight">Weighting. Default: 0.04</param>
            <returns>Result of the filtering.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenGaussPyramid(System.String,System.Double)">
            <summary>
              Calculating a Gauss pyramid.
              Instance represents: Input image.
            </summary>
            <param name="mode">Kind of filtermask. Default: "weighted"</param>
            <param name="scale">Factor for scaling down. Default: 0.5</param>
            <returns>Output images.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Monotony">
            <summary>
              Calculating the monotony operation.
              Instance represents: Input image.
            </summary>
            <returns>Result of the monotony operator.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BandpassImage(System.String)">
            <summary>
              Edge extraction using bandpass filters.
              Instance represents: Input images.
            </summary>
            <param name="filterType">Filter type: currently only 'lines' is supported. Default: "lines"</param>
            <returns>Bandpass-filtered images.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LinesColor(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.String)">
            <summary>
              Detect color lines and their width.
              Instance represents: Input image.
            </summary>
            <param name="sigma">Amount of Gaussian smoothing to be applied. Default: 1.5</param>
            <param name="low">Lower threshold for the hysteresis threshold operation. Default: 3</param>
            <param name="high">Upper threshold for the hysteresis threshold operation. Default: 8</param>
            <param name="extractWidth">Should the line width be extracted? Default: "true"</param>
            <param name="completeJunctions">Should junctions be added where they cannot be extracted? Default: "true"</param>
            <returns>Extracted lines.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LinesColor(System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>
              Detect color lines and their width.
              Instance represents: Input image.
            </summary>
            <param name="sigma">Amount of Gaussian smoothing to be applied. Default: 1.5</param>
            <param name="low">Lower threshold for the hysteresis threshold operation. Default: 3</param>
            <param name="high">Upper threshold for the hysteresis threshold operation. Default: 8</param>
            <param name="extractWidth">Should the line width be extracted? Default: "true"</param>
            <param name="completeJunctions">Should junctions be added where they cannot be extracted? Default: "true"</param>
            <returns>Extracted lines.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LinesGauss(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.String,System.String,System.String)">
            <summary>
              Detect lines and their width.
              Instance represents: Input image.
            </summary>
            <param name="sigma">Amount of Gaussian smoothing to be applied. Default: 1.5</param>
            <param name="low">Lower threshold for the hysteresis threshold operation. Default: 3</param>
            <param name="high">Upper threshold for the hysteresis threshold operation. Default: 8</param>
            <param name="lightDark">Extract bright or dark lines. Default: "light"</param>
            <param name="extractWidth">Should the line width be extracted? Default: "true"</param>
            <param name="lineModel">Line model used to correct the line position and width. Default: "bar-shaped"</param>
            <param name="completeJunctions">Should junctions be added where they cannot be extracted? Default: "true"</param>
            <returns>Extracted lines.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LinesGauss(System.Double,System.Double,System.Double,System.String,System.String,System.String,System.String)">
            <summary>
              Detect lines and their width.
              Instance represents: Input image.
            </summary>
            <param name="sigma">Amount of Gaussian smoothing to be applied. Default: 1.5</param>
            <param name="low">Lower threshold for the hysteresis threshold operation. Default: 3</param>
            <param name="high">Upper threshold for the hysteresis threshold operation. Default: 8</param>
            <param name="lightDark">Extract bright or dark lines. Default: "light"</param>
            <param name="extractWidth">Should the line width be extracted? Default: "true"</param>
            <param name="lineModel">Line model used to correct the line position and width. Default: "bar-shaped"</param>
            <param name="completeJunctions">Should junctions be added where they cannot be extracted? Default: "true"</param>
            <returns>Extracted lines.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LinesFacet(System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Detection of lines using the facet model.
              Instance represents: Input image.
            </summary>
            <param name="maskSize">Size of the facet model mask. Default: 5</param>
            <param name="low">Lower threshold for the hysteresis threshold operation. Default: 3</param>
            <param name="high">Upper threshold for the hysteresis threshold operation. Default: 8</param>
            <param name="lightDark">Extract bright or dark lines. Default: "light"</param>
            <returns>Extracted lines.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LinesFacet(System.Int32,System.Double,System.Double,System.String)">
            <summary>
              Detection of lines using the facet model.
              Instance represents: Input image.
            </summary>
            <param name="maskSize">Size of the facet model mask. Default: 5</param>
            <param name="low">Lower threshold for the hysteresis threshold operation. Default: 3</param>
            <param name="high">Upper threshold for the hysteresis threshold operation. Default: 8</param>
            <param name="lightDark">Extract bright or dark lines. Default: "light"</param>
            <returns>Extracted lines.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenFilterMask(HalconDotNet.HTuple,System.Double,System.Int32,System.Int32)">
            <summary>
              Store a filter mask in the spatial domain as a real-image.
              Modified instance represents: Filter in the spatial domain.
            </summary>
            <param name="filterMask">Filter mask as file name or tuple. Default: "gauss"</param>
            <param name="scale">Scaling factor. Default: 1.0</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenFilterMask(System.String,System.Double,System.Int32,System.Int32)">
            <summary>
              Store a filter mask in the spatial domain as a real-image.
              Modified instance represents: Filter in the spatial domain.
            </summary>
            <param name="filterMask">Filter mask as file name or tuple. Default: "gauss"</param>
            <param name="scale">Scaling factor. Default: 1.0</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenMeanFilter(System.String,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Generate a mean filter in the frequency domain.
              Modified instance represents: Mean filter as image in the frequency domain.
            </summary>
            <param name="maskShape">Shape of the filter mask in the spatial domain. Default: "ellipse"</param>
            <param name="diameter1">Diameter of the mean filter in the principal direction of the filter in the spatial domain. Default: 11.0</param>
            <param name="diameter2">Diameter of the mean filter perpendicular to the principal direction of the filter in the spatial domain. Default: 11.0</param>
            <param name="phi">Principal direction of the filter in the spatial domain. Default: 0.0</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenGaussFilter(System.Double,System.Double,System.Double,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Generate a Gaussian filter in the frequency domain.
              Modified instance represents: Gaussian filter as image in the frequency domain.
            </summary>
            <param name="sigma1">Standard deviation of the Gaussian in the principal direction of the filter in the spatial domain. Default: 1.0</param>
            <param name="sigma2">Standard deviation of the Gaussian perpendicular to the principal direction of the filter in the spatial domain. Default: 1.0</param>
            <param name="phi">Principal direction of the filter in the spatial domain. Default: 0.0</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenDerivativeFilter(System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Generate a derivative filter in the frequency domain.
              Modified instance represents: Derivative filter as image in the frequency domain.
            </summary>
            <param name="derivative">Derivative to be computed. Default: "x"</param>
            <param name="exponent">Exponent used in the reverse transform. Default: 1</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenStdBandpass(System.Double,System.Double,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Generate a bandpass filter with Gaussian or sinusoidal shape.
              Modified instance represents: Bandpass filter as image in the frequency domain.
            </summary>
            <param name="frequency">Distance of the filter's maximum from the DC term. Default: 0.1</param>
            <param name="sigma">Bandwidth of the filter (standard deviation). Default: 0.01</param>
            <param name="type">Filter type. Default: "sin"</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenSinBandpass(System.Double,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Generate a bandpass filter with sinusoidal shape.
              Modified instance represents: Bandpass filter as image in the frequency domain.
            </summary>
            <param name="frequency">Distance of the filter's maximum from the DC term. Default: 0.1</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenBandfilter(System.Double,System.Double,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Generate an ideal band filter.
              Modified instance represents: Band filter in the frequency domain.
            </summary>
            <param name="minFrequency">Minimum frequency. Default: 0.1</param>
            <param name="maxFrequency">Maximum frequency. Default: 0.2</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenBandpass(System.Double,System.Double,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Generate an ideal bandpass filter.
              Modified instance represents: Bandpass filter in the frequency domain.
            </summary>
            <param name="minFrequency">Minimum frequency. Default: 0.1</param>
            <param name="maxFrequency">Maximum frequency. Default: 0.2</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenLowpass(System.Double,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Generate an ideal lowpass filter.
              Modified instance represents: Lowpass filter in the frequency domain.
            </summary>
            <param name="frequency">Cutoff frequency. Default: 0.1</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenHighpass(System.Double,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Generate an ideal highpass filter.
              Modified instance represents: Highpass filter in the frequency domain.
            </summary>
            <param name="frequency">Cutoff frequency. Default: 0.1</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HImage.PowerLn">
            <summary>
              Return the power spectrum of a complex image.
              Instance represents: Input image in frequency domain.
            </summary>
            <returns>Power spectrum of the input image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PowerReal">
            <summary>
              Return the power spectrum of a complex image.
              Instance represents: Input image in frequency domain.
            </summary>
            <returns>Power spectrum of the input image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PowerByte">
            <summary>
              Return the power spectrum of a complex image.
              Instance represents: Input image in frequency domain.
            </summary>
            <returns>Power spectrum of the input image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PhaseDeg">
            <summary>
              Return the phase of a complex image in degrees.
              Instance represents: Input image in frequency domain.
            </summary>
            <returns>Phase of the image in degrees.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PhaseRad">
            <summary>
              Return the phase of a complex image in radians.
              Instance represents: Input image in frequency domain.
            </summary>
            <returns>Phase of the image in radians.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EnergyGabor(HalconDotNet.HImage)">
            <summary>
              Calculate the energy of a two-channel image.
              Instance represents: 1st channel of input image (usually: Gabor image).
            </summary>
            <param name="imageHilbert">2nd channel of input image (usually: Hilbert image).</param>
            <returns>Image containing the local energy.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ConvolGabor(HalconDotNet.HImage,HalconDotNet.HImage@)">
            <summary>
              Convolve an image with a Gabor filter in the frequency domain.
              Instance represents: Input image.
            </summary>
            <param name="gaborFilter">Gabor/Hilbert-Filter.</param>
            <param name="imageResultHilbert">Result of the Hilbert filter.</param>
            <returns>Result of the Gabor filter.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenGabor(System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Generate a Gabor filter.
              Modified instance represents: Gabor and Hilbert filter.
            </summary>
            <param name="angle">Angle range, inversely proportional to the range of orientations. Default: 1.4</param>
            <param name="frequency">Distance of the center of the filter to the DC term. Default: 0.4</param>
            <param name="bandwidth">Bandwidth range, inversely proportional to the range of frequencies being passed. Default: 1.0</param>
            <param name="orientation">Angle of the principal orientation. Default: 1.5</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HImage.PhaseCorrelationFft(HalconDotNet.HImage)">
            <summary>
              Compute the phase correlation of two images in the frequency domain.
              Instance represents: Fourier-transformed input image 1.
            </summary>
            <param name="imageFFT2">Fourier-transformed input image 2.</param>
            <returns>Phase correlation of the input images in the frequency domain.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CorrelationFft(HalconDotNet.HImage)">
            <summary>
              Compute the correlation of two images in the frequency domain.
              Instance represents: Fourier-transformed input image 1.
            </summary>
            <param name="imageFFT2">Fourier-transformed input image 2.</param>
            <returns>Correlation of the input images in the frequency domain.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ConvolFft(HalconDotNet.HImage)">
            <summary>
              Convolve an image with a filter in the frequency domain.
              Instance represents: Complex input image.
            </summary>
            <param name="imageFilter">Filter in frequency domain.</param>
            <returns>Result of applying the filter.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.RftGeneric(System.String,System.String,System.String,System.Int32)">
            <summary>
              Compute the real-valued fast Fourier transform of an image.
              Instance represents: Input image.
            </summary>
            <param name="direction">Calculate forward or reverse transform. Default: "to_freq"</param>
            <param name="norm">Normalizing factor of the transform. Default: "sqrt"</param>
            <param name="resultType">Image type of the output image. Default: "complex"</param>
            <param name="width">Width of the image for which the runtime should be optimized. Default: 512</param>
            <returns>Fourier-transformed image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FftImageInv">
            <summary>
              Compute the inverse fast Fourier transform of an image.
              Instance represents: Input image.
            </summary>
            <returns>Inverse-Fourier-transformed image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FftImage">
            <summary>
              Compute the fast Fourier transform of an image.
              Instance represents: Input image.
            </summary>
            <returns>Fourier-transformed image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FftGeneric(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
              Compute the fast Fourier transform of an image.
              Instance represents: Input image.
            </summary>
            <param name="direction">Calculate forward or reverse transform. Default: "to_freq"</param>
            <param name="exponent">Sign of the exponent. Default: -1</param>
            <param name="norm">Normalizing factor of the transform. Default: "sqrt"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="resultType">Image type of the output image. Default: "complex"</param>
            <returns>Fourier-transformed image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ShockFilter(System.Double,System.Int32,System.String,System.Double)">
            <summary>
              Apply a shock filter to an image.
              Instance represents: Input image.
            </summary>
            <param name="theta">Time step. Default: 0.5</param>
            <param name="iterations">Number of iterations. Default: 10</param>
            <param name="mode">Type of edge detector. Default: "canny"</param>
            <param name="sigma">Smoothing of edge detector. Default: 1.0</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MeanCurvatureFlow(System.Double,System.Double,System.Int32)">
            <summary>
              Apply the mean curvature flow to an image.
              Instance represents: Input image.
            </summary>
            <param name="sigma">Smoothing parameter for derivative operator. Default: 0.5</param>
            <param name="theta">Time step. Default: 0.5</param>
            <param name="iterations">Number of iterations. Default: 10</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CoherenceEnhancingDiff(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
              Perform a coherence enhancing diffusion of an image.
              Instance represents: Input image.
            </summary>
            <param name="sigma">Smoothing for derivative operator. Default: 0.5</param>
            <param name="rho">Smoothing for diffusion coefficients. Default: 3.0</param>
            <param name="theta">Time step. Default: 0.5</param>
            <param name="iterations">Number of iterations. Default: 10</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EquHistoImage">
            <summary>
              Histogram linearisation of images
              Instance represents: Image to be enhanced.
            </summary>
            <returns>Image with linearized gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Illuminate(System.Int32,System.Int32,System.Double)">
            <summary>
              Illuminate image.
              Instance represents: Image to be enhanced.
            </summary>
            <param name="maskWidth">Width of low pass mask. Default: 101</param>
            <param name="maskHeight">Height of low pass mask. Default: 101</param>
            <param name="factor">Scales the "`correction gray value"' added to the original gray values. Default: 0.7</param>
            <returns>"`Illuminated"' image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Emphasize(System.Int32,System.Int32,System.Double)">
            <summary>
              Enhance contrast of the image.
              Instance represents: Image to be enhanced.
            </summary>
            <param name="maskWidth">Width of low pass mask. Default: 7</param>
            <param name="maskHeight">Height of the low pass mask. Default: 7</param>
            <param name="factor">Intensity of contrast emphasis. Default: 1.0</param>
            <returns>contrast enhanced image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ScaleImageMax">
            <summary>
              Maximum gray value spreading in the value range 0 to 255.
              Instance represents: Image to be scaled.
            </summary>
            <returns>contrast enhanced image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.RobinsonDir(HalconDotNet.HImage@)">
            <summary>
              Detect edges (amplitude and direction) using the Robinson operator.
              Instance represents: Input image.
            </summary>
            <param name="imageEdgeDir">Edge direction image.</param>
            <returns>Edge amplitude (gradient magnitude) image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.RobinsonAmp">
            <summary>
              Detect edges (amplitude) using the Robinson operator.
              Instance represents: Input image.
            </summary>
            <returns>Edge amplitude (gradient magnitude) image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.KirschDir(HalconDotNet.HImage@)">
            <summary>
              Detect edges (amplitude and direction) using the Kirsch operator.
              Instance represents: Input image.
            </summary>
            <param name="imageEdgeDir">Edge direction image.</param>
            <returns>Edge amplitude (gradient magnitude) image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.KirschAmp">
            <summary>
              Detect edges (amplitude) using the Kirsch operator.
              Instance represents: Input image.
            </summary>
            <returns>Edge amplitude (gradient magnitude) image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FreiDir(HalconDotNet.HImage@)">
            <summary>
              Detect edges (amplitude and direction) using the Frei-Chen operator.
              Instance represents: Input image.
            </summary>
            <param name="imageEdgeDir">Edge direction image.</param>
            <returns>Edge amplitude (gradient magnitude) image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FreiAmp">
            <summary>
              Detect edges (amplitude) using the Frei-Chen operator.
              Instance represents: Input image.
            </summary>
            <returns>Edge amplitude (gradient magnitude) image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PrewittDir(HalconDotNet.HImage@)">
            <summary>
              Detect edges (amplitude and direction) using the Prewitt operator.
              Instance represents: Input image.
            </summary>
            <param name="imageEdgeDir">Edge direction image.</param>
            <returns>Edge amplitude (gradient magnitude) image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PrewittAmp">
            <summary>
              Detect edges (amplitude) using the Prewitt operator.
              Instance represents: Input image.
            </summary>
            <returns>Edge amplitude (gradient magnitude) image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SobelAmp(System.String,HalconDotNet.HTuple)">
            <summary>
              Detect edges (amplitude) using the Sobel operator.
              Instance represents: Input image.
            </summary>
            <param name="filterType">Filter type. Default: "sum_abs"</param>
            <param name="size">Size of filter mask. Default: 3</param>
            <returns>Edge amplitude (gradient magnitude) image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SobelAmp(System.String,System.Int32)">
            <summary>
              Detect edges (amplitude) using the Sobel operator.
              Instance represents: Input image.
            </summary>
            <param name="filterType">Filter type. Default: "sum_abs"</param>
            <param name="size">Size of filter mask. Default: 3</param>
            <returns>Edge amplitude (gradient magnitude) image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SobelDir(HalconDotNet.HImage@,System.String,HalconDotNet.HTuple)">
            <summary>
              Detect edges (amplitude and direction) using the Sobel operator.
              Instance represents: Input image.
            </summary>
            <param name="edgeDirection">Edge direction image.</param>
            <param name="filterType">Filter type. Default: "sum_abs"</param>
            <param name="size">Size of filter mask. Default: 3</param>
            <returns>Edge amplitude (gradient magnitude) image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SobelDir(HalconDotNet.HImage@,System.String,System.Int32)">
            <summary>
              Detect edges (amplitude and direction) using the Sobel operator.
              Instance represents: Input image.
            </summary>
            <param name="edgeDirection">Edge direction image.</param>
            <param name="filterType">Filter type. Default: "sum_abs"</param>
            <param name="size">Size of filter mask. Default: 3</param>
            <returns>Edge amplitude (gradient magnitude) image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Roberts(System.String)">
            <summary>
              Detect edges using the Roberts filter.
              Instance represents: Input image.
            </summary>
            <param name="filterType">Filter type. Default: "gradient_sum"</param>
            <returns>Roberts-filtered result images.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Laplace(System.String,HalconDotNet.HTuple,System.String)">
            <summary>
              Calculate the Laplace operator by using finite differences.
              Instance represents: Input image.
            </summary>
            <param name="resultType">Type of the result image, whereas for byte and uint2 the absolute value is used. Default: "absolute"</param>
            <param name="maskSize">Size of filter mask. Default: 3</param>
            <param name="filterMask">Filter mask used in the Laplace operator Default: "n_4"</param>
            <returns>Laplace-filtered result image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Laplace(System.String,System.Int32,System.String)">
            <summary>
              Calculate the Laplace operator by using finite differences.
              Instance represents: Input image.
            </summary>
            <param name="resultType">Type of the result image, whereas for byte and uint2 the absolute value is used. Default: "absolute"</param>
            <param name="maskSize">Size of filter mask. Default: 3</param>
            <param name="filterMask">Filter mask used in the Laplace operator Default: "n_4"</param>
            <returns>Laplace-filtered result image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.HighpassImage(System.Int32,System.Int32)">
            <summary>
              Extract high frequency components from an image.
              Instance represents: Input image.
            </summary>
            <param name="width">Width of the filter mask. Default: 9</param>
            <param name="height">Height of the filter mask. Default: 9</param>
            <returns>High-pass-filtered result image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EdgesColorSubPix(System.String,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Extract subpixel precise color edges using Deriche, Shen, or Canny filters.
              Instance represents: Input image.
            </summary>
            <param name="filter">Edge operator to be applied. Default: "canny"</param>
            <param name="alpha">Filter parameter: small values result in strong smoothing, and thus less detail (opposite for 'canny'). Default: 1.0</param>
            <param name="low">Lower threshold for the hysteresis threshold operation. Default: 20</param>
            <param name="high">Upper threshold for the hysteresis threshold operation. Default: 40</param>
            <returns>Extracted edges.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EdgesColorSubPix(System.String,System.Double,System.Double,System.Double)">
            <summary>
              Extract subpixel precise color edges using Deriche, Shen, or Canny filters.
              Instance represents: Input image.
            </summary>
            <param name="filter">Edge operator to be applied. Default: "canny"</param>
            <param name="alpha">Filter parameter: small values result in strong smoothing, and thus less detail (opposite for 'canny'). Default: 1.0</param>
            <param name="low">Lower threshold for the hysteresis threshold operation. Default: 20</param>
            <param name="high">Upper threshold for the hysteresis threshold operation. Default: 40</param>
            <returns>Extracted edges.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EdgesColor(HalconDotNet.HImage@,System.String,System.Double,System.String,System.Int32,System.Int32)">
            <summary>
              Extract color edges using Canny, Deriche, or Shen filters.
              Instance represents: Input image.
            </summary>
            <param name="imaDir">Edge direction image.</param>
            <param name="filter">Edge operator to be applied. Default: "canny"</param>
            <param name="alpha">Filter parameter: small values result in strong smoothing, and thus less detail (opposite for 'canny'). Default: 1.0</param>
            <param name="NMS">Non-maximum suppression ('none', if not desired). Default: "nms"</param>
            <param name="low">Lower threshold for the hysteresis threshold operation (negative if no thresholding is desired). Default: 20</param>
            <param name="high">Upper threshold for the hysteresis threshold operation (negative if no thresholding is desired). Default: 40</param>
            <returns>Edge amplitude (gradient magnitude) image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EdgesSubPix(System.String,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Extract sub-pixel precise edges using Deriche, Lanser, Shen, or Canny filters.
              Instance represents: Input image.
            </summary>
            <param name="filter">Edge operator to be applied. Default: "canny"</param>
            <param name="alpha">Filter parameter: small values result in strong smoothing, and thus less detail (opposite for 'canny'). Default: 1.0</param>
            <param name="low">Lower threshold for the hysteresis threshold operation. Default: 20</param>
            <param name="high">Upper threshold for the hysteresis threshold operation. Default: 40</param>
            <returns>Extracted edges.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EdgesSubPix(System.String,System.Double,System.Int32,System.Int32)">
            <summary>
              Extract sub-pixel precise edges using Deriche, Lanser, Shen, or Canny filters.
              Instance represents: Input image.
            </summary>
            <param name="filter">Edge operator to be applied. Default: "canny"</param>
            <param name="alpha">Filter parameter: small values result in strong smoothing, and thus less detail (opposite for 'canny'). Default: 1.0</param>
            <param name="low">Lower threshold for the hysteresis threshold operation. Default: 20</param>
            <param name="high">Upper threshold for the hysteresis threshold operation. Default: 40</param>
            <returns>Extracted edges.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EdgesImage(HalconDotNet.HImage@,System.String,System.Double,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Extract edges using Deriche, Lanser, Shen, or Canny filters.
              Instance represents: Input image.
            </summary>
            <param name="imaDir">Edge direction image.</param>
            <param name="filter">Edge operator to be applied. Default: "canny"</param>
            <param name="alpha">Filter parameter: small values result in strong smoothing, and thus less detail (opposite for 'canny'). Default: 1.0</param>
            <param name="NMS">Non-maximum suppression ('none', if not desired). Default: "nms"</param>
            <param name="low">Lower threshold for the hysteresis threshold operation (negative, if no thresholding is desired). Default: 20</param>
            <param name="high">Upper threshold for the hysteresis threshold operation (negative, if no thresholding is desired). Default: 40</param>
            <returns>Edge amplitude (gradient magnitude) image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EdgesImage(HalconDotNet.HImage@,System.String,System.Double,System.String,System.Int32,System.Int32)">
            <summary>
              Extract edges using Deriche, Lanser, Shen, or Canny filters.
              Instance represents: Input image.
            </summary>
            <param name="imaDir">Edge direction image.</param>
            <param name="filter">Edge operator to be applied. Default: "canny"</param>
            <param name="alpha">Filter parameter: small values result in strong smoothing, and thus less detail (opposite for 'canny'). Default: 1.0</param>
            <param name="NMS">Non-maximum suppression ('none', if not desired). Default: "nms"</param>
            <param name="low">Lower threshold for the hysteresis threshold operation (negative, if no thresholding is desired). Default: 20</param>
            <param name="high">Upper threshold for the hysteresis threshold operation (negative, if no thresholding is desired). Default: 40</param>
            <returns>Edge amplitude (gradient magnitude) image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DerivateGauss(HalconDotNet.HTuple,System.String)">
            <summary>
              Convolve an image with derivatives of the Gaussian.
              Instance represents: Input images.
            </summary>
            <param name="sigma">Sigma of the Gaussian. Default: 1.0</param>
            <param name="component">Derivative or feature to be calculated. Default: "x"</param>
            <returns>Filtered result images.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DerivateGauss(System.Double,System.String)">
            <summary>
              Convolve an image with derivatives of the Gaussian.
              Instance represents: Input images.
            </summary>
            <param name="sigma">Sigma of the Gaussian. Default: 1.0</param>
            <param name="component">Derivative or feature to be calculated. Default: "x"</param>
            <returns>Filtered result images.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LaplaceOfGauss(HalconDotNet.HTuple)">
            <summary>
              LoG-Operator (Laplace of Gaussian).
              Instance represents: Input image.
            </summary>
            <param name="sigma">Smoothing parameter of the Gaussian. Default: 2.0</param>
            <returns>Laplace filtered image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LaplaceOfGauss(System.Double)">
            <summary>
              LoG-Operator (Laplace of Gaussian).
              Instance represents: Input image.
            </summary>
            <param name="sigma">Smoothing parameter of the Gaussian. Default: 2.0</param>
            <returns>Laplace filtered image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DiffOfGauss(System.Double,System.Double)">
            <summary>
              Approximate the LoG operator (Laplace of Gaussian).
              Instance represents: Input image
            </summary>
            <param name="sigma">Smoothing parameter of the Laplace operator to approximate. Default: 3.0</param>
            <param name="sigFactor">Ratio of the standard deviations used (Marr recommends 1.6). Default: 1.6</param>
            <returns>LoG image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DetectEdgeSegments(System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Detect straight edge segments.
              Instance represents: Input image.
            </summary>
            <param name="sobelSize">Mask size of the Sobel operator. Default: 5</param>
            <param name="minAmplitude">Minimum edge strength. Default: 32</param>
            <param name="maxDistance">Maximum distance of the approximating line to its original edge. Default: 3</param>
            <param name="minLength">Minimum length of to resulting line segments. Default: 10</param>
            <param name="beginRow">Row coordinate of the line segments' start points.</param>
            <param name="beginCol">Column coordinate of the line segments' start points.</param>
            <param name="endRow">Row coordinate of the line segments' end points.</param>
            <param name="endCol">Column coordinate of the line segments' end points.</param>
        </member>
        <member name="M:HalconDotNet.HImage.ClearColorTransLut(HalconDotNet.HColorTransLUT)">
            <summary>Release the look-up-table needed for color space transformation.</summary>
            <param name="colorTransLUTHandle">Handle of the look-up-table handle for the color space transformation.</param>
        </member>
        <member name="M:HalconDotNet.HImage.ApplyColorTransLut(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HColorTransLUT)">
            <summary>
              Color space transformation using pre-generated look-up-table.
              Instance represents: Input image (channel 2).
            </summary>
            <param name="image2">Input image (channel 2).</param>
            <param name="image3">Input image (channel 3).</param>
            <param name="imageResult2">Color-transformed output image (channel 2).</param>
            <param name="imageResult3">Color-transformed output image (channel 3).</param>
            <param name="colorTransLUTHandle">Handle of the look-up-table for the color space transformation.</param>
            <returns>Color-transformed output image (channel 1).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CreateColorTransLut(System.String,System.String,System.Int32)">
            <summary>Creates the look-up-table for transformation of an image from the RGB color space to an arbitrary color space.</summary>
            <param name="colorSpace">Color space of the output image. Default: "hsv"</param>
            <param name="transDirection">Direction of color space transformation. Default: "from_rgb"</param>
            <param name="numBits">Number of bits of the input image. Default: 8</param>
            <returns>Handle of the look-up-table for color space transformation.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CfaToRgb(System.String,System.String)">
            <summary>
              Convert a single-channel color filter array image into an RGB image.
              Instance represents: Input image.
            </summary>
            <param name="CFAType">Color filter array type. Default: "bayer_gb"</param>
            <param name="interpolation">Interpolation type. Default: "bilinear"</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Rgb1ToGray">
            <summary>
              Transform an RGB image into a gray scale image.
              Instance represents: Three-channel RBG image.
            </summary>
            <returns>Gray scale image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Rgb3ToGray(HalconDotNet.HImage,HalconDotNet.HImage)">
            <summary>
              Transform an RGB image to a gray scale image.
              Instance represents: Input image (red channel).
            </summary>
            <param name="imageGreen">Input image (green channel).</param>
            <param name="imageBlue">Input image (blue channel).</param>
            <returns>Gray scale image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.TransFromRgb(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HImage@,System.String)">
            <summary>
              Transform an image from the RGB color space to an arbitrary color space.
              Instance represents: Input image (red channel).
            </summary>
            <param name="imageGreen">Input image (green channel).</param>
            <param name="imageBlue">Input image (blue channel).</param>
            <param name="imageResult2">Color-transformed output image (channel 1).</param>
            <param name="imageResult3">Color-transformed output image (channel 1).</param>
            <param name="colorSpace">Color space of the output image. Default: "hsv"</param>
            <returns>Color-transformed output image (channel 1).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.TransToRgb(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HImage@,System.String)">
            <summary>
              Transform an image from an arbitrary color space to the RGB color space.
              Instance represents: Input image (channel 1).
            </summary>
            <param name="imageInput2">Input image (channel 2).</param>
            <param name="imageInput3">Input image (channel 3).</param>
            <param name="imageGreen">Green channel.</param>
            <param name="imageBlue">Blue channel.</param>
            <param name="colorSpace">Color space of the input image. Default: "hsv"</param>
            <returns>Red channel.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BitMask(System.Int32)">
            <summary>
              Logical "AND" of each pixel using a bit mask.
              Instance represents: Input image(s).
            </summary>
            <param name="bitMask">Bit field Default: 128</param>
            <returns>Result image(s) by combination with mask.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BitSlice(System.Int32)">
            <summary>
              Extract a bit from the pixels.
              Instance represents: Input image(s).
            </summary>
            <param name="bit">Bit to be selected. Default: 8</param>
            <returns>Result image(s) by extraction.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BitRshift(System.Int32)">
            <summary>
              Right shift of all pixels of the image.
              Instance represents: Input image(s).
            </summary>
            <param name="shift">shift value Default: 3</param>
            <returns>Result image(s) by shift operation.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BitLshift(System.Int32)">
            <summary>
              Left shift of all pixels of the image.
              Instance represents: Input image(s).
            </summary>
            <param name="shift">Shift value. Default: 3</param>
            <returns>Result image(s) by shift operation.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BitNot">
            <summary>
              Complement all bits of the pixels.
              Instance represents: Input image(s).
            </summary>
            <returns>Result image(s) by complement operation.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BitXor(HalconDotNet.HImage)">
            <summary>
              Bit-by-bit XOR of all pixels of the input images.
              Instance represents: Input image(s) 1.
            </summary>
            <param name="image2">Input image(s) 2.</param>
            <returns>Result image(s) by XOR-operation.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BitOr(HalconDotNet.HImage)">
            <summary>
              Bit-by-bit OR of all pixels of the input images.
              Instance represents: Input image(s) 1.
            </summary>
            <param name="image2">Input image(s) 2.</param>
            <returns>Result image(s) by OR-operation.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.BitAnd(HalconDotNet.HImage)">
            <summary>
              Bit-by-bit AND of all pixels of the input images.
              Instance represents: Input image(s) 1.
            </summary>
            <param name="image2">Input image(s) 2.</param>
            <returns>Result image(s) by AND-operation.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GammaImage(System.Double,System.Double,System.Double,HalconDotNet.HTuple,System.String)">
            <summary>
              Perform a gamma encoding or decoding of an image.
              Instance represents: Input image.
            </summary>
            <param name="gamma">Gamma coefficient of the exponential part of the transformation. Default: 0.416666666667</param>
            <param name="offset">Offset of the exponential part of the transformation. Default: 0.055</param>
            <param name="threshold">Gray value for which the transformation switches from linear to exponential. Default: 0.0031308</param>
            <param name="maxGray">Maximum gray value of the input image type. Default: 255.0</param>
            <param name="encode">If 'true', perform a gamma encoding, otherwise a gamma decoding. Default: "true"</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GammaImage(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
              Perform a gamma encoding or decoding of an image.
              Instance represents: Input image.
            </summary>
            <param name="gamma">Gamma coefficient of the exponential part of the transformation. Default: 0.416666666667</param>
            <param name="offset">Offset of the exponential part of the transformation. Default: 0.055</param>
            <param name="threshold">Gray value for which the transformation switches from linear to exponential. Default: 0.0031308</param>
            <param name="maxGray">Maximum gray value of the input image type. Default: 255.0</param>
            <param name="encode">If 'true', perform a gamma encoding, otherwise a gamma decoding. Default: "true"</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PowImage(HalconDotNet.HTuple)">
            <summary>
              Raise an image to a power.
              Instance represents: Input image.
            </summary>
            <param name="exponent">Power to which the gray values are raised. Default: 2</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PowImage(System.Double)">
            <summary>
              Raise an image to a power.
              Instance represents: Input image.
            </summary>
            <param name="exponent">Power to which the gray values are raised. Default: 2</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ExpImage(HalconDotNet.HTuple)">
            <summary>
              Calculate the exponentiation of an image.
              Instance represents: Input image.
            </summary>
            <param name="baseVal">Base of the exponentiation. Default: "e"</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ExpImage(System.String)">
            <summary>
              Calculate the exponentiation of an image.
              Instance represents: Input image.
            </summary>
            <param name="baseVal">Base of the exponentiation. Default: "e"</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LogImage(HalconDotNet.HTuple)">
            <summary>
              Calculate the logarithm of an image.
              Instance represents: Input image.
            </summary>
            <param name="baseVal">Base of the logarithm. Default: "e"</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.LogImage(System.String)">
            <summary>
              Calculate the logarithm of an image.
              Instance represents: Input image.
            </summary>
            <param name="baseVal">Base of the logarithm. Default: "e"</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Atan2Image(HalconDotNet.HImage)">
            <summary>
              Calculate the arctangent of two images.
              Instance represents: Input image 1.
            </summary>
            <param name="imageX">Input image 2.</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AtanImage">
            <summary>
              Calculate the arctangent of an image.
              Instance represents: Input image.
            </summary>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AcosImage">
            <summary>
              Calculate the arccosine of an image.
              Instance represents: Input image.
            </summary>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AsinImage">
            <summary>
              Calculate the arcsine of an image.
              Instance represents: Input image.
            </summary>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.TanImage">
            <summary>
              Calculate the tangent of an image.
              Instance represents: Input image.
            </summary>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CosImage">
            <summary>
              Calculate the cosine of an image.
              Instance represents: Input image.
            </summary>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SinImage">
            <summary>
              Calculate the sine of an image.
              Instance represents: Input image.
            </summary>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AbsDiffImage(HalconDotNet.HImage,HalconDotNet.HTuple)">
            <summary>
              Calculate the absolute difference of two images.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="mult">Scale factor. Default: 1.0</param>
            <returns>Absolute value of the difference of the input images.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AbsDiffImage(HalconDotNet.HImage,System.Double)">
            <summary>
              Calculate the absolute difference of two images.
              Instance represents: Input image 1.
            </summary>
            <param name="image2">Input image 2.</param>
            <param name="mult">Scale factor. Default: 1.0</param>
            <returns>Absolute value of the difference of the input images.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SqrtImage">
            <summary>
              Calculate the square root of an image.
              Instance represents: Input image
            </summary>
            <returns>Output image</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SubImage(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Subtract two images.
              Instance represents: Minuend(s).
            </summary>
            <param name="imageSubtrahend">Subtrahend(s).</param>
            <param name="mult">Correction factor. Default: 1.0</param>
            <param name="add">Correction value. Default: 128.0</param>
            <returns>Result image(s) by the subtraction.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SubImage(HalconDotNet.HImage,System.Double,System.Double)">
            <summary>
              Subtract two images.
              Instance represents: Minuend(s).
            </summary>
            <param name="imageSubtrahend">Subtrahend(s).</param>
            <param name="mult">Correction factor. Default: 1.0</param>
            <param name="add">Correction value. Default: 128.0</param>
            <returns>Result image(s) by the subtraction.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ScaleImage(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Scale the gray values of an image.
              Instance represents: Image(s) whose gray values are to be scaled.
            </summary>
            <param name="mult">Scale factor. Default: 0.01</param>
            <param name="add">Offset. Default: 0</param>
            <returns>Result image(s) by the scale.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ScaleImage(System.Double,System.Double)">
            <summary>
              Scale the gray values of an image.
              Instance represents: Image(s) whose gray values are to be scaled.
            </summary>
            <param name="mult">Scale factor. Default: 0.01</param>
            <param name="add">Offset. Default: 0</param>
            <returns>Result image(s) by the scale.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DivImage(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Divide two images.
              Instance represents: Image(s) 1.
            </summary>
            <param name="image2">Image(s) 2.</param>
            <param name="mult">Factor for gray range adaption. Default: 255</param>
            <param name="add">Value for gray range adaption. Default: 0</param>
            <returns>Result image(s) by the division.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DivImage(HalconDotNet.HImage,System.Double,System.Double)">
            <summary>
              Divide two images.
              Instance represents: Image(s) 1.
            </summary>
            <param name="image2">Image(s) 2.</param>
            <param name="mult">Factor for gray range adaption. Default: 255</param>
            <param name="add">Value for gray range adaption. Default: 0</param>
            <returns>Result image(s) by the division.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MultImage(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Multiply two images.
              Instance represents: Image(s) 1.
            </summary>
            <param name="image2">Image(s) 2.</param>
            <param name="mult">Factor for gray range adaption. Default: 0.005</param>
            <param name="add">Value for gray range adaption. Default: 0</param>
            <returns>Result image(s) by the product.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MultImage(HalconDotNet.HImage,System.Double,System.Double)">
            <summary>
              Multiply two images.
              Instance represents: Image(s) 1.
            </summary>
            <param name="image2">Image(s) 2.</param>
            <param name="mult">Factor for gray range adaption. Default: 0.005</param>
            <param name="add">Value for gray range adaption. Default: 0</param>
            <returns>Result image(s) by the product.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AddImage(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add two images.
              Instance represents: Image(s) 1.
            </summary>
            <param name="image2">Image(s) 2.</param>
            <param name="mult">Factor for gray value adaption. Default: 0.5</param>
            <param name="add">Value for gray value range adaption. Default: 0</param>
            <returns>Result image(s) by the addition.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AddImage(HalconDotNet.HImage,System.Double,System.Double)">
            <summary>
              Add two images.
              Instance represents: Image(s) 1.
            </summary>
            <param name="image2">Image(s) 2.</param>
            <param name="mult">Factor for gray value adaption. Default: 0.5</param>
            <param name="add">Value for gray value range adaption. Default: 0</param>
            <returns>Result image(s) by the addition.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AbsImage">
            <summary>
              Calculate the absolute value (modulus) of an image.
              Instance represents: Image(s) for which the absolute gray values are to be calculated.
            </summary>
            <returns>Result image(s).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MinImage(HalconDotNet.HImage)">
            <summary>
              Calculate the minimum of two images pixel by pixel.
              Instance represents: Image(s) 1.
            </summary>
            <param name="image2">Image(s) 2.</param>
            <returns>Result image(s) by the minimization.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MaxImage(HalconDotNet.HImage)">
            <summary>
              Calculate the maximum of two images pixel by pixel.
              Instance represents: Image(s) 1.
            </summary>
            <param name="image2">Image(s) 2.</param>
            <returns>Result image(s) by the maximization.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.InvertImage">
            <summary>
              Invert an image.
              Instance represents: Input image(s).
            </summary>
            <returns>Image(s) with inverted gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AdjustMosaicImages(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,System.String)">
            <summary>
              Apply an automatic color correction to panorama images.
              Instance represents: Input images.
            </summary>
            <param name="from">List of source images.</param>
            <param name="to">List of destination images.</param>
            <param name="referenceImage">Reference image.</param>
            <param name="homMatrices2D">Projective matrices.</param>
            <param name="estimationMethod">Estimation algorithm for the correction. Default: "standard"</param>
            <param name="estimateParameters">Parameters to be estimated. Default: ["mult_gray"]</param>
            <param name="OECFModel">Model of OECF to be used. Default: ["laguerre"]</param>
            <returns>Output images.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AdjustMosaicImages(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple,System.String,System.String,System.String)">
            <summary>
              Apply an automatic color correction to panorama images.
              Instance represents: Input images.
            </summary>
            <param name="from">List of source images.</param>
            <param name="to">List of destination images.</param>
            <param name="referenceImage">Reference image.</param>
            <param name="homMatrices2D">Projective matrices.</param>
            <param name="estimationMethod">Estimation algorithm for the correction. Default: "standard"</param>
            <param name="estimateParameters">Parameters to be estimated. Default: ["mult_gray"]</param>
            <param name="OECFModel">Model of OECF to be used. Default: ["laguerre"]</param>
            <returns>Output images.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenCubeMapMosaic(HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HHomMat2D[],HalconDotNet.HHomMat2D[],System.Int32,HalconDotNet.HTuple,System.String)">
            <summary>
              Create 6 cube map images of a spherical mosaic.
              Instance represents: Input images.
            </summary>
            <param name="rear">Rear cube map.</param>
            <param name="left">Left cube map.</param>
            <param name="right">Right cube map.</param>
            <param name="top">Top cube map.</param>
            <param name="bottom">Bottom cube map.</param>
            <param name="cameraMatrices">(Array of) 3x3 projective camera matrices that determine the internal camera parameters.</param>
            <param name="rotationMatrices">Array of 3x3 transformation matrices that determine rotation of the camera in the respective image.</param>
            <param name="cubeMapDimension">Width and height of the resulting cube maps. Default: 1000</param>
            <param name="stackingOrder">Mode of adding the images to the mosaic image. Default: "voronoi"</param>
            <param name="interpolation">Mode of image interpolation. Default: "bilinear"</param>
            <returns>Front cube map.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenCubeMapMosaic(HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HHomMat2D[],HalconDotNet.HHomMat2D[],System.Int32,System.String,System.String)">
            <summary>
              Create 6 cube map images of a spherical mosaic.
              Instance represents: Input images.
            </summary>
            <param name="rear">Rear cube map.</param>
            <param name="left">Left cube map.</param>
            <param name="right">Right cube map.</param>
            <param name="top">Top cube map.</param>
            <param name="bottom">Bottom cube map.</param>
            <param name="cameraMatrices">(Array of) 3x3 projective camera matrices that determine the internal camera parameters.</param>
            <param name="rotationMatrices">Array of 3x3 transformation matrices that determine rotation of the camera in the respective image.</param>
            <param name="cubeMapDimension">Width and height of the resulting cube maps. Default: 1000</param>
            <param name="stackingOrder">Mode of adding the images to the mosaic image. Default: "voronoi"</param>
            <param name="interpolation">Mode of image interpolation. Default: "bilinear"</param>
            <returns>Front cube map.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenSphericalMosaic(HalconDotNet.HHomMat2D[],HalconDotNet.HHomMat2D[],HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a spherical mosaic image.
              Instance represents: Input images.
            </summary>
            <param name="cameraMatrices">(Array of) 3x3 projective camera matrices that determine the internal camera parameters.</param>
            <param name="rotationMatrices">Array of 3x3 transformation matrices that determine rotation of the camera in the respective image.</param>
            <param name="latMin">Minimum latitude of points in the spherical mosaic image. Default: -90</param>
            <param name="latMax">Maximum latitude of points in the spherical mosaic image. Default: 90</param>
            <param name="longMin">Minimum longitude of points in the spherical mosaic image. Default: -180</param>
            <param name="longMax">Maximum longitude of points in the spherical mosaic image. Default: 180</param>
            <param name="latLongStep">Latitude and longitude angle step width. Default: 0.1</param>
            <param name="stackingOrder">Mode of adding the images to the mosaic image. Default: "voronoi"</param>
            <param name="interpolation">Mode of interpolation when creating the mosaic image. Default: "bilinear"</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenSphericalMosaic(HalconDotNet.HHomMat2D[],HalconDotNet.HHomMat2D[],System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>
              Create a spherical mosaic image.
              Instance represents: Input images.
            </summary>
            <param name="cameraMatrices">(Array of) 3x3 projective camera matrices that determine the internal camera parameters.</param>
            <param name="rotationMatrices">Array of 3x3 transformation matrices that determine rotation of the camera in the respective image.</param>
            <param name="latMin">Minimum latitude of points in the spherical mosaic image. Default: -90</param>
            <param name="latMax">Maximum latitude of points in the spherical mosaic image. Default: 90</param>
            <param name="longMin">Minimum longitude of points in the spherical mosaic image. Default: -180</param>
            <param name="longMax">Maximum longitude of points in the spherical mosaic image. Default: 180</param>
            <param name="latLongStep">Latitude and longitude angle step width. Default: 0.1</param>
            <param name="stackingOrder">Mode of adding the images to the mosaic image. Default: "voronoi"</param>
            <param name="interpolation">Mode of interpolation when creating the mosaic image. Default: "bilinear"</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenBundleAdjustedMosaic(HalconDotNet.HHomMat2D[],HalconDotNet.HTuple,System.String,HalconDotNet.HHomMat2D@)">
            <summary>
              Combine multiple images into a mosaic image.
              Instance represents: Input images.
            </summary>
            <param name="homMatrices2D">Array of 3x3 projective transformation matrices.</param>
            <param name="stackingOrder">Stacking order of the images in the mosaic. Default: "default"</param>
            <param name="transformDomain">Should the domains of the input images also be transformed? Default: "false"</param>
            <param name="transMat2D">3x3 projective transformation matrix that describes the translation that was necessary to transform all images completely into the output image.</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenBundleAdjustedMosaic(HalconDotNet.HHomMat2D[],System.String,System.String,HalconDotNet.HHomMat2D@)">
            <summary>
              Combine multiple images into a mosaic image.
              Instance represents: Input images.
            </summary>
            <param name="homMatrices2D">Array of 3x3 projective transformation matrices.</param>
            <param name="stackingOrder">Stacking order of the images in the mosaic. Default: "default"</param>
            <param name="transformDomain">Should the domains of the input images also be transformed? Default: "false"</param>
            <param name="transMat2D">3x3 projective transformation matrix that describes the translation that was necessary to transform all images completely into the output image.</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenProjectiveMosaic(System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HHomMat2D[],HalconDotNet.HTuple,System.String,HalconDotNet.HHomMat2D[]@)">
            <summary>
              Combine multiple images into a mosaic image.
              Instance represents: Input images.
            </summary>
            <param name="startImage">Index of the central input image.</param>
            <param name="mappingSource">Indices of the source images of the transformations.</param>
            <param name="mappingDest">Indices of the target images of the transformations.</param>
            <param name="homMatrices2D">Array of 3x3 projective transformation matrices.</param>
            <param name="stackingOrder">Stacking order of the images in the mosaic. Default: "default"</param>
            <param name="transformDomain">Should the domains of the input images also be transformed? Default: "false"</param>
            <param name="mosaicMatrices2D">Array of 3x3 projective transformation matrices that determine the position of the images in the mosaic.</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenProjectiveMosaic(System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HHomMat2D[],System.String,System.String,HalconDotNet.HHomMat2D[]@)">
            <summary>
              Combine multiple images into a mosaic image.
              Instance represents: Input images.
            </summary>
            <param name="startImage">Index of the central input image.</param>
            <param name="mappingSource">Indices of the source images of the transformations.</param>
            <param name="mappingDest">Indices of the target images of the transformations.</param>
            <param name="homMatrices2D">Array of 3x3 projective transformation matrices.</param>
            <param name="stackingOrder">Stacking order of the images in the mosaic. Default: "default"</param>
            <param name="transformDomain">Should the domains of the input images also be transformed? Default: "false"</param>
            <param name="mosaicMatrices2D">Array of 3x3 projective transformation matrices that determine the position of the images in the mosaic.</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ProjectiveTransImageSize(HalconDotNet.HHomMat2D,System.String,System.Int32,System.Int32,System.String)">
            <summary>
              Apply a projective transformation to an image and specify the output image size.
              Instance represents: Input image.
            </summary>
            <param name="homMat2D">Homogeneous projective transformation matrix.</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "bilinear"</param>
            <param name="width">Output image width.</param>
            <param name="height">Output image height.</param>
            <param name="transformDomain">Should the domain of the input image also be transformed? Default: "false"</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ProjectiveTransImage(HalconDotNet.HHomMat2D,System.String,System.String,System.String)">
            <summary>
              Apply a projective transformation to an image.
              Instance represents: Input image.
            </summary>
            <param name="homMat2D">Homogeneous projective transformation matrix.</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "bilinear"</param>
            <param name="adaptImageSize">Adapt the size of the output image automatically? Default: "false"</param>
            <param name="transformDomain">Should the domain of the input image also be transformed? Default: "false"</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AffineTransImageSize(HalconDotNet.HHomMat2D,System.String,System.Int32,System.Int32)">
            <summary>
              Apply an arbitrary affine 2D transformation to an image and specify the output image size.
              Instance represents: Input image.
            </summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="interpolation">Type of interpolation. Default: "constant"</param>
            <param name="width">Width of the output image. Default: 640</param>
            <param name="height">Height of the output image. Default: 480</param>
            <returns>Transformed image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AffineTransImage(HalconDotNet.HHomMat2D,System.String,System.String)">
            <summary>
              Apply an arbitrary affine 2D transformation to images.
              Instance represents: Input image.
            </summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="interpolation">Type of interpolation. Default: "constant"</param>
            <param name="adaptImageSize">Adaption of size of result image. Default: "false"</param>
            <returns>Transformed image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ZoomImageFactor(System.Double,System.Double,System.String)">
            <summary>
              Zoom an image by a given factor.
              Instance represents: Input image.
            </summary>
            <param name="scaleWidth">Scale factor for the width of the image. Default: 0.5</param>
            <param name="scaleHeight">Scale factor for the height of the image. Default: 0.5</param>
            <param name="interpolation">Type of interpolation. Default: "constant"</param>
            <returns>Scaled image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ZoomImageSize(System.Int32,System.Int32,System.String)">
            <summary>
              Zoom an image to a given size.
              Instance represents: Input image.
            </summary>
            <param name="width">Width of the resulting image. Default: 512</param>
            <param name="height">Height of the resulting image. Default: 512</param>
            <param name="interpolation">Type of interpolation. Default: "constant"</param>
            <returns>Scaled image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MirrorImage(System.String)">
            <summary>
              Mirror an image.
              Instance represents: Input image.
            </summary>
            <param name="mode">Axis of reflection. Default: "row"</param>
            <returns>Reflected image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.RotateImage(HalconDotNet.HTuple,System.String)">
            <summary>
              Rotate an image about its center.
              Instance represents: Input image.
            </summary>
            <param name="phi">Rotation angle. Default: 90</param>
            <param name="interpolation">Type of interpolation. Default: "constant"</param>
            <returns>Rotated image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.RotateImage(System.Double,System.String)">
            <summary>
              Rotate an image about its center.
              Instance represents: Input image.
            </summary>
            <param name="phi">Rotation angle. Default: 90</param>
            <param name="interpolation">Type of interpolation. Default: "constant"</param>
            <returns>Rotated image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PolarTransImageInv(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,System.String)">
            <summary>
              Transform an image in polar coordinates back to cartesian coordinates
              Instance represents: Input image.
            </summary>
            <param name="row">Row coordinate of the center of the arc. Default: 256</param>
            <param name="column">Column coordinate of the center of the arc. Default: 256</param>
            <param name="angleStart">Angle of the ray to map the first column of the input image to. Default: 0.0</param>
            <param name="angleEnd">Angle of the ray to map the last column of the input image to. Default: 6.2831853</param>
            <param name="radiusStart">Radius of the circle to map the first row of the input image to. Default: 0</param>
            <param name="radiusEnd">Radius of the circle to map the last row of the input image to. Default: 100</param>
            <param name="width">Width of the output image. Default: 512</param>
            <param name="height">Height of the output image. Default: 512</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "nearest_neighbor"</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PolarTransImageInv(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.String)">
            <summary>
              Transform an image in polar coordinates back to cartesian coordinates
              Instance represents: Input image.
            </summary>
            <param name="row">Row coordinate of the center of the arc. Default: 256</param>
            <param name="column">Column coordinate of the center of the arc. Default: 256</param>
            <param name="angleStart">Angle of the ray to map the first column of the input image to. Default: 0.0</param>
            <param name="angleEnd">Angle of the ray to map the last column of the input image to. Default: 6.2831853</param>
            <param name="radiusStart">Radius of the circle to map the first row of the input image to. Default: 0</param>
            <param name="radiusEnd">Radius of the circle to map the last row of the input image to. Default: 100</param>
            <param name="width">Width of the output image. Default: 512</param>
            <param name="height">Height of the output image. Default: 512</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "nearest_neighbor"</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PolarTransImageExt(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,System.String)">
            <summary>
              Transform an annular arc in an image to polar coordinates.
              Instance represents: Input image.
            </summary>
            <param name="row">Row coordinate of the center of the arc. Default: 256</param>
            <param name="column">Column coordinate of the center of the arc. Default: 256</param>
            <param name="angleStart">Angle of the ray to be mapped to the first column of the output image. Default: 0.0</param>
            <param name="angleEnd">Angle of the ray to be mapped to the last column of the output image. Default: 6.2831853</param>
            <param name="radiusStart">Radius of the circle to be mapped to the first row of the output image. Default: 0</param>
            <param name="radiusEnd">Radius of the circle to be mapped to the last row of the output image. Default: 100</param>
            <param name="width">Width of the output image. Default: 512</param>
            <param name="height">Height of the output image. Default: 512</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "nearest_neighbor"</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PolarTransImageExt(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.String)">
            <summary>
              Transform an annular arc in an image to polar coordinates.
              Instance represents: Input image.
            </summary>
            <param name="row">Row coordinate of the center of the arc. Default: 256</param>
            <param name="column">Column coordinate of the center of the arc. Default: 256</param>
            <param name="angleStart">Angle of the ray to be mapped to the first column of the output image. Default: 0.0</param>
            <param name="angleEnd">Angle of the ray to be mapped to the last column of the output image. Default: 6.2831853</param>
            <param name="radiusStart">Radius of the circle to be mapped to the first row of the output image. Default: 0</param>
            <param name="radiusEnd">Radius of the circle to be mapped to the last row of the output image. Default: 100</param>
            <param name="width">Width of the output image. Default: 512</param>
            <param name="height">Height of the output image. Default: 512</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "nearest_neighbor"</param>
            <returns>Output image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.PolarTransImage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Transform an image to polar coordinates
              Instance represents: Input image in cartesian coordinates.
            </summary>
            <param name="row">Row coordinate of the center of the coordinate system. Default: 100</param>
            <param name="column">Column coordinate of the center of the coordinate system. Default: 100</param>
            <param name="width">Width of the result image. Default: 314</param>
            <param name="height">Height of the result image. Default: 200</param>
            <returns>Result image in polar coordinates.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.VectorFieldToHomMat2d">
            <summary>
              Approximate an affine map from a displacement vector field.
              Instance represents: Input image.
            </summary>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DeserializeImage(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized image object.
              Modified instance represents: Image object.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HImage.SerializeImage">
            <summary>
              Serialize an image object.
              Instance represents: Image object.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.WriteImage(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Write images in graphic formats.
              Instance represents: Input images.
            </summary>
            <param name="format">Graphic format. Default: "tiff"</param>
            <param name="fillColor">Fill gray value for pixels not belonging to the image domain (region). Default: 0</param>
            <param name="fileName">Name of image file.</param>
        </member>
        <member name="M:HalconDotNet.HImage.WriteImage(System.String,System.Int32,System.String)">
            <summary>
              Write images in graphic formats.
              Instance represents: Input images.
            </summary>
            <param name="format">Graphic format. Default: "tiff"</param>
            <param name="fillColor">Fill gray value for pixels not belonging to the image domain (region). Default: 0</param>
            <param name="fileName">Name of image file.</param>
        </member>
        <member name="M:HalconDotNet.HImage.ReadSequence(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
              Read images.
              Modified instance represents: Image read.
            </summary>
            <param name="headerSize">Number of bytes for file header. Default: 0</param>
            <param name="sourceWidth">Number of image columns of the filed image. Default: 512</param>
            <param name="sourceHeight">Number of image lines of the filed image. Default: 512</param>
            <param name="startRow">Starting point of image area (line). Default: 0</param>
            <param name="startColumn">Starting point of image area (column). Default: 0</param>
            <param name="destWidth">Number of image columns of output image. Default: 512</param>
            <param name="destHeight">Number of image lines of output image. Default: 512</param>
            <param name="pixelType">Type of pixel values. Default: "byte"</param>
            <param name="bitOrder">Sequence of bits within one byte. Default: "MSBFirst"</param>
            <param name="byteOrder">Sequence of bytes within one 'short' unit. Default: "MSBFirst"</param>
            <param name="pad">Data units within one image line (alignment). Default: "byte"</param>
            <param name="index">Number of images in the file. Default: 1</param>
            <param name="fileName">Name of input file.</param>
        </member>
        <member name="M:HalconDotNet.HImage.ReadImage(HalconDotNet.HTuple)">
            <summary>
              Read an image with different file formats.
              Modified instance represents: Read image.
            </summary>
            <param name="fileName">Name of the image to be read. Default: "fabrik"</param>
        </member>
        <member name="M:HalconDotNet.HImage.ReadImage(System.String)">
            <summary>
              Read an image with different file formats.
              Modified instance represents: Read image.
            </summary>
            <param name="fileName">Name of the image to be read. Default: "fabrik"</param>
        </member>
        <member name="M:HalconDotNet.HImage.GetGrayvalContourXld(HalconDotNet.HXLDCont,System.String)">
            <summary>
              Return gray values of an image at the positions of an XLD contour.
              Instance represents: Image whose gray values are to be accessed.
            </summary>
            <param name="contour">Input XLD contour with the coordinates of the positions.</param>
            <param name="interpolation">Interpolation method. Default: "nearest_neighbor"</param>
            <returns>Gray values of the selected image coordinates.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FitSurfaceFirstOrder(HalconDotNet.HRegion,System.String,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Calculate gray value moments and approximation by a first order surface (plane).
              Instance represents: Corresponding gray values.
            </summary>
            <param name="regions">Regions to be checked.</param>
            <param name="algorithm">Algorithm for the fitting. Default: "regression"</param>
            <param name="iterations">Maximum number of iterations (unused for 'regression'). Default: 5</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers. Default: 2.0</param>
            <param name="beta">Parameter Beta of the approximating surface.</param>
            <param name="gamma">Parameter Gamma of the approximating surface.</param>
            <returns>Parameter Alpha of the approximating surface.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FitSurfaceFirstOrder(HalconDotNet.HRegion,System.String,System.Int32,System.Double,System.Double@,System.Double@)">
            <summary>
              Calculate gray value moments and approximation by a first order surface (plane).
              Instance represents: Corresponding gray values.
            </summary>
            <param name="regions">Regions to be checked.</param>
            <param name="algorithm">Algorithm for the fitting. Default: "regression"</param>
            <param name="iterations">Maximum number of iterations (unused for 'regression'). Default: 5</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers. Default: 2.0</param>
            <param name="beta">Parameter Beta of the approximating surface.</param>
            <param name="gamma">Parameter Gamma of the approximating surface.</param>
            <returns>Parameter Alpha of the approximating surface.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FitSurfaceSecondOrder(HalconDotNet.HRegion,System.String,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Calculate gray value moments and approximation by a second order surface.
              Instance represents: Corresponding gray values.
            </summary>
            <param name="regions">Regions to be checked.</param>
            <param name="algorithm">Algorithm for the fitting. Default: "regression"</param>
            <param name="iterations">Maximum number of iterations (unused for 'regression'). Default: 5</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers. Default: 2.0</param>
            <param name="beta">Parameter Beta of the approximating surface.</param>
            <param name="gamma">Parameter Gamma of the approximating surface.</param>
            <param name="delta">Parameter Delta of the approximating surface.</param>
            <param name="epsilon">Parameter Epsilon of the approximating surface.</param>
            <param name="zeta">Parameter Zeta of the approximating surface.</param>
            <returns>Parameter Alpha of the approximating surface.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FitSurfaceSecondOrder(HalconDotNet.HRegion,System.String,System.Int32,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Calculate gray value moments and approximation by a second order surface.
              Instance represents: Corresponding gray values.
            </summary>
            <param name="regions">Regions to be checked.</param>
            <param name="algorithm">Algorithm for the fitting. Default: "regression"</param>
            <param name="iterations">Maximum number of iterations (unused for 'regression'). Default: 5</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers. Default: 2.0</param>
            <param name="beta">Parameter Beta of the approximating surface.</param>
            <param name="gamma">Parameter Gamma of the approximating surface.</param>
            <param name="delta">Parameter Delta of the approximating surface.</param>
            <param name="epsilon">Parameter Epsilon of the approximating surface.</param>
            <param name="zeta">Parameter Zeta of the approximating surface.</param>
            <returns>Parameter Alpha of the approximating surface.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenImageSurfaceSecondOrder(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
              Create a curved gray surface with second order polynomial.
              Modified instance represents: Created image with new image matrix.
            </summary>
            <param name="type">Pixel type. Default: "byte"</param>
            <param name="alpha">Second order coefficient in vertical direction. Default: 1.0</param>
            <param name="beta">Second order coefficient in horizontal direction. Default: 1.0</param>
            <param name="gamma">Mixed second order coefficient. Default: 1.0</param>
            <param name="delta">First order coefficient in vertical direction. Default: 1.0</param>
            <param name="epsilon">First order coefficient in horizontal direction. Default: 1.0</param>
            <param name="zeta">Zero order coefficient. Default: 1.0</param>
            <param name="row">Row coordinate of the reference point of the surface. Default: 256.0</param>
            <param name="column">Column coordinate of the reference point of the surface. Default: 256.0</param>
            <param name="width">Width of image. Default: 512</param>
            <param name="height">Height of image. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenImageSurfaceFirstOrder(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
              Create a tilted gray surface with first order polynomial.
              Modified instance represents: Created image with new image matrix.
            </summary>
            <param name="type">Pixel type. Default: "byte"</param>
            <param name="alpha">First order coefficient in vertical direction. Default: 1.0</param>
            <param name="beta">First order coefficient in horizontal direction. Default: 1.0</param>
            <param name="gamma">Zero order coefficient. Default: 1.0</param>
            <param name="row">Row coordinate of the reference point of the surface. Default: 256.0</param>
            <param name="column">Column coordinate of the reference point of the surface. Default: 256.0</param>
            <param name="width">Width of image. Default: 512</param>
            <param name="height">Height of image. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HImage.MinMaxGray(HalconDotNet.HRegion,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Determine the minimum and maximum gray values within regions.
              Instance represents: Gray value image.
            </summary>
            <param name="regions">Regions, the features of which are to be calculated.</param>
            <param name="percent">Percentage below (above) the absolute maximum (minimum). Default: 0</param>
            <param name="min">"Minimum" gray value.</param>
            <param name="max">"Maximum" gray value.</param>
            <param name="range">Difference between Max and Min.</param>
        </member>
        <member name="M:HalconDotNet.HImage.MinMaxGray(HalconDotNet.HRegion,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
              Determine the minimum and maximum gray values within regions.
              Instance represents: Gray value image.
            </summary>
            <param name="regions">Regions, the features of which are to be calculated.</param>
            <param name="percent">Percentage below (above) the absolute maximum (minimum). Default: 0</param>
            <param name="min">"Minimum" gray value.</param>
            <param name="max">"Maximum" gray value.</param>
            <param name="range">Difference between Max and Min.</param>
        </member>
        <member name="M:HalconDotNet.HImage.Intensity(HalconDotNet.HRegion,HalconDotNet.HTuple@)">
            <summary>
              Calculate the mean and deviation of gray values.
              Instance represents: Gray value image.
            </summary>
            <param name="regions">Regions in which the features are calculated.</param>
            <param name="deviation">Deviation of gray values within a region.</param>
            <returns>Mean gray value of a region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Intensity(HalconDotNet.HRegion,System.Double@)">
            <summary>
              Calculate the mean and deviation of gray values.
              Instance represents: Gray value image.
            </summary>
            <param name="regions">Regions in which the features are calculated.</param>
            <param name="deviation">Deviation of gray values within a region.</param>
            <returns>Mean gray value of a region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayHistoRange(HalconDotNet.HRegion,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Double@)">
            <summary>
              Calculate the gray value distribution of a single channel image within a certain gray value range.
              Instance represents: Input image.
            </summary>
            <param name="regions">Region in which the histogram is to be calculated.</param>
            <param name="min">Minimum gray value. Default: 0</param>
            <param name="max">Maximum gray value. Default: 255</param>
            <param name="numBins">Number of bins. Default: 256</param>
            <param name="binSize">Bin size.</param>
            <returns>Histogram to be calculated.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayHistoRange(HalconDotNet.HRegion,System.Double,System.Double,System.Int32,System.Double@)">
            <summary>
              Calculate the gray value distribution of a single channel image within a certain gray value range.
              Instance represents: Input image.
            </summary>
            <param name="regions">Region in which the histogram is to be calculated.</param>
            <param name="min">Minimum gray value. Default: 0</param>
            <param name="max">Maximum gray value. Default: 255</param>
            <param name="numBins">Number of bins. Default: 256</param>
            <param name="binSize">Bin size.</param>
            <returns>Histogram to be calculated.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Histo2dim(HalconDotNet.HRegion,HalconDotNet.HImage)">
            <summary>
              Calculate the histogram of two-channel gray value images.
              Instance represents: Channel 1.
            </summary>
            <param name="regions">Region in which the histogram is to be calculated.</param>
            <param name="imageRow">Channel 2.</param>
            <returns>Histogram to be calculated.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayHistoAbs(HalconDotNet.HRegion,HalconDotNet.HTuple)">
            <summary>
              Calculate the gray value distribution.
              Instance represents: Image the gray value distribution of which is to be calculated.
            </summary>
            <param name="regions">Region in which the histogram is to be calculated.</param>
            <param name="quantization">Quantization of the gray values. Default: 1.0</param>
            <returns>Absolute frequencies of the gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayHistoAbs(HalconDotNet.HRegion,System.Double)">
            <summary>
              Calculate the gray value distribution.
              Instance represents: Image the gray value distribution of which is to be calculated.
            </summary>
            <param name="regions">Region in which the histogram is to be calculated.</param>
            <param name="quantization">Quantization of the gray values. Default: 1.0</param>
            <returns>Absolute frequencies of the gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayHisto(HalconDotNet.HRegion,HalconDotNet.HTuple@)">
            <summary>
              Calculate the gray value distribution.
              Instance represents: Image the gray value distribution of which is to be calculated.
            </summary>
            <param name="regions">Region in which the histogram is to be calculated.</param>
            <param name="relativeHisto">Frequencies, normalized to the area of the region.</param>
            <returns>Absolute frequencies of the gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EntropyGray(HalconDotNet.HRegion,HalconDotNet.HTuple@)">
            <summary>
              Determine the entropy and anisotropy of images.
              Instance represents: Gray value image.
            </summary>
            <param name="regions">Regions where the features are to be determined.</param>
            <param name="anisotropy">Measure of the symmetry of gray value distribution.</param>
            <returns>Information content (entropy) of the gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EntropyGray(HalconDotNet.HRegion,System.Double@)">
            <summary>
              Determine the entropy and anisotropy of images.
              Instance represents: Gray value image.
            </summary>
            <param name="regions">Regions where the features are to be determined.</param>
            <param name="anisotropy">Measure of the symmetry of gray value distribution.</param>
            <returns>Information content (entropy) of the gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CoocFeatureMatrix(System.Double@,System.Double@,System.Double@)">
            <summary>
              Calculate gray value features from a co-occurrence matrix.
              Instance represents: Co-occurrence matrix.
            </summary>
            <param name="correlation">Correlation of gray values.</param>
            <param name="homogeneity">Local homogeneity of gray values.</param>
            <param name="contrast">Gray value contrast.</param>
            <returns>Homogeneity of the gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CoocFeatureImage(HalconDotNet.HRegion,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Calculate a co-occurrence matrix and derive gray value features thereof.
              Instance represents: Corresponding gray values.
            </summary>
            <param name="regions">Region to be examined.</param>
            <param name="ldGray">Number of gray values to be distinguished (2^LdGray@f$2^{LdGray}$). Default: 6</param>
            <param name="direction">Direction in which the matrix is to be calculated. Default: 0</param>
            <param name="correlation">Correlation of gray values.</param>
            <param name="homogeneity">Local homogeneity of gray values.</param>
            <param name="contrast">Gray value contrast.</param>
            <returns>Gray value energy.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CoocFeatureImage(HalconDotNet.HRegion,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
              Calculate a co-occurrence matrix and derive gray value features thereof.
              Instance represents: Corresponding gray values.
            </summary>
            <param name="regions">Region to be examined.</param>
            <param name="ldGray">Number of gray values to be distinguished (2^LdGray@f$2^{LdGray}$). Default: 6</param>
            <param name="direction">Direction in which the matrix is to be calculated. Default: 0</param>
            <param name="correlation">Correlation of gray values.</param>
            <param name="homogeneity">Local homogeneity of gray values.</param>
            <param name="contrast">Gray value contrast.</param>
            <returns>Gray value energy.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenCoocMatrix(HalconDotNet.HRegion,System.Int32,System.Int32)">
            <summary>
              Calculate the co-occurrence matrix of a region in an image.
              Instance represents: Image providing the gray values.
            </summary>
            <param name="regions">Region to be checked.</param>
            <param name="ldGray">Number of gray values to be distinguished (2^LdGray@f$2^{LdGray}$). Default: 6</param>
            <param name="direction">Direction of neighbor relation. Default: 0</param>
            <returns>Co-occurrence matrix (matrices).</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MomentsGrayPlane(HalconDotNet.HRegion,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Calculate gray value moments and approximation by a plane.
              Instance represents: Corresponding gray values.
            </summary>
            <param name="regions">Regions to be checked.</param>
            <param name="MRow">Mixed moments along a line.</param>
            <param name="MCol">Mixed moments along a column.</param>
            <param name="alpha">Parameter Alpha of the approximating plane.</param>
            <param name="beta">Parameter Beta of the approximating plane.</param>
            <param name="mean">Mean gray value.</param>
        </member>
        <member name="M:HalconDotNet.HImage.MomentsGrayPlane(HalconDotNet.HRegion,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Calculate gray value moments and approximation by a plane.
              Instance represents: Corresponding gray values.
            </summary>
            <param name="regions">Regions to be checked.</param>
            <param name="MRow">Mixed moments along a line.</param>
            <param name="MCol">Mixed moments along a column.</param>
            <param name="alpha">Parameter Alpha of the approximating plane.</param>
            <param name="beta">Parameter Beta of the approximating plane.</param>
            <param name="mean">Mean gray value.</param>
        </member>
        <member name="M:HalconDotNet.HImage.PlaneDeviation(HalconDotNet.HRegion)">
            <summary>
              Calculate the deviation of the gray values from the approximating image plane.
              Instance represents: Gray value image.
            </summary>
            <param name="regions">Regions, of which the plane deviation is to be calculated.</param>
            <returns>Deviation of the gray values within a region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EllipticAxisGray(HalconDotNet.HRegion,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the orientation and major axes of a region in a gray value image.
              Instance represents: Gray value image.
            </summary>
            <param name="regions">Region(s) to be examined.</param>
            <param name="rb">Minor axis of the region.</param>
            <param name="phi">Angle enclosed by the major axis and the x-axis.</param>
            <returns>Major axis of the region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.EllipticAxisGray(HalconDotNet.HRegion,System.Double@,System.Double@)">
            <summary>
              Compute the orientation and major axes of a region in a gray value image.
              Instance represents: Gray value image.
            </summary>
            <param name="regions">Region(s) to be examined.</param>
            <param name="rb">Minor axis of the region.</param>
            <param name="phi">Angle enclosed by the major axis and the x-axis.</param>
            <returns>Major axis of the region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AreaCenterGray(HalconDotNet.HRegion,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the area and center of gravity of a region in a gray value image.
              Instance represents: Gray value image.
            </summary>
            <param name="regions">Region(s) to be examined.</param>
            <param name="row">Row coordinate of the gray value center of gravity.</param>
            <param name="column">Column coordinate of the gray value center of gravity.</param>
            <returns>Gray value volume of the region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.AreaCenterGray(HalconDotNet.HRegion,System.Double@,System.Double@)">
            <summary>
              Compute the area and center of gravity of a region in a gray value image.
              Instance represents: Gray value image.
            </summary>
            <param name="regions">Region(s) to be examined.</param>
            <param name="row">Row coordinate of the gray value center of gravity.</param>
            <param name="column">Column coordinate of the gray value center of gravity.</param>
            <returns>Gray value volume of the region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrayProjections(HalconDotNet.HRegion,System.String,HalconDotNet.HTuple@)">
            <summary>
              Calculate horizontal and vertical gray-value projections.
              Instance represents: Grayvalues for projections.
            </summary>
            <param name="region">Region to be processed.</param>
            <param name="mode">Method to compute the projections. Default: "simple"</param>
            <param name="vertProjection">Vertical projection.</param>
            <returns>Horizontal projection.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindDataCode2d(HalconDotNet.HDataCode2D,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Detect and read 2D data code symbols in an image or train the 2D data code model.
              Instance represents: Input image.
            </summary>
            <param name="dataCodeHandle">Handle of the 2D data code model.</param>
            <param name="genParamNames">Names of (optional) parameters for controlling the behavior of the operator. Default: []</param>
            <param name="genParamValues">Values of the optional generic parameters. Default: []</param>
            <param name="resultHandles">Handles of all successfully decoded 2D data code symbols.</param>
            <param name="decodedDataStrings">Decoded data strings of all detected 2D data code symbols in the image.</param>
            <returns>XLD contours that surround the successfully decoded data code symbols.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindDataCode2d(HalconDotNet.HDataCode2D,System.String,System.Int32,System.Int32@,System.String@)">
            <summary>
              Detect and read 2D data code symbols in an image or train the 2D data code model.
              Instance represents: Input image.
            </summary>
            <param name="dataCodeHandle">Handle of the 2D data code model.</param>
            <param name="genParamNames">Names of (optional) parameters for controlling the behavior of the operator. Default: []</param>
            <param name="genParamValues">Values of the optional generic parameters. Default: []</param>
            <param name="resultHandles">Handles of all successfully decoded 2D data code symbols.</param>
            <param name="decodedDataStrings">Decoded data strings of all detected 2D data code symbols in the image.</param>
            <returns>XLD contours that surround the successfully decoded data code symbols.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ConvertMapType(System.String,HalconDotNet.HTuple)">
            <summary>
              Convert image maps into other map types.
              Instance represents: Input map.
            </summary>
            <param name="newType">Type of MapConverted. Default: "coord_map_sub_pix"</param>
            <param name="imageWidth">Width of images to be mapped. Default: "map_width"</param>
            <returns>Converted map.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ConvertMapType(System.String,System.Int32)">
            <summary>
              Convert image maps into other map types.
              Instance represents: Input map.
            </summary>
            <param name="newType">Type of MapConverted. Default: "coord_map_sub_pix"</param>
            <param name="imageWidth">Width of images to be mapped. Default: "map_width"</param>
            <returns>Converted map.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.VectorToPose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute an absolute pose out of point correspondences between world and image coordinates.</summary>
            <param name="worldX">X-Component of world coordinates.</param>
            <param name="worldY">Y-Component of world coordinates.</param>
            <param name="worldZ">Z-Component of world coordinates.</param>
            <param name="imageRow">Row-Component of image coordinates.</param>
            <param name="imageColumn">Column-Component of image coordinates.</param>
            <param name="cameraParam">The inner camera parameters from camera calibration.</param>
            <param name="method">Kind of algorithm Default: "iterative"</param>
            <param name="qualityType">Type of pose quality to be returned in Quality. Default: "error"</param>
            <param name="quality">Pose quality.</param>
            <returns>Pose.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.VectorToPose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.String,System.Double@)">
            <summary>Compute an absolute pose out of point correspondences between world and image coordinates.</summary>
            <param name="worldX">X-Component of world coordinates.</param>
            <param name="worldY">Y-Component of world coordinates.</param>
            <param name="worldZ">Z-Component of world coordinates.</param>
            <param name="imageRow">Row-Component of image coordinates.</param>
            <param name="imageColumn">Column-Component of image coordinates.</param>
            <param name="cameraParam">The inner camera parameters from camera calibration.</param>
            <param name="method">Kind of algorithm Default: "iterative"</param>
            <param name="qualityType">Type of pose quality to be returned in Quality. Default: "error"</param>
            <param name="quality">Pose quality.</param>
            <returns>Pose.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ProjHomMat2dToPose(HalconDotNet.HHomMat2D,HalconDotNet.HHomMat2D,System.String)">
            <summary>Compute a pose out of a homography describing the relation between world and image coordinates.</summary>
            <param name="homography">The homography from world- to image coordinates.</param>
            <param name="cameraMatrix">The camera calibration matrix K.</param>
            <param name="method">Type of pose computation. Default: "decomposition"</param>
            <returns>Pose of the 2D object.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.RadiometricSelfCalibration(HalconDotNet.HTuple,System.String,System.String,System.Double,System.Int32)">
            <summary>
              Perform a radiometric self-calibration of a camera.
              Instance represents: Input images.
            </summary>
            <param name="exposureRatios">Ratio of the exposure energies of successive image pairs. Default: 0.5</param>
            <param name="features">Features that are used to compute the inverse response function of the camera. Default: "2d_histogram"</param>
            <param name="functionType">Type of the inverse response function of the camera. Default: "discrete"</param>
            <param name="smoothness">Smoothness of the inverse response function of the camera. Default: 1.0</param>
            <param name="polynomialDegree">Degree of the polynomial if FunctionType = 'polynomial'. Default: 5</param>
            <returns>Inverse response function of the camera.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.RadiometricSelfCalibration(System.Double,System.String,System.String,System.Double,System.Int32)">
            <summary>
              Perform a radiometric self-calibration of a camera.
              Instance represents: Input images.
            </summary>
            <param name="exposureRatios">Ratio of the exposure energies of successive image pairs. Default: 0.5</param>
            <param name="features">Features that are used to compute the inverse response function of the camera. Default: "2d_histogram"</param>
            <param name="functionType">Type of the inverse response function of the camera. Default: "discrete"</param>
            <param name="smoothness">Smoothness of the inverse response function of the camera. Default: 1.0</param>
            <param name="polynomialDegree">Degree of the polynomial if FunctionType = 'polynomial'. Default: 5</param>
            <returns>Inverse response function of the camera.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.MapImage(HalconDotNet.HImage)">
            <summary>
              Apply a general transformation to an image.
              Instance represents: Image to be mapped.
            </summary>
            <param name="map">Image containing the mapping data.</param>
            <returns>Mapped image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GenRadialDistortionMap(HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Generate a projection map that describes the mapping of images corresponding to a changing radial distortion.
              Modified instance represents: Image containing the mapping data.
            </summary>
            <param name="camParamIn">Old camera parameters.</param>
            <param name="camParamOut">New camera parameters.</param>
            <param name="mapType">Type of the mapping. Default: "bilinear"</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenImageToWorldPlaneMap(HalconDotNet.HTuple,HalconDotNet.HPose,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,System.String)">
            <summary>
              Generate a projection map that describes the mapping between the image plane and a the plane z=0 of a world coordinate system.
              Modified instance represents: Image containing the mapping data.
            </summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="worldPose">3D pose of the world coordinate system in camera coordinates.</param>
            <param name="widthIn">Width of the images to be transformed.</param>
            <param name="heightIn">Height of the images to be transformed.</param>
            <param name="widthMapped">Width of the resulting mapped images in pixels.</param>
            <param name="heightMapped">Height of the resulting mapped images in pixels.</param>
            <param name="scale">Scale or unit. Default: "m"</param>
            <param name="mapType">Type of the mapping. Default: "bilinear"</param>
        </member>
        <member name="M:HalconDotNet.HImage.GenImageToWorldPlaneMap(HalconDotNet.HTuple,HalconDotNet.HPose,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
              Generate a projection map that describes the mapping between the image plane and a the plane z=0 of a world coordinate system.
              Modified instance represents: Image containing the mapping data.
            </summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="worldPose">3D pose of the world coordinate system in camera coordinates.</param>
            <param name="widthIn">Width of the images to be transformed.</param>
            <param name="heightIn">Height of the images to be transformed.</param>
            <param name="widthMapped">Width of the resulting mapped images in pixels.</param>
            <param name="heightMapped">Height of the resulting mapped images in pixels.</param>
            <param name="scale">Scale or unit. Default: "m"</param>
            <param name="mapType">Type of the mapping. Default: "bilinear"</param>
        </member>
        <member name="M:HalconDotNet.HImage.ImageToWorldPlane(HalconDotNet.HTuple,HalconDotNet.HPose,System.Int32,System.Int32,HalconDotNet.HTuple,System.String)">
            <summary>
              Rectify an image by transforming it into the plane z=0 of a world  coordinate system.
              Instance represents: Input image.
            </summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="worldPose">3D pose of the world coordinate system in camera coordinates.</param>
            <param name="width">Width of the resulting image in pixels.</param>
            <param name="height">Height of the resulting image in pixels.</param>
            <param name="scale">Scale or unit Default: "m"</param>
            <param name="interpolation">Type of interpolation. Default: "bilinear"</param>
            <returns>Transformed image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ImageToWorldPlane(HalconDotNet.HTuple,HalconDotNet.HPose,System.Int32,System.Int32,System.String,System.String)">
            <summary>
              Rectify an image by transforming it into the plane z=0 of a world  coordinate system.
              Instance represents: Input image.
            </summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="worldPose">3D pose of the world coordinate system in camera coordinates.</param>
            <param name="width">Width of the resulting image in pixels.</param>
            <param name="height">Height of the resulting image in pixels.</param>
            <param name="scale">Scale or unit Default: "m"</param>
            <param name="interpolation">Type of interpolation. Default: "bilinear"</param>
            <returns>Transformed image.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.ChangeRadialDistortionPoints(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Change the radial distortion of pixel coordinates.</summary>
            <param name="row">Original row component of pixel coordinates.</param>
            <param name="col">Original column component of pixel coordinates.</param>
            <param name="camParamIn">The inner camera parameters of the camera used to create the input pixel coordinates.</param>
            <param name="camParamOut">The inner camera parameters of a camera.</param>
            <param name="rowChanged">Row component of pixel coordinates after changing the radial distortion.</param>
            <param name="colChanged">Column component of pixel coordinates after changing the radial distortion.</param>
        </member>
        <member name="M:HalconDotNet.HImage.ChangeRadialDistortionImage(HalconDotNet.HRegion,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Change the radial distortion of an image.
              Instance represents: Original image.
            </summary>
            <param name="region">Region of interest in ImageRectified.</param>
            <param name="camParamIn">Internal camera parameter for Image.</param>
            <param name="camParamOut">Internal camera parameter for Image.</param>
            <returns>Resulting image with modified radial distortion.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.SimCaltab(System.String,HalconDotNet.HTuple,HalconDotNet.HPose,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
              Simulate an image with calibration plate.
              Modified instance represents: Simulated calibration image.
            </summary>
            <param name="calPlateDescr">File name of the calibration plate description. Default: "calplate.cpd"</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="calPlatePose">External camera parameters (3D pose of the calibration plate in camera coordinates).</param>
            <param name="grayBackground">Gray value of image background. Default: 128</param>
            <param name="grayPlate">Gray value of calibration plate. Default: 224</param>
            <param name="grayMarks">Gray value of calibration marks. Default: 80</param>
            <param name="scaleFac">Scaling factor to reduce oversampling. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HImage.FindMarksAndPose(HalconDotNet.HRegion,System.String,HalconDotNet.HTuple,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,HalconDotNet.HTuple@,HalconDotNet.HPose@)">
            <summary>
              Extract rectangularly arranged 2D calibration marks from the image and calculate initial values for the external camera parameters.
              Instance represents: Input image.
            </summary>
            <param name="calPlateRegion">Region of the calibration plate.</param>
            <param name="calPlateDescr">File name of the calibration plate description. Default: "caltab.descr"</param>
            <param name="startCamParam">Initial values for the internal camera parameters.</param>
            <param name="startThresh">Initial threshold value for contour detection. Default: 128</param>
            <param name="deltaThresh">Loop value for successive reduction of StartThresh. Default: 10</param>
            <param name="minThresh">Minimum threshold for contour detection. Default: 18</param>
            <param name="alpha">Filter parameter for contour detection, see edges_image. Default: 0.9</param>
            <param name="minContLength">Minimum length of the contours of the marks. Default: 15.0</param>
            <param name="maxDiamMarks">Maximum expected diameter of the marks. Default: 100.0</param>
            <param name="CCoord">Tuple with column coordinates of the detected marks.</param>
            <param name="startPose">Estimation for the external camera parameters.</param>
            <returns>Tuple with row coordinates of the detected marks.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindCaltab(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32)">
            <summary>
              Segment the region of a standard calibration plate with rectangularly arranged marks in the image.
              Instance represents: Input image.
            </summary>
            <param name="calPlateDescr">File name of the calibration plate description. Default: "caltab.descr"</param>
            <param name="sizeGauss">Filter size of the Gaussian. Default: 3</param>
            <param name="markThresh">Threshold value for mark extraction. Default: 112</param>
            <param name="minDiamMarks">Expected minimal diameter of the marks on the calibration plate. Default: 5</param>
            <returns>Output region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindCaltab(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
              Segment the region of a standard calibration plate with rectangularly arranged marks in the image.
              Instance represents: Input image.
            </summary>
            <param name="calPlateDescr">File name of the calibration plate description. Default: "caltab.descr"</param>
            <param name="sizeGauss">Filter size of the Gaussian. Default: 3</param>
            <param name="markThresh">Threshold value for mark extraction. Default: 112</param>
            <param name="minDiamMarks">Expected minimal diameter of the marks on the calibration plate. Default: 5</param>
            <returns>Output region.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DecodeBarCodeRectangle2(HalconDotNet.HBarCode,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Decode bar code symbols within a rectangle.
              Instance represents: Input image.
            </summary>
            <param name="barCodeHandle">Handle of the bar code model.</param>
            <param name="codeType">Type of the searched bar code. Default: "EAN-13"</param>
            <param name="row">Row index of the center. Default: 50.0</param>
            <param name="column">Column index of the center. Default: 100.0</param>
            <param name="phi">Orientation of rectangle in radians. Default: 0.0</param>
            <param name="length1">Half of the length of the rectangle along the reading direction of the bar code. Default: 200.0</param>
            <param name="length2">Half of the length of the rectangle perpendicular to the reading direction of the bar code. Default: 100.0</param>
            <returns>Data strings of all successfully decoded bar codes.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.DecodeBarCodeRectangle2(HalconDotNet.HBarCode,System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Decode bar code symbols within a rectangle.
              Instance represents: Input image.
            </summary>
            <param name="barCodeHandle">Handle of the bar code model.</param>
            <param name="codeType">Type of the searched bar code. Default: "EAN-13"</param>
            <param name="row">Row index of the center. Default: 50.0</param>
            <param name="column">Column index of the center. Default: 100.0</param>
            <param name="phi">Orientation of rectangle in radians. Default: 0.0</param>
            <param name="length1">Half of the length of the rectangle along the reading direction of the bar code. Default: 200.0</param>
            <param name="length2">Half of the length of the rectangle perpendicular to the reading direction of the bar code. Default: 100.0</param>
            <returns>Data strings of all successfully decoded bar codes.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindBarCode(HalconDotNet.HBarCode,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Detect and read bar code symbols in an image.
              Instance represents: Input image.
            </summary>
            <param name="barCodeHandle">Handle of the bar code model.</param>
            <param name="codeType">Type of the searched bar code. Default: "auto"</param>
            <param name="decodedDataStrings">Data strings of all successfully decoded bar codes.</param>
            <returns>Regions of the successfully decoded bar code symbols.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.FindBarCode(HalconDotNet.HBarCode,System.String,System.String@)">
            <summary>
              Detect and read bar code symbols in an image.
              Instance represents: Input image.
            </summary>
            <param name="barCodeHandle">Handle of the bar code model.</param>
            <param name="codeType">Type of the searched bar code. Default: "auto"</param>
            <param name="decodedDataStrings">Data strings of all successfully decoded bar codes.</param>
            <returns>Regions of the successfully decoded bar code symbols.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Get2dBarCodePos(HalconDotNet.HRegion,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Extract the data values of the elements (in ECC 200: "modules") inside a bar code region ("Data Matrix symbol") and their positions in the image.
              Instance represents: Corresponding image.
            </summary>
            <param name="barCodeRegion">Region that might contain a bar code.</param>
            <param name="barCodeDescr">Description of the 2D bar code class.</param>
            <param name="codeRegDescr">Additional parameters describing the bar code region. They can be used for extracting the data.</param>
            <param name="genParamNames">List of names of (optional) generic control parameters. Default: []</param>
            <param name="genParamValues">List of values of the generic parameters. Default: []</param>
            <param name="barCodeData">Tuple with the data values of the extracted symbol. value $ greater than $ 0: logical 1, value $ less than $ 0: logical 0, value = 0: module could not be classified.</param>
            <param name="dataElementRow">Tuple with the row positions of the data elements of the extracted symbol in the image.</param>
            <param name="dataElementCol">Tuple with the column positions of the data elements of the extracted symbol in the image.</param>
            <returns>Tuple with the dimension of the extracted symbol. In the case of ECC 200: data field width, height, symbol index.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Get2dBarCode(HalconDotNet.HRegion,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Extract the values of the data elements (in ECC 200: "modules") inside a bar code region ("Data Matrix symbol").
              Instance represents: Corresponding image.
            </summary>
            <param name="barCodeRegion">Region that might contain a 2D bar code.</param>
            <param name="barCodeDescr">Description of the bar code class.</param>
            <param name="codeRegDescr">Additional parameters describing the bar code region. They can be used for extracting the data</param>
            <param name="genParamNames">List of names of (optional) generic control parameters. Default: []</param>
            <param name="genParamValues">List of values of the generic parameters. Default: []</param>
            <param name="barCodeData">Tuple with the data values of the extracted symbol. value $ greater than $ 0: logical 1, value $ less than $ 0: logical 0, value = 0: module could not be classified.</param>
            <returns>Tuple with the dimension of the extracted symbol. In the case of ECC 200: data field width, height, symbol index.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Find2dBarCode(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Find regions that might contain a 2D bar code.
              Instance represents: Image of one or more bar codes.
            </summary>
            <param name="barCodeDescr">Description of a 2D bar code class to look for.</param>
            <param name="genParamNames">List of names of (optional) generic parameters controlling the image processing. Default: []</param>
            <param name="genParamValues">List of values of generic parameters controlling the image processing. Default: []</param>
            <param name="codeRegDescr">Additional parameters describing the bar code regions. They can be used for extracting the data (see decode_2d_bar_code).</param>
            <returns>Regions that might contain a bar code.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Find2dBarCode(HalconDotNet.HTuple,System.String,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Find regions that might contain a 2D bar code.
              Instance represents: Image of one or more bar codes.
            </summary>
            <param name="barCodeDescr">Description of a 2D bar code class to look for.</param>
            <param name="genParamNames">List of names of (optional) generic parameters controlling the image processing. Default: []</param>
            <param name="genParamValues">List of values of generic parameters controlling the image processing. Default: []</param>
            <param name="codeRegDescr">Additional parameters describing the bar code regions. They can be used for extracting the data (see decode_2d_bar_code).</param>
            <returns>Regions that might contain a bar code.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Get1dBarCodeScanline(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Extract the widths of the elements inside a bar code region.
              Instance represents: Region of bar code.
            </summary>
            <param name="barCodeDescr">Description of a bar code class.</param>
            <param name="genericName">Names of optional parameters. Default: []</param>
            <param name="genericValue">Values of optional parameters. Default: []</param>
            <param name="orientation">Orientation of bar code.</param>
            <param name="stopIfFound">Leave operator as soon as the bar code has been decoded?. Default: "false"</param>
            <param name="scanlineNumPoints">Number of points belonging to that scanline.</param>
            <param name="scanlineDecoded">Information whether the bar code could be decoded with that scanline.</param>
            <param name="scanlinePointsRow">Row - coordinates of the points of the scanline.</param>
            <param name="scanlinePointsColumn">Column - coordinates of the points of the scanline.</param>
            <returns>Widths of elements.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Get1dBarCodeScanline(HalconDotNet.HTuple,System.String,System.Double,System.Double,System.String,System.Int32@,System.Int32@,System.Double@,System.Double@)">
            <summary>
              Extract the widths of the elements inside a bar code region.
              Instance represents: Region of bar code.
            </summary>
            <param name="barCodeDescr">Description of a bar code class.</param>
            <param name="genericName">Names of optional parameters. Default: []</param>
            <param name="genericValue">Values of optional parameters. Default: []</param>
            <param name="orientation">Orientation of bar code.</param>
            <param name="stopIfFound">Leave operator as soon as the bar code has been decoded?. Default: "false"</param>
            <param name="scanlineNumPoints">Number of points belonging to that scanline.</param>
            <param name="scanlineDecoded">Information whether the bar code could be decoded with that scanline.</param>
            <param name="scanlinePointsRow">Row - coordinates of the points of the scanline.</param>
            <param name="scanlinePointsColumn">Column - coordinates of the points of the scanline.</param>
            <returns>Widths of elements.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Get1dBarCode(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double)">
            <summary>
              Extract the widths of the elements inside a bar code region.
              Instance represents: Region of bar code.
            </summary>
            <param name="barCodeDescr">Description of a bar code class.</param>
            <param name="genericName">Names of optional parameters. Default: []</param>
            <param name="genericValue">Values of optional parameters. Default: []</param>
            <param name="orientation">Orientation of bar code.</param>
            <returns>Widths of elements.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Get1dBarCode(HalconDotNet.HTuple,System.String,System.Double,System.Double)">
            <summary>
              Extract the widths of the elements inside a bar code region.
              Instance represents: Region of bar code.
            </summary>
            <param name="barCodeDescr">Description of a bar code class.</param>
            <param name="genericName">Names of optional parameters. Default: []</param>
            <param name="genericValue">Values of optional parameters. Default: []</param>
            <param name="orientation">Orientation of bar code.</param>
            <returns>Widths of elements.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Find1dBarCodeRegion(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Look for multiple bar code regions in an image.
              Instance represents: Image with bar codes inside.
            </summary>
            <param name="barCodeDescr">Description of a bar code class.</param>
            <param name="genericName">Names of optional parameters. Default: []</param>
            <param name="genericValue">Values of optional parameters. Default: []</param>
            <param name="orientation">Orientation of bar code.</param>
            <returns>Regions of bar codes.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Find1dBarCodeRegion(HalconDotNet.HTuple,System.String,System.Double,System.Double@)">
            <summary>
              Look for multiple bar code regions in an image.
              Instance represents: Image with bar codes inside.
            </summary>
            <param name="barCodeDescr">Description of a bar code class.</param>
            <param name="genericName">Names of optional parameters. Default: []</param>
            <param name="genericValue">Values of optional parameters. Default: []</param>
            <param name="orientation">Orientation of bar code.</param>
            <returns>Regions of bar codes.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Find1dBarCodeScanline(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32@,HalconDotNet.HTuple@,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Look for one bar code in an image.
              Instance represents: Image with bar code inside.
            </summary>
            <param name="barCodeDescr">Description of a bar code class.</param>
            <param name="genericName">Names of optional control parameters. Default: []</param>
            <param name="genericValue">Values of optional control parameters. Default: []</param>
            <param name="stopIfFound">Leave operator as soon as the bar code has been decoded?. Default: "false"</param>
            <param name="barcodeFound">Information whether the bar code was found.</param>
            <param name="barCodeElements">Widths of elements.</param>
            <param name="orientation">Orientation of bar code.</param>
            <param name="scanlineNumPoints">Number of points belonging to that scanline.</param>
            <param name="scanlineDecoded">Information whether the bar code could be decoded with that scanline.</param>
            <param name="scanlinePointsRow">Row - coordinates of the points of the scanline.</param>
            <param name="scanlinePointsColumn">Column - coordinates of the points of the scanline.</param>
            <returns>Region of bar code.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Find1dBarCodeScanline(HalconDotNet.HTuple,System.String,System.Double,System.String,System.Int32@,HalconDotNet.HTuple@,System.Double@,System.Int32@,System.Int32@,System.Double@,System.Double@)">
            <summary>
              Look for one bar code in an image.
              Instance represents: Image with bar code inside.
            </summary>
            <param name="barCodeDescr">Description of a bar code class.</param>
            <param name="genericName">Names of optional control parameters. Default: []</param>
            <param name="genericValue">Values of optional control parameters. Default: []</param>
            <param name="stopIfFound">Leave operator as soon as the bar code has been decoded?. Default: "false"</param>
            <param name="barcodeFound">Information whether the bar code was found.</param>
            <param name="barCodeElements">Widths of elements.</param>
            <param name="orientation">Orientation of bar code.</param>
            <param name="scanlineNumPoints">Number of points belonging to that scanline.</param>
            <param name="scanlineDecoded">Information whether the bar code could be decoded with that scanline.</param>
            <param name="scanlinePointsRow">Row - coordinates of the points of the scanline.</param>
            <param name="scanlinePointsColumn">Column - coordinates of the points of the scanline.</param>
            <returns>Region of bar code.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Find1dBarCode(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32@,HalconDotNet.HTuple@,System.Double@)">
            <summary>
              Look for one bar code in an image.
              Instance represents: Image with bar code inside.
            </summary>
            <param name="barCodeDescr">Description of a bar code class.</param>
            <param name="genericName">Names of optional control parameters. Default: []</param>
            <param name="genericValue">Values of optional control parameters. Default: []</param>
            <param name="barcodeFound">Information whether the bar code was found.</param>
            <param name="barCodeElements">Widths of elements.</param>
            <param name="orientation">Orientation of bar code.</param>
            <returns>Region of bar code.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.Find1dBarCode(HalconDotNet.HTuple,System.String,System.Double,System.Int32@,HalconDotNet.HTuple@,System.Double@)">
            <summary>
              Look for one bar code in an image.
              Instance represents: Image with bar code inside.
            </summary>
            <param name="barCodeDescr">Description of a bar code class.</param>
            <param name="genericName">Names of optional control parameters. Default: []</param>
            <param name="genericValue">Values of optional control parameters. Default: []</param>
            <param name="barcodeFound">Information whether the bar code was found.</param>
            <param name="barCodeElements">Widths of elements.</param>
            <param name="orientation">Orientation of bar code.</param>
            <returns>Region of bar code.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GiveBgEsti(HalconDotNet.HBgEsti)">
            <summary>
              Return the estimated background image.
              Modified instance represents: Estimated background image of the current data set.
            </summary>
            <param name="bgEstiHandle">ID of the BgEsti data set.</param>
        </member>
        <member name="M:HalconDotNet.HImage.UpdateBgEsti(HalconDotNet.HRegion,HalconDotNet.HBgEsti)">
            <summary>
              Change the estimated background image.
              Instance represents: Current image.
            </summary>
            <param name="upDateRegion">Region describing areas to change.</param>
            <param name="bgEstiHandle">ID of the BgEsti data set.</param>
        </member>
        <member name="M:HalconDotNet.HImage.RunBgEsti(HalconDotNet.HBgEsti)">
            <summary>
              Estimate the background and return the foreground region.
              Instance represents: Current image.
            </summary>
            <param name="bgEstiHandle">ID of the BgEsti data set.</param>
            <returns>Region of the detected foreground.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.CreateBgEsti(System.Double,System.Double,System.String,System.Double,System.Double,System.String,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
              Generate and initialize a data set for the background estimation.
              Instance represents: initialization image.
            </summary>
            <param name="syspar1">1. system matrix parameter. Default: 0.7</param>
            <param name="syspar2">2. system matrix parameter. Default: 0.7</param>
            <param name="gainMode">Gain type. Default: "fixed"</param>
            <param name="gain1">Kalman gain / foreground adaptation time. Default: 0.002</param>
            <param name="gain2">Kalman gain / background adaptation time. Default: 0.02</param>
            <param name="adaptMode">Threshold adaptation. Default: "on"</param>
            <param name="minDiff">Foreground/background threshold. Default: 7.0</param>
            <param name="statNum">Number of statistic data sets. Default: 10</param>
            <param name="confidenceC">Confidence constant. Default: 3.25</param>
            <param name="timeC">Constant for decay time. Default: 15.0</param>
            <returns>ID of the BgEsti data set.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrabDataAsync(HalconDotNet.HXLDCont@,HalconDotNet.HFramegrabber,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Asynchronous grab of images and preprocessed image data from the specified image acquisition device.
              Modified instance represents: Grabbed image data.
            </summary>
            <param name="contours">Pre-processed XLD contours.</param>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
            <param name="maxDelay">Maximum tolerated delay between the start of the asynchronous grab and the delivery of the image [ms]. Default: -1.0</param>
            <param name="data">Pre-processed control data.</param>
            <returns>Pre-processed image regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrabDataAsync(HalconDotNet.HXLDCont@,HalconDotNet.HFramegrabber,System.Double,System.String@)">
            <summary>
              Asynchronous grab of images and preprocessed image data from the specified image acquisition device.
              Modified instance represents: Grabbed image data.
            </summary>
            <param name="contours">Pre-processed XLD contours.</param>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
            <param name="maxDelay">Maximum tolerated delay between the start of the asynchronous grab and the delivery of the image [ms]. Default: -1.0</param>
            <param name="data">Pre-processed control data.</param>
            <returns>Pre-processed image regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrabData(HalconDotNet.HXLDCont@,HalconDotNet.HFramegrabber,HalconDotNet.HTuple@)">
            <summary>
              Synchronous grab of images and preprocessed image data from the specified image acquisition device.
              Modified instance represents: Grabbed image data.
            </summary>
            <param name="contours">Preprocessed XLD contours.</param>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
            <param name="data">Preprocessed control data.</param>
            <returns>Preprocessed image regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrabData(HalconDotNet.HXLDCont@,HalconDotNet.HFramegrabber,System.String@)">
            <summary>
              Synchronous grab of images and preprocessed image data from the specified image acquisition device.
              Modified instance represents: Grabbed image data.
            </summary>
            <param name="contours">Preprocessed XLD contours.</param>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
            <param name="data">Preprocessed control data.</param>
            <returns>Preprocessed image regions.</returns>
        </member>
        <member name="M:HalconDotNet.HImage.GrabImageAsync(HalconDotNet.HFramegrabber,System.Double)">
            <summary>
              Asynchronous grab of an image from the specified image acquisition device.
              Modified instance represents: Grabbed image.
            </summary>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
            <param name="maxDelay">Maximum tolerated delay between the start of the asynchronous grab and the delivery of the image [ms]. Default: -1.0</param>
        </member>
        <member name="M:HalconDotNet.HImage.GrabImage(HalconDotNet.HFramegrabber)">
            <summary>
              Synchronous grab of an image from the specified image acquisition device.
              Modified instance represents: Grabbed image.
            </summary>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
        </member>
        <member name="P:HalconDotNet.HImage.Item(HalconDotNet.HTuple)">
            <summary>Returns the iconic object(s) at the specified index</summary>
        </member>
        <member name="T:HalconDotNet.HClassMlp">
            <summary>Represents an instance of a multilayer perceptron.</summary>
        </member>
        <member name="M:HalconDotNet.HClassMlp.#ctor(System.String)">
            <summary>
              Read a multilayer perceptron from a file.
              Modified instance represents: MLP handle.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HClassMlp.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Create a multilayer perceptron for classification or regression.
              Modified instance represents: MLP handle.
            </summary>
            <param name="numInput">Number of input variables (features) of the MLP. Default: 20</param>
            <param name="numHidden">Number of hidden units of the MLP. Default: 10</param>
            <param name="numOutput">Number of output variables (classes) of the MLP. Default: 5</param>
            <param name="outputFunction">Type of the activation function in the output layer of the MLP. Default: "softmax"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "normalization"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
            <param name="randSeed">Seed value of the random number generator that is used to initialize the MLP with random values. Default: 42</param>
        </member>
        <member name="M:HalconDotNet.HClassMlp.ClassifyImageClassMlp(HalconDotNet.HImage,System.Double)">
            <summary>
              Classify an image with a multilayer perceptron.
              Instance represents: MLP handle.
            </summary>
            <param name="image">Input image.</param>
            <param name="rejectionThreshold">Threshold for the rejection of the classification. Default: 0.5</param>
            <returns>Segmented classes.</returns>
        </member>
        <member name="M:HalconDotNet.HClassMlp.AddSamplesImageClassMlp(HalconDotNet.HImage,HalconDotNet.HRegion)">
            <summary>
              Add training samples from an image to the training data of a multilayer perceptron.
              Instance represents: MLP handle.
            </summary>
            <param name="image">Training image.</param>
            <param name="classRegions">Regions of the classes to be trained.</param>
        </member>
        <member name="M:HalconDotNet.HClassMlp.GetClassTrainDataMlp">
            <summary>
              Get the training data of a multilayer perceptron (MLP).
              Instance represents: Handle of a MLP that contains training data.
            </summary>
            <returns>Handle of the training data of the classifier.</returns>
        </member>
        <member name="M:HalconDotNet.HClassMlp.AddClassTrainDataMlp(HalconDotNet.HClassTrainData)">
            <summary>
              Add training data to a multilayer perceptron (MLP).
              Instance represents: MLP handle which receives the training data.
            </summary>
            <param name="classTrainDataHandle">Training data for a classifier.</param>
        </member>
        <member name="M:HalconDotNet.HClassMlp.SelectFeatureSetMlp(HalconDotNet.HClassTrainData,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal combination of features to classify the provided data.
              Modified instance represents: A trained MLP classifier using only the selected  features.
            </summary>
            <param name="classTrainDataHandle">Handle of the training data.</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
            <returns>The selected feature set, contains  indices referring.</returns>
        </member>
        <member name="M:HalconDotNet.HClassMlp.SelectFeatureSetMlp(HalconDotNet.HClassTrainData,System.String,System.String,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal combination of features to classify the provided data.
              Modified instance represents: A trained MLP classifier using only the selected  features.
            </summary>
            <param name="classTrainDataHandle">Handle of the training data.</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
            <returns>The selected feature set, contains  indices referring.</returns>
        </member>
        <member name="M:HalconDotNet.HClassMlp.CreateClassLutMlp(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a look-up table using a multi-layer perceptron to classify byte images.
              Instance represents: MLP handle.
            </summary>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <returns>Handle of the LUT classifier.</returns>
        </member>
        <member name="M:HalconDotNet.HClassMlp.ClearSamplesClassMlp(HalconDotNet.HClassMlp[])">
            <summary>Clear the training data of a multilayer perceptron.</summary>
            <param name="MLPHandle">MLP handle.</param>
        </member>
        <member name="M:HalconDotNet.HClassMlp.ClearSamplesClassMlp">
            <summary>
              Clear the training data of a multilayer perceptron.
              Instance represents: MLP handle.
            </summary>
        </member>
        <member name="M:HalconDotNet.HClassMlp.DeserializeClassMlp(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized multilayer perceptron.
              Modified instance represents: MLP handle.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HClassMlp.SerializeClassMlp">
            <summary>
              Serialize a multilayer perceptron (MLP).
              Instance represents: MLP handle.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HClassMlp.ReadClassMlp(System.String)">
            <summary>
              Read a multilayer perceptron from a file.
              Modified instance represents: MLP handle.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HClassMlp.WriteClassMlp(System.String)">
            <summary>
              Write a multilayer perceptron to a file.
              Instance represents: MLP handle.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HClassMlp.ReadSamplesClassMlp(System.String)">
            <summary>
              Read the training data of a multilayer perceptron from a file.
              Instance represents: MLP handle.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HClassMlp.WriteSamplesClassMlp(System.String)">
            <summary>
              Write the training data of a multilayer perceptron to a file.
              Instance represents: MLP handle.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HClassMlp.ClassifyClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Calculate the class of a feature vector by a multilayer perceptron.
              Instance represents: MLP handle.
            </summary>
            <param name="features">Feature vector.</param>
            <param name="num">Number of best classes to determine. Default: 1</param>
            <param name="confidence">Confidence(s) of the class(es) of the feature vector.</param>
            <returns>Result of classifying the feature vector with the MLP.</returns>
        </member>
        <member name="M:HalconDotNet.HClassMlp.ClassifyClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double@)">
            <summary>
              Calculate the class of a feature vector by a multilayer perceptron.
              Instance represents: MLP handle.
            </summary>
            <param name="features">Feature vector.</param>
            <param name="num">Number of best classes to determine. Default: 1</param>
            <param name="confidence">Confidence(s) of the class(es) of the feature vector.</param>
            <returns>Result of classifying the feature vector with the MLP.</returns>
        </member>
        <member name="M:HalconDotNet.HClassMlp.EvaluateClassMlp(HalconDotNet.HTuple)">
            <summary>
              Calculate the evaluation of a feature vector by a multilayer perceptron.
              Instance represents: MLP handle.
            </summary>
            <param name="features">Feature vector.</param>
            <returns>Result of evaluating the feature vector with the MLP.</returns>
        </member>
        <member name="M:HalconDotNet.HClassMlp.TrainClassMlp(System.Int32,System.Double,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Train a multilayer perceptron.
              Instance represents: MLP handle.
            </summary>
            <param name="maxIterations">Maximum number of iterations of the optimization algorithm. Default: 200</param>
            <param name="weightTolerance">Threshold for the difference of the weights of the MLP between two iterations of the optimization algorithm. Default: 1.0</param>
            <param name="errorTolerance">Threshold for the difference of the mean error of the MLP on the training data between two iterations of the optimization algorithm. Default: 0.01</param>
            <param name="errorLog">Mean error of the MLP on the training data as a function of the number of iterations of the optimization algorithm.</param>
            <returns>Mean error of the MLP on the training data.</returns>
        </member>
        <member name="M:HalconDotNet.HClassMlp.GetPrepInfoClassMlp(System.String,HalconDotNet.HTuple@)">
            <summary>
              Compute the information content of the preprocessed feature vectors of a multilayer perceptron.
              Instance represents: MLP handle.
            </summary>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "principal_components"</param>
            <param name="cumInformationCont">Cumulative information content of the transformed feature vectors.</param>
            <returns>Relative information content of the transformed feature vectors.</returns>
        </member>
        <member name="M:HalconDotNet.HClassMlp.GetSampleNumClassMlp">
            <summary>
              Return the number of training samples stored in the training data of a multilayer perceptron.
              Instance represents: MLP handle.
            </summary>
            <returns>Number of stored training samples.</returns>
        </member>
        <member name="M:HalconDotNet.HClassMlp.GetSampleClassMlp(System.Int32,HalconDotNet.HTuple@)">
            <summary>
              Return a training sample from the training data of a multilayer perceptron.
              Instance represents: MLP handle.
            </summary>
            <param name="indexSample">Number of stored training sample.</param>
            <param name="target">Target vector of the training sample.</param>
            <returns>Feature vector of the training sample.</returns>
        </member>
        <member name="M:HalconDotNet.HClassMlp.GetRejectionParamsClassMlp(HalconDotNet.HTuple)">
            <summary>
              Get the parameters of a rejection class.
              Instance represents: MLP handle.
            </summary>
            <param name="genParamName">Names of the generic parameters to return. Default: "sampling_strategy"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HClassMlp.GetRejectionParamsClassMlp(System.String)">
            <summary>
              Get the parameters of a rejection class.
              Instance represents: MLP handle.
            </summary>
            <param name="genParamName">Names of the generic parameters to return. Default: "sampling_strategy"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HClassMlp.SetRejectionParamsClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set the parameters of a rejection class.
              Instance represents: MLP handle.
            </summary>
            <param name="genParamName">Names of the generic parameters. Default: "sampling_strategy"</param>
            <param name="genParamValue">Values of the generic parameters. Default: "hyperbox_around_all_classes"</param>
        </member>
        <member name="M:HalconDotNet.HClassMlp.SetRejectionParamsClassMlp(System.String,System.String)">
            <summary>
              Set the parameters of a rejection class.
              Instance represents: MLP handle.
            </summary>
            <param name="genParamName">Names of the generic parameters. Default: "sampling_strategy"</param>
            <param name="genParamValue">Values of the generic parameters. Default: "hyperbox_around_all_classes"</param>
        </member>
        <member name="M:HalconDotNet.HClassMlp.AddSampleClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a training sample to the training data of a multilayer perceptron.
              Instance represents: MLP handle.
            </summary>
            <param name="features">Feature vector of the training sample to be stored.</param>
            <param name="target">Class or target vector of the training sample to be stored.</param>
        </member>
        <member name="M:HalconDotNet.HClassMlp.AddSampleClassMlp(HalconDotNet.HTuple,System.Int32)">
            <summary>
              Add a training sample to the training data of a multilayer perceptron.
              Instance represents: MLP handle.
            </summary>
            <param name="features">Feature vector of the training sample to be stored.</param>
            <param name="target">Class or target vector of the training sample to be stored.</param>
        </member>
        <member name="M:HalconDotNet.HClassMlp.GetRegularizationParamsClassMlp(System.String)">
            <summary>
              Return the regularization parameters of a multilayer perceptron.
              Instance represents: MLP handle.
            </summary>
            <param name="genParamName">Name of the regularization parameter to return. Default: "weight_prior"</param>
            <returns>Value of the regularization parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HClassMlp.SetRegularizationParamsClassMlp(System.String,HalconDotNet.HTuple)">
            <summary>
              Set the regularization parameters of a multilayer perceptron.
              Instance represents: MLP handle.
            </summary>
            <param name="genParamName">Name of the regularization parameter to set. Default: "weight_prior"</param>
            <param name="genParamValue">Value of the regularization parameter. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HClassMlp.SetRegularizationParamsClassMlp(System.String,System.Double)">
            <summary>
              Set the regularization parameters of a multilayer perceptron.
              Instance represents: MLP handle.
            </summary>
            <param name="genParamName">Name of the regularization parameter to set. Default: "weight_prior"</param>
            <param name="genParamValue">Value of the regularization parameter. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HClassMlp.GetParamsClassMlp(System.Int32@,System.Int32@,System.String@,System.String@,System.Int32@)">
            <summary>
              Return the parameters of a multilayer perceptron.
              Instance represents: MLP handle.
            </summary>
            <param name="numHidden">Number of hidden units of the MLP.</param>
            <param name="numOutput">Number of output variables (classes) of the MLP.</param>
            <param name="outputFunction">Type of the activation function in the output layer of the MLP.</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors.</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features.</param>
            <returns>Number of input variables (features) of the MLP.</returns>
        </member>
        <member name="M:HalconDotNet.HClassMlp.CreateClassMlp(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Create a multilayer perceptron for classification or regression.
              Modified instance represents: MLP handle.
            </summary>
            <param name="numInput">Number of input variables (features) of the MLP. Default: 20</param>
            <param name="numHidden">Number of hidden units of the MLP. Default: 10</param>
            <param name="numOutput">Number of output variables (classes) of the MLP. Default: 5</param>
            <param name="outputFunction">Type of the activation function in the output layer of the MLP. Default: "softmax"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "normalization"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
            <param name="randSeed">Seed value of the random number generator that is used to initialize the MLP with random values. Default: 42</param>
        </member>
        <member name="T:HalconDotNet.HXLDCont">
            <summary>Represents an instance of an XLD contour object(-array).</summary>
        </member>
        <member name="T:HalconDotNet.HXLD">
            <summary>Represents an instance of an XLD object-(array).</summary>
        </member>
        <member name="M:HalconDotNet.HXLD.#ctor">
            <summary>Create an uninitialized iconic object</summary>
        </member>
        <member name="M:HalconDotNet.HXLD.GetParallelsXld(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Return an XLD parallel's data (as lines).
              Instance represents: Input XLD parallels.
            </summary>
            <param name="row1">Row coordinates of the points on polygon P1.</param>
            <param name="col1">Column coordinates of the points on polygon P1.</param>
            <param name="length1">Lengths of the line segments on polygon P1.</param>
            <param name="phi1">Angles of the line segments on polygon P1.</param>
            <param name="row2">Row coordinates of the points on polygon P2.</param>
            <param name="col2">Column coordinates of the points on polygon P2.</param>
            <param name="length2">Lengths of the line segments on polygon P2.</param>
            <param name="phi2">Angles of the line segments on polygon P2.</param>
        </member>
        <member name="M:HalconDotNet.HXLD.DispXld(HalconDotNet.HWindow)">
            <summary>
              Display an XLD object.
              Instance represents: XLD object to display.
            </summary>
            <param name="windowHandle">Window id.</param>
        </member>
        <member name="M:HalconDotNet.HXLD.ReceiveXld(HalconDotNet.HSocket)">
            <summary>
              Receive an XLD object over a socket connection.
              Modified instance represents: Received XLD object.
            </summary>
            <param name="socket">Socket number.</param>
        </member>
        <member name="M:HalconDotNet.HXLD.SendXld(HalconDotNet.HSocket)">
            <summary>
              Send an XLD object over a socket connection.
              Instance represents: XLD object to be sent.
            </summary>
            <param name="socket">Socket number.</param>
        </member>
        <member name="M:HalconDotNet.HXLD.ObjDiff(HalconDotNet.HXLD)">
            <summary>
              Calculate the difference of two object tuples.
              Instance represents: Object tuple 1.
            </summary>
            <param name="objectsSub">Object tuple 2.</param>
            <returns>Objects from Objects that are not part of ObjectsSub.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.PaintXld(HalconDotNet.HImage,HalconDotNet.HTuple)">
            <summary>
              Paint XLD objects into an image.
              Instance represents: XLD objects to be painted into the input image.
            </summary>
            <param name="image">Image in which the xld objects are to be painted.</param>
            <param name="grayval">Desired gray value of the xld object. Default: 255.0</param>
            <returns>Image containing the result.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.PaintXld(HalconDotNet.HImage,System.Double)">
            <summary>
              Paint XLD objects into an image.
              Instance represents: XLD objects to be painted into the input image.
            </summary>
            <param name="image">Image in which the xld objects are to be painted.</param>
            <param name="grayval">Desired gray value of the xld object. Default: 255.0</param>
            <returns>Image containing the result.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.CopyObj(System.Int32,System.Int32)">
            <summary>
              Copy an iconic object in the HALCON database.
              Instance represents: Objects to be copied.
            </summary>
            <param name="index">Starting index of the objects to be copied. Default: 1</param>
            <param name="numObj">Number of objects to be copied or -1. Default: 1</param>
            <returns>Copied objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.ConcatObj(HalconDotNet.HXLD)">
            <summary>
              Concatenate two iconic object tuples.
              Instance represents: Object tuple 1.
            </summary>
            <param name="objects2">Object tuple 2.</param>
            <returns>Concatenated objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.SelectObj(HalconDotNet.HTuple)">
            <summary>
              Select objects from an object tuple.
              Instance represents: Input objects.
            </summary>
            <param name="index">Indices of the objects to be selected. Default: 1</param>
            <returns>Selected objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.SelectObj(System.Int32)">
            <summary>
              Select objects from an object tuple.
              Instance represents: Input objects.
            </summary>
            <param name="index">Indices of the objects to be selected. Default: 1</param>
            <returns>Selected objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.CompareObj(HalconDotNet.HXLD,HalconDotNet.HTuple)">
            <summary>
              Compare iconic objects regarding equality.
              Instance represents: Reference objects.
            </summary>
            <param name="objects2">Test objects.</param>
            <param name="epsilon">Maximum allowed difference between two gray values or  coordinates etc. Default: 0.0</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.CompareObj(HalconDotNet.HXLD,System.Double)">
            <summary>
              Compare iconic objects regarding equality.
              Instance represents: Reference objects.
            </summary>
            <param name="objects2">Test objects.</param>
            <param name="epsilon">Maximum allowed difference between two gray values or  coordinates etc. Default: 0.0</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.TestEqualObj(HalconDotNet.HXLD)">
            <summary>
              Compare image objects regarding equality.
              Instance represents: Test objects.
            </summary>
            <param name="objects2">Comparative objects.</param>
            <returns>boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.GenGridRectificationMap(HalconDotNet.HImage,HalconDotNet.HXLD@,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
              Instance represents: Input contours.
            </summary>
            <param name="image">Input image.</param>
            <param name="meshes">Output contours.</param>
            <param name="gridSpacing">Distance of the grid points in the rectified image.</param>
            <param name="rotation">Rotation to be applied to the point grid. Default: "auto"</param>
            <param name="row">Row coordinates of the grid points.</param>
            <param name="column">Column coordinates of the grid points.</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
            <returns>Image containing the mapping data.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.GenGridRectificationMap(HalconDotNet.HImage,HalconDotNet.HXLD@,System.Int32,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
              Instance represents: Input contours.
            </summary>
            <param name="image">Input image.</param>
            <param name="meshes">Output contours.</param>
            <param name="gridSpacing">Distance of the grid points in the rectified image.</param>
            <param name="rotation">Rotation to be applied to the point grid. Default: "auto"</param>
            <param name="row">Row coordinates of the grid points.</param>
            <param name="column">Column coordinates of the grid points.</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
            <returns>Image containing the mapping data.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.DeserializeXld(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized XLD object.
              Modified instance represents: XLD object.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HXLD.SerializeXld">
            <summary>
              Serialize an XLD object.
              Instance represents: XLD object.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.TestClosedXld">
            <summary>
              Test whether contours or polygons are closed.
              Instance represents: Contours or polygons to be tested.
            </summary>
            <returns>Tuple with boolean numbers.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.MomentsAnyPointsXld(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Arbitrary geometric moments of contours or polygons treated as point clouds.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="mode">Computation mode. Default: "unnormalized"</param>
            <param name="area">Area enclosed by the contour or polygon.</param>
            <param name="centerRow">Row coordinate of the centroid.</param>
            <param name="centerCol">Column coordinate of the centroid.</param>
            <param name="p">First index of the desired moments M[P,Q]@f$M_{p,q}$. Default: 1</param>
            <param name="q">Second index of the desired moments M[P,Q]@f$M_{p,q}$. Default: 1</param>
            <returns>The computed moments.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.MomentsAnyPointsXld(System.String,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
              Arbitrary geometric moments of contours or polygons treated as point clouds.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="mode">Computation mode. Default: "unnormalized"</param>
            <param name="area">Area enclosed by the contour or polygon.</param>
            <param name="centerRow">Row coordinate of the centroid.</param>
            <param name="centerCol">Column coordinate of the centroid.</param>
            <param name="p">First index of the desired moments M[P,Q]@f$M_{p,q}$. Default: 1</param>
            <param name="q">Second index of the desired moments M[P,Q]@f$M_{p,q}$. Default: 1</param>
            <returns>The computed moments.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.EccentricityPointsXld">
            <summary>
              Anisometry of contours or polygons treated as point clouds.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <returns>Anisometry of the contours or polygons.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.EllipticAxisPointsXld(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Parameters of the equivalent ellipse of contours or polygons treated as point clouds.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="rb">Minor radius.</param>
            <param name="phi">Angle between the major axis and the column axis (radians).</param>
            <returns>Major radius.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.EllipticAxisPointsXld(System.Double@,System.Double@)">
            <summary>
              Parameters of the equivalent ellipse of contours or polygons treated as point clouds.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="rb">Minor radius.</param>
            <param name="phi">Angle between the major axis and the column axis (radians).</param>
            <returns>Major radius.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.OrientationPointsXld">
            <summary>
              Orientation of contours or polygons treated as point clouds.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <returns>Orientation of the contours or polygons (radians).</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.MomentsPointsXld(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Geometric moments M20@f$M_{20}$, M02@f$M_{02}$, and M11@f$M_{11}$ of contours or polygons treated as point clouds.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="m20">Second order moment along the row axis.</param>
            <param name="m02">Second order moment along the column axis.</param>
            <returns>Mixed second order moment.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.MomentsPointsXld(System.Double@,System.Double@)">
            <summary>
              Geometric moments M20@f$M_{20}$, M02@f$M_{02}$, and M11@f$M_{11}$ of contours or polygons treated as point clouds.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="m20">Second order moment along the row axis.</param>
            <param name="m02">Second order moment along the column axis.</param>
            <returns>Mixed second order moment.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.AreaCenterPointsXld(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Area and center of gravity (centroid) of contours and polygons treated as point clouds.
              Instance represents: Point clouds to be examined in form of contours or polygons.
            </summary>
            <param name="row">Row coordinate of the centroid.</param>
            <param name="column">Column coordinate of the centroid.</param>
            <returns>Area of the point cloud.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.AreaCenterPointsXld(System.Double@,System.Double@)">
            <summary>
              Area and center of gravity (centroid) of contours and polygons treated as point clouds.
              Instance represents: Point clouds to be examined in form of contours or polygons.
            </summary>
            <param name="row">Row coordinate of the centroid.</param>
            <param name="column">Column coordinate of the centroid.</param>
            <returns>Area of the point cloud.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.TestSelfIntersectionXld(System.String)">
            <summary>
              Test XLD contours or polygons for self intersection.
              Instance represents: Input contours or polygons.
            </summary>
            <param name="closeXLD">Should the input contours or polygons be closed first? Default: "true"</param>
            <returns>1 for contours or polygons with self intersection and 0 otherwise.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.SelectXldPoint(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Choose all contours or polygons containing a given point.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row">Line coordinate of the test point. Default: 100.0</param>
            <param name="column">Column coordinate of the test point. Default: 100.0</param>
            <returns>All contours or polygons containing the test point.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.SelectXldPoint(System.Double,System.Double)">
            <summary>
              Choose all contours or polygons containing a given point.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row">Line coordinate of the test point. Default: 100.0</param>
            <param name="column">Column coordinate of the test point. Default: 100.0</param>
            <returns>All contours or polygons containing the test point.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.TestXldPoint(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Test whether one or more contours or polygons enclose the given point(s).
              Instance represents: Contours or polygons to be tested.
            </summary>
            <param name="row">Row coordinates of the points to be tested.</param>
            <param name="column">Column coordinates of the points to be tested.</param>
            <returns>Tuple with boolean numbers.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.TestXldPoint(System.Double,System.Double)">
            <summary>
              Test whether one or more contours or polygons enclose the given point(s).
              Instance represents: Contours or polygons to be tested.
            </summary>
            <param name="row">Row coordinates of the points to be tested.</param>
            <param name="column">Column coordinates of the points to be tested.</param>
            <returns>Tuple with boolean numbers.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.SelectShapeXld(HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Select contours or polygons using shape features.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="features">Shape features to be checked. Default: "area"</param>
            <param name="operation">Operation type between the individual features. Default: "and"</param>
            <param name="min">Lower limits of the features or 'min'. Default: 150.0</param>
            <param name="max">Upper limits of the features or 'max'. Default: 99999.0</param>
            <returns>Contours or polygons fulfilling the condition(s).</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.SelectShapeXld(System.String,System.String,System.Double,System.Double)">
            <summary>
              Select contours or polygons using shape features.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="features">Shape features to be checked. Default: "area"</param>
            <param name="operation">Operation type between the individual features. Default: "and"</param>
            <param name="min">Lower limits of the features or 'min'. Default: 150.0</param>
            <param name="max">Upper limits of the features or 'max'. Default: 99999.0</param>
            <returns>Contours or polygons fulfilling the condition(s).</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.OrientationXld">
            <summary>
              Orientation of contours or polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <returns>Orientation of the contours or polygons (radians).</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.EccentricityXld(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Shape features derived from the ellipse parameters of contours or polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="bulkiness">Bulkiness of the contours or polygons.</param>
            <param name="structureFactor">Structure factor of the contours or polygons.</param>
            <returns>Anisometry of the contours or polygons.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.EccentricityXld(System.Double@,System.Double@)">
            <summary>
              Shape features derived from the ellipse parameters of contours or polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="bulkiness">Bulkiness of the contours or polygons.</param>
            <param name="structureFactor">Structure factor of the contours or polygons.</param>
            <returns>Anisometry of the contours or polygons.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.CompactnessXld">
            <summary>
              Shape factor for the compactness of contours or polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <returns>Compactness of the input contours or polygons.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.DiameterXld(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Maximum distance between two contour or polygon points.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row1">Row coordinate of the first extreme point of the contours or polygons.</param>
            <param name="column1">Column coordinate of the first extreme point of the contours or polygons.</param>
            <param name="row2">Row coordinate of the second extreme point of the contour or polygons.</param>
            <param name="column2">Column coordinate of the second extreme point of the contours or polygons.</param>
            <param name="diameter">Distance of the two extreme points of the contours or polygons.</param>
        </member>
        <member name="M:HalconDotNet.HXLD.DiameterXld(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Maximum distance between two contour or polygon points.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row1">Row coordinate of the first extreme point of the contours or polygons.</param>
            <param name="column1">Column coordinate of the first extreme point of the contours or polygons.</param>
            <param name="row2">Row coordinate of the second extreme point of the contour or polygons.</param>
            <param name="column2">Column coordinate of the second extreme point of the contours or polygons.</param>
            <param name="diameter">Distance of the two extreme points of the contours or polygons.</param>
        </member>
        <member name="M:HalconDotNet.HXLD.ConvexityXld">
            <summary>
              Shape factor for the convexity of contours or polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <returns>Convexity of the input contours or polygons.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.CircularityXld">
            <summary>
              Shape factor for the circularity (similarity to a circle) of contours or polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <returns>Roundness of the input contours or polygons.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.EllipticAxisXld(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Parameters of the equivalent ellipse of contours or polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="rb">Minor radius.</param>
            <param name="phi">Angle between the major axis and the x axis (radians).</param>
            <returns>Major radius.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.EllipticAxisXld(System.Double@,System.Double@)">
            <summary>
              Parameters of the equivalent ellipse of contours or polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="rb">Minor radius.</param>
            <param name="phi">Angle between the major axis and the x axis (radians).</param>
            <returns>Major radius.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.SmallestRectangle2Xld(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Smallest enclosing rectangle with arbitrary orientation of contours or polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row">Row coordinate of the center point of the enclosing rectangle.</param>
            <param name="column">Column coordinate of the center point of the enclosing rectangle.</param>
            <param name="phi">Orientation of the enclosing rectangle (arc measure)</param>
            <param name="length1">First radius (half length) of the enclosing rectangle.</param>
            <param name="length2">Second radius (half width) of the enclosing rectangle.</param>
        </member>
        <member name="M:HalconDotNet.HXLD.SmallestRectangle2Xld(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Smallest enclosing rectangle with arbitrary orientation of contours or polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row">Row coordinate of the center point of the enclosing rectangle.</param>
            <param name="column">Column coordinate of the center point of the enclosing rectangle.</param>
            <param name="phi">Orientation of the enclosing rectangle (arc measure)</param>
            <param name="length1">First radius (half length) of the enclosing rectangle.</param>
            <param name="length2">Second radius (half width) of the enclosing rectangle.</param>
        </member>
        <member name="M:HalconDotNet.HXLD.SmallestRectangle1Xld(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Enclosing rectangle parallel to the coordinate axes of contours or polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row1">Row coordinate of upper left corner point of the enclosing rectangle.</param>
            <param name="column1">Column coordinate of upper left corner point of the enclosing rectangle.</param>
            <param name="row2">Row coordinate of lower right corner point of the enclosing rectangle.</param>
            <param name="column2">Column coordinate of lower right corner point of the enclosing rectangle.</param>
        </member>
        <member name="M:HalconDotNet.HXLD.SmallestRectangle1Xld(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Enclosing rectangle parallel to the coordinate axes of contours or polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row1">Row coordinate of upper left corner point of the enclosing rectangle.</param>
            <param name="column1">Column coordinate of upper left corner point of the enclosing rectangle.</param>
            <param name="row2">Row coordinate of lower right corner point of the enclosing rectangle.</param>
            <param name="column2">Column coordinate of lower right corner point of the enclosing rectangle.</param>
        </member>
        <member name="M:HalconDotNet.HXLD.SmallestCircleXld(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Smallest enclosing circle of contours or polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row">Row coordinate of the center of the enclosing circle.</param>
            <param name="column">Column coordinate of the center of the enclosing circle.</param>
            <param name="radius">Radius of the enclosing circle.</param>
        </member>
        <member name="M:HalconDotNet.HXLD.SmallestCircleXld(System.Double@,System.Double@,System.Double@)">
            <summary>
              Smallest enclosing circle of contours or polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row">Row coordinate of the center of the enclosing circle.</param>
            <param name="column">Column coordinate of the center of the enclosing circle.</param>
            <param name="radius">Radius of the enclosing circle.</param>
        </member>
        <member name="M:HalconDotNet.HXLD.ShapeTransXld(System.String)">
            <summary>
              Transform the shape of contours or polygons.
              Instance represents: Contours or polygons to be transformed.
            </summary>
            <param name="type">Type of transformation. Default: "convex"</param>
            <returns>Transformed contours respectively polygons.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.LengthXld">
            <summary>
              Length of contours or polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <returns>Length of the contour or polygon.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.MomentsAnyXld(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Arbitrary geometric moments of contours or polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="mode">Computation mode. Default: "unnormalized"</param>
            <param name="pointOrder">Point order along the boundary. Default: "positive"</param>
            <param name="area">Area enclosed by the contour or polygon.</param>
            <param name="centerRow">Row coordinate of the centroid.</param>
            <param name="centerCol">Column coordinate of the centroid.</param>
            <param name="p">First index of the desired moments M[P,Q]@f$M_{p,q}$. Default: 1</param>
            <param name="q">Second index of the desired moments M[P,Q]@f$M_{p,q}$. Default: 1</param>
            <returns>The computed moments.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.MomentsAnyXld(System.String,System.String,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
              Arbitrary geometric moments of contours or polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="mode">Computation mode. Default: "unnormalized"</param>
            <param name="pointOrder">Point order along the boundary. Default: "positive"</param>
            <param name="area">Area enclosed by the contour or polygon.</param>
            <param name="centerRow">Row coordinate of the centroid.</param>
            <param name="centerCol">Column coordinate of the centroid.</param>
            <param name="p">First index of the desired moments M[P,Q]@f$M_{p,q}$. Default: 1</param>
            <param name="q">Second index of the desired moments M[P,Q]@f$M_{p,q}$. Default: 1</param>
            <returns>The computed moments.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.MomentsXld(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Geometric moments M20@f$M_{20}$, M02@f$M_{02}$, and M11@f$M_{11}$ of contours or polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="m20">Second order moment along the row axis.</param>
            <param name="m02">Second order moment along the column axis.</param>
            <returns>Mixed second order moment.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.MomentsXld(System.Double@,System.Double@)">
            <summary>
              Geometric moments M20@f$M_{20}$, M02@f$M_{02}$, and M11@f$M_{11}$ of contours or polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="m20">Second order moment along the row axis.</param>
            <param name="m02">Second order moment along the column axis.</param>
            <returns>Mixed second order moment.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.AreaCenterXld(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Area and center of gravity (centroid) of contours and polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row">Row coordinate of the centroid.</param>
            <param name="column">Column coordinate of the centroid.</param>
            <param name="pointOrder">point order along the boundary ('positive'/'negative').</param>
            <returns>Area enclosed by the contour or polygon.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.AreaCenterXld(System.Double@,System.Double@,System.String@)">
            <summary>
              Area and center of gravity (centroid) of contours and polygons.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row">Row coordinate of the centroid.</param>
            <param name="column">Column coordinate of the centroid.</param>
            <param name="pointOrder">point order along the boundary ('positive'/'negative').</param>
            <returns>Area enclosed by the contour or polygon.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.GetRectanglePose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Determine the 3D pose of a rectangle from its perspective 2D projection
              Instance represents: Contour(s) to be examined.
            </summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="width">Width of the rectangle in meters.</param>
            <param name="height">Height of the rectangle in meters.</param>
            <param name="weightingMode">Weighting mode for the optimization phase. Default: "nonweighted"</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers (typical: 1.0 for 'huber' and 3.0 for 'tukey'). Default: 2.0</param>
            <param name="covPose">Covariances of the pose values.</param>
            <param name="error">Root-mean-square value of the final residual error.</param>
            <returns>3D pose of the rectangle.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.GetRectanglePose(HalconDotNet.HTuple,System.Double,System.Double,System.String,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Determine the 3D pose of a rectangle from its perspective 2D projection
              Instance represents: Contour(s) to be examined.
            </summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="width">Width of the rectangle in meters.</param>
            <param name="height">Height of the rectangle in meters.</param>
            <param name="weightingMode">Weighting mode for the optimization phase. Default: "nonweighted"</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers (typical: 1.0 for 'huber' and 3.0 for 'tukey'). Default: 2.0</param>
            <param name="covPose">Covariances of the pose values.</param>
            <param name="error">Root-mean-square value of the final residual error.</param>
            <returns>3D pose of the rectangle.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.GetCirclePose(HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple@)">
            <summary>
              Determine the 3D pose of a circle from its perspective 2D projection. 
              Instance represents: Contours to be examined.
            </summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="radius">Radius of the circle in object space.</param>
            <param name="outputType">Type of output parameters. Default: "pose"</param>
            <param name="pose2">3D pose of the second circle.</param>
            <returns>3D pose of the first circle.</returns>
        </member>
        <member name="M:HalconDotNet.HXLD.GetCirclePose(HalconDotNet.HTuple,System.Double,System.String,HalconDotNet.HTuple@)">
            <summary>
              Determine the 3D pose of a circle from its perspective 2D projection. 
              Instance represents: Contours to be examined.
            </summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="radius">Radius of the circle in object space.</param>
            <param name="outputType">Type of output parameters. Default: "pose"</param>
            <param name="pose2">3D pose of the second circle.</param>
            <returns>3D pose of the first circle.</returns>
        </member>
        <member name="P:HalconDotNet.HXLD.Item(HalconDotNet.HTuple)">
            <summary>Returns the iconic object(s) at the specified index</summary>
        </member>
        <member name="M:HalconDotNet.HXLDCont.#ctor">
            <summary>Create an uninitialized iconic object</summary>
        </member>
        <member name="M:HalconDotNet.HXLDCont.#ctor(HalconDotNet.HRegion,System.String)">
            <summary>
              Generate XLD contours from regions.
              Modified instance represents: Resulting contours.
            </summary>
            <param name="regions">Input regions.</param>
            <param name="mode">Mode of contour generation. Default: "border"</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.#ctor(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Generate an XLD contour from a polygon (given as tuples).
              Modified instance represents: Resulting contour.
            </summary>
            <param name="row">Row coordinates of the polygon. Default: [0,1,2,2,2]</param>
            <param name="col">Column coordinates of the polygon. Default: [0,0,0,1,2]</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.UnionCotangentialContoursXld(System.Double,HalconDotNet.HTuple,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
              Compute the union of cotangential contours.
              Instance represents: Input XLD contours.
            </summary>
            <param name="fitClippingLength">Length of the part of a contour to skip for the determination of tangents. Default: 0.0</param>
            <param name="fitLength">Length of the part of a contour to use for the determination of tangents. Default: 30.0</param>
            <param name="maxTangAngle">Maximum angle difference between two contours' tangents. Default: 0.78539816</param>
            <param name="maxDist">Maximum distance of the contours' end points. Default: 25.0</param>
            <param name="maxDistPerp">Maximum distance of the contours' end points perpendicular to their tangents. Default: 10.0</param>
            <param name="maxOverlap">Maximum overlap of two contours. Default: 2.0</param>
            <param name="mode">Mode describing the treatment of the contours' attributes. Default: "attr_forget"</param>
            <returns>Output XLD contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.UnionCotangentialContoursXld(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
              Compute the union of cotangential contours.
              Instance represents: Input XLD contours.
            </summary>
            <param name="fitClippingLength">Length of the part of a contour to skip for the determination of tangents. Default: 0.0</param>
            <param name="fitLength">Length of the part of a contour to use for the determination of tangents. Default: 30.0</param>
            <param name="maxTangAngle">Maximum angle difference between two contours' tangents. Default: 0.78539816</param>
            <param name="maxDist">Maximum distance of the contours' end points. Default: 25.0</param>
            <param name="maxDistPerp">Maximum distance of the contours' end points perpendicular to their tangents. Default: 10.0</param>
            <param name="maxOverlap">Maximum overlap of two contours. Default: 2.0</param>
            <param name="mode">Mode describing the treatment of the contours' attributes. Default: "attr_forget"</param>
            <returns>Output XLD contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.PolarTransContourXldInv(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Transform a contour in polar coordinates back to cartesian coordinates
              Instance represents: Input contour.
            </summary>
            <param name="row">Row coordinate of the center of the arc. Default: 256</param>
            <param name="column">Column coordinate of the center of the arc. Default: 256</param>
            <param name="angleStart">Angle of the ray to map the column coordinate 0 of PolarContour to. Default: 0.0</param>
            <param name="angleEnd">Angle of the ray to map the column coordinate $WidthIn-1$ of PolarContour to. Default: 6.2831853</param>
            <param name="radiusStart">Radius of the circle to map the row coordinate 0 of PolarContour to. Default: 0</param>
            <param name="radiusEnd">Radius of the circle to map the row coordinate $HeightIn-1$ of PolarContour to. Default: 100</param>
            <param name="widthIn">Width of the virtual input image. Default: 512</param>
            <param name="heightIn">Height of the virtual input image. Default: 512</param>
            <param name="width">Width of the virtual output image. Default: 512</param>
            <param name="height">Height of the virtual output image. Default: 512</param>
            <returns>Output contour.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.PolarTransContourXldInv(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Transform a contour in polar coordinates back to cartesian coordinates
              Instance represents: Input contour.
            </summary>
            <param name="row">Row coordinate of the center of the arc. Default: 256</param>
            <param name="column">Column coordinate of the center of the arc. Default: 256</param>
            <param name="angleStart">Angle of the ray to map the column coordinate 0 of PolarContour to. Default: 0.0</param>
            <param name="angleEnd">Angle of the ray to map the column coordinate $WidthIn-1$ of PolarContour to. Default: 6.2831853</param>
            <param name="radiusStart">Radius of the circle to map the row coordinate 0 of PolarContour to. Default: 0</param>
            <param name="radiusEnd">Radius of the circle to map the row coordinate $HeightIn-1$ of PolarContour to. Default: 100</param>
            <param name="widthIn">Width of the virtual input image. Default: 512</param>
            <param name="heightIn">Height of the virtual input image. Default: 512</param>
            <param name="width">Width of the virtual output image. Default: 512</param>
            <param name="height">Height of the virtual output image. Default: 512</param>
            <returns>Output contour.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.PolarTransContourXld(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32)">
            <summary>
              Transform a contour in an annular arc to polar coordinates.
              Instance represents: Input contour.
            </summary>
            <param name="row">Row coordinate of the center of the arc. Default: 256</param>
            <param name="column">Column coordinate of the center of the arc. Default: 256</param>
            <param name="angleStart">Angle of the ray to be mapped to the column coordinate 0 of PolarTransContour. Default: 0.0</param>
            <param name="angleEnd">Angle of the ray to be mapped to the column coordinate $Width-1$ of PolarTransContour to. Default: 6.2831853</param>
            <param name="radiusStart">Radius of the circle to be mapped to the row coordinate 0 of PolarTransContour. Default: 0</param>
            <param name="radiusEnd">Radius of the circle to be mapped to the row coordinate $Height-1$ of PolarTransContour. Default: 100</param>
            <param name="width">Width of the virtual output image. Default: 512</param>
            <param name="height">Height of the virtual output image. Default: 512</param>
            <returns>Output contour.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.PolarTransContourXld(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
              Transform a contour in an annular arc to polar coordinates.
              Instance represents: Input contour.
            </summary>
            <param name="row">Row coordinate of the center of the arc. Default: 256</param>
            <param name="column">Column coordinate of the center of the arc. Default: 256</param>
            <param name="angleStart">Angle of the ray to be mapped to the column coordinate 0 of PolarTransContour. Default: 0.0</param>
            <param name="angleEnd">Angle of the ray to be mapped to the column coordinate $Width-1$ of PolarTransContour to. Default: 6.2831853</param>
            <param name="radiusStart">Radius of the circle to be mapped to the row coordinate 0 of PolarTransContour. Default: 0</param>
            <param name="radiusEnd">Radius of the circle to be mapped to the row coordinate $Height-1$ of PolarTransContour. Default: 100</param>
            <param name="width">Width of the virtual output image. Default: 512</param>
            <param name="height">Height of the virtual output image. Default: 512</param>
            <returns>Output contour.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenContourNurbsXld(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Transform a NURBS curve into an XLD contour.
              Modified instance represents: The contour that approximates the NURBS curve.
            </summary>
            <param name="rows">Row coordinates of the control polygon.</param>
            <param name="cols">Column coordinates of the control polygon.</param>
            <param name="knots">The knot vector $u$. Default: "auto"</param>
            <param name="weights">The weight vector $w$. Default: "auto"</param>
            <param name="degree">The degree $p$ of the NURBS curve. Default: 3</param>
            <param name="maxError">Maximum distance between the NURBS curve and its approximation. Default: 1.0</param>
            <param name="maxDistance">Maximum distance between two subsequent Contour points. Default: 5.0</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenContourNurbsXld(HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.String,System.Int32,System.Double,System.Double)">
            <summary>
              Transform a NURBS curve into an XLD contour.
              Modified instance represents: The contour that approximates the NURBS curve.
            </summary>
            <param name="rows">Row coordinates of the control polygon.</param>
            <param name="cols">Column coordinates of the control polygon.</param>
            <param name="knots">The knot vector $u$. Default: "auto"</param>
            <param name="weights">The weight vector $w$. Default: "auto"</param>
            <param name="degree">The degree $p$ of the NURBS curve. Default: 3</param>
            <param name="maxError">Maximum distance between the NURBS curve and its approximation. Default: 1.0</param>
            <param name="maxDistance">Maximum distance between two subsequent Contour points. Default: 5.0</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.Union2ClosedContoursXld(HalconDotNet.HXLDCont)">
            <summary>
              Compute the union of closed contours.
              Instance represents: Contours enclosing the first region.
            </summary>
            <param name="contours2">Contours enclosing the second region.</param>
            <returns>Contours enclosing the union.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.SymmDifferenceClosedContoursXld(HalconDotNet.HXLDCont)">
            <summary>
              Compute the symmetric difference of closed contours.
              Instance represents: Contours enclosing the first region.
            </summary>
            <param name="contours2">Contours enclosing the second region.</param>
            <returns>Contours enclosing the symmetric difference.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DifferenceClosedContoursXld(HalconDotNet.HXLDCont)">
            <summary>
              Compute the difference of closed contours.
              Instance represents: Contours enclosing the region from which the second region is subtracted.
            </summary>
            <param name="sub">Contours enclosing the region that is subtracted from the first region.</param>
            <returns>Contours enclosing the difference.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.IntersectionClosedContoursXld(HalconDotNet.HXLDCont)">
            <summary>
              Intersect closed contours.
              Instance represents: Contours enclosing the first region to be intersected.
            </summary>
            <param name="contours2">Contours enclosing the second region to be intersected.</param>
            <returns>Contours enclosing the intersection.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.UnionCocircularContoursXld(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32)">
            <summary>
              Compute the union of contours that belong to the same circle.
              Instance represents: Contours to be merged.
            </summary>
            <param name="maxArcAngleDiff">Maximum angular distance of two circular arcs. Default: 0.5</param>
            <param name="maxArcOverlap">Maximum overlap of two circular arcs. Default: 0.1</param>
            <param name="maxTangentAngle">Maximum angle between the connecting line and the tangents of circular arcs. Default: 0.2</param>
            <param name="maxDist">Maximum length of the gap between two circular arcs in pixels. Default: 30</param>
            <param name="maxRadiusDiff">Maximum radius difference of the circles fitted to two arcs. Default: 10</param>
            <param name="maxCenterDist">Maximum center distance of the circles fitted to two arcs. Default: 10</param>
            <param name="mergeSmallContours">Determine whether small contours without fitted circles should also be merged. Default: "true"</param>
            <param name="iterations">Number of iterations. Default: 1</param>
            <returns>Merged contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.UnionCocircularContoursXld(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.Int32)">
            <summary>
              Compute the union of contours that belong to the same circle.
              Instance represents: Contours to be merged.
            </summary>
            <param name="maxArcAngleDiff">Maximum angular distance of two circular arcs. Default: 0.5</param>
            <param name="maxArcOverlap">Maximum overlap of two circular arcs. Default: 0.1</param>
            <param name="maxTangentAngle">Maximum angle between the connecting line and the tangents of circular arcs. Default: 0.2</param>
            <param name="maxDist">Maximum length of the gap between two circular arcs in pixels. Default: 30</param>
            <param name="maxRadiusDiff">Maximum radius difference of the circles fitted to two arcs. Default: 10</param>
            <param name="maxCenterDist">Maximum center distance of the circles fitted to two arcs. Default: 10</param>
            <param name="mergeSmallContours">Determine whether small contours without fitted circles should also be merged. Default: "true"</param>
            <param name="iterations">Number of iterations. Default: 1</param>
            <returns>Merged contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.CropContoursXld(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Crop an XLD contour.
              Instance represents: Input contours.
            </summary>
            <param name="row1">Upper border of the cropping rectangle. Default: 0</param>
            <param name="col1">Left border of the cropping rectangle. Default: 0</param>
            <param name="row2">Lower border of the cropping rectangle. Default: 512</param>
            <param name="col2">Right border of the cropping rectangle. Default: 512</param>
            <param name="closeContours">Should closed contours produce closed output contours? Default: "true"</param>
            <returns>Output contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.CropContoursXld(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
              Crop an XLD contour.
              Instance represents: Input contours.
            </summary>
            <param name="row1">Upper border of the cropping rectangle. Default: 0</param>
            <param name="col1">Left border of the cropping rectangle. Default: 0</param>
            <param name="row2">Lower border of the cropping rectangle. Default: 512</param>
            <param name="col2">Right border of the cropping rectangle. Default: 512</param>
            <param name="closeContours">Should closed contours produce closed output contours? Default: "true"</param>
            <returns>Output contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenCrossContourXld(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double)">
            <summary>
              Generate one XLD contour in the shape of a cross for each input point.
              Modified instance represents: Generated XLD contours.
            </summary>
            <param name="row">Row coordinates of the input points.</param>
            <param name="col">Column coordinates of the input points.</param>
            <param name="size">Length of the cross bars. Default: 6.0</param>
            <param name="angle">Orientation of the crosses. Default: 0.785398</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenCrossContourXld(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Generate one XLD contour in the shape of a cross for each input point.
              Modified instance represents: Generated XLD contours.
            </summary>
            <param name="row">Row coordinates of the input points.</param>
            <param name="col">Column coordinates of the input points.</param>
            <param name="size">Length of the cross bars. Default: 6.0</param>
            <param name="angle">Orientation of the crosses. Default: 0.785398</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.SortContoursXld(System.String,System.String,System.String)">
            <summary>
              Sort contours with respect to their relative position.
              Instance represents: Contours to be sorted.
            </summary>
            <param name="sortMode">Kind of sorting. Default: "upper_left"</param>
            <param name="order">Increasing or decreasing sorting order. Default: "true"</param>
            <param name="rowOrCol">Sorting first with respect to row, then to column. Default: "row"</param>
            <returns>Sorted contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.MergeContLineScanXld(HalconDotNet.HXLDCont,HalconDotNet.HXLDCont@,System.Int32,HalconDotNet.HTuple,System.String,System.Int32)">
            <summary>
              Merge XLD contours from successive line scan images.
              Instance represents: Current input contours.
            </summary>
            <param name="prevConts">Merged contours from the previous iteration.</param>
            <param name="prevMergedConts">Contours from the previous iteration which could not be merged with the current ones.</param>
            <param name="imageHeight">Height of the line scan images. Default: 512</param>
            <param name="margin">Maximum distance of contours from the image border. Default: 0.0</param>
            <param name="mergeBorder">Image line of the current image, which touches the previous image. Default: "top"</param>
            <param name="maxImagesCont">Maximum number of images covered by one contour. Default: 3</param>
            <returns>Current contours, merged with old ones where applicable.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.MergeContLineScanXld(HalconDotNet.HXLDCont,HalconDotNet.HXLDCont@,System.Int32,System.Double,System.String,System.Int32)">
            <summary>
              Merge XLD contours from successive line scan images.
              Instance represents: Current input contours.
            </summary>
            <param name="prevConts">Merged contours from the previous iteration.</param>
            <param name="prevMergedConts">Contours from the previous iteration which could not be merged with the current ones.</param>
            <param name="imageHeight">Height of the line scan images. Default: 512</param>
            <param name="margin">Maximum distance of contours from the image border. Default: 0.0</param>
            <param name="mergeBorder">Image line of the current image, which touches the previous image. Default: "top"</param>
            <param name="maxImagesCont">Maximum number of images covered by one contour. Default: 3</param>
            <returns>Current contours, merged with old ones where applicable.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.ReadContourXldArcInfo(System.String)">
            <summary>
              Read XLD contours to a file in ARC/INFO generate format.
              Modified instance represents: Read XLD contours.
            </summary>
            <param name="fileName">Name of the ARC/INFO file.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.WriteContourXldArcInfo(System.String)">
            <summary>
              Write XLD contours to a file in ARC/INFO generate format.
              Instance represents: XLD contours to be written.
            </summary>
            <param name="fileName">Name of the ARC/INFO file.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenParallelContourXld(System.String,HalconDotNet.HTuple)">
            <summary>
              Compute the parallel contour of an XLD contour.
              Instance represents: Contours to be transformed.
            </summary>
            <param name="mode">Mode, with which the direction information is computed. Default: "regression_normal"</param>
            <param name="distance">Distance of the parallel contour. Default: 1</param>
            <returns>Parallel contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenParallelContourXld(System.String,System.Double)">
            <summary>
              Compute the parallel contour of an XLD contour.
              Instance represents: Contours to be transformed.
            </summary>
            <param name="mode">Mode, with which the direction information is computed. Default: "regression_normal"</param>
            <param name="distance">Distance of the parallel contour. Default: 1</param>
            <returns>Parallel contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenRectangle2ContourXld(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create an XLD contour in the shape of a rectangle.
              Modified instance represents: Rectangle contour.
            </summary>
            <param name="row">Row coordinate of the center of the rectangle. Default: 300.0</param>
            <param name="column">Column coordinate of the center of the rectangle. Default: 200.0</param>
            <param name="phi">Orientation of the main axis of the rectangle [rad]. Default: 0.0</param>
            <param name="length1">First radius (half length) of the rectangle. Default: 100.5</param>
            <param name="length2">Second radius (half width) of the rectangle. Default: 20.5</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenRectangle2ContourXld(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create an XLD contour in the shape of a rectangle.
              Modified instance represents: Rectangle contour.
            </summary>
            <param name="row">Row coordinate of the center of the rectangle. Default: 300.0</param>
            <param name="column">Column coordinate of the center of the rectangle. Default: 200.0</param>
            <param name="phi">Orientation of the main axis of the rectangle [rad]. Default: 0.0</param>
            <param name="length1">First radius (half length) of the rectangle. Default: 100.5</param>
            <param name="length2">Second radius (half width) of the rectangle. Default: 20.5</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DistRectangle2ContourPointsXld(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Compute the distances of all contour points to a rectangle.
              Instance represents: Input contour.
            </summary>
            <param name="clippingEndPoints">Number of points at the beginning and the end of the contours to be ignored for the computation of distances. Default: 0</param>
            <param name="row">Row coordinate of the center of the rectangle.</param>
            <param name="column">Column coordinate of the center of the rectangle.</param>
            <param name="phi">Orientation of the main axis of the rectangle [rad].</param>
            <param name="length1">First radius (half length) of the rectangle.</param>
            <param name="length2">Second radius (half width) of the rectangle.</param>
            <returns>Distances of the contour points to the rectangle.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.FitRectangle2ContourXld(System.String,System.Int32,System.Double,System.Int32,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Fit rectangles to XLD contours.
              Instance represents: Input contours.
            </summary>
            <param name="algorithm">Algorithm for fitting the rectangles. Default: "regression"</param>
            <param name="maxNumPoints">Maximum number of contour points used for the computation (-1 for all points). Default: -1</param>
            <param name="maxClosureDist">Maximum distance between the end points of a contour to be considered as closed. Default: 0.0</param>
            <param name="clippingEndPoints">Number of points at the beginning and at the end of the contours to be ignored for the fitting. Default: 0</param>
            <param name="iterations">Maximum number of iterations (not used for 'regression'). Default: 3</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers (typical: 1.0 for 'huber' and 2.0 for 'tukey'). Default: 2.0</param>
            <param name="row">Row coordinate of the center of the rectangle.</param>
            <param name="column">Column coordinate of the center of the rectangle.</param>
            <param name="phi">Orientation of the main axis of the rectangle [rad].</param>
            <param name="length1">First radius (half length) of the rectangle.</param>
            <param name="length2">Second radius (half width) of the rectangle.</param>
            <param name="pointOrder">Point order of the contour.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.FitRectangle2ContourXld(System.String,System.Int32,System.Double,System.Int32,System.Int32,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.String@)">
            <summary>
              Fit rectangles to XLD contours.
              Instance represents: Input contours.
            </summary>
            <param name="algorithm">Algorithm for fitting the rectangles. Default: "regression"</param>
            <param name="maxNumPoints">Maximum number of contour points used for the computation (-1 for all points). Default: -1</param>
            <param name="maxClosureDist">Maximum distance between the end points of a contour to be considered as closed. Default: 0.0</param>
            <param name="clippingEndPoints">Number of points at the beginning and at the end of the contours to be ignored for the fitting. Default: 0</param>
            <param name="iterations">Maximum number of iterations (not used for 'regression'). Default: 3</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers (typical: 1.0 for 'huber' and 2.0 for 'tukey'). Default: 2.0</param>
            <param name="row">Row coordinate of the center of the rectangle.</param>
            <param name="column">Column coordinate of the center of the rectangle.</param>
            <param name="phi">Orientation of the main axis of the rectangle [rad].</param>
            <param name="length1">First radius (half length) of the rectangle.</param>
            <param name="length2">Second radius (half width) of the rectangle.</param>
            <param name="pointOrder">Point order of the contour.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.SegmentContourAttribXld(HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Segment XLD contour parts whose local attributes fulfill given  conditions.
              Instance represents: Contour to be segmented.
            </summary>
            <param name="attribute">Contour attributes to be checked. Default: "distance"</param>
            <param name="operation">Linkage type of the individual attributes. Default: "and"</param>
            <param name="min">Lower limits of the attribute values. Default: 150.0</param>
            <param name="max">Upper limits of the attribute values. Default: 99999.0</param>
            <returns>Segmented contour parts.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.SegmentContourAttribXld(System.String,System.String,System.Double,System.Double)">
            <summary>
              Segment XLD contour parts whose local attributes fulfill given  conditions.
              Instance represents: Contour to be segmented.
            </summary>
            <param name="attribute">Contour attributes to be checked. Default: "distance"</param>
            <param name="operation">Linkage type of the individual attributes. Default: "and"</param>
            <param name="min">Lower limits of the attribute values. Default: 150.0</param>
            <param name="max">Upper limits of the attribute values. Default: 99999.0</param>
            <returns>Segmented contour parts.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.SegmentContoursXld(System.String,System.Int32,System.Double,System.Double)">
            <summary>
              Segment XLD contours into line segments and circular or elliptic arcs.
              Instance represents: Contours to be segmented.
            </summary>
            <param name="mode">Mode for the segmentation of the contours. Default: "lines_circles"</param>
            <param name="smoothCont">Number of points used for smoothing the contours. Default: 5</param>
            <param name="maxLineDist1">Maximum distance between a contour and the approximating line (first iteration). Default: 4.0</param>
            <param name="maxLineDist2">Maximum distance between a contour and the approximating line (second iteration). Default: 2.0</param>
            <returns>Segmented contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.FitCircleContourXld(System.String,System.Int32,System.Double,System.Int32,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Approximate XLD contours by circles.
              Instance represents: Input contours.
            </summary>
            <param name="algorithm">Algorithm for the fitting of circles. Default: "algebraic"</param>
            <param name="maxNumPoints">Maximum number of contour points used for the computation (-1 for all points). Default: -1</param>
            <param name="maxClosureDist">Maximum distance between the end points of a contour to be considered as 'closed'. Default: 0.0</param>
            <param name="clippingEndPoints">Number of points at the beginning and at the end of the contours to be ignored for the fitting. Default: 0</param>
            <param name="iterations">Maximum number of iterations for the robust weighted fitting. Default: 3</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers (typical: 1.0 for Huber and 2.0 for Tukey). Default: 2.0</param>
            <param name="row">Row coordinate of the center of the circle.</param>
            <param name="column">Column coordinate of the center of the circle.</param>
            <param name="radius">Radius of circle.</param>
            <param name="startPhi">Angle of the start point [rad].</param>
            <param name="endPhi">Angle of the end point [rad].</param>
            <param name="pointOrder">Point order along the boundary.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.FitCircleContourXld(System.String,System.Int32,System.Double,System.Int32,System.Int32,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.String@)">
            <summary>
              Approximate XLD contours by circles.
              Instance represents: Input contours.
            </summary>
            <param name="algorithm">Algorithm for the fitting of circles. Default: "algebraic"</param>
            <param name="maxNumPoints">Maximum number of contour points used for the computation (-1 for all points). Default: -1</param>
            <param name="maxClosureDist">Maximum distance between the end points of a contour to be considered as 'closed'. Default: 0.0</param>
            <param name="clippingEndPoints">Number of points at the beginning and at the end of the contours to be ignored for the fitting. Default: 0</param>
            <param name="iterations">Maximum number of iterations for the robust weighted fitting. Default: 3</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers (typical: 1.0 for Huber and 2.0 for Tukey). Default: 2.0</param>
            <param name="row">Row coordinate of the center of the circle.</param>
            <param name="column">Column coordinate of the center of the circle.</param>
            <param name="radius">Radius of circle.</param>
            <param name="startPhi">Angle of the start point [rad].</param>
            <param name="endPhi">Angle of the end point [rad].</param>
            <param name="pointOrder">Point order along the boundary.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.FitLineContourXld(System.String,System.Int32,System.Int32,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Approximate XLD contours by line segments.
              Instance represents: Input contours.
            </summary>
            <param name="algorithm">Algorithm for the fitting of lines. Default: "tukey"</param>
            <param name="maxNumPoints">Maximum number of contour points used for the computation (-1 for all points). Default: -1</param>
            <param name="clippingEndPoints">Number of points at the beginning and at the end of the contours to be ignored for the fitting. Default: 0</param>
            <param name="iterations">Maximum number of iterations (unused for 'regression'). Default: 5</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers (typical: 1.0 for 'huber' and 'drop' and 2.0 for  'tukey'). Default: 2.0</param>
            <param name="rowBegin">Row coordinates of the starting points of the line segments.</param>
            <param name="colBegin">Column coordinates of the starting points of the line segments.</param>
            <param name="rowEnd">Row coordinates of the end points of the line segments.</param>
            <param name="colEnd">Column coordinates of the end points of the line segments.</param>
            <param name="nr">Line parameter: Row coordinate of the normal vector</param>
            <param name="nc">Line parameter: Column coordinate of the normal vector</param>
            <param name="dist">Line parameter: Distance of the line from the origin</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.FitLineContourXld(System.String,System.Int32,System.Int32,System.Int32,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Approximate XLD contours by line segments.
              Instance represents: Input contours.
            </summary>
            <param name="algorithm">Algorithm for the fitting of lines. Default: "tukey"</param>
            <param name="maxNumPoints">Maximum number of contour points used for the computation (-1 for all points). Default: -1</param>
            <param name="clippingEndPoints">Number of points at the beginning and at the end of the contours to be ignored for the fitting. Default: 0</param>
            <param name="iterations">Maximum number of iterations (unused for 'regression'). Default: 5</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers (typical: 1.0 for 'huber' and 'drop' and 2.0 for  'tukey'). Default: 2.0</param>
            <param name="rowBegin">Row coordinates of the starting points of the line segments.</param>
            <param name="colBegin">Column coordinates of the starting points of the line segments.</param>
            <param name="rowEnd">Row coordinates of the end points of the line segments.</param>
            <param name="colEnd">Column coordinates of the end points of the line segments.</param>
            <param name="nr">Line parameter: Row coordinate of the normal vector</param>
            <param name="nc">Line parameter: Column coordinate of the normal vector</param>
            <param name="dist">Line parameter: Distance of the line from the origin</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DistEllipseContourPointsXld(System.String,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Compute the distances of all contour points to an ellipse.
              Instance represents: Input contours.
            </summary>
            <param name="distanceMode">Mode for unsigned or signed distance values. Default: "unsigned"</param>
            <param name="clippingEndPoints">Number of points at the beginning and the end of the contours to be ignored for the computation of distances. Default: 0</param>
            <param name="row">Row coordinate of the center of the ellipse.</param>
            <param name="column">Column coordinate of the center of the ellipse.</param>
            <param name="phi">Orientation of the main axis in radian.</param>
            <param name="radius1">Length of the larger half axis.</param>
            <param name="radius2">Length of the smaller half axis.</param>
            <returns>Distances of the contour points to the ellipse.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DistEllipseContourXld(System.String,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the distance of contours to an ellipse.
              Instance represents: Input contours.
            </summary>
            <param name="mode">Method for the determination of the distances. Default: "geometric"</param>
            <param name="maxNumPoints">Maximum number of contour points used for the computation (-1 for all points). Default: -1</param>
            <param name="clippingEndPoints">Number of points at the beginning and the end of the contours to be ignored for the computation of distances. Default: 0</param>
            <param name="row">Row coordinate of the center of the ellipse.</param>
            <param name="column">Column coordinate of the center of the ellipse.</param>
            <param name="phi">Orientation of the main axis in radian.</param>
            <param name="radius1">Length of the larger half axis.</param>
            <param name="radius2">Length of the smaller half axis.</param>
            <param name="minDist">Minimum distance.</param>
            <param name="maxDist">Maximum distance.</param>
            <param name="avgDist">Mean distance.</param>
            <param name="sigmaDist">Standard deviation of the distance.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DistEllipseContourXld(System.String,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Compute the distance of contours to an ellipse.
              Instance represents: Input contours.
            </summary>
            <param name="mode">Method for the determination of the distances. Default: "geometric"</param>
            <param name="maxNumPoints">Maximum number of contour points used for the computation (-1 for all points). Default: -1</param>
            <param name="clippingEndPoints">Number of points at the beginning and the end of the contours to be ignored for the computation of distances. Default: 0</param>
            <param name="row">Row coordinate of the center of the ellipse.</param>
            <param name="column">Column coordinate of the center of the ellipse.</param>
            <param name="phi">Orientation of the main axis in radian.</param>
            <param name="radius1">Length of the larger half axis.</param>
            <param name="radius2">Length of the smaller half axis.</param>
            <param name="minDist">Minimum distance.</param>
            <param name="maxDist">Maximum distance.</param>
            <param name="avgDist">Mean distance.</param>
            <param name="sigmaDist">Standard deviation of the distance.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.FitEllipseContourXld(System.String,System.Int32,System.Double,System.Int32,System.Int32,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Approximate XLD contours by ellipses or elliptic arcs.
              Instance represents: Input contours.
            </summary>
            <param name="algorithm">Algorithm for the fitting of ellipses. Default: "fitzgibbon"</param>
            <param name="maxNumPoints">Maximum number of contour points used for the computation (-1 for all points). Default: -1</param>
            <param name="maxClosureDist">Maximum distance between the end points of a contour to be considered as 'closed'. Default: 0.0</param>
            <param name="clippingEndPoints">Number of points at the beginning and at the end of the contours to be ignored for the fitting. Default: 0</param>
            <param name="vossTabSize">Number of circular segments used for the Voss approach. Default: 200</param>
            <param name="iterations">Maximum number of iterations for the robust weighted fitting. Default: 3</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers (typical: 1.0 for '*huber' and 2.0 for '*tukey'). Default: 2.0</param>
            <param name="row">Row coordinate of the center of the ellipse.</param>
            <param name="column">Column coordinate of the center of the ellipse.</param>
            <param name="phi">Orientation of the main axis [rad].</param>
            <param name="radius1">Length of the larger half axis.</param>
            <param name="radius2">Length of the smaller half axis.</param>
            <param name="startPhi">Angle of the start point [rad].</param>
            <param name="endPhi">Angle of the end point [rad].</param>
            <param name="pointOrder">point order along the boundary.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.FitEllipseContourXld(System.String,System.Int32,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.String@)">
            <summary>
              Approximate XLD contours by ellipses or elliptic arcs.
              Instance represents: Input contours.
            </summary>
            <param name="algorithm">Algorithm for the fitting of ellipses. Default: "fitzgibbon"</param>
            <param name="maxNumPoints">Maximum number of contour points used for the computation (-1 for all points). Default: -1</param>
            <param name="maxClosureDist">Maximum distance between the end points of a contour to be considered as 'closed'. Default: 0.0</param>
            <param name="clippingEndPoints">Number of points at the beginning and at the end of the contours to be ignored for the fitting. Default: 0</param>
            <param name="vossTabSize">Number of circular segments used for the Voss approach. Default: 200</param>
            <param name="iterations">Maximum number of iterations for the robust weighted fitting. Default: 3</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers (typical: 1.0 for '*huber' and 2.0 for '*tukey'). Default: 2.0</param>
            <param name="row">Row coordinate of the center of the ellipse.</param>
            <param name="column">Column coordinate of the center of the ellipse.</param>
            <param name="phi">Orientation of the main axis [rad].</param>
            <param name="radius1">Length of the larger half axis.</param>
            <param name="radius2">Length of the smaller half axis.</param>
            <param name="startPhi">Angle of the start point [rad].</param>
            <param name="endPhi">Angle of the end point [rad].</param>
            <param name="pointOrder">point order along the boundary.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenCircleContourXld(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double)">
            <summary>
              Create XLD contours corresponding to circles or circular arcs.
              Modified instance represents: Resulting contours.
            </summary>
            <param name="row">Row coordinate of the center of the circles or circular arcs. Default: 200.0</param>
            <param name="column">Column coordinate of the center of the circles or circular arcs. Default: 200.0</param>
            <param name="radius">Radius of the circles or circular arcs. Default: 100.0</param>
            <param name="startPhi">Angle of the start points of the circles or circular arcs [rad]. Default: 0.0</param>
            <param name="endPhi">Angle of the end points of the circles or circular arcs [rad]. Default: 6.28318</param>
            <param name="pointOrder">Point order along the circles or circular arcs. Default: "positive"</param>
            <param name="resolution">Distance between neighboring contour points. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenCircleContourXld(System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.Double)">
            <summary>
              Create XLD contours corresponding to circles or circular arcs.
              Modified instance represents: Resulting contours.
            </summary>
            <param name="row">Row coordinate of the center of the circles or circular arcs. Default: 200.0</param>
            <param name="column">Column coordinate of the center of the circles or circular arcs. Default: 200.0</param>
            <param name="radius">Radius of the circles or circular arcs. Default: 100.0</param>
            <param name="startPhi">Angle of the start points of the circles or circular arcs [rad]. Default: 0.0</param>
            <param name="endPhi">Angle of the end points of the circles or circular arcs [rad]. Default: 6.28318</param>
            <param name="pointOrder">Point order along the circles or circular arcs. Default: "positive"</param>
            <param name="resolution">Distance between neighboring contour points. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenEllipseContourXld(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double)">
            <summary>
              Create an XLD contour that corresponds to an elliptic arc.
              Modified instance represents: Resulting contour.
            </summary>
            <param name="row">Row coordinate of the center of the ellipse. Default: 200.0</param>
            <param name="column">Column coordinate of the center of the ellipse. Default: 200.0</param>
            <param name="phi">Orientation of the main axis [rad]. Default: 0.0</param>
            <param name="radius1">Length of the larger half axis. Default: 100.0</param>
            <param name="radius2">Length of the smaller half axis. Default: 50.0</param>
            <param name="startPhi">Angle of the start point on the smallest surrounding circle  [rad]. Default: 0.0</param>
            <param name="endPhi">Angle of the end point on the smallest surrounding circle  [rad]. Default: 6.28318</param>
            <param name="pointOrder">point order along the boundary. Default: "positive"</param>
            <param name="resolution">Resolution: Maximum distance between neighboring contour points. Default: 1.5</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenEllipseContourXld(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.Double)">
            <summary>
              Create an XLD contour that corresponds to an elliptic arc.
              Modified instance represents: Resulting contour.
            </summary>
            <param name="row">Row coordinate of the center of the ellipse. Default: 200.0</param>
            <param name="column">Column coordinate of the center of the ellipse. Default: 200.0</param>
            <param name="phi">Orientation of the main axis [rad]. Default: 0.0</param>
            <param name="radius1">Length of the larger half axis. Default: 100.0</param>
            <param name="radius2">Length of the smaller half axis. Default: 50.0</param>
            <param name="startPhi">Angle of the start point on the smallest surrounding circle  [rad]. Default: 0.0</param>
            <param name="endPhi">Angle of the end point on the smallest surrounding circle  [rad]. Default: 6.28318</param>
            <param name="pointOrder">point order along the boundary. Default: "positive"</param>
            <param name="resolution">Resolution: Maximum distance between neighboring contour points. Default: 1.5</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.AddNoiseWhiteContourXld(System.Int32,System.Double)">
            <summary>
              Add noise to XLD contours.
              Instance represents: Original contours.
            </summary>
            <param name="numRegrPoints">Number of points used to calculate the regression line. Default: 5</param>
            <param name="amp">Maximum amplitude of the added noise (equally distributed in [-Amp,Amp]). Default: 1.0</param>
            <returns>Noisy contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenPolygonsXld(System.String,HalconDotNet.HTuple)">
            <summary>
              Approximate XLD contours by polygons.
              Instance represents: Contours to be approximated.
            </summary>
            <param name="type">Type of approximation. Default: "ramer"</param>
            <param name="alpha">Threshold for the approximation. Default: 2.0</param>
            <returns>Approximating polygons.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenPolygonsXld(System.String,System.Double)">
            <summary>
              Approximate XLD contours by polygons.
              Instance represents: Contours to be approximated.
            </summary>
            <param name="type">Type of approximation. Default: "ramer"</param>
            <param name="alpha">Threshold for the approximation. Default: 2.0</param>
            <returns>Approximating polygons.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.ProjectiveTransContourXld(HalconDotNet.HHomMat2D)">
            <summary>
              Apply a projective transformation to an XLD contour.
              Instance represents: Input contours.
            </summary>
            <param name="homMat2D">Homogeneous projective transformation matrix.</param>
            <returns>Output contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.AffineTransContourXld(HalconDotNet.HHomMat2D)">
            <summary>
              Apply an arbitrary affine 2D transformation to XLD contours.
              Instance represents: Input XLD contours.
            </summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <returns>Transformed XLD contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.CloseContoursXld">
            <summary>
              Close an XLD contour.
              Instance represents: Contours to be closed.
            </summary>
            <returns>Closed contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.ClipEndPointsContoursXld(System.String,HalconDotNet.HTuple)">
            <summary>
              Clip the end points of an XLD contour.
              Instance represents: Input contour
            </summary>
            <param name="mode">Clipping mode. Default: "num_points"</param>
            <param name="length">Clipping length in unit pixels (Mode $=$ 'length') or number (Mode $=$ 'num_points') Default: 3</param>
            <returns>Clipped contour</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.ClipEndPointsContoursXld(System.String,System.Double)">
            <summary>
              Clip the end points of an XLD contour.
              Instance represents: Input contour
            </summary>
            <param name="mode">Clipping mode. Default: "num_points"</param>
            <param name="length">Clipping length in unit pixels (Mode $=$ 'length') or number (Mode $=$ 'num_points') Default: 3</param>
            <returns>Clipped contour</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.ClipContoursXld(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Clip an XLD contour.
              Instance represents: Contours to be clipped.
            </summary>
            <param name="row1">Row coordinate of the upper left corner of the clip rectangle. Default: 0</param>
            <param name="column1">Column coordinate of the upper left corner of the clip rectangle. Default: 0</param>
            <param name="row2">Row coordinate of the lower right corner of the clip rectangle. Default: 512</param>
            <param name="column2">Column coordinate of the lower right corner of the clip rectangle. Default: 512</param>
            <returns>Clipped contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.LocalMaxContoursXld(HalconDotNet.HImage,HalconDotNet.HTuple,System.Int32,System.Int32)">
            <summary>
              Select XLD contours with a local maximum of gray values.
              Instance represents: XLD contours to be examined.
            </summary>
            <param name="image">Corresponding gray value image.</param>
            <param name="minPercent">Minimum percentage of maximum points. Default: 70</param>
            <param name="minDiff">Minimum amount by which the gray value at the maximum must be larger than in the profile. Default: 15</param>
            <param name="distance">Maximum width of profile used to check for maxima. Default: 4</param>
            <returns>Selected contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.LocalMaxContoursXld(HalconDotNet.HImage,System.Int32,System.Int32,System.Int32)">
            <summary>
              Select XLD contours with a local maximum of gray values.
              Instance represents: XLD contours to be examined.
            </summary>
            <param name="image">Corresponding gray value image.</param>
            <param name="minPercent">Minimum percentage of maximum points. Default: 70</param>
            <param name="minDiff">Minimum amount by which the gray value at the maximum must be larger than in the profile. Default: 15</param>
            <param name="distance">Maximum width of profile used to check for maxima. Default: 4</param>
            <returns>Selected contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.UnionStraightContoursHistoXld(HalconDotNet.HXLDCont@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple@)">
            <summary>
              Compute the union of neighboring straight contours that have a similar  distance from a given line.
              Instance represents: Input XLD contours.
            </summary>
            <param name="selectedContours">Output XLD contours.</param>
            <param name="refLineStartRow">y coordinate of the starting point of the reference line. Default: 0</param>
            <param name="refLineStartColumn">x coordinate of the starting point of the reference line. Default: 0</param>
            <param name="refLineEndRow">y coordinate of the endpoint of the reference line. Default: 0</param>
            <param name="refLineEndColumn">x coordinate of the endpoint of the reference line. Default: 0</param>
            <param name="width">Maximum distance. Default: 1</param>
            <param name="maxWidth">Maximum Width between two minimas. Default: 1</param>
            <param name="filterSize">Size of Smoothfilter Default: 1</param>
            <param name="histoValues">Output Values of Histogram.</param>
            <returns>Output XLD contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.UnionStraightContoursXld(System.Double,System.Double,System.Double,System.String,HalconDotNet.HTuple)">
            <summary>
              Compute the union of neighboring straight contours that have a similar  direction.
              Instance represents: Input XLD contours.
            </summary>
            <param name="maxDist">Maximum distance of the contours' endpoints. Default: 5.0</param>
            <param name="maxDiff">Maximum difference in direction. Default: 0.5</param>
            <param name="percent">Weighting factor for the two selection criteria. Default: 50.0</param>
            <param name="mode">Should parallel contours be taken into account? Default: "noparallel"</param>
            <param name="iterations">Number of iterations or 'maximum'. Default: "maximum"</param>
            <returns>Output XLD contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.UnionStraightContoursXld(System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>
              Compute the union of neighboring straight contours that have a similar  direction.
              Instance represents: Input XLD contours.
            </summary>
            <param name="maxDist">Maximum distance of the contours' endpoints. Default: 5.0</param>
            <param name="maxDiff">Maximum difference in direction. Default: 0.5</param>
            <param name="percent">Weighting factor for the two selection criteria. Default: 50.0</param>
            <param name="mode">Should parallel contours be taken into account? Default: "noparallel"</param>
            <param name="iterations">Number of iterations or 'maximum'. Default: "maximum"</param>
            <returns>Output XLD contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.UnionCollinearContoursExtXld(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
              Compute the union of collinear contours  (operator with extended functionality).
              Instance represents: Input XLD contours.
            </summary>
            <param name="maxDistAbs">Maximum distance of the contours' end points in the direction of the reference regression line. Default: 10.0</param>
            <param name="maxDistRel">Maximum distance of the contours' end points in the direction of the reference regression line in relation to the length of the contour which is to be elongated. Default: 1.0</param>
            <param name="maxShift">Maximum distance of the contour from the reference regression line (i.e., perpendicular to the line). Default: 2.0</param>
            <param name="maxAngle">Maximum angle difference between the two contours. Default: 0.1</param>
            <param name="maxOverlap">Maximum range of the overlap. Default: 0.0</param>
            <param name="maxRegrError">Maximum regression error of the resulting contours (NOT USED).  Default: -1.0</param>
            <param name="maxCosts">Threshold for reducing the total costs of unification. Default: 1.0</param>
            <param name="weightDist">Influence of the distance in the line direction on the total costs. Default: 1.0</param>
            <param name="weightShift">Influence of the distance from the regression line on the total costs. Default: 1.0</param>
            <param name="weightAngle">Influence of the angle difference on the total costs. Default: 1.0</param>
            <param name="weightLink">Influence of the line disturbance by the linking segment (overlap and angle difference) on the total costs. Default: 1.0</param>
            <param name="weightRegr">Influence of the regression error on the total costs (NOT USED). Default: 0.0</param>
            <param name="mode">Mode describing the treatment of the contours' attributes Default: "attr_keep"</param>
            <returns>Output XLD contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.UnionCollinearContoursXld(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
              Unite approximately collinear contours.
              Instance represents: Input XLD contours.
            </summary>
            <param name="maxDistAbs">Maximum length of the gap between two contours, measured along the regression line of the reference contour. Default: 10.0</param>
            <param name="maxDistRel">Maximum length of the gap between two contours, relative to the length of the reference contour, both measured along the regression line of the reference contour. Default: 1.0</param>
            <param name="maxShift">Maximum distance of the second contour from the regression line of the reference contour. Default: 2.0</param>
            <param name="maxAngle">Maximum angle between the regression lines of two contours. Default: 0.1</param>
            <param name="mode">Mode that defines the treatment of contour attributes, i.e., if the contour attributes are kept or discarded. Default: "attr_keep"</param>
            <returns>Output XLD contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.UnionAdjacentContoursXld(System.Double,System.Double,System.String)">
            <summary>
              Compute the union of contours whose end points are close together.
              Instance represents: Input XLD contours.
            </summary>
            <param name="maxDistAbs">Maximum distance of the contours' end points. Default: 10.0</param>
            <param name="maxDistRel">Maximum distance of the contours' end points in relation to the length of the longer contour. Default: 1.0</param>
            <param name="mode">Mode describing the treatment of the contours' attributes. Default: "attr_keep"</param>
            <returns>Output XLD contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.SelectContoursXld(System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Select XLD contours according to several features.
              Instance represents: Input XLD contours.
            </summary>
            <param name="feature">Feature to select contours with. Default: "contour_length"</param>
            <param name="min1">Lower threshold. Default: 0.5</param>
            <param name="max1">Upper threshold. Default: 200.0</param>
            <param name="min2">Lower threshold. Default: -0.5</param>
            <param name="max2">Upper threshold. Default: 0.5</param>
            <returns>Output XLD contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GetRegressParamsXld(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Return XLD contour parameters.
              Instance represents: Input XLD contours.
            </summary>
            <param name="nx">X-coordinate of the normal vector of the regression line.</param>
            <param name="ny">Y-coordinate of the normal vector of the regression line.</param>
            <param name="dist">Distance of the regression line from the origin.</param>
            <param name="fpx">X-coordinate of the projection of the start point of the contour onto the regression line.</param>
            <param name="fpy">Y-coordinate of the projection of the start point of the contour onto the regression line.</param>
            <param name="lpx">X-coordinate of the projection of the end point of the contour onto the regression line.</param>
            <param name="lpy">Y-coordinate of the projection of the end point of the contour onto the regression line.</param>
            <param name="mean">Mean distance of the contour points from the regression line.</param>
            <param name="deviation">Standard deviation of the distances from the regression line.</param>
            <returns>Number of contour points.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.RegressContoursXld(System.String,System.Int32)">
            <summary>
              Calculate the parameters of a regression line to an XLD contour.
              Instance represents: Input XLD contours.
            </summary>
            <param name="mode">Type of outlier treatment. Default: "no"</param>
            <param name="iterations">Number of iterations for the outlier treatment. Default: 1</param>
            <returns>Resulting XLD contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GetContourAngleXld(System.String,System.String,System.Int32)">
            <summary>
              Calculate the direction of an XLD contour for each contour point.
              Instance represents: Input contour.
            </summary>
            <param name="angleMode">Return type of the angles. Default: "abs"</param>
            <param name="calcMode">Method for computing the angles. Default: "range"</param>
            <param name="lookaround">Number of points to take into account. Default: 3</param>
            <returns>Direction of the tangent to the contour points.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.SmoothContoursXld(System.Int32)">
            <summary>
              Smooth an XLD contour.
              Instance represents: Contour to be smoothed.
            </summary>
            <param name="numRegrPoints">Number of points used to calculate the regression line. Default: 5</param>
            <returns>Smoothed contour.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.ContourPointNumXld">
            <summary>
              Return the number of points in an XLD contour.
              Instance represents: Input XLD contour.
            </summary>
            <returns>Number of contour points.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.QueryContourGlobalAttribsXld">
            <summary>
              Return the names of the defined global attributes of an XLD contour.
              Instance represents: Input contour.
            </summary>
            <returns>List of the defined global contour attributes.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GetContourGlobalAttribXld(HalconDotNet.HTuple)">
            <summary>
              Return global attributes values of an XLD contour.
              Instance represents: Input XLD contour.
            </summary>
            <param name="name">Name of the attribute. Default: "regr_norm_row"</param>
            <returns>Attribute values.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GetContourGlobalAttribXld(System.String)">
            <summary>
              Return global attributes values of an XLD contour.
              Instance represents: Input XLD contour.
            </summary>
            <param name="name">Name of the attribute. Default: "regr_norm_row"</param>
            <returns>Attribute values.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.QueryContourAttribsXld">
            <summary>
              Return the names of the defined attributes of an XLD contour.
              Instance represents: Input contour.
            </summary>
            <returns>List of the defined contour attributes.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GetContourAttribXld(System.String)">
            <summary>
              Return point attribute values of an XLD contour.
              Instance represents: Input XLD contour.
            </summary>
            <param name="name">Name of the attribute. Default: "angle"</param>
            <returns>Attribute values.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GetContourXld(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Return the coordinates of an XLD contour.
              Instance represents: Input XLD contour.
            </summary>
            <param name="row">Row coordinate of the contour's points.</param>
            <param name="col">Column coordinate of the contour's points.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenContourPolygonRoundedXld(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Generate an XLD contour with rounded corners from a polygon (given as tuples).
              Modified instance represents: Resulting contour.
            </summary>
            <param name="row">Row coordinates of the polygon. Default: [20,80,80,20,20]</param>
            <param name="col">Column coordinates of the polygon. Default: [20,20,80,80,20]</param>
            <param name="radius">Radii of the rounded corners. Default: [20,20,20,20,20]</param>
            <param name="samplingInterval">Distance of the samples. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenContourPolygonRoundedXld(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double)">
            <summary>
              Generate an XLD contour with rounded corners from a polygon (given as tuples).
              Modified instance represents: Resulting contour.
            </summary>
            <param name="row">Row coordinates of the polygon. Default: [20,80,80,20,20]</param>
            <param name="col">Column coordinates of the polygon. Default: [20,20,80,80,20]</param>
            <param name="radius">Radii of the rounded corners. Default: [20,20,20,20,20]</param>
            <param name="samplingInterval">Distance of the samples. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenContourPolygonXld(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Generate an XLD contour from a polygon (given as tuples).
              Modified instance represents: Resulting contour.
            </summary>
            <param name="row">Row coordinates of the polygon. Default: [0,1,2,2,2]</param>
            <param name="col">Column coordinates of the polygon. Default: [0,0,0,1,2]</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.ObjDiff(HalconDotNet.HXLDCont)">
            <summary>
              Calculate the difference of two object tuples.
              Instance represents: Object tuple 1.
            </summary>
            <param name="objectsSub">Object tuple 2.</param>
            <returns>Objects from Objects that are not part of ObjectsSub.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.CopyObj(System.Int32,System.Int32)">
            <summary>
              Copy an iconic object in the HALCON database.
              Instance represents: Objects to be copied.
            </summary>
            <param name="index">Starting index of the objects to be copied. Default: 1</param>
            <param name="numObj">Number of objects to be copied or -1. Default: 1</param>
            <returns>Copied objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.ConcatObj(HalconDotNet.HXLDCont)">
            <summary>
              Concatenate two iconic object tuples.
              Instance represents: Object tuple 1.
            </summary>
            <param name="objects2">Object tuple 2.</param>
            <returns>Concatenated objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.SelectObj(HalconDotNet.HTuple)">
            <summary>
              Select objects from an object tuple.
              Instance represents: Input objects.
            </summary>
            <param name="index">Indices of the objects to be selected. Default: 1</param>
            <returns>Selected objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.SelectObj(System.Int32)">
            <summary>
              Select objects from an object tuple.
              Instance represents: Input objects.
            </summary>
            <param name="index">Indices of the objects to be selected. Default: 1</param>
            <returns>Selected objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.CompareObj(HalconDotNet.HXLDCont,HalconDotNet.HTuple)">
            <summary>
              Compare iconic objects regarding equality.
              Instance represents: Reference objects.
            </summary>
            <param name="objects2">Test objects.</param>
            <param name="epsilon">Maximum allowed difference between two gray values or  coordinates etc. Default: 0.0</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.CompareObj(HalconDotNet.HXLDCont,System.Double)">
            <summary>
              Compare iconic objects regarding equality.
              Instance represents: Reference objects.
            </summary>
            <param name="objects2">Test objects.</param>
            <param name="epsilon">Maximum allowed difference between two gray values or  coordinates etc. Default: 0.0</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.TestEqualObj(HalconDotNet.HXLDCont)">
            <summary>
              Compare image objects regarding equality.
              Instance represents: Test objects.
            </summary>
            <param name="objects2">Comparative objects.</param>
            <returns>boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenRegionContourXld(System.String)">
            <summary>
              Create a region from an XLD contour.
              Instance represents: Input contour(s).
            </summary>
            <param name="mode">Fill mode of the region(s). Default: "filled"</param>
            <returns>Created region(s).</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.CreateAnisoShapeModelXld(HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32)">
            <summary>
              Prepare a shape model for anisotropic scale invariant matching from XLD contours.
              Instance represents: Input contours that will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.1</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.1</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.CreateAnisoShapeModelXld(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32)">
            <summary>
              Prepare a shape model for anisotropic scale invariant matching from XLD contours.
              Instance represents: Input contours that will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.1</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.1</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.CreateScaledShapeModelXld(HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32)">
            <summary>
              Prepare a shape model for scale invariant matching from XLD contours.
              Instance represents: Input contours that will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleMin">Minimum scale of the pattern. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the pattern. Default: 1.1</param>
            <param name="scaleStep">Scale step length (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.CreateScaledShapeModelXld(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32)">
            <summary>
              Prepare a shape model for scale invariant matching from XLD contours.
              Instance represents: Input contours that will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleMin">Minimum scale of the pattern. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the pattern. Default: 1.1</param>
            <param name="scaleStep">Scale step length (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.CreateShapeModelXld(HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32)">
            <summary>
              Prepare a shape model for matching from XLD contours.
              Instance represents: Input contours that will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.CreateShapeModelXld(System.Int32,System.Double,System.Double,System.Double,System.String,System.String,System.Int32)">
            <summary>
              Prepare a shape model for matching from XLD contours.
              Instance represents: Input contours that will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.CreateLocalDeformableModelXld(HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a deformable model for local deformable matching from XLD contours.
              Instance represents: Input contours that will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameters. Default: []</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.CreateLocalDeformableModelXld(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a deformable model for local deformable matching from XLD contours.
              Instance represents: Input contours that will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameters. Default: []</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.CreatePlanarCalibDeformableModelXld(HalconDotNet.HTuple,HalconDotNet.HPose,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a deformable model for planar calibrated matching from XLD contours.
              Instance represents: Input contours that will be used to create the model.
            </summary>
            <param name="camParam">The parameters of the internal orientation of the camera.</param>
            <param name="referencePose">The reference pose of the object.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameter. Default: []</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.CreatePlanarCalibDeformableModelXld(HalconDotNet.HTuple,HalconDotNet.HPose,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a deformable model for planar calibrated matching from XLD contours.
              Instance represents: Input contours that will be used to create the model.
            </summary>
            <param name="camParam">The parameters of the internal orientation of the camera.</param>
            <param name="referencePose">The reference pose of the object.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameter. Default: []</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.CreatePlanarUncalibDeformableModelXld(HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a deformable model for planar uncalibrated matching from XLD contours.
              Instance represents: Input contours that will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameters. Default: []</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.CreatePlanarUncalibDeformableModelXld(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a deformable model for planar uncalibrated matching from XLD contours.
              Instance represents: Input contours that will be used to create the model.
            </summary>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameters. Default: []</param>
            <returns>Handle of the model.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenGridRectificationMap(HalconDotNet.HImage,HalconDotNet.HXLDCont@,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
              Instance represents: Input contours.
            </summary>
            <param name="image">Input image.</param>
            <param name="meshes">Output contours.</param>
            <param name="gridSpacing">Distance of the grid points in the rectified image.</param>
            <param name="rotation">Rotation to be applied to the point grid. Default: "auto"</param>
            <param name="row">Row coordinates of the grid points.</param>
            <param name="column">Column coordinates of the grid points.</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
            <returns>Image containing the mapping data.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.GenGridRectificationMap(HalconDotNet.HImage,HalconDotNet.HXLDCont@,System.Int32,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
              Instance represents: Input contours.
            </summary>
            <param name="image">Input image.</param>
            <param name="meshes">Output contours.</param>
            <param name="gridSpacing">Distance of the grid points in the rectified image.</param>
            <param name="rotation">Rotation to be applied to the point grid. Default: "auto"</param>
            <param name="row">Row coordinates of the grid points.</param>
            <param name="column">Column coordinates of the grid points.</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
            <returns>Image containing the mapping data.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DrawNurbsInterpMod(HalconDotNet.HWindow,System.String,System.String,System.String,System.String,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Interactive modification of a NURBS curve using interpolation.
              Modified instance represents: Contour of the modified curve.
            </summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="rotate">Enable rotation? Default: "true"</param>
            <param name="move">Enable moving? Default: "true"</param>
            <param name="scale">Enable scaling? Default: "true"</param>
            <param name="keepRatio">Keep ratio while scaling? Default: "true"</param>
            <param name="edit">Enable editing? Default: "true"</param>
            <param name="degree">The degree $p$ of the NURBS curve. Reasonable values are 3 to 5. Default: 3</param>
            <param name="rowsIn">Row coordinates of the input interpolation points.</param>
            <param name="colsIn">Column coordinates of the input interpolation points.</param>
            <param name="tangentsIn">Input tangents.</param>
            <param name="controlRows">Row coordinates of the control polygon.</param>
            <param name="controlCols">Column coordinates of the control polygon.</param>
            <param name="knots">Knot vector.</param>
            <param name="rows">Row coordinates of the points specified by the user.</param>
            <param name="cols">Column coordinates of the points specified by the user.</param>
            <param name="tangents">Tangents specified by the user.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DrawNurbsInterp(HalconDotNet.HWindow,System.String,System.String,System.String,System.String,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Interactive drawing of a NURBS curve using interpolation.
              Modified instance represents: Contour of the curve.
            </summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="rotate">Enable rotation? Default: "true"</param>
            <param name="move">Enable moving? Default: "true"</param>
            <param name="scale">Enable scaling? Default: "true"</param>
            <param name="keepRatio">Keep ratio while scaling? Default: "true"</param>
            <param name="degree">The degree $p$ of the NURBS curve. Reasonable values are 3 to 5. Default: 3</param>
            <param name="controlRows">Row coordinates of the control polygon.</param>
            <param name="controlCols">Column coordinates of the control polygon.</param>
            <param name="knots">Knot vector.</param>
            <param name="rows">Row coordinates of the points specified by the user.</param>
            <param name="cols">Column coordinates of the points specified by the user.</param>
            <param name="tangents">Tangents specified by the user.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DrawNurbsMod(HalconDotNet.HWindow,System.String,System.String,System.String,System.String,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Interactive modification of a NURBS curve.
              Modified instance represents: Contour of the modified curve.
            </summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="rotate">Enable rotation? Default: "true"</param>
            <param name="move">Enable moving? Default: "true"</param>
            <param name="scale">Enable scaling? Default: "true"</param>
            <param name="keepRatio">Keep ratio while scaling? Default: "true"</param>
            <param name="edit">Enable editing? Default: "true"</param>
            <param name="degree">The degree $p$ of the NURBS curve. Reasonable values are 3 to 25. Default: 3</param>
            <param name="rowsIn">Row coordinates of the input control polygon.</param>
            <param name="colsIn">Column coordinates of the input control polygon.</param>
            <param name="weightsIn">Input weight vector.</param>
            <param name="rows">Row coordinates of the control polygon.</param>
            <param name="cols">Columns coordinates of the control polygon.</param>
            <param name="weights">Weight vector.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DrawNurbs(HalconDotNet.HWindow,System.String,System.String,System.String,System.String,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Interactive drawing of a NURBS curve.
              Modified instance represents: Contour approximating the NURBS curve.
            </summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="rotate">Enable rotation? Default: "true"</param>
            <param name="move">Enable moving? Default: "true"</param>
            <param name="scale">Enable scaling? Default: "true"</param>
            <param name="keepRatio">Keep ratio while scaling? Default: "true"</param>
            <param name="degree">The degree $p$ of the NURBS curve. Reasonable values are 3 to 25. Default: 3</param>
            <param name="rows">Row coordinates of the control polygon.</param>
            <param name="cols">Columns coordinates of the control polygon.</param>
            <param name="weights">Weight vector.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DrawXldMod(HalconDotNet.HWindow,System.String,System.String,System.String,System.String,System.String)">
            <summary>
              Interactive modification of a contour.
              Instance represents: Input contour.
            </summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="rotate">Enable rotation? Default: "true"</param>
            <param name="move">Enable moving? Default: "true"</param>
            <param name="scale">Enable scaling? Default: "true"</param>
            <param name="keepRatio">Keep ratio while scaling? Default: "true"</param>
            <param name="edit">Enable editing? Default: "true"</param>
            <returns>Modified contour.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DrawXld(HalconDotNet.HWindow,System.String,System.String,System.String,System.String)">
            <summary>
              Interactive drawing of a contour.
              Modified instance represents: Modified contour.
            </summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="rotate">Enable rotation? Default: "true"</param>
            <param name="move">Enable moving? Default: "true"</param>
            <param name="scale">Enable scaling? Default: "true"</param>
            <param name="keepRatio">Keep ratio while scaling? Default: "true"</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DistanceContoursXld(HalconDotNet.HXLDCont,System.String)">
            <summary>
              Calculate the pointwise distance from one contour to another.
              Instance represents: Contours for whose points the distances are calculated.
            </summary>
            <param name="contourTo">Contours to which the distances are calculated to.</param>
            <param name="mode">Compute the distance to points ('point_to_point') or to entire segments ('point_to_segment'). Default: "point_to_point"</param>
            <returns>Copy of ContourFrom containing the distances as an attribute.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DistanceCcMin(HalconDotNet.HXLDCont,System.String)">
            <summary>
              Calculate the minimum distance between two contours.
              Instance represents: First input contour.
            </summary>
            <param name="contour2">Second input contour.</param>
            <param name="mode">Distance calculation mode. Default: "fast_point_to_segment"</param>
            <returns>Minimum distance between the two contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DistanceCc(HalconDotNet.HXLDCont,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Calculate the distance between two contours.
              Instance represents: First input contour.
            </summary>
            <param name="contour2">Second input contour.</param>
            <param name="mode">Distance calculation mode. Default: "point_to_point"</param>
            <param name="distanceMin">Minimum distance between both contours.</param>
            <param name="distanceMax">Maximum distance between both contours.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DistanceCc(HalconDotNet.HXLDCont,System.String,System.Double@,System.Double@)">
            <summary>
              Calculate the distance between two contours.
              Instance represents: First input contour.
            </summary>
            <param name="contour2">Second input contour.</param>
            <param name="mode">Distance calculation mode. Default: "point_to_point"</param>
            <param name="distanceMin">Minimum distance between both contours.</param>
            <param name="distanceMax">Maximum distance between both contours.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DistanceSc(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Calculate the distance between a line segment and one contour.
              Instance represents: Input contour.
            </summary>
            <param name="row1">Row coordinate of the first point of the line segment.</param>
            <param name="column1">Column coordinate of the first point of the line segment.</param>
            <param name="row2">Row coordinate of the second point of the line segment.</param>
            <param name="column2">Column coordinate of the second point of the line segment.</param>
            <param name="distanceMin">Minimum distance between the line segment and the contour.</param>
            <param name="distanceMax">Maximum distance between the line segment and the contour.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DistanceSc(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
              Calculate the distance between a line segment and one contour.
              Instance represents: Input contour.
            </summary>
            <param name="row1">Row coordinate of the first point of the line segment.</param>
            <param name="column1">Column coordinate of the first point of the line segment.</param>
            <param name="row2">Row coordinate of the second point of the line segment.</param>
            <param name="column2">Column coordinate of the second point of the line segment.</param>
            <param name="distanceMin">Minimum distance between the line segment and the contour.</param>
            <param name="distanceMax">Maximum distance between the line segment and the contour.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DistanceLc(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Calculate the distance between a line and one contour.
              Instance represents: Input contour.
            </summary>
            <param name="row1">Row coordinate of the first point of the line.</param>
            <param name="column1">Column coordinate of the first point of the line.</param>
            <param name="row2">Row coordinate of the second point of the line.</param>
            <param name="column2">Column coordinate of the second point of the line.</param>
            <param name="distanceMin">Minimum distance between the line and the contour.</param>
            <param name="distanceMax">Maximum distance between the line and the contour.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DistanceLc(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
              Calculate the distance between a line and one contour.
              Instance represents: Input contour.
            </summary>
            <param name="row1">Row coordinate of the first point of the line.</param>
            <param name="column1">Column coordinate of the first point of the line.</param>
            <param name="row2">Row coordinate of the second point of the line.</param>
            <param name="column2">Column coordinate of the second point of the line.</param>
            <param name="distanceMin">Minimum distance between the line and the contour.</param>
            <param name="distanceMax">Maximum distance between the line and the contour.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DistancePc(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Calculate the distance between a point and one contour.
              Instance represents: Input contour.
            </summary>
            <param name="row">Row coordinate of the point.</param>
            <param name="column">Column coordinate of the point.</param>
            <param name="distanceMin">Minimum distance between the point and the contour.</param>
            <param name="distanceMax">Maximum distance between the point and the contour.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.DistancePc(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
              Calculate the distance between a point and one contour.
              Instance represents: Input contour.
            </summary>
            <param name="row">Row coordinate of the point.</param>
            <param name="column">Column coordinate of the point.</param>
            <param name="distanceMin">Minimum distance between the point and the contour.</param>
            <param name="distanceMax">Maximum distance between the point and the contour.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.ReadContourXldDxf(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Read XLD contours from a DXF file.
              Modified instance represents: Read XLD contours.
            </summary>
            <param name="fileName">Name of the DXF file.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the DXF input. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the DXF input. Default: []</param>
            <returns>Status information.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.ReadContourXldDxf(System.String,System.String,System.Double)">
            <summary>
              Read XLD contours from a DXF file.
              Modified instance represents: Read XLD contours.
            </summary>
            <param name="fileName">Name of the DXF file.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the DXF input. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the DXF input. Default: []</param>
            <returns>Status information.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.WriteContourXldDxf(System.String)">
            <summary>
              Write XLD contours to a file in DXF format.
              Instance represents: XLD contours to be written.
            </summary>
            <param name="fileName">Name of the DXF file.</param>
        </member>
        <member name="M:HalconDotNet.HXLDCont.SelectXldPoint(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Choose all contours or polygons containing a given point.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row">Line coordinate of the test point. Default: 100.0</param>
            <param name="column">Column coordinate of the test point. Default: 100.0</param>
            <returns>All contours or polygons containing the test point.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.SelectXldPoint(System.Double,System.Double)">
            <summary>
              Choose all contours or polygons containing a given point.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row">Line coordinate of the test point. Default: 100.0</param>
            <param name="column">Column coordinate of the test point. Default: 100.0</param>
            <returns>All contours or polygons containing the test point.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.SelectShapeXld(HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Select contours or polygons using shape features.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="features">Shape features to be checked. Default: "area"</param>
            <param name="operation">Operation type between the individual features. Default: "and"</param>
            <param name="min">Lower limits of the features or 'min'. Default: 150.0</param>
            <param name="max">Upper limits of the features or 'max'. Default: 99999.0</param>
            <returns>Contours or polygons fulfilling the condition(s).</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.SelectShapeXld(System.String,System.String,System.Double,System.Double)">
            <summary>
              Select contours or polygons using shape features.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="features">Shape features to be checked. Default: "area"</param>
            <param name="operation">Operation type between the individual features. Default: "and"</param>
            <param name="min">Lower limits of the features or 'min'. Default: 150.0</param>
            <param name="max">Upper limits of the features or 'max'. Default: 99999.0</param>
            <returns>Contours or polygons fulfilling the condition(s).</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.ShapeTransXld(System.String)">
            <summary>
              Transform the shape of contours or polygons.
              Instance represents: Contours or polygons to be transformed.
            </summary>
            <param name="type">Type of transformation. Default: "convex"</param>
            <returns>Transformed contours respectively polygons.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.RadialDistortionSelfCalibration(System.Int32,System.Int32,System.Double,System.Int32,System.String,System.String,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Calibrate the radial distortion.
              Instance represents: Contours that are available for the calibration.
            </summary>
            <param name="width">Width of the images from which the contours were extracted. Default: 640</param>
            <param name="height">Height of the images from which the contours were extracted. Default: 480</param>
            <param name="inlierThreshold">Threshold for the classification of outliers. Default: 0.05</param>
            <param name="randSeed">Seed value for the random number generator. Default: 42</param>
            <param name="distortionModel">Determines the distortion model. Default: "division"</param>
            <param name="distortionCenter">Determines how the distortion center will be estimated. Default: "variable"</param>
            <param name="principalPointVar">Controls the deviation of the distortion center from the image center; larger values allow larger deviations from the image center; 0 switches the penalty term off. Default: 0.0</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <returns>Contours that were used for the calibration</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.ContourToWorldPlaneXld(HalconDotNet.HTuple,HalconDotNet.HPose,HalconDotNet.HTuple)">
            <summary>
              Transform an XLD contour into the plane z=0 of a world coordinate system.
              Instance represents: Input XLD contours to be transformed in image coordinates.
            </summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="worldPose">3D pose of the world coordinate system in camera coordinates.</param>
            <param name="scale">Scale or dimension Default: "m"</param>
            <returns>Transformed XLD contours in world coordinates.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.ContourToWorldPlaneXld(HalconDotNet.HTuple,HalconDotNet.HPose,System.String)">
            <summary>
              Transform an XLD contour into the plane z=0 of a world coordinate system.
              Instance represents: Input XLD contours to be transformed in image coordinates.
            </summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="worldPose">3D pose of the world coordinate system in camera coordinates.</param>
            <param name="scale">Scale or dimension Default: "m"</param>
            <returns>Transformed XLD contours in world coordinates.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDCont.ChangeRadialDistortionContoursXld(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Change the radial distortion of contours.
              Instance represents: Original contours.
            </summary>
            <param name="camParamIn">Internal camera parameter for Contours.</param>
            <param name="camParamOut">Internal camera parameter for ContoursRectified.</param>
            <returns>Resulting contours with modified radial distortion.</returns>
        </member>
        <member name="P:HalconDotNet.HXLDCont.Item(HalconDotNet.HTuple)">
            <summary>Returns the iconic object(s) at the specified index</summary>
        </member>
        <member name="T:HalconDotNet.HXLDPoly">
            <summary>Represents an instance of an XLD polygon object(-array).</summary>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.#ctor">
            <summary>Create an uninitialized iconic object</summary>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.Union2ClosedPolygonsXld(HalconDotNet.HXLDPoly)">
            <summary>
              Compute the union of closed polygons.
              Instance represents: Polygons enclosing the first region.
            </summary>
            <param name="polygons2">Polygons enclosing the second region.</param>
            <returns>Polygons enclosing the union.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.SymmDifferenceClosedPolygonsXld(HalconDotNet.HXLDPoly)">
            <summary>
              Compute the symmetric difference of closed polygons.
              Instance represents: Polygons enclosing the first region.
            </summary>
            <param name="polygons2">Polygons enclosing the second region.</param>
            <returns>Polygons enclosing the symmetric difference.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.DifferenceClosedPolygonsXld(HalconDotNet.HXLDPoly)">
            <summary>
              Compute the difference of closed polygons.
              Instance represents: Polygons enclosing the region from which the second region is subtracted.
            </summary>
            <param name="sub">Polyongs enclosing the region that is subtracted from the first region.</param>
            <returns>Polygons enclosing the difference.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.IntersectionClosedPolygonsXld(HalconDotNet.HXLDPoly)">
            <summary>
              Intersect closed polygons.
              Instance represents: Polygons enclosing the first region to be intersected.
            </summary>
            <param name="polygons2">Polygons enclosing the second region to be intersected.</param>
            <returns>Polygons enclosing the intersection.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.ReadPolygonXldArcInfo(System.String)">
            <summary>
              Read XLD polygons from a file in ARC/INFO generate format.
              Modified instance represents: Read XLD polygons.
            </summary>
            <param name="fileName">Name of the ARC/INFO file.</param>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.WritePolygonXldArcInfo(System.String)">
            <summary>
              Write XLD polygons to a file in ARC/INFO generate format.
              Instance represents: XLD polygons to be written.
            </summary>
            <param name="fileName">Name of the ARC/INFO file.</param>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.CombineRoadsXld(HalconDotNet.HXLDModPara,HalconDotNet.HXLDExtPara,HalconDotNet.HXLDPoly,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Combine road hypotheses from two resolution levels.
              Instance represents: XLD polygons to be examined.
            </summary>
            <param name="modParallels">Modified parallels obtained from EdgePolygons.</param>
            <param name="extParallels">Extended parallels obtained from EdgePolygons.</param>
            <param name="centerLines">Road-center-line polygons to be examined.</param>
            <param name="maxAngleParallel">Maximum angle between two parallel line segments. Default: 0.523598775598</param>
            <param name="maxAngleColinear">Maximum angle between two collinear line segments. Default: 0.261799387799</param>
            <param name="maxDistanceParallel">Maximum distance between two parallel line segments. Default: 40</param>
            <param name="maxDistanceColinear">Maximum distance between two collinear line segments. Default: 40</param>
            <returns>Roadsides found.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.CombineRoadsXld(HalconDotNet.HXLDModPara,HalconDotNet.HXLDExtPara,HalconDotNet.HXLDPoly,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Combine road hypotheses from two resolution levels.
              Instance represents: XLD polygons to be examined.
            </summary>
            <param name="modParallels">Modified parallels obtained from EdgePolygons.</param>
            <param name="extParallels">Extended parallels obtained from EdgePolygons.</param>
            <param name="centerLines">Road-center-line polygons to be examined.</param>
            <param name="maxAngleParallel">Maximum angle between two parallel line segments. Default: 0.523598775598</param>
            <param name="maxAngleColinear">Maximum angle between two collinear line segments. Default: 0.261799387799</param>
            <param name="maxDistanceParallel">Maximum distance between two parallel line segments. Default: 40</param>
            <param name="maxDistanceColinear">Maximum distance between two collinear line segments. Default: 40</param>
            <returns>Roadsides found.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.GenParallelsXld(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Extract parallel XLD polygons.
              Instance represents: Input polygons.
            </summary>
            <param name="len">Minimum length of the individual polygon segments. Default: 10.0</param>
            <param name="dist">Maximum distance between the polygon segments. Default: 30.0</param>
            <param name="alpha">Maximum angle difference of the polygon segments. Default: 0.15</param>
            <param name="merge">Should adjacent parallel relations be merged? Default: "true"</param>
            <returns>Parallel polygons.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.GenParallelsXld(System.Double,System.Double,System.Double,System.String)">
            <summary>
              Extract parallel XLD polygons.
              Instance represents: Input polygons.
            </summary>
            <param name="len">Minimum length of the individual polygon segments. Default: 10.0</param>
            <param name="dist">Maximum distance between the polygon segments. Default: 30.0</param>
            <param name="alpha">Maximum angle difference of the polygon segments. Default: 0.15</param>
            <param name="merge">Should adjacent parallel relations be merged? Default: "true"</param>
            <returns>Parallel polygons.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.GetLinesXld(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Return an XLD polygon's data (as lines).
              Instance represents: Input XLD polygons.
            </summary>
            <param name="beginRow">Row coordinates of the lines' start points.</param>
            <param name="beginCol">Column coordinates of the lines' start points.</param>
            <param name="endRow">Column coordinates of the lines' end points.</param>
            <param name="endCol">Column coordinates of the lines' end points.</param>
            <param name="length">Lengths of the line segments.</param>
            <param name="phi">Angles of the line segments.</param>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.GetPolygonXld(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Return an XLD polygon's data.
              Instance represents: Input XLD polygon.
            </summary>
            <param name="row">Row coordinates of the polygons' points.</param>
            <param name="col">Column coordinates of the polygons' points.</param>
            <param name="length">Lengths of the line segments.</param>
            <param name="phi">Angles of the line segments.</param>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.SplitContoursXld(System.String,System.Int32,System.Int32)">
            <summary>
              Split XLD contours at dominant points.
              Instance represents: Polygons for which the corresponding contours are to be split.
            </summary>
            <param name="mode">Mode for the splitting of the contours. Default: "polygon"</param>
            <param name="weight">Weight for the sensitiveness. Default: 1</param>
            <param name="smooth">Width of the smoothing mask. Default: 5</param>
            <returns>Split contours.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.AffineTransPolygonXld(HalconDotNet.HHomMat2D)">
            <summary>
              Apply an arbitrary affine transformation to XLD polygons.
              Instance represents: Input XLD polygons.
            </summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <returns>Transformed XLD polygons.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.ObjDiff(HalconDotNet.HXLDPoly)">
            <summary>
              Calculate the difference of two object tuples.
              Instance represents: Object tuple 1.
            </summary>
            <param name="objectsSub">Object tuple 2.</param>
            <returns>Objects from Objects that are not part of ObjectsSub.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.CopyObj(System.Int32,System.Int32)">
            <summary>
              Copy an iconic object in the HALCON database.
              Instance represents: Objects to be copied.
            </summary>
            <param name="index">Starting index of the objects to be copied. Default: 1</param>
            <param name="numObj">Number of objects to be copied or -1. Default: 1</param>
            <returns>Copied objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.ConcatObj(HalconDotNet.HXLDPoly)">
            <summary>
              Concatenate two iconic object tuples.
              Instance represents: Object tuple 1.
            </summary>
            <param name="objects2">Object tuple 2.</param>
            <returns>Concatenated objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.SelectObj(HalconDotNet.HTuple)">
            <summary>
              Select objects from an object tuple.
              Instance represents: Input objects.
            </summary>
            <param name="index">Indices of the objects to be selected. Default: 1</param>
            <returns>Selected objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.SelectObj(System.Int32)">
            <summary>
              Select objects from an object tuple.
              Instance represents: Input objects.
            </summary>
            <param name="index">Indices of the objects to be selected. Default: 1</param>
            <returns>Selected objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.CompareObj(HalconDotNet.HXLDPoly,HalconDotNet.HTuple)">
            <summary>
              Compare iconic objects regarding equality.
              Instance represents: Reference objects.
            </summary>
            <param name="objects2">Test objects.</param>
            <param name="epsilon">Maximum allowed difference between two gray values or  coordinates etc. Default: 0.0</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.CompareObj(HalconDotNet.HXLDPoly,System.Double)">
            <summary>
              Compare iconic objects regarding equality.
              Instance represents: Reference objects.
            </summary>
            <param name="objects2">Test objects.</param>
            <param name="epsilon">Maximum allowed difference between two gray values or  coordinates etc. Default: 0.0</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.TestEqualObj(HalconDotNet.HXLDPoly)">
            <summary>
              Compare image objects regarding equality.
              Instance represents: Test objects.
            </summary>
            <param name="objects2">Comparative objects.</param>
            <returns>boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.GenRegionPolygonXld(System.String)">
            <summary>
              Create a region from an XLD polygon.
              Instance represents: Input polygon(s).
            </summary>
            <param name="mode">Fill mode of the region(s). Default: "filled"</param>
            <returns>Created region(s).</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.GenGridRectificationMap(HalconDotNet.HImage,HalconDotNet.HXLDPoly@,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
              Instance represents: Input contours.
            </summary>
            <param name="image">Input image.</param>
            <param name="meshes">Output contours.</param>
            <param name="gridSpacing">Distance of the grid points in the rectified image.</param>
            <param name="rotation">Rotation to be applied to the point grid. Default: "auto"</param>
            <param name="row">Row coordinates of the grid points.</param>
            <param name="column">Column coordinates of the grid points.</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
            <returns>Image containing the mapping data.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.GenGridRectificationMap(HalconDotNet.HImage,HalconDotNet.HXLDPoly@,System.Int32,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
              Instance represents: Input contours.
            </summary>
            <param name="image">Input image.</param>
            <param name="meshes">Output contours.</param>
            <param name="gridSpacing">Distance of the grid points in the rectified image.</param>
            <param name="rotation">Rotation to be applied to the point grid. Default: "auto"</param>
            <param name="row">Row coordinates of the grid points.</param>
            <param name="column">Column coordinates of the grid points.</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
            <returns>Image containing the mapping data.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.ReadPolygonXldDxf(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Read XLD polygons from a DXF file.
              Modified instance represents: Read XLD polygons.
            </summary>
            <param name="fileName">Name of the DXF file.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the DXF input. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the DXF input. Default: []</param>
            <returns>Status information.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.ReadPolygonXldDxf(System.String,System.String,System.Double)">
            <summary>
              Read XLD polygons from a DXF file.
              Modified instance represents: Read XLD polygons.
            </summary>
            <param name="fileName">Name of the DXF file.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the DXF input. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the DXF input. Default: []</param>
            <returns>Status information.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.WritePolygonXldDxf(System.String)">
            <summary>
              Write XLD polygons to a file in DXF format.
              Instance represents: XLD polygons to be written.
            </summary>
            <param name="fileName">Name of the DXF file.</param>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.SelectXldPoint(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Choose all contours or polygons containing a given point.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row">Line coordinate of the test point. Default: 100.0</param>
            <param name="column">Column coordinate of the test point. Default: 100.0</param>
            <returns>All contours or polygons containing the test point.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.SelectXldPoint(System.Double,System.Double)">
            <summary>
              Choose all contours or polygons containing a given point.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row">Line coordinate of the test point. Default: 100.0</param>
            <param name="column">Column coordinate of the test point. Default: 100.0</param>
            <returns>All contours or polygons containing the test point.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.SelectShapeXld(HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Select contours or polygons using shape features.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="features">Shape features to be checked. Default: "area"</param>
            <param name="operation">Operation type between the individual features. Default: "and"</param>
            <param name="min">Lower limits of the features or 'min'. Default: 150.0</param>
            <param name="max">Upper limits of the features or 'max'. Default: 99999.0</param>
            <returns>Contours or polygons fulfilling the condition(s).</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.SelectShapeXld(System.String,System.String,System.Double,System.Double)">
            <summary>
              Select contours or polygons using shape features.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="features">Shape features to be checked. Default: "area"</param>
            <param name="operation">Operation type between the individual features. Default: "and"</param>
            <param name="min">Lower limits of the features or 'min'. Default: 150.0</param>
            <param name="max">Upper limits of the features or 'max'. Default: 99999.0</param>
            <returns>Contours or polygons fulfilling the condition(s).</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPoly.ShapeTransXld(System.String)">
            <summary>
              Transform the shape of contours or polygons.
              Instance represents: Contours or polygons to be transformed.
            </summary>
            <param name="type">Type of transformation. Default: "convex"</param>
            <returns>Transformed contours respectively polygons.</returns>
        </member>
        <member name="P:HalconDotNet.HXLDPoly.Item(HalconDotNet.HTuple)">
            <summary>Returns the iconic object(s) at the specified index</summary>
        </member>
        <member name="T:HalconDotNet.HGnuplot">
            <summary>Represents an instance of a connection to a gnuplot process.</summary>
        </member>
        <member name="M:HalconDotNet.HGnuplot.GnuplotPlotFunct1d(HalconDotNet.HFunction1D)">
            <summary>
              Plot a function using gnuplot.
              Instance represents: Identifier for the gnuplot output stream.
            </summary>
            <param name="function">Function to be plotted.</param>
        </member>
        <member name="M:HalconDotNet.HGnuplot.GnuplotPlotCtrl(HalconDotNet.HTuple)">
            <summary>
              Plot control values using gnuplot.
              Instance represents: Identifier for the gnuplot output stream.
            </summary>
            <param name="values">Control values to be plotted (y-values).</param>
        </member>
        <member name="M:HalconDotNet.HGnuplot.GnuplotPlotImage(HalconDotNet.HImage,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Visualize images using gnuplot.
              Instance represents: Identifier for the gnuplot output stream.
            </summary>
            <param name="image">Image to be plotted.</param>
            <param name="samplesX">Number of samples in the x-direction. Default: 64</param>
            <param name="samplesY">Number of samples in the y-direction. Default: 64</param>
            <param name="viewRotX">Rotation of the plot about the x-axis. Default: 60</param>
            <param name="viewRotZ">Rotation of the plot about the z-axis. Default: 30</param>
            <param name="hidden3D">Plot the image with hidden surfaces removed. Default: "hidden3d"</param>
        </member>
        <member name="M:HalconDotNet.HGnuplot.GnuplotPlotImage(HalconDotNet.HImage,System.Int32,System.Int32,System.Double,System.Double,System.String)">
            <summary>
              Visualize images using gnuplot.
              Instance represents: Identifier for the gnuplot output stream.
            </summary>
            <param name="image">Image to be plotted.</param>
            <param name="samplesX">Number of samples in the x-direction. Default: 64</param>
            <param name="samplesY">Number of samples in the y-direction. Default: 64</param>
            <param name="viewRotX">Rotation of the plot about the x-axis. Default: 60</param>
            <param name="viewRotZ">Rotation of the plot about the z-axis. Default: 30</param>
            <param name="hidden3D">Plot the image with hidden surfaces removed. Default: "hidden3d"</param>
        </member>
        <member name="M:HalconDotNet.HGnuplot.GnuplotOpenFile(System.String)">
            <summary>
              Open a gnuplot file for visualization of images and control values.
              Modified instance represents: Identifier for the gnuplot output stream.
            </summary>
            <param name="fileName">Base name for control and data files.</param>
        </member>
        <member name="M:HalconDotNet.HGnuplot.GnuplotOpenPipe">
            <summary>
              Open a pipe to a gnuplot process for visualization of images and control values.
              Modified instance represents: Identifier for the gnuplot output stream.
            </summary>
        </member>
        <member name="T:HalconDotNet.HMessage">
            <summary>Represents an instance of a data container to be sent via message queues.</summary>
        </member>
        <member name="M:HalconDotNet.HMessage.#ctor">
            <summary>
              Create a new empty message.
              Modified instance represents: Handle of the newly created message.
            </summary>
        </member>
        <member name="M:HalconDotNet.HMessage.GetMessageParam(System.String,HalconDotNet.HTuple)">
            <summary>
              Query message parameters or information about the message.
              Instance represents: Message handle.
            </summary>
            <param name="genParamName">Names of the message parameters or info queries. Default: "message_keys"</param>
            <param name="key">Message keys the parameter/query should be applied to.</param>
            <returns>Values of the message parameters or info queries.</returns>
        </member>
        <member name="M:HalconDotNet.HMessage.GetMessageParam(System.String,System.String)">
            <summary>
              Query message parameters or information about the message.
              Instance represents: Message handle.
            </summary>
            <param name="genParamName">Names of the message parameters or info queries. Default: "message_keys"</param>
            <param name="key">Message keys the parameter/query should be applied to.</param>
            <returns>Values of the message parameters or info queries.</returns>
        </member>
        <member name="M:HalconDotNet.HMessage.SetMessageParam(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set message parameter or invoke commands on the message.
              Instance represents: Message handle.
            </summary>
            <param name="genParamName">Names of the message parameters or action commands. Default: "remove_key"</param>
            <param name="key">Message keys the parameter/command should be applied to.</param>
            <param name="genParamValue">Values of the message parameters or action commands.</param>
        </member>
        <member name="M:HalconDotNet.HMessage.SetMessageParam(System.String,System.String,HalconDotNet.HTuple)">
            <summary>
              Set message parameter or invoke commands on the message.
              Instance represents: Message handle.
            </summary>
            <param name="genParamName">Names of the message parameters or action commands. Default: "remove_key"</param>
            <param name="key">Message keys the parameter/command should be applied to.</param>
            <param name="genParamValue">Values of the message parameters or action commands.</param>
        </member>
        <member name="M:HalconDotNet.HMessage.GetMessageObj(System.String)">
            <summary>
              Retrieve an object associated with the key from the message.
              Instance represents: Message handle.
            </summary>
            <param name="key">Key string.</param>
            <returns>Tuple value retrieved from the message.</returns>
        </member>
        <member name="M:HalconDotNet.HMessage.SetMessageObj(HalconDotNet.HObject,System.String)">
            <summary>
              Add a key/object pair to the message.
              Instance represents: Message handle.
            </summary>
            <param name="objectData">Object to be associated with the key.</param>
            <param name="key">Key string.</param>
        </member>
        <member name="M:HalconDotNet.HMessage.GetMessageTuple(System.String)">
            <summary>
              Retrieve a tuple associated with the key from the message.
              Instance represents: Message handle.
            </summary>
            <param name="key">Key string.</param>
            <returns>Tuple value retrieved from the message.</returns>
        </member>
        <member name="M:HalconDotNet.HMessage.SetMessageTuple(System.String,HalconDotNet.HTuple)">
            <summary>
              Add a key/tuple pair to the message.
              Instance represents: Message handle.
            </summary>
            <param name="key">Key string.</param>
            <param name="tupleData">Tuple value to be associated with the key.</param>
        </member>
        <member name="M:HalconDotNet.HMessage.CreateMessage">
            <summary>
              Create a new empty message.
              Modified instance represents: Handle of the newly created message.
            </summary>
        </member>
        <member name="T:HalconDotNet.HWindow">
            <summary>Represents an instance of a HALCON window.</summary>
        </member>
        <member name="M:HalconDotNet.HWindow.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,System.String,System.String)">
            <summary>
              Open a graphics window.
              Modified instance represents: Window identifier.
            </summary>
            <param name="row">Row index of upper left corner. Default: 0</param>
            <param name="column">Column index of upper left corner. Default: 0</param>
            <param name="width">Width of the window. Default: 256</param>
            <param name="height">Height of the window. Default: 256</param>
            <param name="fatherWindow">Logical number of the father window. To specify the display as father you may enter 'root' or 0. Default: 0</param>
            <param name="mode">Window mode. Default: "visible"</param>
            <param name="machine">Name of the computer on which you want to open the window. Otherwise the empty string. Default: ""</param>
        </member>
        <member name="M:HalconDotNet.HWindow.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.String,System.String)">
            <summary>
              Open a graphics window.
              Modified instance represents: Window identifier.
            </summary>
            <param name="row">Row index of upper left corner. Default: 0</param>
            <param name="column">Column index of upper left corner. Default: 0</param>
            <param name="width">Width of the window. Default: 256</param>
            <param name="height">Height of the window. Default: 256</param>
            <param name="fatherWindow">Logical number of the father window. To specify the display as father you may enter 'root' or 0. Default: 0</param>
            <param name="mode">Window mode. Default: "visible"</param>
            <param name="machine">Name of the computer on which you want to open the window. Otherwise the empty string. Default: ""</param>
        </member>
        <member name="M:HalconDotNet.HWindow.CloseWindow">
            <summary>Closes the window.</summary>
        </member>
        <member name="M:HalconDotNet.HWindow.DispXld(HalconDotNet.HXLD)">
            <summary>
              Display an XLD object.
              Instance represents: Window id.
            </summary>
            <param name="XLDObject">XLD object to display.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.GetWindowBackgroundImage">
            <summary>
              Gets a copy of the background image of the HALCON window.
              Instance represents: HALCON Window ID.
            </summary>
            <returns>Copy of the background image.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.DetachBackgroundFromWindow">
            <summary>
              Detach the background image from a HALCON window.
              Instance represents: Window handle.
            </summary>
        </member>
        <member name="M:HalconDotNet.HWindow.AttachBackgroundToWindow(HalconDotNet.HImage)">
            <summary>
              Attach a background image to a HALCON window.
              Instance represents: Window handle.
            </summary>
            <param name="image">Background image.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DetachDrawingObjectFromWindow(HalconDotNet.HDrawingObject)">
            <summary>
              Detach an existing drawing object from a HALCON window.
              Instance represents: Window Handle.
            </summary>
            <param name="drawID">Handle of the drawing object.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.AttachDrawingObjectToWindow(HalconDotNet.HDrawingObject)">
            <summary>
              Attach an existing drawing object to a HALCON window.
              Instance represents: Window handle.
            </summary>
            <param name="drawID">Handle of the drawing object.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.UpdateWindowPose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Modify the pose of a 3D plot.
              Instance represents: Window identifier.
            </summary>
            <param name="lastRow">Row coordinate of the first point.</param>
            <param name="lastCol">Column coordinate of the first point.</param>
            <param name="currentRow">Row coordinate of the second point.</param>
            <param name="currentCol">Column coordinate of the second point.</param>
            <param name="mode">Navigation mode. Default: "rotate"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.UpdateWindowPose(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
              Modify the pose of a 3D plot.
              Instance represents: Window identifier.
            </summary>
            <param name="lastRow">Row coordinate of the first point.</param>
            <param name="lastCol">Column coordinate of the first point.</param>
            <param name="currentRow">Row coordinate of the second point.</param>
            <param name="currentCol">Column coordinate of the second point.</param>
            <param name="mode">Navigation mode. Default: "rotate"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.UnprojectCoordinates(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32@,System.Int32@,HalconDotNet.HTuple@)">
            <summary>
              Calculates image coordinates for a point in a 3D plot window.
              Instance represents: Window identifier.
            </summary>
            <param name="image">Displayed image.</param>
            <param name="row">Row coordinate in the window.</param>
            <param name="column">Column coordinate in the window.</param>
            <param name="imageRow">Row coordinate in the image.</param>
            <param name="imageColumn">Column coordinate in the image.</param>
            <param name="height">Height value.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.UnprojectCoordinates(HalconDotNet.HImage,System.Double,System.Double,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Calculates image coordinates for a point in a 3D plot window.
              Instance represents: Window identifier.
            </summary>
            <param name="image">Displayed image.</param>
            <param name="row">Row coordinate in the window.</param>
            <param name="column">Column coordinate in the window.</param>
            <param name="imageRow">Row coordinate in the image.</param>
            <param name="imageColumn">Column coordinate in the image.</param>
            <param name="height">Height value.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.GetOsWindowHandle(System.IntPtr@)">
            <summary>
              Get the operating system window handle.
              Instance represents: Window identifier.
            </summary>
            <param name="OSDisplayHandle">Operating system display handle (under Unix-like systems only).</param>
            <returns>Operating system window handle.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.SetWindowDc(System.IntPtr)">
            <summary>
              Set the device context of a virtual graphics window (Windows NT).
              Instance represents: Window identifier.
            </summary>
            <param name="WINHDC">device context of WINHWnd.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.NewExternWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Create a virtual graphics window under Windows.
              Modified instance represents: Window identifier.
            </summary>
            <param name="WINHWnd">Windows window handle of a previously created window.</param>
            <param name="row">Row coordinate of upper left corner. Default: 0</param>
            <param name="column">Column coordinate of upper left corner. Default: 0</param>
            <param name="width">Width of the window. Default: 512</param>
            <param name="height">Height of the window. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SlideImage(HalconDotNet.HWindow,HalconDotNet.HWindow)">
            <summary>
              Interactive output from two window buffers.
              Instance represents: Logical window number of the "`upper window"'.
            </summary>
            <param name="windowHandleSource2">Logical window number of the "`lower window"'.</param>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetWindowExtents(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Modify position and size of a window.
              Instance represents: Window identifier.
            </summary>
            <param name="row">Row index of upper left corner in target position. Default: 0</param>
            <param name="column">Column index of upper left corner in target position. Default: 0</param>
            <param name="width">Width of the window. Default: 512</param>
            <param name="height">Height of the window. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HWindow.OpenWindow(System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,System.String,System.String)">
            <summary>
              Open a graphics window.
              Modified instance represents: Window identifier.
            </summary>
            <param name="row">Row index of upper left corner. Default: 0</param>
            <param name="column">Column index of upper left corner. Default: 0</param>
            <param name="width">Width of the window. Default: 256</param>
            <param name="height">Height of the window. Default: 256</param>
            <param name="fatherWindow">Logical number of the father window. To specify the display as father you may enter 'root' or 0. Default: 0</param>
            <param name="mode">Window mode. Default: "visible"</param>
            <param name="machine">Name of the computer on which you want to open the window. Otherwise the empty string. Default: ""</param>
        </member>
        <member name="M:HalconDotNet.HWindow.OpenWindow(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.String,System.String)">
            <summary>
              Open a graphics window.
              Modified instance represents: Window identifier.
            </summary>
            <param name="row">Row index of upper left corner. Default: 0</param>
            <param name="column">Column index of upper left corner. Default: 0</param>
            <param name="width">Width of the window. Default: 256</param>
            <param name="height">Height of the window. Default: 256</param>
            <param name="fatherWindow">Logical number of the father window. To specify the display as father you may enter 'root' or 0. Default: 0</param>
            <param name="mode">Window mode. Default: "visible"</param>
            <param name="machine">Name of the computer on which you want to open the window. Otherwise the empty string. Default: ""</param>
        </member>
        <member name="M:HalconDotNet.HWindow.OpenTextwindow(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,HalconDotNet.HTuple,System.String,System.String)">
            <summary>
              Open a textual window.
              Modified instance represents: Window identifier.
            </summary>
            <param name="row">Row index of upper left corner. Default: 0</param>
            <param name="column">Column index of upper left corner. Default: 0</param>
            <param name="width">Window's width. Default: 256</param>
            <param name="height">Window's height. Default: 256</param>
            <param name="borderWidth">Window border's width. Default: 2</param>
            <param name="borderColor">Window border's color. Default: "white"</param>
            <param name="backgroundColor">Background color. Default: "black"</param>
            <param name="fatherWindow">Logical number of the father window. For the display as father you may specify 'root' or 0. Default: 0</param>
            <param name="mode">Window mode. Default: "visible"</param>
            <param name="machine">Computer name, where the window has to be opened or empty string. Default: ""</param>
        </member>
        <member name="M:HalconDotNet.HWindow.OpenTextwindow(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.IntPtr,System.String,System.String)">
            <summary>
              Open a textual window.
              Modified instance represents: Window identifier.
            </summary>
            <param name="row">Row index of upper left corner. Default: 0</param>
            <param name="column">Column index of upper left corner. Default: 0</param>
            <param name="width">Window's width. Default: 256</param>
            <param name="height">Window's height. Default: 256</param>
            <param name="borderWidth">Window border's width. Default: 2</param>
            <param name="borderColor">Window border's color. Default: "white"</param>
            <param name="backgroundColor">Background color. Default: "black"</param>
            <param name="fatherWindow">Logical number of the father window. For the display as father you may specify 'root' or 0. Default: 0</param>
            <param name="mode">Window mode. Default: "visible"</param>
            <param name="machine">Computer name, where the window has to be opened or empty string. Default: ""</param>
        </member>
        <member name="M:HalconDotNet.HWindow.MoveRectangle(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Copy inside an output window.
              Instance represents: Window identifier.
            </summary>
            <param name="row1">Row index of upper left corner of the source rectangle. Default: 0</param>
            <param name="column1">Column index of upper left corner of the source rectangle. Default: 0</param>
            <param name="row2">Row index of lower right corner of the source rectangle. Default: 64</param>
            <param name="column2">Column index of lower right corner of the source rectangle. Default: 64</param>
            <param name="destRow">Row index of upper left corner of the target position. Default: 64</param>
            <param name="destColumn">Column index of upper left corner of the target position. Default: 64</param>
        </member>
        <member name="M:HalconDotNet.HWindow.MoveRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Copy inside an output window.
              Instance represents: Window identifier.
            </summary>
            <param name="row1">Row index of upper left corner of the source rectangle. Default: 0</param>
            <param name="column1">Column index of upper left corner of the source rectangle. Default: 0</param>
            <param name="row2">Row index of lower right corner of the source rectangle. Default: 64</param>
            <param name="column2">Column index of lower right corner of the source rectangle. Default: 64</param>
            <param name="destRow">Row index of upper left corner of the target position. Default: 64</param>
            <param name="destColumn">Column index of upper left corner of the target position. Default: 64</param>
        </member>
        <member name="M:HalconDotNet.HWindow.GetWindowType">
            <summary>
              Get the window type.
              Instance represents: Window identifier.
            </summary>
            <returns>Window type</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.GetWindowPointer3(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Access to a window's pixel data.
              Instance represents: Window identifier.
            </summary>
            <param name="imageRed">Pointer on red channel of pixel data.</param>
            <param name="imageGreen">Pointer on green channel of pixel data.</param>
            <param name="imageBlue">Pointer on blue channel of pixel data.</param>
            <param name="width">Length of an image line.</param>
            <param name="height">Number of image lines.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.GetWindowExtents(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Information about a window's size and position.
              Instance represents: Window identifier.
            </summary>
            <param name="row">Row index of upper left corner of the window.</param>
            <param name="column">Column index of upper left corner of the window.</param>
            <param name="width">Window width.</param>
            <param name="height">Window height.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DumpWindowImage">
            <summary>
              Write the window content in an image object.
              Instance represents: Window identifier.
            </summary>
            <returns>Saved image.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.DumpWindow(HalconDotNet.HTuple,System.String)">
            <summary>
              Write the window content to a file.
              Instance represents: Window identifier.
            </summary>
            <param name="device">Name of the target device or of the graphic format. Default: "postscript"</param>
            <param name="fileName">File name (without extension). Default: "halcon_dump"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DumpWindow(System.String,System.String)">
            <summary>
              Write the window content to a file.
              Instance represents: Window identifier.
            </summary>
            <param name="device">Name of the target device or of the graphic format. Default: "postscript"</param>
            <param name="fileName">File name (without extension). Default: "halcon_dump"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.CopyRectangle(HalconDotNet.HWindow,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Copy all pixels within rectangles between output windows.
              Instance represents: Number of the source window.
            </summary>
            <param name="windowHandleDestination">Number of the destination window.</param>
            <param name="row1">Row index of upper left corner in the source window. Default: 0</param>
            <param name="column1">Column index of upper left corner in the source window. Default: 0</param>
            <param name="row2">Row index of lower right corner in the source window. Default: 128</param>
            <param name="column2">Column index of lower right corner in the source window. Default: 128</param>
            <param name="destRow">Row index of upper left corner in the target window. Default: 0</param>
            <param name="destColumn">Column index of upper left corner in the target window. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HWindow.CopyRectangle(HalconDotNet.HWindow,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Copy all pixels within rectangles between output windows.
              Instance represents: Number of the source window.
            </summary>
            <param name="windowHandleDestination">Number of the destination window.</param>
            <param name="row1">Row index of upper left corner in the source window. Default: 0</param>
            <param name="column1">Column index of upper left corner in the source window. Default: 0</param>
            <param name="row2">Row index of lower right corner in the source window. Default: 128</param>
            <param name="column2">Column index of lower right corner in the source window. Default: 128</param>
            <param name="destRow">Row index of upper left corner in the target window. Default: 0</param>
            <param name="destColumn">Column index of upper left corner in the target window. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HWindow.ClearWindow">
            <summary>
              Delete the contents of an output window.
              Instance represents: Window identifier.
            </summary>
        </member>
        <member name="M:HalconDotNet.HWindow.ClearRectangle(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Delete a rectangle on the output window.
              Instance represents: Window identifier.
            </summary>
            <param name="row1">Line index of upper left corner. Default: 10</param>
            <param name="column1">Column index of upper left corner. Default: 10</param>
            <param name="row2">Row index of lower right corner. Default: 118</param>
            <param name="column2">Column index of lower right corner. Default: 118</param>
        </member>
        <member name="M:HalconDotNet.HWindow.ClearRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Delete a rectangle on the output window.
              Instance represents: Window identifier.
            </summary>
            <param name="row1">Line index of upper left corner. Default: 10</param>
            <param name="column1">Column index of upper left corner. Default: 10</param>
            <param name="row2">Row index of lower right corner. Default: 118</param>
            <param name="column2">Column index of lower right corner. Default: 118</param>
        </member>
        <member name="M:HalconDotNet.HWindow.WriteString(HalconDotNet.HTuple)">
            <summary>
              Print text in a window.
              Instance represents: Window identifier.
            </summary>
            <param name="stringVal">Tuple of output values (all types). Default: "hello"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.WriteString(System.String)">
            <summary>
              Print text in a window.
              Instance represents: Window identifier.
            </summary>
            <param name="stringVal">Tuple of output values (all types). Default: "hello"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetTshape(System.String)">
            <summary>
              Set the shape of the text cursor.
              Instance represents: Window identifier.
            </summary>
            <param name="textCursor">Name of cursor shape. Default: "invisible"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetTposition(System.Int32,System.Int32)">
            <summary>
              Set the position of the text cursor.
              Instance represents: Window identifier.
            </summary>
            <param name="row">Row index of text cursor position. Default: 24</param>
            <param name="column">Column index of text cursor position. Default: 12</param>
        </member>
        <member name="M:HalconDotNet.HWindow.ReadString(System.String,System.Int32)">
            <summary>
              Read a string in a text window.
              Instance represents: Window identifier.
            </summary>
            <param name="inString">Default string (visible before input). Default: ""</param>
            <param name="length">Maximum number of characters. Default: 32</param>
            <returns>Read string.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.ReadChar(System.String@)">
            <summary>
              Read a character from a text window.
              Instance represents: Window identifier.
            </summary>
            <param name="code">Code for input character.</param>
            <returns>Input character (if it is not a control character).</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.NewLine">
            <summary>
              Set the position of the text cursor to the beginning of the next line.
              Instance represents: Window identifier.
            </summary>
        </member>
        <member name="M:HalconDotNet.HWindow.GetTshape">
            <summary>
              Get the shape of the text cursor.
              Instance represents: Window identifier.
            </summary>
            <returns>Name of the current text cursor.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.GetTposition(System.Int32@,System.Int32@)">
            <summary>
              Get cursor position.
              Instance represents: Window identifier.
            </summary>
            <param name="row">Row index of text cursor position.</param>
            <param name="column">Column index of text cursor position.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.GetFontExtents(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Get the maximum size of all characters of a font.
              Instance represents: Window identifier.
            </summary>
            <param name="maxDescent">Maximum extension below baseline.</param>
            <param name="maxWidth">Maximum character width.</param>
            <param name="maxHeight">Maximum character height.</param>
            <returns>Maximum height above baseline.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.GetStringExtents(HalconDotNet.HTuple,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Get the spatial size of a string.
              Instance represents: Window identifier.
            </summary>
            <param name="values">Values to consider. Default: "test_string"</param>
            <param name="descent">Maximum extension below baseline.</param>
            <param name="width">Text width.</param>
            <param name="height">Text height.</param>
            <returns>Maximum height above baseline.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.GetStringExtents(System.String,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Get the spatial size of a string.
              Instance represents: Window identifier.
            </summary>
            <param name="values">Values to consider. Default: "test_string"</param>
            <param name="descent">Maximum extension below baseline.</param>
            <param name="width">Text width.</param>
            <param name="height">Text height.</param>
            <returns>Maximum height above baseline.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.QueryFont">
            <summary>
              Query the available fonts.
              Instance represents: Window identifier.
            </summary>
            <returns>Tuple with available font names.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.QueryTshape">
            <summary>
              Query all shapes available for text cursors.
              Instance represents: Window identifier.
            </summary>
            <returns>Names of the available text cursors.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.SetFont(System.String)">
            <summary>
              Set the font used for text output.
              Instance represents: Window identifier.
            </summary>
            <param name="font">Name of new font.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.GetFont">
            <summary>
              Get the current font.
              Instance represents: Window identifier.
            </summary>
            <returns>Name of the current font.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.GetWindowParam(System.String)">
            <summary>
              Get window parameters.
              Instance represents: Window identifier.
            </summary>
            <param name="param">Name of the parameter. Default: "save_depth_buffer"</param>
            <returns>Value of the parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.SetWindowParam(System.String,HalconDotNet.HTuple)">
            <summary>
              Set window parameters.
              Instance represents: Window identifier.
            </summary>
            <param name="param">Name of the parameter. Default: "save_depth_buffer"</param>
            <param name="value">Value to be set. Default: "true"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetShape(System.String)">
            <summary>
              Define the region output shape.
              Instance represents: Window_id.
            </summary>
            <param name="shape">Region output mode. Default: "original"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetRgb(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set the color definition via RGB values.
              Instance represents: Window_id.
            </summary>
            <param name="red">Red component of the color. Default: 255</param>
            <param name="green">Green component of the color. Default: 0</param>
            <param name="blue">Blue component of the color. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetRgb(System.Int32,System.Int32,System.Int32)">
            <summary>
              Set the color definition via RGB values.
              Instance represents: Window_id.
            </summary>
            <param name="red">Red component of the color. Default: 255</param>
            <param name="green">Green component of the color. Default: 0</param>
            <param name="blue">Blue component of the color. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetPixel(HalconDotNet.HTuple)">
            <summary>
              Define a color lookup table index.
              Instance represents: Window_id.
            </summary>
            <param name="pixel">Color lookup table index. Default: 128</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetPixel(System.Int32)">
            <summary>
              Define a color lookup table index.
              Instance represents: Window_id.
            </summary>
            <param name="pixel">Color lookup table index. Default: 128</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetPartStyle(System.Int32)">
            <summary>
              Define an interpolation method for gray value output. 
              Instance represents: Window_id.
            </summary>
            <param name="style">Interpolation method for image output: 0 (fast, low quality) to 2 (slow, high quality). Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetPart(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Modify the displayed image part.
              Instance represents: Window_id.
            </summary>
            <param name="row1">Row of the upper left corner of the chosen image part. Default: 0</param>
            <param name="column1">Column of the upper left corner of the chosen image part. Default: 0</param>
            <param name="row2">Row of the lower right corner of the chosen image part. Default: -1</param>
            <param name="column2">Column of the lower right corner of the chosen image part. Default: -1</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetPaint(HalconDotNet.HTuple)">
            <summary>
              Define the gray value output mode.
              Instance represents: Window identifier.
            </summary>
            <param name="mode">Output mode. Additional parameters possible. Default: "default"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetLineWidth(System.Int32)">
            <summary>
              Define the line width for region contour output.
              Instance represents: Window_id.
            </summary>
            <param name="width">Line width for region output in contour mode. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetLineStyle(HalconDotNet.HTuple)">
            <summary>
              Define a contour output pattern.
              Instance represents: Window_id.
            </summary>
            <param name="style">Contour pattern. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetLineApprox(System.Int32)">
            <summary>
              Define the approximation error for contour display.
              Instance represents: Window_id.
            </summary>
            <param name="approximation">Maximum deviation from the original contour. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetInsert(System.String)">
            <summary>
              Define the pixel output function.
              Instance represents: Window_id.
            </summary>
            <param name="mode">Name of the display function. Default: "copy"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetHsi(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Define output colors (HSI-coded).
              Instance represents: Window_id.
            </summary>
            <param name="hue">Hue for region output. Default: 30</param>
            <param name="saturation">Saturation for region output. Default: 255</param>
            <param name="intensity">Intensity for region output. Default: 84</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetHsi(System.Int32,System.Int32,System.Int32)">
            <summary>
              Define output colors (HSI-coded).
              Instance represents: Window_id.
            </summary>
            <param name="hue">Hue for region output. Default: 30</param>
            <param name="saturation">Saturation for region output. Default: 255</param>
            <param name="intensity">Intensity for region output. Default: 84</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetGray(HalconDotNet.HTuple)">
            <summary>
              Define gray values for region output.
              Instance represents: Window_id.
            </summary>
            <param name="grayValues">Gray values for region output. Default: 255</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetGray(System.Int32)">
            <summary>
              Define gray values for region output.
              Instance represents: Window_id.
            </summary>
            <param name="grayValues">Gray values for region output. Default: 255</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetDraw(System.String)">
            <summary>
              Define the region fill mode.
              Instance represents: Window_id.
            </summary>
            <param name="mode">Fill mode for region output. Default: "fill"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetComprise(System.String)">
            <summary>
              Define the image matrix output clipping.
              Instance represents: Window_id.
            </summary>
            <param name="mode">Clipping mode for gray value output. Default: "object"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetColored(System.Int32)">
            <summary>
              Set multiple output colors.
              Instance represents: Window_id.
            </summary>
            <param name="numberOfColors">Number of output colors. Default: 12</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetColor(HalconDotNet.HTuple)">
            <summary>
              Set output color.
              Instance represents: Window_id.
            </summary>
            <param name="color">Output color names. Default: "white"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetColor(System.String)">
            <summary>
              Set output color.
              Instance represents: Window_id.
            </summary>
            <param name="color">Output color names. Default: "white"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.GetShape">
            <summary>
              Get the current region output shape.
              Instance represents: Window_id.
            </summary>
            <returns>Current region output shape.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.GetRgb(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Get the current color in RGB-coding.
              Instance represents: Window_id.
            </summary>
            <param name="red">The current color's red value.</param>
            <param name="green">The current color's green value.</param>
            <param name="blue">The current color's blue value.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.GetPixel">
            <summary>
              Get the current color lookup table index.
              Instance represents: Window_id.
            </summary>
            <returns>Index of the current color look-up table.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.GetPartStyle">
            <summary>
              Get the current interpolation mode for gray value display.
              Instance represents: Window_id.
            </summary>
            <returns>Interpolation mode for image display: 0 (fast, low quality) to 2 (slow, high quality).</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.GetPart(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Get the image part.
              Instance represents: Window_id.
            </summary>
            <param name="row1">Row index of the image part's upper left corner.</param>
            <param name="column1">Column index of the image part's upper left corner.</param>
            <param name="row2">Row index of the image part's lower right corner.</param>
            <param name="column2">Column index of the image part's lower right corner.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.GetPaint">
            <summary>
              Get the current display mode for gray values.
              Instance represents: Window_id.
            </summary>
            <returns>Name and parameter values of the current display mode.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.GetLineWidth">
            <summary>
              Get the current line width for contour display.
              Instance represents: Window_id.
            </summary>
            <returns>Current line width for contour display.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.GetLineStyle">
            <summary>
              Get the current graphic mode for contours.
              Instance represents: Window_id.
            </summary>
            <returns>Template for contour display.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.GetLineApprox">
            <summary>
              Get the current approximation error for contour display.
              Instance represents: Window_id.
            </summary>
            <returns>Current approximation error for contour display.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.GetInsert">
            <summary>
              Get the current display mode.
              Instance represents: Window_id.
            </summary>
            <returns>Display mode.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.GetHsi(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Get the HSI coding of the current color.
              Instance represents: Window_id.
            </summary>
            <param name="saturation">Saturation of the current color.</param>
            <param name="intensity">Intensity of the current color.</param>
            <returns>Hue (color value) of the current color.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.GetDraw">
            <summary>
              Get the current region fill mode.
              Instance represents: Window_id.
            </summary>
            <returns>Current region fill mode.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.QueryPaint">
            <summary>
              Query the gray value display modes.
              Instance represents: Window_id.
            </summary>
            <returns>Gray value display mode names.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.QueryInsert">
            <summary>
              Query the possible graphic modes.
              Instance represents: Window_id.
            </summary>
            <returns>Display function name.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.QueryGray">
            <summary>
              Query the displayable gray values.
              Instance represents: Window_id.
            </summary>
            <returns>Tuple of all displayable gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.QueryAllColors">
            <summary>
              Query all color names.
              Instance represents: Window_id.
            </summary>
            <returns>Color names.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.QueryColor">
            <summary>
              Query all color names displayable in the window.
              Instance represents: Window_id.
            </summary>
            <returns>Color names.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.GetIcon">
            <summary>
              Query the icon for region output
              Instance represents: Window_id.
            </summary>
            <returns>Icon for the regions center of gravity.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.SetIcon(HalconDotNet.HRegion)">
            <summary>
              Icon definition for region output.
              Instance represents: Window_id.
            </summary>
            <param name="icon">Icon for center of gravity.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispRegion(HalconDotNet.HRegion)">
            <summary>
              Displays regions in a window.
              Instance represents: Window identifier.
            </summary>
            <param name="dispRegions">Regions to display.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispRectangle2(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Displays arbitrarily oriented rectangles.
              Instance represents: Window identifier.
            </summary>
            <param name="centerRow">Row index of the center. Default: 48</param>
            <param name="centerCol">Column index of the center. Default: 64</param>
            <param name="phi">Orientation of rectangle in radians. Default: 0.0</param>
            <param name="length1">Half of the length of the longer side. Default: 48</param>
            <param name="length2">Half of the length of the shorter side. Default: 32</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispRectangle2(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Displays arbitrarily oriented rectangles.
              Instance represents: Window identifier.
            </summary>
            <param name="centerRow">Row index of the center. Default: 48</param>
            <param name="centerCol">Column index of the center. Default: 64</param>
            <param name="phi">Orientation of rectangle in radians. Default: 0.0</param>
            <param name="length1">Half of the length of the longer side. Default: 48</param>
            <param name="length2">Half of the length of the shorter side. Default: 32</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispRectangle1(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Display of rectangles aligned to the coordinate axes.
              Instance represents: Window identifier.
            </summary>
            <param name="row1">Row index of the upper left corner. Default: 16</param>
            <param name="column1">Column index of the upper left corner. Default: 16</param>
            <param name="row2">Row index of the lower right corner. Default: 48</param>
            <param name="column2">Column index of the lower right corner. Default: 80</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispRectangle1(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Display of rectangles aligned to the coordinate axes.
              Instance represents: Window identifier.
            </summary>
            <param name="row1">Row index of the upper left corner. Default: 16</param>
            <param name="column1">Column index of the upper left corner. Default: 16</param>
            <param name="row2">Row index of the lower right corner. Default: 48</param>
            <param name="column2">Column index of the lower right corner. Default: 80</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispPolygon(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Displays a polyline.
              Instance represents: Window identifier.
            </summary>
            <param name="row">Row index Default: [16,80,80]</param>
            <param name="column">Column index Default: [48,16,80]</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispLine(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Draws lines in a window.
              Instance represents: Window identifier.
            </summary>
            <param name="row1">Row index of the start. Default: 32.0</param>
            <param name="column1">Column index of the start. Default: 32.0</param>
            <param name="row2">Row index of end. Default: 64.0</param>
            <param name="column2">Column index of end. Default: 64.0</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Draws lines in a window.
              Instance represents: Window identifier.
            </summary>
            <param name="row1">Row index of the start. Default: 32.0</param>
            <param name="column1">Column index of the start. Default: 32.0</param>
            <param name="row2">Row index of end. Default: 64.0</param>
            <param name="column2">Column index of end. Default: 64.0</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispCross(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Double)">
            <summary>
              Displays crosses in a window.
              Instance represents: Window identifier.
            </summary>
            <param name="row">Row coordinate of the center. Default: 32.0</param>
            <param name="column">Column coordinate of the center. Default: 32.0</param>
            <param name="size">Length of the bars. Default: 6.0</param>
            <param name="angle">Orientation. Default: 0.0</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispCross(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Displays crosses in a window.
              Instance represents: Window identifier.
            </summary>
            <param name="row">Row coordinate of the center. Default: 32.0</param>
            <param name="column">Column coordinate of the center. Default: 32.0</param>
            <param name="size">Length of the bars. Default: 6.0</param>
            <param name="angle">Orientation. Default: 0.0</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispImage(HalconDotNet.HImage)">
            <summary>
              Displays gray value images.
              Instance represents: Window identifier.
            </summary>
            <param name="image">Gray value image to display.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispChannel(HalconDotNet.HImage,HalconDotNet.HTuple)">
            <summary>
              Displays images with several channels.
              Instance represents: Window identifier.
            </summary>
            <param name="multichannelImage">Multichannel images to be displayed.</param>
            <param name="channel">Number of channel or the numbers of the RGB-channels Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispChannel(HalconDotNet.HImage,System.Int32)">
            <summary>
              Displays images with several channels.
              Instance represents: Window identifier.
            </summary>
            <param name="multichannelImage">Multichannel images to be displayed.</param>
            <param name="channel">Number of channel or the numbers of the RGB-channels Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispColor(HalconDotNet.HImage)">
            <summary>
              Displays a color (RGB) image
              Instance represents: Window identifier.
            </summary>
            <param name="colorImage">Color image to display.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispEllipse(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Displays ellipses.
              Instance represents: Window identifier.
            </summary>
            <param name="centerRow">Row index of center. Default: 64</param>
            <param name="centerCol">Column index of center. Default: 64</param>
            <param name="phi">Orientation of the ellipse in radians Default: 0.0</param>
            <param name="radius1">Radius of major axis. Default: 24.0</param>
            <param name="radius2">Radius of minor axis. Default: 14.0</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispEllipse(System.Int32,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
              Displays ellipses.
              Instance represents: Window identifier.
            </summary>
            <param name="centerRow">Row index of center. Default: 64</param>
            <param name="centerCol">Column index of center. Default: 64</param>
            <param name="phi">Orientation of the ellipse in radians Default: 0.0</param>
            <param name="radius1">Radius of major axis. Default: 24.0</param>
            <param name="radius2">Radius of minor axis. Default: 14.0</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispDistribution(HalconDotNet.HTuple,System.Int32,System.Int32,System.Int32)">
            <summary>
              Displays a noise distribution.
              Instance represents: Window identifier.
            </summary>
            <param name="distribution">Gray value distribution (513 values).</param>
            <param name="row">Row index of center. Default: 256</param>
            <param name="column">Column index of center. Default: 256</param>
            <param name="scale">Size of display. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispCircle(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Displays circles in a window.
              Instance represents: Window identifier.
            </summary>
            <param name="row">Row index of the center. Default: 64</param>
            <param name="column">Column index of the center. Default: 64</param>
            <param name="radius">Radius of the circle. Default: 64</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispCircle(System.Double,System.Double,System.Double)">
            <summary>
              Displays circles in a window.
              Instance represents: Window identifier.
            </summary>
            <param name="row">Row index of the center. Default: 64</param>
            <param name="column">Column index of the center. Default: 64</param>
            <param name="radius">Radius of the circle. Default: 64</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispArrow(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Displays arrows in a window.
              Instance represents: Window identifier.
            </summary>
            <param name="row1">Row index of the start. Default: 10.0</param>
            <param name="column1">Column index of the start. Default: 10.0</param>
            <param name="row2">Row index of the end. Default: 118.0</param>
            <param name="column2">Column index of the end. Default: 118.0</param>
            <param name="size">Size of the arrowhead. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispArrow(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Displays arrows in a window.
              Instance represents: Window identifier.
            </summary>
            <param name="row1">Row index of the start. Default: 10.0</param>
            <param name="column1">Column index of the start. Default: 10.0</param>
            <param name="row2">Row index of the end. Default: 118.0</param>
            <param name="column2">Column index of the end. Default: 118.0</param>
            <param name="size">Size of the arrowhead. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispArc(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Displays circular arcs in a window.
              Instance represents: Window identifier.
            </summary>
            <param name="centerRow">Row coordinate of center point. Default: 64</param>
            <param name="centerCol">Column coordinate of center point. Default: 64</param>
            <param name="angle">Angle between start and end of the arc (in radians). Default: 3.1415926</param>
            <param name="beginRow">Row coordinate of the start of the arc. Default: 32</param>
            <param name="beginCol">Column coordinate of the start of the arc. Default: 32</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispArc(System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
              Displays circular arcs in a window.
              Instance represents: Window identifier.
            </summary>
            <param name="centerRow">Row coordinate of center point. Default: 64</param>
            <param name="centerCol">Column coordinate of center point. Default: 64</param>
            <param name="angle">Angle between start and end of the arc (in radians). Default: 3.1415926</param>
            <param name="beginRow">Row coordinate of the start of the arc. Default: 32</param>
            <param name="beginCol">Column coordinate of the start of the arc. Default: 32</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispObj(HalconDotNet.HObject)">
            <summary>
              Displays image objects (image, region, XLD).
              Instance represents: Window identifier.
            </summary>
            <param name="objectVal">Image object to be displayed.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetMshape(System.String)">
            <summary>
              Set the current mouse pointer shape.
              Instance represents: Window identifier.
            </summary>
            <param name="cursor">Mouse pointer name. Default: "arrow"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.GetMshape">
            <summary>
              Query the current mouse pointer shape.
              Instance represents: Window identifier.
            </summary>
            <returns>Mouse pointer name.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.QueryMshape">
            <summary>
              Query all available mouse pointer shapes.
              Instance represents: Window identifier.
            </summary>
            <returns>Available mouse pointer names.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.GetMpositionSubPix(System.Double@,System.Double@,System.Int32@)">
            <summary>
              Query the subpixel mouse position.
              Instance represents: Window identifier.
            </summary>
            <param name="row">Row coordinate of the mouse position in the window.</param>
            <param name="column">Column coordinate of the mouse position in the window.</param>
            <param name="button">Mouse button(s) pressed or 0.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.GetMposition(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Query the mouse position.
              Instance represents: Window identifier.
            </summary>
            <param name="row">Row coordinate of the mouse position in the window.</param>
            <param name="column">Column coordinate of the mouse position in the window.</param>
            <param name="button">Mouse button(s) pressed or 0.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.GetMbuttonSubPix(System.Double@,System.Double@,System.Int32@)">
            <summary>
              Wait until a mouse button is pressed and get the subpixel mouse position.
              Instance represents: Window identifier.
            </summary>
            <param name="row">Row coordinate of the mouse position in the window.</param>
            <param name="column">Column coordinate of the mouse position in the window.</param>
            <param name="button">Mouse button(s) pressed.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.GetMbutton(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Wait until a mouse button is pressed.
              Instance represents: Window identifier.
            </summary>
            <param name="row">Row coordinate of the mouse position in the window.</param>
            <param name="column">Column coordinate of the mouse position in the window.</param>
            <param name="button">Mouse button(s) pressed.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.WriteLut(System.String)">
            <summary>
              Write look-up-table (lut) as file.
              Instance represents: Window identifier.
            </summary>
            <param name="fileName">File name (of file containing the look-up-table). Default: "/tmp/lut"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DispLut(System.Int32,System.Int32,System.Int32)">
            <summary>
              Graphical view of the look-up-table (lut).
              Instance represents: Window identifier.
            </summary>
            <param name="row">Row of centre of the graphic. Default: 128</param>
            <param name="column">Column of centre of the graphic. Default: 128</param>
            <param name="scale">Scaling of the graphic. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HWindow.QueryLut">
            <summary>
              Query all available look-up-tables (lut).
              Instance represents: Window identifier.
            </summary>
            <returns>Names of look-up-tables.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawLut">
            <summary>
              Manipulate look-up-table (lut) interactively.
              Instance represents: Window identifier.
            </summary>
        </member>
        <member name="M:HalconDotNet.HWindow.GetLutStyle(System.Double@,System.Double@)">
            <summary>
              Get modification parameters of look-up-table (lut).
              Instance represents: Window identifier.
            </summary>
            <param name="saturation">Modification of saturation.</param>
            <param name="intensity">Modification of intensity.</param>
            <returns>Modification of color value.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.SetLutStyle(System.Double,System.Double,System.Double)">
            <summary>
              Changing the look-up-table (lut).
              Instance represents: Window identifier.
            </summary>
            <param name="hue">Modification of color value. Default: 0.0</param>
            <param name="saturation">Modification of saturation. Default: 1.5</param>
            <param name="intensity">Modification of intensity. Default: 1.5</param>
        </member>
        <member name="M:HalconDotNet.HWindow.GetLut">
            <summary>
              Get current look-up-table (lut).
              Instance represents: Window identifier.
            </summary>
            <returns>Name of look-up-table or tuple of RGB-values.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.SetLut(HalconDotNet.HTuple)">
            <summary>
              Set "`look-up-table"' (lut).
              Instance represents: Window identifier.
            </summary>
            <param name="lookUpTable">Name of look-up-table, values of look-up-table (RGB) or file name. Default: "default"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.SetLut(System.String)">
            <summary>
              Set "`look-up-table"' (lut).
              Instance represents: Window identifier.
            </summary>
            <param name="lookUpTable">Name of look-up-table, values of look-up-table (RGB) or file name. Default: "default"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.GetFix">
            <summary>
              Get mode of fixing of current look-up-table (lut).
              Instance represents: Window identifier.
            </summary>
            <returns>Current Mode of fixing.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.SetFix(System.String)">
            <summary>
              Set fixing of "`look-up-table"' (lut)
              Instance represents: Window identifier.
            </summary>
            <param name="mode">Mode of fixing. Default: "true"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.GetFixedLut">
            <summary>
              Get fixing of "`look-up-table"' (lut) for "`real color images"'
              Instance represents: Window identifier.
            </summary>
            <returns>Mode of fixing.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.SetFixedLut(System.String)">
            <summary>
              Fix "`look-up-table"' (lut) for "`real color images"'.
              Instance represents: Window identifier.
            </summary>
            <param name="mode">Mode of fixing. Default: "true"</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DragRegion3(HalconDotNet.HRegion,HalconDotNet.HRegion,System.Int32,System.Int32)">
            <summary>
              Interactive movement of a region with restriction of positions.
              Instance represents: Window identifier.
            </summary>
            <param name="sourceRegion">Regions to move.</param>
            <param name="maskRegion">Points on which it is allowed for a region to move.</param>
            <param name="row">Row index of the reference point. Default: 100</param>
            <param name="column">Column index of the reference point. Default: 100</param>
            <returns>Moved regions.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.DragRegion2(HalconDotNet.HRegion,System.Int32,System.Int32)">
            <summary>
              Interactive movement of a region with fixpoint specification.
              Instance represents: Window identifier.
            </summary>
            <param name="sourceRegion">Regions to move.</param>
            <param name="row">Row index of the reference point. Default: 100</param>
            <param name="column">Column index of the reference point. Default: 100</param>
            <returns>Moved regions.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.DragRegion1(HalconDotNet.HRegion)">
            <summary>
              Interactive moving of a region.
              Instance represents: Window identifier.
            </summary>
            <param name="sourceRegion">Regions to move.</param>
            <returns>Moved Regions.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawNurbsInterpMod(System.String,System.String,System.String,System.String,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Interactive modification of a NURBS curve using interpolation.
              Instance represents: Window identifier.
            </summary>
            <param name="rotate">Enable rotation? Default: "true"</param>
            <param name="move">Enable moving? Default: "true"</param>
            <param name="scale">Enable scaling? Default: "true"</param>
            <param name="keepRatio">Keep ratio while scaling? Default: "true"</param>
            <param name="edit">Enable editing? Default: "true"</param>
            <param name="degree">The degree $p$ of the NURBS curve. Reasonable values are 3 to 5. Default: 3</param>
            <param name="rowsIn">Row coordinates of the input interpolation points.</param>
            <param name="colsIn">Column coordinates of the input interpolation points.</param>
            <param name="tangentsIn">Input tangents.</param>
            <param name="controlRows">Row coordinates of the control polygon.</param>
            <param name="controlCols">Column coordinates of the control polygon.</param>
            <param name="knots">Knot vector.</param>
            <param name="rows">Row coordinates of the points specified by the user.</param>
            <param name="cols">Column coordinates of the points specified by the user.</param>
            <param name="tangents">Tangents specified by the user.</param>
            <returns>Contour of the modified curve.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawNurbsInterp(System.String,System.String,System.String,System.String,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Interactive drawing of a NURBS curve using interpolation.
              Instance represents: Window identifier.
            </summary>
            <param name="rotate">Enable rotation? Default: "true"</param>
            <param name="move">Enable moving? Default: "true"</param>
            <param name="scale">Enable scaling? Default: "true"</param>
            <param name="keepRatio">Keep ratio while scaling? Default: "true"</param>
            <param name="degree">The degree $p$ of the NURBS curve. Reasonable values are 3 to 5. Default: 3</param>
            <param name="controlRows">Row coordinates of the control polygon.</param>
            <param name="controlCols">Column coordinates of the control polygon.</param>
            <param name="knots">Knot vector.</param>
            <param name="rows">Row coordinates of the points specified by the user.</param>
            <param name="cols">Column coordinates of the points specified by the user.</param>
            <param name="tangents">Tangents specified by the user.</param>
            <returns>Contour of the curve.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawNurbsMod(System.String,System.String,System.String,System.String,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Interactive modification of a NURBS curve.
              Instance represents: Window identifier.
            </summary>
            <param name="rotate">Enable rotation? Default: "true"</param>
            <param name="move">Enable moving? Default: "true"</param>
            <param name="scale">Enable scaling? Default: "true"</param>
            <param name="keepRatio">Keep ratio while scaling? Default: "true"</param>
            <param name="edit">Enable editing? Default: "true"</param>
            <param name="degree">The degree $p$ of the NURBS curve. Reasonable values are 3 to 25. Default: 3</param>
            <param name="rowsIn">Row coordinates of the input control polygon.</param>
            <param name="colsIn">Column coordinates of the input control polygon.</param>
            <param name="weightsIn">Input weight vector.</param>
            <param name="rows">Row coordinates of the control polygon.</param>
            <param name="cols">Columns coordinates of the control polygon.</param>
            <param name="weights">Weight vector.</param>
            <returns>Contour of the modified curve.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawNurbs(System.String,System.String,System.String,System.String,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Interactive drawing of a NURBS curve.
              Instance represents: Window identifier.
            </summary>
            <param name="rotate">Enable rotation? Default: "true"</param>
            <param name="move">Enable moving? Default: "true"</param>
            <param name="scale">Enable scaling? Default: "true"</param>
            <param name="keepRatio">Keep ratio while scaling? Default: "true"</param>
            <param name="degree">The degree $p$ of the NURBS curve. Reasonable values are 3 to 25. Default: 3</param>
            <param name="rows">Row coordinates of the control polygon.</param>
            <param name="cols">Columns coordinates of the control polygon.</param>
            <param name="weights">Weight vector.</param>
            <returns>Contour approximating the NURBS curve.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawXldMod(HalconDotNet.HXLDCont,System.String,System.String,System.String,System.String,System.String)">
            <summary>
              Interactive modification of a contour.
              Instance represents: Window identifier.
            </summary>
            <param name="contIn">Input contour.</param>
            <param name="rotate">Enable rotation? Default: "true"</param>
            <param name="move">Enable moving? Default: "true"</param>
            <param name="scale">Enable scaling? Default: "true"</param>
            <param name="keepRatio">Keep ratio while scaling? Default: "true"</param>
            <param name="edit">Enable editing? Default: "true"</param>
            <returns>Modified contour.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawXld(System.String,System.String,System.String,System.String)">
            <summary>
              Interactive drawing of a contour.
              Instance represents: Window identifier.
            </summary>
            <param name="rotate">Enable rotation? Default: "true"</param>
            <param name="move">Enable moving? Default: "true"</param>
            <param name="scale">Enable scaling? Default: "true"</param>
            <param name="keepRatio">Keep ratio while scaling? Default: "true"</param>
            <returns>Modified contour.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawRectangle2Mod(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Interactive drawing of any orientated rectangle.
              Instance represents: Window identifier.
            </summary>
            <param name="rowIn">Row index of the center.</param>
            <param name="columnIn">Column index of the center.</param>
            <param name="phiIn">Orientation of the bigger half axis in radians.</param>
            <param name="length1In">Bigger half axis.</param>
            <param name="length2In">Smaller half axis.</param>
            <param name="row">Row index of the center.</param>
            <param name="column">Column index of the center.</param>
            <param name="phi">Orientation of the bigger half axis in radians.</param>
            <param name="length1">Bigger half axis.</param>
            <param name="length2">Smaller half axis.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawRectangle2(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Interactive drawing of any orientated rectangle.
              Instance represents: Window identifier.
            </summary>
            <param name="row">Row index of the center.</param>
            <param name="column">Column index of the center.</param>
            <param name="phi">Orientation of the bigger half axis in radians.</param>
            <param name="length1">Bigger half axis.</param>
            <param name="length2">Smaller half axis.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawRectangle1Mod(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Draw a rectangle parallel to the coordinate axis.
              Instance represents: Window identifier.
            </summary>
            <param name="row1In">Row index of the left upper corner.</param>
            <param name="column1In">Column index of the left upper corner.</param>
            <param name="row2In">Row index of the right lower corner.</param>
            <param name="column2In">Column index of the right lower corner.</param>
            <param name="row1">Row index of the left upper corner.</param>
            <param name="column1">Column index of the left upper corner.</param>
            <param name="row2">Row index of the right lower corner.</param>
            <param name="column2">Column index of the right lower corner.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawRectangle1(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Draw a rectangle parallel to the coordinate axis.
              Instance represents: Window identifier.
            </summary>
            <param name="row1">Row index of the left upper corner.</param>
            <param name="column1">Column index of the left upper corner.</param>
            <param name="row2">Row index of the right lower corner.</param>
            <param name="column2">Column index of the right lower corner.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawPointMod(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
              Draw a point.
              Instance represents: Window identifier.
            </summary>
            <param name="rowIn">Row index of the point.</param>
            <param name="columnIn">Column index of the point.</param>
            <param name="row">Row index of the point.</param>
            <param name="column">Column index of the point.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawPoint(System.Double@,System.Double@)">
            <summary>
              Draw a point.
              Instance represents: Window identifier.
            </summary>
            <param name="row">Row index of the point.</param>
            <param name="column">Column index of the point.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawLineMod(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Draw a line.
              Instance represents: Window identifier.
            </summary>
            <param name="row1In">Row index of the first point of the line.</param>
            <param name="column1In">Column index of the first point of the line.</param>
            <param name="row2In">Row index of the second point of the line.</param>
            <param name="column2In">Column index of the second point of the line.</param>
            <param name="row1">Row index of the first point of the line.</param>
            <param name="column1">Column index of the first point of the line.</param>
            <param name="row2">Row index of the second point of the line.</param>
            <param name="column2">Column index of the second point of the line.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawLine(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Draw a line.
              Instance represents: Window identifier.
            </summary>
            <param name="row1">Row index of the first point of the line.</param>
            <param name="column1">Column index of the first point of the line.</param>
            <param name="row2">Row index of the second point of the line.</param>
            <param name="column2">Column index of the second point of the line.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawEllipseMod(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Interactive drawing of an ellipse.
              Instance represents: Window identifier.
            </summary>
            <param name="rowIn">Row index of the center.</param>
            <param name="columnIn">Column index of the center.</param>
            <param name="phiIn">Orientation of the bigger half axis in radians.</param>
            <param name="radius1In">Bigger half axis.</param>
            <param name="radius2In">Smaller half axis.</param>
            <param name="row">Row index of the center.</param>
            <param name="column">Column index of the center.</param>
            <param name="phi">Orientation of the first half axis in radians.</param>
            <param name="radius1">First half axis.</param>
            <param name="radius2">Second half axis.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawEllipse(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Interactive drawing of an ellipse.
              Instance represents: Window identifier.
            </summary>
            <param name="row">Row index of the center.</param>
            <param name="column">Column index of the center.</param>
            <param name="phi">Orientation of the first half axis in radians.</param>
            <param name="radius1">First half axis.</param>
            <param name="radius2">Second half axis.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawCircleMod(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
              Interactive drawing of a circle.
              Instance represents: Window identifier.
            </summary>
            <param name="rowIn">Row index of the center.</param>
            <param name="columnIn">Column index of the center.</param>
            <param name="radiusIn">Radius of the circle.</param>
            <param name="row">Row index of the center.</param>
            <param name="column">Column index of the center.</param>
            <param name="radius">Circle's radius.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawCircle(System.Double@,System.Double@,System.Double@)">
            <summary>
              Interactive drawing of a circle.
              Instance represents: Window identifier.
            </summary>
            <param name="row">Barycenter's row index.</param>
            <param name="column">Barycenter's column index.</param>
            <param name="radius">Circle's radius.</param>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawRegion">
            <summary>
              Interactive drawing of a closed region.
              Instance represents: Window identifier.
            </summary>
            <returns>Interactive created region.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.DrawPolygon">
            <summary>
              Interactive drawing of a polygon row.
              Instance represents: Window identifier.
            </summary>
            <returns>Region, which encompasses all painted points.</returns>
        </member>
        <member name="M:HalconDotNet.HWindow.DispCaltab(System.String,HalconDotNet.HTuple,HalconDotNet.HPose,System.Double)">
            <summary>
              Project and visualize the 3D model of the calibration plate in the image.
              Instance represents: Window in which the calibration plate should be visualized.
            </summary>
            <param name="calPlateDescr">File name of the calibration plate description. Default: "calplate.cpd"</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="calPlatePose">External camera parameters (3D pose of the calibration plate in camera coordinates).</param>
            <param name="scaleFac">Scaling factor for the visualization. Default: 1.0</param>
        </member>
        <member name="T:HalconDotNet.HDrawingObject">
            <summary>Represents an instance of a drawing object.</summary>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.#ctor(System.Double,System.Double,System.Double)">
            <summary>
              Create a circle which can be modified interactively.
              Modified instance represents: Handle of the drawing object.
            </summary>
            <param name="row">Row coordinate of the center. Default: 100</param>
            <param name="column">Column coordinate of the center. Default: 100</param>
            <param name="radius">Radius of the circle. Default: 80</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create a rectangle of any orientation which can be modified interactively.
              Modified instance represents: Handle of the drawing object.
            </summary>
            <param name="row">Row coordinate of the center. Default: 150</param>
            <param name="column">Column coordinate of the center. Default: 150</param>
            <param name="phi">Orientation of the first half axis in radians. Default: 0</param>
            <param name="length1">First half axis. Default: 100</param>
            <param name="length2">Second half axis. Default: 100</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create a rectangle parallel to the coordinate axis which can be modified interactively.
              Modified instance represents: Handle of the drawing object.
            </summary>
            <param name="row1">Row coordinate of the upper left corner. Default: 100</param>
            <param name="column1">Column coordinate of the upper left corner. Default: 100</param>
            <param name="row2">Row coordinate of the lower right corner. Default: 200</param>
            <param name="column2">Column coordinate of the lower right corner. Default: 200</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.OnResize(HalconDotNet.HDrawingObject.HDrawingObjectCallback)">
            <summary>Adds a callback for the resize event, that is, this callback is
            executed whenever the user changes any of the dimensions of the draw 
            object.</summary>
            <param name="f">Callback function with the signature defined by 
            HDrawingObjectCallback</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.OnAttach(HalconDotNet.HDrawingObject.HDrawingObjectCallback)">
            <summary>Adds a callback for the attach event, that is, this callback is
            executed when a drawing object is attached to the window.</summary>
            <param name="f">Callback function with the signature defined by 
            HDrawingObjectCallback</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.OnDetach(HalconDotNet.HDrawingObject.HDrawingObjectCallback)">
            <summary>Adds a callback for the detach event, that is, this callback is
            executed when a drawing object is detached from the window.</summary>
            <param name="f">Callback function with the signature defined by 
            HDrawingObjectCallback</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.OnDrag(HalconDotNet.HDrawingObject.HDrawingObjectCallback)">
            <summary>Adds a callback for the resize event, that is, this callback is
            executed whenever the drawing object's position changes.</summary>
            <param name="f">Callback function with the signature defined by 
            HDrawingObjectCallback</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.OnSelect(HalconDotNet.HDrawingObject.HDrawingObjectCallback)">
            <summary>Adds a callback for the resize event, that is, this callback is
            executed whenever the drawing object is selected.</summary>
            <param name="f">Callback function with the signature defined by 
            HDrawingObjectCallback</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.OnResize(HalconDotNet.HDrawingObject.HDrawingObjectCallbackClass)">
            <summary>Adds a callback for the resize event, that is, this callback is
            executed whenever the user changes any of the dimensions of the draw 
            object.</summary>
            <param name="f">Callback function with the signature defined by 
            HDrawingObjectCallback</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.OnDrag(HalconDotNet.HDrawingObject.HDrawingObjectCallbackClass)">
            <summary>Adds a callback for the resize event, that is, this callback is
            executed whenever the drawing object's position changes.</summary>
            <param name="f">Callback function with the signature defined by 
            HDrawingObjectCallback</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.OnSelect(HalconDotNet.HDrawingObject.HDrawingObjectCallbackClass)">
            <summary>Adds a callback for the resize event, that is, this callback is
            executed whenever the drawing object is selected.</summary>
            <param name="f">Callback function with the signature defined by 
            HDrawingObjectCallback</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.OnAttach(HalconDotNet.HDrawingObject.HDrawingObjectCallbackClass)">
            <summary>Adds a callback for the attach event, that is, this callback is
            executed when a drawing object is attached to the window.</summary>
            <param name="f">Callback function with the signature defined by 
            HDrawingObjectCallback</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.OnDetach(HalconDotNet.HDrawingObject.HDrawingObjectCallbackClass)">
            <summary>Adds a callback for the detach event, that is, this callback is
            executed when a drawing object is detached from the window.</summary>
            <param name="f">Callback function with the signature defined by 
            HDrawingObjectCallback</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.CreateDrawingObject(HalconDotNet.HDrawingObject.HDrawingObjectType,HalconDotNet.HTuple[])">
            <summary>Method to create drawing objects by explicitly specifying the type.</summary>
            <param name="type">Type of the drawing object. Can be any of the specified by
             the enum type HDrawingObjectType.</param>
            <param name="values"> List of parameters for the corresponding drawing object.
            See the constructors listed in HOperatorSet for more details.</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.SetDrawingObjectCallback(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a callback function to a drawing object.
              Instance represents: Handle of the drawing object.
            </summary>
            <param name="drawObjectEvent">Events to be captured.</param>
            <param name="callbackFunction">Callback functions.</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.SetDrawingObjectCallback(System.String,System.IntPtr)">
            <summary>
              Add a callback function to a drawing object.
              Instance represents: Handle of the drawing object.
            </summary>
            <param name="drawObjectEvent">Events to be captured.</param>
            <param name="callbackFunction">Callback functions.</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.DetachBackgroundFromWindow(HalconDotNet.HWindow)">
            <summary>Detach the background image from a HALCON window.</summary>
            <param name="windowHandle">Window handle.</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.AttachBackgroundToWindow(HalconDotNet.HImage,HalconDotNet.HWindow)">
            <summary>Attach a background image to a HALCON window.</summary>
            <param name="image">Background image.</param>
            <param name="windowHandle">Window handle.</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.CreateDrawingObjectText(System.Int32,System.Int32,System.String)">
            <summary>
              Create a text object which can be moved interactively.
              Modified instance represents: Handle of the drawing object.
            </summary>
            <param name="row">Row coordinate of the text position. Default: 12</param>
            <param name="column">Column coordinate of the text position. Default: 12</param>
            <param name="stringVal">Character string to be displayed. Default: "Text"</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.GetDrawingObjectIconic">
            <summary>
              Return the iconic object of a drawing object.
              Instance represents: Handle of the drawing object.
            </summary>
            <returns>Copy of the iconic object represented by the drawing object.</returns>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.SetDrawingObjectParams(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set the parameters of a drawing object.
              Instance represents: Handle of the drawing object.
            </summary>
            <param name="paramNames">Parameter names of the drawing object.</param>
            <param name="paramValues">Parameter values.</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.SetDrawingObjectParams(System.String,System.Double)">
            <summary>
              Set the parameters of a drawing object.
              Instance represents: Handle of the drawing object.
            </summary>
            <param name="paramNames">Parameter names of the drawing object.</param>
            <param name="paramValues">Parameter values.</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.GetDrawingObjectParams(HalconDotNet.HTuple)">
            <summary>
              Get the parameters of a drawing object.
              Instance represents: Handle of the drawing object.
            </summary>
            <param name="paramNames">Parameter names of the drawing object.</param>
            <returns>Parameter values.</returns>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.GetDrawingObjectParams(System.String)">
            <summary>
              Get the parameters of a drawing object.
              Instance represents: Handle of the drawing object.
            </summary>
            <param name="paramNames">Parameter names of the drawing object.</param>
            <returns>Parameter values.</returns>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.SetDrawingObjectXld(HalconDotNet.HXLDCont)">
            <summary>
              Set the contour of an interactive draw XLD.
              Instance represents: Handle of the drawing object.
            </summary>
            <param name="contour">XLD contour.</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.CreateDrawingObjectXld(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a XLD contour which can be modified interactively.
              Modified instance represents: Handle of the drawing object.
            </summary>
            <param name="row">Row coordinates of the polygon. Default: [100,200,200,100]</param>
            <param name="column">Column coordinates of the polygon. Default: [100,100,200,200]</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.CreateDrawingObjectCircleSector(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create a circle sector which can be modified interactively.
              Modified instance represents: Handle of the drawing object.
            </summary>
            <param name="row">Row coordinate of the center. Default: 100</param>
            <param name="column">Column coordinate of the center. Default: 100</param>
            <param name="radius">Radius of the circle. Default: 80</param>
            <param name="startAngle">Start angle of the arc. Default: 0</param>
            <param name="endAngle">End angle of the arc. Default: 3.14159</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.CreateDrawingObjectEllipseSector(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create an elliptic sector which can be modified interactively.
              Modified instance represents: Handle of the drawing object.
            </summary>
            <param name="row">Row index of the center. Default: 200</param>
            <param name="column">Column index of the center. Default: 200</param>
            <param name="phi">Orientation of the first half axis in radians. Default: 0</param>
            <param name="radius1">First half axis. Default: 100</param>
            <param name="radius2">Second half axis. Default: 60</param>
            <param name="startAngle">Start angle of the arc. Default: 0</param>
            <param name="endAngle">End angle of the arc. Default: 3.14159</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.CreateDrawingObjectLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create a line which can be modified interactively.
              Modified instance represents: Handle of the drawing object.
            </summary>
            <param name="row1">Row index of the first line point. Default: 100</param>
            <param name="column1">Column index of the first line point. Default: 100</param>
            <param name="row2">Row index of the second line point. Default: 200</param>
            <param name="column2">Column index of the second line point. Default: 200</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.CreateDrawingObjectCircle(System.Double,System.Double,System.Double)">
            <summary>
              Create a circle which can be modified interactively.
              Modified instance represents: Handle of the drawing object.
            </summary>
            <param name="row">Row coordinate of the center. Default: 100</param>
            <param name="column">Column coordinate of the center. Default: 100</param>
            <param name="radius">Radius of the circle. Default: 80</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.CreateDrawingObjectEllipse(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create an ellipse which can be modified interactively.
              Modified instance represents: Handle of the drawing object.
            </summary>
            <param name="row">Row index of the center. Default: 200</param>
            <param name="column">Column index of the center. Default: 200</param>
            <param name="phi">Orientation of the first half axis in radians. Default: 0</param>
            <param name="radius1">First half axis. Default: 100</param>
            <param name="radius2">Second half axis. Default: 60</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.CreateDrawingObjectRectangle2(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create a rectangle of any orientation which can be modified interactively.
              Modified instance represents: Handle of the drawing object.
            </summary>
            <param name="row">Row coordinate of the center. Default: 150</param>
            <param name="column">Column coordinate of the center. Default: 150</param>
            <param name="phi">Orientation of the first half axis in radians. Default: 0</param>
            <param name="length1">First half axis. Default: 100</param>
            <param name="length2">Second half axis. Default: 100</param>
        </member>
        <member name="M:HalconDotNet.HDrawingObject.CreateDrawingObjectRectangle1(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create a rectangle parallel to the coordinate axis which can be modified interactively.
              Modified instance represents: Handle of the drawing object.
            </summary>
            <param name="row1">Row coordinate of the upper left corner. Default: 100</param>
            <param name="column1">Column coordinate of the upper left corner. Default: 100</param>
            <param name="row2">Row coordinate of the lower right corner. Default: 200</param>
            <param name="column2">Column coordinate of the lower right corner. Default: 200</param>
        </member>
        <member name="P:HalconDotNet.HDrawingObject.ID">
            <summary>Returns the corresponding HALCON id.</summary>
        </member>
        <member name="T:HalconDotNet.HDrawingObject.HDrawingObjectCallback">
            <summary>Signature for the drawing object callbacks in managed code.</summary>
        </member>
        <member name="T:HalconDotNet.HDrawingObject.HDrawingObjectCallbackClass">
            <summary>Signature for the drawing object callbacks in managed code.</summary>
        </member>
        <member name="T:HalconDotNet.HOperatorSet">
            <summary>Class grouping all HALCON operators.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.UnionCotangentialContoursXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the union of cotangential contours.</summary>
            <param name="contours">Input XLD contours.</param>
            <param name="unionContours">Output XLD contours.</param>
            <param name="fitClippingLength">Length of the part of a contour to skip for the determination of tangents. Default: 0.0</param>
            <param name="fitLength">Length of the part of a contour to use for the determination of tangents. Default: 30.0</param>
            <param name="maxTangAngle">Maximum angle difference between two contours' tangents. Default: 0.78539816</param>
            <param name="maxDist">Maximum distance of the contours' end points. Default: 25.0</param>
            <param name="maxDistPerp">Maximum distance of the contours' end points perpendicular to their tangents. Default: 10.0</param>
            <param name="maxOverlap">Maximum overlap of two contours. Default: 2.0</param>
            <param name="mode">Mode describing the treatment of the contours' attributes. Default: "attr_forget"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PolarTransContourXldInv(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Transform a contour in polar coordinates back to cartesian coordinates</summary>
            <param name="polarContour">Input contour.</param>
            <param name="XYTransContour">Output contour.</param>
            <param name="row">Row coordinate of the center of the arc. Default: 256</param>
            <param name="column">Column coordinate of the center of the arc. Default: 256</param>
            <param name="angleStart">Angle of the ray to map the column coordinate 0 of PolarContour to. Default: 0.0</param>
            <param name="angleEnd">Angle of the ray to map the column coordinate $WidthIn-1$ of PolarContour to. Default: 6.2831853</param>
            <param name="radiusStart">Radius of the circle to map the row coordinate 0 of PolarContour to. Default: 0</param>
            <param name="radiusEnd">Radius of the circle to map the row coordinate $HeightIn-1$ of PolarContour to. Default: 100</param>
            <param name="widthIn">Width of the virtual input image. Default: 512</param>
            <param name="heightIn">Height of the virtual input image. Default: 512</param>
            <param name="width">Width of the virtual output image. Default: 512</param>
            <param name="height">Height of the virtual output image. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PolarTransContourXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Transform a contour in an annular arc to polar coordinates.</summary>
            <param name="contour">Input contour.</param>
            <param name="polarTransContour">Output contour.</param>
            <param name="row">Row coordinate of the center of the arc. Default: 256</param>
            <param name="column">Column coordinate of the center of the arc. Default: 256</param>
            <param name="angleStart">Angle of the ray to be mapped to the column coordinate 0 of PolarTransContour. Default: 0.0</param>
            <param name="angleEnd">Angle of the ray to be mapped to the column coordinate $Width-1$ of PolarTransContour to. Default: 6.2831853</param>
            <param name="radiusStart">Radius of the circle to be mapped to the row coordinate 0 of PolarTransContour. Default: 0</param>
            <param name="radiusEnd">Radius of the circle to be mapped to the row coordinate $Height-1$ of PolarTransContour. Default: 100</param>
            <param name="width">Width of the virtual output image. Default: 512</param>
            <param name="height">Height of the virtual output image. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenNurbsInterp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Create control data of a NURBS curve that interpolates given points.</summary>
            <param name="rows">Row coordinates of input point list.</param>
            <param name="cols">Column coordinates of input point list.</param>
            <param name="tangents">Tangents at first and last point. Default: []</param>
            <param name="degree">Order of the output curve. Default: 3</param>
            <param name="ctrlRows">Row coordinates of the control polygon.</param>
            <param name="ctrlCols">Column coordinates of the control polygon.</param>
            <param name="knots">The knot vector of the output curve.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenContourNurbsXld(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Transform a NURBS curve into an XLD contour.</summary>
            <param name="contour">The contour that approximates the NURBS curve.</param>
            <param name="rows">Row coordinates of the control polygon.</param>
            <param name="cols">Column coordinates of the control polygon.</param>
            <param name="knots">The knot vector $u$. Default: "auto"</param>
            <param name="weights">The weight vector $w$. Default: "auto"</param>
            <param name="degree">The degree $p$ of the NURBS curve. Default: 3</param>
            <param name="maxError">Maximum distance between the NURBS curve and its approximation. Default: 1.0</param>
            <param name="maxDistance">Maximum distance between two subsequent Contour points. Default: 5.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Union2ClosedPolygonsXld(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Compute the union of closed polygons.</summary>
            <param name="polygons1">Polygons enclosing the first region.</param>
            <param name="polygons2">Polygons enclosing the second region.</param>
            <param name="polygonsUnion">Polygons enclosing the union.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Union2ClosedContoursXld(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Compute the union of closed contours.</summary>
            <param name="contours1">Contours enclosing the first region.</param>
            <param name="contours2">Contours enclosing the second region.</param>
            <param name="contoursUnion">Contours enclosing the union.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SymmDifferenceClosedPolygonsXld(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Compute the symmetric difference of closed polygons.</summary>
            <param name="polygons1">Polygons enclosing the first region.</param>
            <param name="polygons2">Polygons enclosing the second region.</param>
            <param name="polygonsDifference">Polygons enclosing the symmetric difference.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SymmDifferenceClosedContoursXld(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Compute the symmetric difference of closed contours.</summary>
            <param name="contours1">Contours enclosing the first region.</param>
            <param name="contours2">Contours enclosing the second region.</param>
            <param name="contoursDifference">Contours enclosing the symmetric difference.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DifferenceClosedPolygonsXld(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Compute the difference of closed polygons.</summary>
            <param name="polygons">Polygons enclosing the region from which the second region is subtracted.</param>
            <param name="sub">Polyongs enclosing the region that is subtracted from the first region.</param>
            <param name="polygonsDifference">Polygons enclosing the difference.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DifferenceClosedContoursXld(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Compute the difference of closed contours.</summary>
            <param name="contours">Contours enclosing the region from which the second region is subtracted.</param>
            <param name="sub">Contours enclosing the region that is subtracted from the first region.</param>
            <param name="contoursDifference">Contours enclosing the difference.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.IntersectionClosedPolygonsXld(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Intersect closed polygons.</summary>
            <param name="polygons1">Polygons enclosing the first region to be intersected.</param>
            <param name="polygons2">Polygons enclosing the second region to be intersected.</param>
            <param name="polygonsIntersection">Polygons enclosing the intersection.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.IntersectionClosedContoursXld(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Intersect closed contours.</summary>
            <param name="contours1">Contours enclosing the first region to be intersected.</param>
            <param name="contours2">Contours enclosing the second region to be intersected.</param>
            <param name="contoursIntersection">Contours enclosing the intersection.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.UnionCocircularContoursXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the union of contours that belong to the same circle.</summary>
            <param name="contours">Contours to be merged.</param>
            <param name="unionContours">Merged contours.</param>
            <param name="maxArcAngleDiff">Maximum angular distance of two circular arcs. Default: 0.5</param>
            <param name="maxArcOverlap">Maximum overlap of two circular arcs. Default: 0.1</param>
            <param name="maxTangentAngle">Maximum angle between the connecting line and the tangents of circular arcs. Default: 0.2</param>
            <param name="maxDist">Maximum length of the gap between two circular arcs in pixels. Default: 30</param>
            <param name="maxRadiusDiff">Maximum radius difference of the circles fitted to two arcs. Default: 10</param>
            <param name="maxCenterDist">Maximum center distance of the circles fitted to two arcs. Default: 10</param>
            <param name="mergeSmallContours">Determine whether small contours without fitted circles should also be merged. Default: "true"</param>
            <param name="iterations">Number of iterations. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CropContoursXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Crop an XLD contour.</summary>
            <param name="contours">Input contours.</param>
            <param name="croppedContours">Output contours.</param>
            <param name="row1">Upper border of the cropping rectangle. Default: 0</param>
            <param name="col1">Left border of the cropping rectangle. Default: 0</param>
            <param name="row2">Lower border of the cropping rectangle. Default: 512</param>
            <param name="col2">Right border of the cropping rectangle. Default: 512</param>
            <param name="closeContours">Should closed contours produce closed output contours? Default: "true"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenCrossContourXld(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate one XLD contour in the shape of a cross for each input point.</summary>
            <param name="cross">Generated XLD contours.</param>
            <param name="row">Row coordinates of the input points.</param>
            <param name="col">Column coordinates of the input points.</param>
            <param name="size">Length of the cross bars. Default: 6.0</param>
            <param name="angle">Orientation of the crosses. Default: 0.785398</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SortContoursXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Sort contours with respect to their relative position.</summary>
            <param name="contours">Contours to be sorted.</param>
            <param name="sortedContours">Sorted contours.</param>
            <param name="sortMode">Kind of sorting. Default: "upper_left"</param>
            <param name="order">Increasing or decreasing sorting order. Default: "true"</param>
            <param name="rowOrCol">Sorting first with respect to row, then to column. Default: "row"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MergeContLineScanXld(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Merge XLD contours from successive line scan images.</summary>
            <param name="currConts">Current input contours.</param>
            <param name="prevConts">Merged contours from the previous iteration.</param>
            <param name="currMergedConts">Current contours, merged with old ones where applicable.</param>
            <param name="prevMergedConts">Contours from the previous iteration which could not be merged with the current ones.</param>
            <param name="imageHeight">Height of the line scan images. Default: 512</param>
            <param name="margin">Maximum distance of contours from the image border. Default: 0.0</param>
            <param name="mergeBorder">Image line of the current image, which touches the previous image. Default: "top"</param>
            <param name="maxImagesCont">Maximum number of images covered by one contour. Default: 3</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadPolygonXldArcInfo(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Read XLD polygons from a file in ARC/INFO generate format.</summary>
            <param name="polygons">Read XLD polygons.</param>
            <param name="fileName">Name of the ARC/INFO file.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WritePolygonXldArcInfo(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Write XLD polygons to a file in ARC/INFO generate format.</summary>
            <param name="polygons">XLD polygons to be written.</param>
            <param name="fileName">Name of the ARC/INFO file.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadContourXldArcInfo(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Read XLD contours to a file in ARC/INFO generate format.</summary>
            <param name="contours">Read XLD contours.</param>
            <param name="fileName">Name of the ARC/INFO file.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteContourXldArcInfo(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Write XLD contours to a file in ARC/INFO generate format.</summary>
            <param name="contours">XLD contours to be written.</param>
            <param name="fileName">Name of the ARC/INFO file.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadWorldFile(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read the geo coding from an ARC/INFO world file.</summary>
            <param name="fileName">Name of the ARC/INFO world file.</param>
            <param name="worldTransformation">Transformation matrix from image to world coordinates.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenParallelContourXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the parallel contour of an XLD contour.</summary>
            <param name="contours">Contours to be transformed.</param>
            <param name="parallelContours">Parallel contours.</param>
            <param name="mode">Mode, with which the direction information is computed. Default: "regression_normal"</param>
            <param name="distance">Distance of the parallel contour. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenRectangle2ContourXld(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create an XLD contour in the shape of a rectangle.</summary>
            <param name="rectangle">Rectangle contour.</param>
            <param name="row">Row coordinate of the center of the rectangle. Default: 300.0</param>
            <param name="column">Column coordinate of the center of the rectangle. Default: 200.0</param>
            <param name="phi">Orientation of the main axis of the rectangle [rad]. Default: 0.0</param>
            <param name="length1">First radius (half length) of the rectangle. Default: 100.5</param>
            <param name="length2">Second radius (half width) of the rectangle. Default: 20.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistRectangle2ContourPointsXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the distances of all contour points to a rectangle.</summary>
            <param name="contour">Input contour.</param>
            <param name="clippingEndPoints">Number of points at the beginning and the end of the contours to be ignored for the computation of distances. Default: 0</param>
            <param name="row">Row coordinate of the center of the rectangle.</param>
            <param name="column">Column coordinate of the center of the rectangle.</param>
            <param name="phi">Orientation of the main axis of the rectangle [rad].</param>
            <param name="length1">First radius (half length) of the rectangle.</param>
            <param name="length2">Second radius (half width) of the rectangle.</param>
            <param name="distances">Distances of the contour points to the rectangle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FitRectangle2ContourXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Fit rectangles to XLD contours.</summary>
            <param name="contours">Input contours.</param>
            <param name="algorithm">Algorithm for fitting the rectangles. Default: "regression"</param>
            <param name="maxNumPoints">Maximum number of contour points used for the computation (-1 for all points). Default: -1</param>
            <param name="maxClosureDist">Maximum distance between the end points of a contour to be considered as closed. Default: 0.0</param>
            <param name="clippingEndPoints">Number of points at the beginning and at the end of the contours to be ignored for the fitting. Default: 0</param>
            <param name="iterations">Maximum number of iterations (not used for 'regression'). Default: 3</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers (typical: 1.0 for 'huber' and 2.0 for 'tukey'). Default: 2.0</param>
            <param name="row">Row coordinate of the center of the rectangle.</param>
            <param name="column">Column coordinate of the center of the rectangle.</param>
            <param name="phi">Orientation of the main axis of the rectangle [rad].</param>
            <param name="length1">First radius (half length) of the rectangle.</param>
            <param name="length2">Second radius (half width) of the rectangle.</param>
            <param name="pointOrder">Point order of the contour.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SegmentContourAttribXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Segment XLD contour parts whose local attributes fulfill given  conditions.</summary>
            <param name="contour">Contour to be segmented.</param>
            <param name="contourPart">Segmented contour parts.</param>
            <param name="attribute">Contour attributes to be checked. Default: "distance"</param>
            <param name="operation">Linkage type of the individual attributes. Default: "and"</param>
            <param name="min">Lower limits of the attribute values. Default: 150.0</param>
            <param name="max">Upper limits of the attribute values. Default: 99999.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SegmentContoursXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Segment XLD contours into line segments and circular or elliptic arcs.</summary>
            <param name="contours">Contours to be segmented.</param>
            <param name="contoursSplit">Segmented contours.</param>
            <param name="mode">Mode for the segmentation of the contours. Default: "lines_circles"</param>
            <param name="smoothCont">Number of points used for smoothing the contours. Default: 5</param>
            <param name="maxLineDist1">Maximum distance between a contour and the approximating line (first iteration). Default: 4.0</param>
            <param name="maxLineDist2">Maximum distance between a contour and the approximating line (second iteration). Default: 2.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FitCircleContourXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Approximate XLD contours by circles.</summary>
            <param name="contours">Input contours.</param>
            <param name="algorithm">Algorithm for the fitting of circles. Default: "algebraic"</param>
            <param name="maxNumPoints">Maximum number of contour points used for the computation (-1 for all points). Default: -1</param>
            <param name="maxClosureDist">Maximum distance between the end points of a contour to be considered as 'closed'. Default: 0.0</param>
            <param name="clippingEndPoints">Number of points at the beginning and at the end of the contours to be ignored for the fitting. Default: 0</param>
            <param name="iterations">Maximum number of iterations for the robust weighted fitting. Default: 3</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers (typical: 1.0 for Huber and 2.0 for Tukey). Default: 2.0</param>
            <param name="row">Row coordinate of the center of the circle.</param>
            <param name="column">Column coordinate of the center of the circle.</param>
            <param name="radius">Radius of circle.</param>
            <param name="startPhi">Angle of the start point [rad].</param>
            <param name="endPhi">Angle of the end point [rad].</param>
            <param name="pointOrder">Point order along the boundary.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FitLineContourXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Approximate XLD contours by line segments.</summary>
            <param name="contours">Input contours.</param>
            <param name="algorithm">Algorithm for the fitting of lines. Default: "tukey"</param>
            <param name="maxNumPoints">Maximum number of contour points used for the computation (-1 for all points). Default: -1</param>
            <param name="clippingEndPoints">Number of points at the beginning and at the end of the contours to be ignored for the fitting. Default: 0</param>
            <param name="iterations">Maximum number of iterations (unused for 'regression'). Default: 5</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers (typical: 1.0 for 'huber' and 'drop' and 2.0 for  'tukey'). Default: 2.0</param>
            <param name="rowBegin">Row coordinates of the starting points of the line segments.</param>
            <param name="colBegin">Column coordinates of the starting points of the line segments.</param>
            <param name="rowEnd">Row coordinates of the end points of the line segments.</param>
            <param name="colEnd">Column coordinates of the end points of the line segments.</param>
            <param name="nr">Line parameter: Row coordinate of the normal vector</param>
            <param name="nc">Line parameter: Column coordinate of the normal vector</param>
            <param name="dist">Line parameter: Distance of the line from the origin</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistEllipseContourPointsXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the distances of all contour points to an ellipse.</summary>
            <param name="contour">Input contours.</param>
            <param name="distanceMode">Mode for unsigned or signed distance values. Default: "unsigned"</param>
            <param name="clippingEndPoints">Number of points at the beginning and the end of the contours to be ignored for the computation of distances. Default: 0</param>
            <param name="row">Row coordinate of the center of the ellipse.</param>
            <param name="column">Column coordinate of the center of the ellipse.</param>
            <param name="phi">Orientation of the main axis in radian.</param>
            <param name="radius1">Length of the larger half axis.</param>
            <param name="radius2">Length of the smaller half axis.</param>
            <param name="distances">Distances of the contour points to the ellipse.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistEllipseContourXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the distance of contours to an ellipse.</summary>
            <param name="contours">Input contours.</param>
            <param name="mode">Method for the determination of the distances. Default: "geometric"</param>
            <param name="maxNumPoints">Maximum number of contour points used for the computation (-1 for all points). Default: -1</param>
            <param name="clippingEndPoints">Number of points at the beginning and the end of the contours to be ignored for the computation of distances. Default: 0</param>
            <param name="row">Row coordinate of the center of the ellipse.</param>
            <param name="column">Column coordinate of the center of the ellipse.</param>
            <param name="phi">Orientation of the main axis in radian.</param>
            <param name="radius1">Length of the larger half axis.</param>
            <param name="radius2">Length of the smaller half axis.</param>
            <param name="minDist">Minimum distance.</param>
            <param name="maxDist">Maximum distance.</param>
            <param name="avgDist">Mean distance.</param>
            <param name="sigmaDist">Standard deviation of the distance.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FitEllipseContourXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Approximate XLD contours by ellipses or elliptic arcs.</summary>
            <param name="contours">Input contours.</param>
            <param name="algorithm">Algorithm for the fitting of ellipses. Default: "fitzgibbon"</param>
            <param name="maxNumPoints">Maximum number of contour points used for the computation (-1 for all points). Default: -1</param>
            <param name="maxClosureDist">Maximum distance between the end points of a contour to be considered as 'closed'. Default: 0.0</param>
            <param name="clippingEndPoints">Number of points at the beginning and at the end of the contours to be ignored for the fitting. Default: 0</param>
            <param name="vossTabSize">Number of circular segments used for the Voss approach. Default: 200</param>
            <param name="iterations">Maximum number of iterations for the robust weighted fitting. Default: 3</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers (typical: 1.0 for '*huber' and 2.0 for '*tukey'). Default: 2.0</param>
            <param name="row">Row coordinate of the center of the ellipse.</param>
            <param name="column">Column coordinate of the center of the ellipse.</param>
            <param name="phi">Orientation of the main axis [rad].</param>
            <param name="radius1">Length of the larger half axis.</param>
            <param name="radius2">Length of the smaller half axis.</param>
            <param name="startPhi">Angle of the start point [rad].</param>
            <param name="endPhi">Angle of the end point [rad].</param>
            <param name="pointOrder">point order along the boundary.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenCircleContourXld(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create XLD contours corresponding to circles or circular arcs.</summary>
            <param name="contCircle">Resulting contours.</param>
            <param name="row">Row coordinate of the center of the circles or circular arcs. Default: 200.0</param>
            <param name="column">Column coordinate of the center of the circles or circular arcs. Default: 200.0</param>
            <param name="radius">Radius of the circles or circular arcs. Default: 100.0</param>
            <param name="startPhi">Angle of the start points of the circles or circular arcs [rad]. Default: 0.0</param>
            <param name="endPhi">Angle of the end points of the circles or circular arcs [rad]. Default: 6.28318</param>
            <param name="pointOrder">Point order along the circles or circular arcs. Default: "positive"</param>
            <param name="resolution">Distance between neighboring contour points. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenEllipseContourXld(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create an XLD contour that corresponds to an elliptic arc.</summary>
            <param name="contEllipse">Resulting contour.</param>
            <param name="row">Row coordinate of the center of the ellipse. Default: 200.0</param>
            <param name="column">Column coordinate of the center of the ellipse. Default: 200.0</param>
            <param name="phi">Orientation of the main axis [rad]. Default: 0.0</param>
            <param name="radius1">Length of the larger half axis. Default: 100.0</param>
            <param name="radius2">Length of the smaller half axis. Default: 50.0</param>
            <param name="startPhi">Angle of the start point on the smallest surrounding circle  [rad]. Default: 0.0</param>
            <param name="endPhi">Angle of the end point on the smallest surrounding circle  [rad]. Default: 6.28318</param>
            <param name="pointOrder">point order along the boundary. Default: "positive"</param>
            <param name="resolution">Resolution: Maximum distance between neighboring contour points. Default: 1.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddNoiseWhiteContourXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add noise to XLD contours.</summary>
            <param name="contours">Original contours.</param>
            <param name="noisyContours">Noisy contours.</param>
            <param name="numRegrPoints">Number of points used to calculate the regression line. Default: 5</param>
            <param name="amp">Maximum amplitude of the added noise (equally distributed in [-Amp,Amp]). Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CombineRoadsXld(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Combine road hypotheses from two resolution levels.</summary>
            <param name="edgePolygons">XLD polygons to be examined.</param>
            <param name="modParallels">Modified parallels obtained from EdgePolygons.</param>
            <param name="extParallels">Extended parallels obtained from EdgePolygons.</param>
            <param name="centerLines">Road-center-line polygons to be examined.</param>
            <param name="roadSides">Roadsides found.</param>
            <param name="maxAngleParallel">Maximum angle between two parallel line segments. Default: 0.523598775598</param>
            <param name="maxAngleColinear">Maximum angle between two collinear line segments. Default: 0.261799387799</param>
            <param name="maxDistanceParallel">Maximum distance between two parallel line segments. Default: 40</param>
            <param name="maxDistanceColinear">Maximum distance between two collinear line segments. Default: 40</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MaxParallelsXld(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Join modified XLD parallels lying on the same polygon.</summary>
            <param name="extParallels">Extended XLD parallels.</param>
            <param name="maxPolygons">Maximally extended parallels.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ModParallelsXld(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Extract parallel XLD polygons enclosing a homogeneous area.</summary>
            <param name="parallels">Input XLD parallels.</param>
            <param name="image">Corresponding gray value image.</param>
            <param name="modParallels">Modified XLD parallels.</param>
            <param name="extParallels">Extended XLD parallels.</param>
            <param name="quality">Minimum quality factor (measure of parallelism). Default: 0.4</param>
            <param name="minGray">Minimum mean gray value. Default: 160</param>
            <param name="maxGray">Maximum mean gray value. Default: 220</param>
            <param name="maxStandard">Maximum allowed standard deviation. Default: 10.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InfoParallelsXld(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return information about the gray values of the area enclosed by XLD parallels.</summary>
            <param name="parallels">Input XLD Parallels.</param>
            <param name="image">Corresponding gray value image.</param>
            <param name="qualityMin">Minimum quality factor.</param>
            <param name="qualityMax">Maximum quality factor.</param>
            <param name="grayMin">Minimum mean gray value.</param>
            <param name="grayMax">Maximum mean gray value.</param>
            <param name="standardMin">Minimum standard deviation.</param>
            <param name="standardMax">Maximum standard deviation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetParallelsXld(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return an XLD parallel's data (as lines).</summary>
            <param name="parallels">Input XLD parallels.</param>
            <param name="row1">Row coordinates of the points on polygon P1.</param>
            <param name="col1">Column coordinates of the points on polygon P1.</param>
            <param name="length1">Lengths of the line segments on polygon P1.</param>
            <param name="phi1">Angles of the line segments on polygon P1.</param>
            <param name="row2">Row coordinates of the points on polygon P2.</param>
            <param name="col2">Column coordinates of the points on polygon P2.</param>
            <param name="length2">Lengths of the line segments on polygon P2.</param>
            <param name="phi2">Angles of the line segments on polygon P2.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenParallelsXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Extract parallel XLD polygons.</summary>
            <param name="polygons">Input polygons.</param>
            <param name="parallels">Parallel polygons.</param>
            <param name="len">Minimum length of the individual polygon segments. Default: 10.0</param>
            <param name="dist">Maximum distance between the polygon segments. Default: 30.0</param>
            <param name="alpha">Maximum angle difference of the polygon segments. Default: 0.15</param>
            <param name="merge">Should adjacent parallel relations be merged? Default: "true"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetLinesXld(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return an XLD polygon's data (as lines).</summary>
            <param name="polygon">Input XLD polygons.</param>
            <param name="beginRow">Row coordinates of the lines' start points.</param>
            <param name="beginCol">Column coordinates of the lines' start points.</param>
            <param name="endRow">Column coordinates of the lines' end points.</param>
            <param name="endCol">Column coordinates of the lines' end points.</param>
            <param name="length">Lengths of the line segments.</param>
            <param name="phi">Angles of the line segments.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetPolygonXld(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return an XLD polygon's data.</summary>
            <param name="polygon">Input XLD polygon.</param>
            <param name="row">Row coordinates of the polygons' points.</param>
            <param name="col">Column coordinates of the polygons' points.</param>
            <param name="length">Lengths of the line segments.</param>
            <param name="phi">Angles of the line segments.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenPolygonsXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Approximate XLD contours by polygons.</summary>
            <param name="contours">Contours to be approximated.</param>
            <param name="polygons">Approximating polygons.</param>
            <param name="type">Type of approximation. Default: "ramer"</param>
            <param name="alpha">Threshold for the approximation. Default: 2.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SplitContoursXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Split XLD contours at dominant points.</summary>
            <param name="polygons">Polygons for which the corresponding contours are to be split.</param>
            <param name="contours">Split contours.</param>
            <param name="mode">Mode for the splitting of the contours. Default: "polygon"</param>
            <param name="weight">Weight for the sensitiveness. Default: 1</param>
            <param name="smooth">Width of the smoothing mask. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProjectiveTransContourXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Apply a projective transformation to an XLD contour.</summary>
            <param name="contours">Input contours.</param>
            <param name="contoursProjTrans">Output contours.</param>
            <param name="homMat2D">Homogeneous projective transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AffineTransPolygonXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Apply an arbitrary affine transformation to XLD polygons.</summary>
            <param name="polygons">Input XLD polygons.</param>
            <param name="polygonsAffinTrans">Transformed XLD polygons.</param>
            <param name="homMat2D">Input transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AffineTransContourXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Apply an arbitrary affine 2D transformation to XLD contours.</summary>
            <param name="contours">Input XLD contours.</param>
            <param name="contoursAffinTrans">Transformed XLD contours.</param>
            <param name="homMat2D">Input transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseContoursXld(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Close an XLD contour.</summary>
            <param name="contours">Contours to be closed.</param>
            <param name="closedContours">Closed contours.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClipEndPointsContoursXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Clip the end points of an XLD contour.</summary>
            <param name="contours">Input contour</param>
            <param name="clippedContours">Clipped contour</param>
            <param name="mode">Clipping mode. Default: "num_points"</param>
            <param name="length">Clipping length in unit pixels (Mode $=$ 'length') or number (Mode $=$ 'num_points') Default: 3</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClipContoursXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Clip an XLD contour.</summary>
            <param name="contours">Contours to be clipped.</param>
            <param name="clippedContours">Clipped contours.</param>
            <param name="row1">Row coordinate of the upper left corner of the clip rectangle. Default: 0</param>
            <param name="column1">Column coordinate of the upper left corner of the clip rectangle. Default: 0</param>
            <param name="row2">Row coordinate of the lower right corner of the clip rectangle. Default: 512</param>
            <param name="column2">Column coordinate of the lower right corner of the clip rectangle. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LocalMaxContoursXld(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Select XLD contours with a local maximum of gray values.</summary>
            <param name="contours">XLD contours to be examined.</param>
            <param name="image">Corresponding gray value image.</param>
            <param name="localMaxContours">Selected contours.</param>
            <param name="minPercent">Minimum percentage of maximum points. Default: 70</param>
            <param name="minDiff">Minimum amount by which the gray value at the maximum must be larger than in the profile. Default: 15</param>
            <param name="distance">Maximum width of profile used to check for maxima. Default: 4</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.UnionStraightContoursHistoXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the union of neighboring straight contours that have a similar  distance from a given line.</summary>
            <param name="contours">Input XLD contours.</param>
            <param name="unionContours">Output XLD contours.</param>
            <param name="selectedContours">Output XLD contours.</param>
            <param name="refLineStartRow">y coordinate of the starting point of the reference line. Default: 0</param>
            <param name="refLineStartColumn">x coordinate of the starting point of the reference line. Default: 0</param>
            <param name="refLineEndRow">y coordinate of the endpoint of the reference line. Default: 0</param>
            <param name="refLineEndColumn">x coordinate of the endpoint of the reference line. Default: 0</param>
            <param name="width">Maximum distance. Default: 1</param>
            <param name="maxWidth">Maximum Width between two minimas. Default: 1</param>
            <param name="filterSize">Size of Smoothfilter Default: 1</param>
            <param name="histoValues">Output Values of Histogram.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.UnionStraightContoursXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the union of neighboring straight contours that have a similar  direction.</summary>
            <param name="contours">Input XLD contours.</param>
            <param name="unionContours">Output XLD contours.</param>
            <param name="maxDist">Maximum distance of the contours' endpoints. Default: 5.0</param>
            <param name="maxDiff">Maximum difference in direction. Default: 0.5</param>
            <param name="percent">Weighting factor for the two selection criteria. Default: 50.0</param>
            <param name="mode">Should parallel contours be taken into account? Default: "noparallel"</param>
            <param name="iterations">Number of iterations or 'maximum'. Default: "maximum"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.UnionCollinearContoursExtXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the union of collinear contours  (operator with extended functionality).</summary>
            <param name="contours">Input XLD contours.</param>
            <param name="unionContours">Output XLD contours.</param>
            <param name="maxDistAbs">Maximum distance of the contours' end points in the direction of the reference regression line. Default: 10.0</param>
            <param name="maxDistRel">Maximum distance of the contours' end points in the direction of the reference regression line in relation to the length of the contour which is to be elongated. Default: 1.0</param>
            <param name="maxShift">Maximum distance of the contour from the reference regression line (i.e., perpendicular to the line). Default: 2.0</param>
            <param name="maxAngle">Maximum angle difference between the two contours. Default: 0.1</param>
            <param name="maxOverlap">Maximum range of the overlap. Default: 0.0</param>
            <param name="maxRegrError">Maximum regression error of the resulting contours (NOT USED).  Default: -1.0</param>
            <param name="maxCosts">Threshold for reducing the total costs of unification. Default: 1.0</param>
            <param name="weightDist">Influence of the distance in the line direction on the total costs. Default: 1.0</param>
            <param name="weightShift">Influence of the distance from the regression line on the total costs. Default: 1.0</param>
            <param name="weightAngle">Influence of the angle difference on the total costs. Default: 1.0</param>
            <param name="weightLink">Influence of the line disturbance by the linking segment (overlap and angle difference) on the total costs. Default: 1.0</param>
            <param name="weightRegr">Influence of the regression error on the total costs (NOT USED). Default: 0.0</param>
            <param name="mode">Mode describing the treatment of the contours' attributes Default: "attr_keep"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.UnionCollinearContoursXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Unite approximately collinear contours.</summary>
            <param name="contours">Input XLD contours.</param>
            <param name="unionContours">Output XLD contours.</param>
            <param name="maxDistAbs">Maximum length of the gap between two contours, measured along the regression line of the reference contour. Default: 10.0</param>
            <param name="maxDistRel">Maximum length of the gap between two contours, relative to the length of the reference contour, both measured along the regression line of the reference contour. Default: 1.0</param>
            <param name="maxShift">Maximum distance of the second contour from the regression line of the reference contour. Default: 2.0</param>
            <param name="maxAngle">Maximum angle between the regression lines of two contours. Default: 0.1</param>
            <param name="mode">Mode that defines the treatment of contour attributes, i.e., if the contour attributes are kept or discarded. Default: "attr_keep"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.UnionAdjacentContoursXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the union of contours whose end points are close together.</summary>
            <param name="contours">Input XLD contours.</param>
            <param name="unionContours">Output XLD contours.</param>
            <param name="maxDistAbs">Maximum distance of the contours' end points. Default: 10.0</param>
            <param name="maxDistRel">Maximum distance of the contours' end points in relation to the length of the longer contour. Default: 1.0</param>
            <param name="mode">Mode describing the treatment of the contours' attributes. Default: "attr_keep"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectContoursXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Select XLD contours according to several features.</summary>
            <param name="contours">Input XLD contours.</param>
            <param name="selectedContours">Output XLD contours.</param>
            <param name="feature">Feature to select contours with. Default: "contour_length"</param>
            <param name="min1">Lower threshold. Default: 0.5</param>
            <param name="max1">Upper threshold. Default: 200.0</param>
            <param name="min2">Lower threshold. Default: -0.5</param>
            <param name="max2">Upper threshold. Default: 0.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetRegressParamsXld(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return XLD contour parameters.</summary>
            <param name="contours">Input XLD contours.</param>
            <param name="length">Number of contour points.</param>
            <param name="nx">X-coordinate of the normal vector of the regression line.</param>
            <param name="ny">Y-coordinate of the normal vector of the regression line.</param>
            <param name="dist">Distance of the regression line from the origin.</param>
            <param name="fpx">X-coordinate of the projection of the start point of the contour onto the regression line.</param>
            <param name="fpy">Y-coordinate of the projection of the start point of the contour onto the regression line.</param>
            <param name="lpx">X-coordinate of the projection of the end point of the contour onto the regression line.</param>
            <param name="lpy">Y-coordinate of the projection of the end point of the contour onto the regression line.</param>
            <param name="mean">Mean distance of the contour points from the regression line.</param>
            <param name="deviation">Standard deviation of the distances from the regression line.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RegressContoursXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Calculate the parameters of a regression line to an XLD contour.</summary>
            <param name="contours">Input XLD contours.</param>
            <param name="regressContours">Resulting XLD contours.</param>
            <param name="mode">Type of outlier treatment. Default: "no"</param>
            <param name="iterations">Number of iterations for the outlier treatment. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetContourAngleXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the direction of an XLD contour for each contour point.</summary>
            <param name="contour">Input contour.</param>
            <param name="angleMode">Return type of the angles. Default: "abs"</param>
            <param name="calcMode">Method for computing the angles. Default: "range"</param>
            <param name="lookaround">Number of points to take into account. Default: 3</param>
            <param name="angles">Direction of the tangent to the contour points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SmoothContoursXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Smooth an XLD contour.</summary>
            <param name="contours">Contour to be smoothed.</param>
            <param name="smoothedContours">Smoothed contour.</param>
            <param name="numRegrPoints">Number of points used to calculate the regression line. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ContourPointNumXld(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Return the number of points in an XLD contour.</summary>
            <param name="contour">Input XLD contour.</param>
            <param name="length">Number of contour points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryContourGlobalAttribsXld(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Return the names of the defined global attributes of an XLD contour.</summary>
            <param name="contour">Input contour.</param>
            <param name="attribs">List of the defined global contour attributes.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetContourGlobalAttribXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return global attributes values of an XLD contour.</summary>
            <param name="contour">Input XLD contour.</param>
            <param name="name">Name of the attribute. Default: "regr_norm_row"</param>
            <param name="attrib">Attribute values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryContourAttribsXld(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Return the names of the defined attributes of an XLD contour.</summary>
            <param name="contour">Input contour.</param>
            <param name="attribs">List of the defined contour attributes.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetContourAttribXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return point attribute values of an XLD contour.</summary>
            <param name="contour">Input XLD contour.</param>
            <param name="name">Name of the attribute. Default: "angle"</param>
            <param name="attrib">Attribute values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetContourXld(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the coordinates of an XLD contour.</summary>
            <param name="contour">Input XLD contour.</param>
            <param name="row">Row coordinate of the contour's points.</param>
            <param name="col">Column coordinate of the contour's points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenContourRegionXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Generate XLD contours from regions.</summary>
            <param name="regions">Input regions.</param>
            <param name="contours">Resulting contours.</param>
            <param name="mode">Mode of contour generation. Default: "border"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenContourPolygonRoundedXld(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate an XLD contour with rounded corners from a polygon (given as tuples).</summary>
            <param name="contour">Resulting contour.</param>
            <param name="row">Row coordinates of the polygon. Default: [20,80,80,20,20]</param>
            <param name="col">Column coordinates of the polygon. Default: [20,20,80,80,20]</param>
            <param name="radius">Radii of the rounded corners. Default: [20,20,20,20,20]</param>
            <param name="samplingInterval">Distance of the samples. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenContourPolygonXld(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate an XLD contour from a polygon (given as tuples).</summary>
            <param name="contour">Resulting contour.</param>
            <param name="row">Row coordinates of the polygon. Default: [0,1,2,2,2]</param>
            <param name="col">Column coordinates of the polygon. Default: [0,0,0,1,2]</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenContoursSkeletonXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Convert a skeleton into XLD contours.</summary>
            <param name="skeleton">Skeleton of which the contours are to be determined.</param>
            <param name="contours">Resulting contours.</param>
            <param name="length">Minimum number of points a contour has to have. Default: 1</param>
            <param name="mode">Contour filter mode. Default: "filter"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DispXld(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Display an XLD object.</summary>
            <param name="XLDObject">XLD object to display.</param>
            <param name="windowHandle">Window id.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WienerFilterNi(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Image restoration by Wiener filtering.</summary>
            <param name="image">Corrupted image.</param>
            <param name="psf">impulse response (PSF) of degradation (in spatial domain).</param>
            <param name="noiseRegion">Region for noise estimation.</param>
            <param name="restoredImage">Restored image.</param>
            <param name="maskWidth">Width of filter mask. Default: 3</param>
            <param name="maskHeight">Height of filter mask. Default: 3</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WienerFilter(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Image restoration by Wiener filtering.</summary>
            <param name="image">Corrupted image.</param>
            <param name="psf">impulse response (PSF) of degradation (in spatial domain).</param>
            <param name="filteredImage">Smoothed version of corrupted image.</param>
            <param name="restoredImage">Restored image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenPsfMotion(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate an impulse response of a (linearly) motion blurring.</summary>
            <param name="psf">Impulse response of motion-blur.</param>
            <param name="PSFwidth">Width of impulse response image. Default: 256</param>
            <param name="PSFheight">Height of impulse response image. Default: 256</param>
            <param name="blurring">Degree of motion-blur. Default: 20.0</param>
            <param name="angle">Angle between direction of motion and x-axis (anticlockwise). Default: 0</param>
            <param name="type">PSF prototype resp. type of motion. Default: 3</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SimulateMotion(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Simulation of (linearly) motion blur.</summary>
            <param name="image">image to be blurred.</param>
            <param name="movedImage">motion blurred image.</param>
            <param name="blurring">extent of blurring. Default: 20.0</param>
            <param name="angle">Angle between direction of motion and x-axis (anticlockwise). Default: 0</param>
            <param name="type">impulse response of motion blur. Default: 3</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenPsfDefocus(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate an impulse response of an uniform out-of-focus blurring.</summary>
            <param name="psf">Impulse response of uniform out-of-focus blurring.</param>
            <param name="PSFwidth">Width of result image. Default: 256</param>
            <param name="PSFheight">Height of result image. Default: 256</param>
            <param name="blurring">Degree of Blurring. Default: 5.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SimulateDefocus(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Simulate an uniform out-of-focus blurring of an image.</summary>
            <param name="image">Image to blur.</param>
            <param name="defocusedImage">Blurred image.</param>
            <param name="blurring">Degree of blurring. Default: 5.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeVariationModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a variation model.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="modelID">ID of the variation model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeVariationModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a variation model.</summary>
            <param name="modelID">ID of the variation model.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadVariationModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a variation model from a file.</summary>
            <param name="fileName">File name.</param>
            <param name="modelID">ID of the variation model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteVariationModel(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a variation model to a file.</summary>
            <param name="modelID">ID of the variation model.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetThreshImagesVariationModel(HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Return the threshold images used for image comparison by a variation model.</summary>
            <param name="minImage">Threshold image for the lower threshold.</param>
            <param name="maxImage">Threshold image for the upper threshold.</param>
            <param name="modelID">ID of the variation model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetVariationModel(HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Return the images used for image comparison by a variation model.</summary>
            <param name="image">Image of the trained object.</param>
            <param name="varImage">Variation image of the trained object.</param>
            <param name="modelID">ID of the variation model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CompareExtVariationModel(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compare an image to a variation model.</summary>
            <param name="image">Image of the object to be compared.</param>
            <param name="region">Region containing the points that differ substantially from the model.</param>
            <param name="modelID">ID of the variation model.</param>
            <param name="mode">Method used for comparing the variation model. Default: "absolute"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CompareVariationModel(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Compare an image to a variation model.</summary>
            <param name="image">Image of the object to be compared.</param>
            <param name="region">Region containing the points that differ substantially from the model.</param>
            <param name="modelID">ID of the variation model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PrepareDirectVariationModel(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Prepare a variation model for comparison with an image.</summary>
            <param name="refImage">Reference image of the object.</param>
            <param name="varImage">Variation image of the object.</param>
            <param name="modelID">ID of the variation model.</param>
            <param name="absThreshold">Absolute minimum threshold for the differences between the image and the variation model. Default: 10</param>
            <param name="varThreshold">Threshold for the differences based on the variation of the variation model. Default: 2</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PrepareVariationModel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Prepare a variation model for comparison with an image.</summary>
            <param name="modelID">ID of the variation model.</param>
            <param name="absThreshold">Absolute minimum threshold for the differences between the image and the variation model. Default: 10</param>
            <param name="varThreshold">Threshold for the differences based on the variation of the variation model. Default: 2</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TrainVariationModel(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Train a variation model.</summary>
            <param name="images">Images of the object to be trained.</param>
            <param name="modelID">ID of the variation model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllVariationModels">
            <summary>Free the memory of all variation models.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearVariationModel(HalconDotNet.HTuple)">
            <summary>Free the memory of a variation model.</summary>
            <param name="modelID">ID of the variation model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearTrainDataVariationModel(HalconDotNet.HTuple)">
            <summary>Free the memory of the training data of a variation model.</summary>
            <param name="modelID">ID of the variation model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateVariationModel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a variation model for image comparison.</summary>
            <param name="width">Width of the images to be compared. Default: 640</param>
            <param name="height">Height of the images to be compared. Default: 480</param>
            <param name="type">Type of the images to be compared. Default: "byte"</param>
            <param name="mode">Method used for computing the variation model. Default: "standard"</param>
            <param name="modelID">ID of the variation model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleUnion(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the union set of two input tuples.</summary>
            <param name="set1">Input tuple.</param>
            <param name="set2">Input tuple.</param>
            <param name="union">The union set of two input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleIntersection(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the intersection set of two input tuples.</summary>
            <param name="set1">Input tuple.</param>
            <param name="set2">Input tuple.</param>
            <param name="intersection">The intersection set of two input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleDifference(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the difference set of two input tuples.</summary>
            <param name="set1">Input tuple.</param>
            <param name="set2">Input tuple.</param>
            <param name="difference">The difference set of two input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleSymmdiff(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the symmetric difference set of two input tuples.</summary>
            <param name="set1">Input tuple.</param>
            <param name="set2">Input tuple.</param>
            <param name="symmDiff">The symmetric difference set of two input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleIsStringElem(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test whether the types of the elements of a tuple are of type string.</summary>
            <param name="t">Input tuple.</param>
            <param name="isString">Are the elements of the input tuple of type string?</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleIsRealElem(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test whether the types of the elements of a tuple are of type real.</summary>
            <param name="t">Input tuple.</param>
            <param name="isReal">Are the elements of the input tuple of type real?</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleIsIntElem(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test whether the types of the elements of a tuple are of type integer.</summary>
            <param name="t">Input tuple.</param>
            <param name="isInt">Are the elements of the input tuple of type integer?</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleTypeElem(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the types of the elements of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="types">Types of the elements of the input tuple as integer values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleIsMixed(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test whether a tuple is of type mixed.</summary>
            <param name="t">Input tuple.</param>
            <param name="isMixed">Is the input tuple of type mixed?</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleIsString(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test if the internal representation of a tuple is of type string.</summary>
            <param name="t">Input tuple.</param>
            <param name="isString">Is the input tuple of type string?</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleIsReal(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test if the internal representation of a tuple is of type real.</summary>
            <param name="t">Input tuple.</param>
            <param name="isReal">Is the input tuple of type real?</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleIsInt(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test if the internal representation of a tuple is of type integer.</summary>
            <param name="t">Input tuple.</param>
            <param name="isInt">Is the input tuple of type integer?</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleType(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the type of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="type">Type of the input tuple as an integer number.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleHistoRange(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the value distribution of a tuple within a certain value range.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
            <param name="numBins">Number of bins.</param>
            <param name="histo">Histogram to be calculated.</param>
            <param name="binSize">Bin size.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleRegexpSelect(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Select tuple elements matching a regular expression.</summary>
            <param name="data">Input strings to match.</param>
            <param name="expression">Regular expression. Default: ".*"</param>
            <param name="selection">Matching strings</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleRegexpTest(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test if a string matches a regular expression.</summary>
            <param name="data">Input strings to match.</param>
            <param name="expression">Regular expression. Default: ".*"</param>
            <param name="numMatches">Number of matching strings</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleRegexpReplace(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Replace a substring using regular expressions.</summary>
            <param name="data">Input strings to process.</param>
            <param name="expression">Regular expression. Default: ".*"</param>
            <param name="replace">Replacement expression.</param>
            <param name="result">Processed strings.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleRegexpMatch(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Extract substrings using regular expressions.</summary>
            <param name="data">Input strings to match.</param>
            <param name="expression">Regular expression. Default: ".*"</param>
            <param name="matches">Found matches.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleRand(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return a tuple of random numbers between 0 and 1.</summary>
            <param name="length">Length of tuple to generate.</param>
            <param name="rand">Tuple of random numbers.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleLength(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the number of elements of a tuple.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="length">Number of elements of input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleSgn(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the sign of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="sgn">Signs of the input tuple as integer numbers.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleMax2(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the elementwise maximum of two tuples.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="max2">Elementwise maximum of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleMin2(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the elementwise minimum of two tuples.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="min2">Elementwise minimum of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleMax(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the maximal element of a tuple.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="max">Maximal element of the input tuple elements.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleMin(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the minimal element of a tuple.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="min">Minimal element of the input tuple elements.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleCumul(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the cumulative sums of a tuple.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="cumul">Cumulative sum of the corresponding tuple elements.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleSelectRank(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Select the element of rank n of a tuple.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="rankIndex">Rank of the element to select.</param>
            <param name="selected">Selected tuple element.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleMedian(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the median of the elements of a tuple.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="median">Median of the tuple elements.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleSum(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the sum of all elements of a tuple.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="sum">Sum of tuple elements.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleMean(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the mean value of a tuple of numbers.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="mean">Mean value of tuple elements.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleDeviation(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the standard deviation of the elements of a tuple.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="deviation">Standard deviation of tuple elements.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleUniq(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Discard all but one of successive identical elements of a tuple.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="uniq">Tuple without successive identical elements.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleFindLast(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the index of the last occurence of a tuple within another tuple.</summary>
            <param name="tuple">Input tuple to examine.</param>
            <param name="toFind">Input tuple with values to find.</param>
            <param name="index">Index of the last occurrence of the values to find.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleFindFirst(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the index of the first occurrence of a tuple within another tuple.</summary>
            <param name="tuple">Input tuple to examine.</param>
            <param name="toFind">Input tuple with values to find.</param>
            <param name="index">Index of the first occurrence of the values to find.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleFind(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the indices of all occurrences of a tuple within another tuple.</summary>
            <param name="tuple">Input tuple to examine.</param>
            <param name="toFind">Input tuple with values to find.</param>
            <param name="indices">Indices of the occurrences of the values to find in the  tuple to examine.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleSortIndex(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Sort the elements of a tuple and return the indices of the sorted tuple.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="indices">Sorted tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleSort(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Sort the elements of a tuple in ascending order.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="sorted">Sorted tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleInverse(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Invert a tuple.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="inverted">Inverted input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleConcat(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Concatenate two tuples to a new one.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="concat">Concatenation of input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleSelectRange(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Select several elements of a tuple.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="leftindex">Index of first element to select.</param>
            <param name="rightindex">Index of last element to select.</param>
            <param name="selected">Selected tuple elements.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleLastN(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Select all elements from index "n" to the end of a tuple.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="index">Index of the first element to select.</param>
            <param name="selected">Selected tuple elements.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleFirstN(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Select the first elements of a tuple up to the index "n".</summary>
            <param name="tuple">Input tuple.</param>
            <param name="index">Index of the last element to select.</param>
            <param name="selected">Selected tuple elements.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleInsert(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Inserts one or more elements into a tuple at index.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="index">Start index of elements to be inserted.</param>
            <param name="insertTuple">Element(s) to insert at index.</param>
            <param name="extended">Tuple with inserted elements.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleReplace(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Replaces one or more elements of a tuple.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="index">Index/Indices of elements to be replaced.</param>
            <param name="replaceTuple">Element(s) to replace.</param>
            <param name="replaced">Tuple with replaced elements.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleRemove(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Remove elements from a tuple.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="index">Indices of the elements to remove.</param>
            <param name="reduced">Reduced tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleSelectMask(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Select in mask specified elements of a tuple.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="mask"> greater than  0 specifies the elements to select.</param>
            <param name="selected">Selected tuple elements.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleSelect(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Select single elements of a tuple.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="index">Indices of the elements to select.</param>
            <param name="selected">Selected tuple element.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleStrBitSelect(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Select single character or bit from a tuple.</summary>
            <param name="tuple">Input tuple.</param>
            <param name="index">Position of character or bit to select.</param>
            <param name="selected">Tuple containing the selected characters and bits.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleGenSequence(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Generate a tuple with a sequence of equidistant values.</summary>
            <param name="start">Start value of the tuple.</param>
            <param name="end">Maximum value for the last entry.</param>
            <param name="step">Increment value.</param>
            <param name="sequence">The resulting sequence.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleGenConst(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Generate a tuple of a specific length and initialize its elements.</summary>
            <param name="length">Length of tuple to generate.</param>
            <param name="constVal">Constant for initializing the tuple elements.</param>
            <param name="newtuple">New Tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleEnvironment(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read one or more environment variables.</summary>
            <param name="names">Tuple containing name(s) of the environment variable(s).</param>
            <param name="values">Content of the environment variable(s).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleSplit(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Split strings into substrings between predefined separator symbol(s).</summary>
            <param name="stringVal">Input tuple with string(s) to split.</param>
            <param name="separator">Input tuple with separator symbol(s).</param>
            <param name="substrings">Substrings after splitting the input strings.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleSubstr(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Cut characters from position "n1" through "n2" out of a string tuple.</summary>
            <param name="stringVal">Input tuple with string(s) to examine.</param>
            <param name="position1">Input tuple with start position(s) "n1".</param>
            <param name="position2">Input tuple with end position(s) "n2".</param>
            <param name="substring">Characters of the string(s) from position "n1" to "n2".</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleStrLastN(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Cut all characters starting at position "n" out of a string tuple.</summary>
            <param name="stringVal">Input tuple with string(s) to examine.</param>
            <param name="position">Input tuple with position(s) "n".</param>
            <param name="substring">The last characters of the string(s) starting at position "n".</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleStrFirstN(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Cut the first characters up to position "n" out of a string tuple.</summary>
            <param name="stringVal">Input tuple with string(s) to examine.</param>
            <param name="position">Input tuple with position(s) "n".</param>
            <param name="substring">The first characters of the string(s) up to position "n".</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleStrrchr(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Backward search for characters within a string tuple.</summary>
            <param name="stringVal">Input tuple with string(s) to examine.</param>
            <param name="toFind">Input tuple with character(s) to search.</param>
            <param name="position">Position of searched character(s) within the string(s).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleStrchr(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Forward search for characters within a string tuple.</summary>
            <param name="stringVal">Input tuple with string(s) to examine.</param>
            <param name="toFind">Input tuple with character(s) to search.</param>
            <param name="position">Position of searched character(s) within the string(s).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleStrrstr(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Backward search for strings within a string tuple.</summary>
            <param name="stringVal">Input tuple with string(s) to examine.</param>
            <param name="toFind">Input tuple with string(s) to search.</param>
            <param name="position">Position of searched string(s) within the examined string(s).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleStrstr(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Forward search for strings within a string tuple.</summary>
            <param name="stringVal">Input tuple with string(s) to examine.</param>
            <param name="toFind">Input tuple with string(s) to search.</param>
            <param name="position">Position of searched string(s) within the examined string(s).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleStrlen(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Determine the length of every string within a tuple of strings.</summary>
            <param name="t1">Input tuple.</param>
            <param name="length">Lengths of the single strings of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleLessEqualElem(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test, whether a tuple is elementwise less or equal to another tuple.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="lesseq">Result of the comparison of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleLessElem(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test, whether a tuple is elementwise less than another tuple.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="less">Result of the comparison of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleGreaterEqualElem(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test, whether a tuple is elementwise greater or equal to another tuple.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="greatereq">Result of the comparison of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleGreaterElem(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test, whether a tuple is elementwise greater than another tuple.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="greater">Result of the comparison of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleNotEqualElem(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test, whether two tuples are elementwise not equal.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="nequal">Result of the comparison of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleEqualElem(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test, whether two tuples are elementwise equal.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="equal">Result of the comparison of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleLessEqual(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test whether a tuple is less or equal to another tuple.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="lesseq">Result of the comparison of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleLess(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test whether a tuple is less than another tuple.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="less">Result of the comparison of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleGreaterEqual(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test whether a tuple is greater or equal to another tuple.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="greatereq">Result of the comparison of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleGreater(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test whether a tuple is greater than another tuple.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="greater">Result of the comparison of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleNotEqual(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test whether two tuples are not equal.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="nequal">Result of the comparison of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleEqual(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test whether two tuples are equal.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="equal">Result of the comparison of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleNot(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the logical not of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="not">Binary not of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleXor(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the logical exclusive or of two tuples.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="xor">Binary exclusive or of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleOr(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the logical or of two tuples.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="or">Logical or of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleAnd(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the logical and of two tuples.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="and">Logical and of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleBnot(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the bitwise not of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="BNot">Binary not of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleBxor(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the bitwise exclusive or of two tuples.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="BXor">Binary exclusive or of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleBor(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the bitwise or of two tuples.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="BOr">Binary or of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleBand(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the bitwise and of two tuples.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="BAnd">Binary and of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleRsh(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Shift a tuple bitwise to the right.</summary>
            <param name="t">Input tuple.</param>
            <param name="shift">Number of places to shift the input tuple.</param>
            <param name="rsh">Shifted input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleLsh(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Shift a tuple bitwise to the left.</summary>
            <param name="t">Input tuple.</param>
            <param name="shift">Number of places to shift the input tuple.</param>
            <param name="lsh">Shifted input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleChrt(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Convert a tuple of integers into strings with the corresponding ASCII codes.</summary>
            <param name="t">Input tuple.</param>
            <param name="chrt">Strings corresponding to the ASCII code of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleOrds(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Convert a tuple of strings into a tuple of their ASCII codes.</summary>
            <param name="t">Input tuple.</param>
            <param name="ords">ASCII code of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleChr(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Convert a tuple of integers into strings with the corresponding ASCII codes.</summary>
            <param name="t">Input tuple.</param>
            <param name="chr">Strings corresponding to the ASCII code of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleOrd(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Convert a tuple of strings of length 1 into a tuple of their ASCII codes.</summary>
            <param name="t">Input tuple.</param>
            <param name="ord">ASCII code of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleString(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Convert a tuple into a tuple of strings.</summary>
            <param name="t">Input tuple.</param>
            <param name="format">Format string.</param>
            <param name="stringVal">Input tuple converted to strings.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleIsNumber(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Check a tuple (of strings) whether it represents numbers.</summary>
            <param name="t">Input tuple.</param>
            <param name="isNumber">Tuple with boolean numbers.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleNumber(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Convert a tuple (of strings) into a tuple of numbers.</summary>
            <param name="t">Input tuple.</param>
            <param name="number">Input tuple as numbers.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleRound(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Convert a tuple into a tuple of integer numbers.</summary>
            <param name="t">Input tuple.</param>
            <param name="round">Result of the rounding.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleInt(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Convert a tuple into a tuple of integer numbers.</summary>
            <param name="t">Input tuple.</param>
            <param name="intVal">Result of the conversion into integer numbers.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleReal(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Convert a tuple into a tuple of floating point numbers.</summary>
            <param name="t">Input tuple.</param>
            <param name="real">Input tuple as floating point numbers.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleLdexp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the ldexp function of two tuples.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="ldexp">Ldexp function of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleFmod(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the remainder of the floating point division of two tuples.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="fmod">Remainder of the division of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleMod(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the remainder of the integer division of two tuples.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="mod">Remainder of the division of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleCeil(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the ceiling function of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="ceil">Ceiling function of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleFloor(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the floor function of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="floor">Floor function of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TuplePow(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the power function of two tuples.</summary>
            <param name="t1">Input tuple 1.</param>
            <param name="t2">Input tuple 2.</param>
            <param name="pow">Power function of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleLog10(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the base 10 logarithm of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="log">Base 10 logarithm of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleLog(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the natural logarithm of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="log">Natural logarithm of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleExp(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the exponential of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="exp">Exponential of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleTanh(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the hyperbolic tangent of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="tanh">Hyperbolic tangent of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleCosh(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the hyperbolic cosine of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="cosh">Hyperbolic cosine of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleSinh(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the hyperbolic sine of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="sinh">Hyperbolic sine of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleRad(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Convert a tuple from degrees to radians.</summary>
            <param name="deg">Input tuple.</param>
            <param name="rad">Input tuple in radians.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleDeg(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Convert a tuple from radians to degrees.</summary>
            <param name="rad">Input tuple.</param>
            <param name="deg">Input tuple in degrees.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleAtan2(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the arctangent of a tuple for all four quadrants.</summary>
            <param name="y">Input tuple of the y-values.</param>
            <param name="x">Input tuple of the x-values.</param>
            <param name="ATan">Arctangent of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleAtan(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the arctangent of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="ATan">Arctangent of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleAcos(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the arccosine of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="ACos">Arccosine of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleAsin(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the arcsine of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="ASin">Arcsine of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleTan(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the tangent of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="tan">Tangent of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleCos(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the cosine of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="cos">Cosine of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleSin(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the sine of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="sin">Sine of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleFabs(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the absolute value of a tuple (as floating point numbers).</summary>
            <param name="t">Input tuple.</param>
            <param name="abs">Absolute value of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleSqrt(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the square root of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="sqrt">Square root of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleAbs(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the absolute value of a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="abs">Absolute value of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleNeg(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Negate a tuple.</summary>
            <param name="t">Input tuple.</param>
            <param name="neg">Negation of the input tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleDiv(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Divide two tuples.</summary>
            <param name="q1">Input tuple 1.</param>
            <param name="q2">Input tuple 2.</param>
            <param name="quot">Quotient of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleMult(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Multiply two tuples.</summary>
            <param name="p1">Input tuple 1.</param>
            <param name="p2">Input tuple 2.</param>
            <param name="prod">Product of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleSub(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Subtract two tuples.</summary>
            <param name="d1">Input tuple 1.</param>
            <param name="d2">Input tuple 2.</param>
            <param name="diff">Difference of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TupleAdd(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add two tuples.</summary>
            <param name="s1">Input tuple 1.</param>
            <param name="s2">Input tuple 2.</param>
            <param name="sum">Sum of the input tuples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeTuple(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized tuple.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="tuple">Tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeTuple(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a tuple.</summary>
            <param name="tuple">Tuple.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteTuple(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a tuple to a file.</summary>
            <param name="tuple">Tuple with any kind of data.</param>
            <param name="fileName">Name of the file to be written.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadTuple(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a tuple from a file.</summary>
            <param name="fileName">Name of the file to be read.</param>
            <param name="tuple">Tuple with any kind of data.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PoseAverage(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the average of a set of poses.</summary>
            <param name="poses">Set of poses of which the average if computed.</param>
            <param name="weights">Empty tuple, or one weight per pose. Default: []</param>
            <param name="mode">Averaging mode. Default: "iterative"</param>
            <param name="sigmaT">Weight of the translation. Default: "auto"</param>
            <param name="sigmaR">Weight of the rotation. Default: "auto"</param>
            <param name="averagePose">Weighted mean of the poses.</param>
            <param name="quality">Deviation of the mean from the input poses.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QuatRotatePoint3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Perform a rotation by a unit quaternion.</summary>
            <param name="quaternion">Rotation quaternion.</param>
            <param name="px">X coordinate of the point to be rotated.</param>
            <param name="py">Y coordinate of the point to be rotated.</param>
            <param name="pz">Z coordinate of the point to be rotated.</param>
            <param name="qx">X coordinate of the rotated point.</param>
            <param name="qy">Y coordinate of the rotated point.</param>
            <param name="qz">Z coordinate of the rotated point.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QuatConjugate(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Generate the conjugation of a quaternion.</summary>
            <param name="quaternion">Input quaternion.</param>
            <param name="conjugatedQuaternion">Conjugated quaternion.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QuatNormalize(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Normalizes a quaternion.</summary>
            <param name="quaternion">Input quaternion.</param>
            <param name="normalizedQuaternion">Normalized quaternion.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AxisAngleToQuat(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a rotation quaternion.</summary>
            <param name="axisX">X component of the rotation axis.</param>
            <param name="axisY">Y component of the rotation axis.</param>
            <param name="axisZ">Z component of the rotation axis.</param>
            <param name="angle">Rotation angle in radians.</param>
            <param name="quaternion">Rotation quaternion.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QuatToPose(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Convert a quaternion into the corresponding 3D pose.</summary>
            <param name="quaternion">Rotation quaternion.</param>
            <param name="pose">3D Pose.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PoseInvert(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Invert each pose in a tuple of 3D poses.</summary>
            <param name="pose">Tuple of 3D poses.</param>
            <param name="poseInvert">Tuple of inverted 3D poses.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PoseCompose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Combine 3D poses given in two tuples.</summary>
            <param name="poseLeft">Tuple containing the left poses.</param>
            <param name="poseRight">Tuple containing the right poses.</param>
            <param name="poseCompose">Tuple containing the returned poses.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QuatToHomMat3d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Convert a quaternion into the corresponding rotation matrix.</summary>
            <param name="quaternion">Rotation quaternion.</param>
            <param name="rotationMatrix">Rotation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PoseToQuat(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Convert the rotational part of a 3D pose to a quaternion.</summary>
            <param name="pose">3D Pose.</param>
            <param name="quaternion">Rotation quaternion.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QuatInterpolate(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Interpolation of two quaternions.</summary>
            <param name="quaternionStart">Start quaternion.</param>
            <param name="quaternionEnd">End quaternion.</param>
            <param name="interpPos">Interpolation parameter. Default: 0.5</param>
            <param name="quaternionInterpolated">Interpolated quaternion.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QuatCompose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Multiply two quaternions.</summary>
            <param name="quaternionLeft">Left quaternion.</param>
            <param name="quaternionRight">Right quaternion.</param>
            <param name="quaternionComposed">Product of the input quaternions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeHomMat3d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized homogeneous 3D transformation matrix.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="homMat3D">Transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeHomMat3d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a homogeneous 3D transformation matrix.</summary>
            <param name="homMat3D">Transformation matrix.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeHomMat2d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized homogeneous 2D transformation matrix.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="homMat2D">Transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeHomMat2d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a homogeneous 2D transformation matrix.</summary>
            <param name="homMat2D">Transformation matrix.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeQuat(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized quaternion.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="quaternion">Quaternion.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeQuat(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a quaternion.</summary>
            <param name="quaternion">Quaternion.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProjectiveTransHomPoint3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Project a homogeneous 3D point using a projective transformation matrix.</summary>
            <param name="homMat3D">Homogeneous projective transformation matrix.</param>
            <param name="px">Input point (x coordinate).</param>
            <param name="py">Input point (y coordinate).</param>
            <param name="pz">Input point (z coordinate).</param>
            <param name="pw">Input point (w coordinate).</param>
            <param name="qx">Output point (x coordinate).</param>
            <param name="qy">Output point (y coordinate).</param>
            <param name="qz">Output point (z coordinate).</param>
            <param name="qw">Output point (w coordinate).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProjectiveTransPoint3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Project a 3D point using a projective transformation matrix.</summary>
            <param name="homMat3D">Homogeneous projective transformation matrix.</param>
            <param name="px">Input point (x coordinate).</param>
            <param name="py">Input point (y coordinate).</param>
            <param name="pz">Input point (z coordinate).</param>
            <param name="qx">Output point (x coordinate).</param>
            <param name="qy">Output point (y coordinate).</param>
            <param name="qz">Output point (z coordinate).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AffineTransPoint3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Apply an arbitrary affine 3D transformation to points.</summary>
            <param name="homMat3D">Input transformation matrix.</param>
            <param name="px">Input point(s) (x coordinate). Default: 64</param>
            <param name="py">Input point(s) (y coordinate). Default: 64</param>
            <param name="pz">Input point(s) (z coordinate). Default: 64</param>
            <param name="qx">Output point(s) (x coordinate).</param>
            <param name="qy">Output point(s) (y coordinate).</param>
            <param name="qz">Output point(s) (z coordinate).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.VectorToHomMat3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Approximate a 3D transformation from point correspondences.</summary>
            <param name="transformationType">Type of the transformation to compute. Default: "rigid"</param>
            <param name="px">X coordinates of the original points.</param>
            <param name="py">Y coordinates of the original points.</param>
            <param name="pz">Z coordinates of the original points.</param>
            <param name="qx">X coordinates of the transformed points.</param>
            <param name="qy">Y coordinates of the transformed points.</param>
            <param name="qz">Z coordinates of the transformed points.</param>
            <param name="homMat3D">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat3dDeterminant(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the determinant of a homogeneous 3D transformation matrix.</summary>
            <param name="homMat3D">Input transformation matrix.</param>
            <param name="determinant">Determinant of the input matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat3dTranspose(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Transpose a homogeneous 3D transformation matrix.</summary>
            <param name="homMat3D">Input transformation matrix.</param>
            <param name="homMat3DTranspose">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat3dInvert(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Invert a homogeneous 3D transformation matrix.</summary>
            <param name="homMat3D">Input transformation matrix.</param>
            <param name="homMat3DInvert">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat3dCompose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Multiply two homogeneous 3D transformation matrices.</summary>
            <param name="homMat3DLeft">Left input transformation matrix.</param>
            <param name="homMat3DRight">Right input transformation matrix.</param>
            <param name="homMat3DCompose">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat3dRotateLocal(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a rotation to a homogeneous 3D transformation matrix.</summary>
            <param name="homMat3D">Input transformation matrix.</param>
            <param name="phi">Rotation angle. Default: 0.78</param>
            <param name="axis">Axis, to be rotated around. Default: "x"</param>
            <param name="homMat3DRotate">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat3dRotate(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a rotation to a homogeneous 3D transformation matrix.</summary>
            <param name="homMat3D">Input transformation matrix.</param>
            <param name="phi">Rotation angle. Default: 0.78</param>
            <param name="axis">Axis, to be rotated around. Default: "x"</param>
            <param name="px">Fixed point of the transformation (x coordinate). Default: 0</param>
            <param name="py">Fixed point of the transformation (y coordinate). Default: 0</param>
            <param name="pz">Fixed point of the transformation (z coordinate). Default: 0</param>
            <param name="homMat3DRotate">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat3dScaleLocal(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a scaling to a homogeneous 3D transformation matrix.</summary>
            <param name="homMat3D">Input transformation matrix.</param>
            <param name="sx">Scale factor along the x-axis. Default: 2</param>
            <param name="sy">Scale factor along the y-axis. Default: 2</param>
            <param name="sz">Scale factor along the z-axis. Default: 2</param>
            <param name="homMat3DScale">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat3dScale(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a scaling to a homogeneous 3D transformation matrix.</summary>
            <param name="homMat3D">Input transformation matrix.</param>
            <param name="sx">Scale factor along the x-axis. Default: 2</param>
            <param name="sy">Scale factor along the y-axis. Default: 2</param>
            <param name="sz">Scale factor along the z-axis. Default: 2</param>
            <param name="px">Fixed point of the transformation (x coordinate). Default: 0</param>
            <param name="py">Fixed point of the transformation (y coordinate). Default: 0</param>
            <param name="pz">Fixed point of the transformation (z coordinate). Default: 0</param>
            <param name="homMat3DScale">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat3dTranslateLocal(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a translation to a homogeneous 3D transformation matrix.</summary>
            <param name="homMat3D">Input transformation matrix.</param>
            <param name="tx">Translation along the x-axis. Default: 64</param>
            <param name="ty">Translation along the y-axis. Default: 64</param>
            <param name="tz">Translation along the z-axis. Default: 64</param>
            <param name="homMat3DTranslate">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat3dTranslate(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a translation to a homogeneous 3D transformation matrix.</summary>
            <param name="homMat3D">Input transformation matrix.</param>
            <param name="tx">Translation along the x-axis. Default: 64</param>
            <param name="ty">Translation along the y-axis. Default: 64</param>
            <param name="tz">Translation along the z-axis. Default: 64</param>
            <param name="homMat3DTranslate">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat3dIdentity(HalconDotNet.HTuple@)">
            <summary>Generate the homogeneous transformation matrix of the identical 3D transformation.</summary>
            <param name="homMat3DIdentity">Transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat3dProject(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Project an affine 3D transformation matrix to a 2D projective transformation matrix.</summary>
            <param name="homMat3D">3x4 3D transformation matrix.</param>
            <param name="principalPointRow">Row coordinate of the principal point. Default: 256</param>
            <param name="principalPointCol">Column coordinate of the principal point. Default: 256</param>
            <param name="focus">Focal length in pixels. Default: 256</param>
            <param name="homMat2D">Homogeneous projective transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BundleAdjustMosaic(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Perform a bundle adjustment of an image mosaic.</summary>
            <param name="numImages">Number of different images that are used for the calibration.</param>
            <param name="referenceImage">Index of the reference image.</param>
            <param name="mappingSource">Indices of the source images of the transformations.</param>
            <param name="mappingDest">Indices of the target images of the transformations.</param>
            <param name="homMatrices2D">Array of 3x3 projective transformation matrices.</param>
            <param name="rows1">Row coordinates of corresponding points in the respective source images.</param>
            <param name="cols1">Column coordinates of corresponding points in the respective source images.</param>
            <param name="rows2">Row coordinates of corresponding points in the respective destination images.</param>
            <param name="cols2">Column coordinates of corresponding points in the respective destination images.</param>
            <param name="numCorrespondences">Number of point correspondences in the respective image pair.</param>
            <param name="transformation">Transformation class to be used. Default: "projective"</param>
            <param name="mosaicMatrices2D">Array of 3x3 projective transformation matrices that determine the position of the images in the mosaic.</param>
            <param name="rows">Row coordinates of the points reconstructed by the bundle adjustment.</param>
            <param name="cols">Column coordinates of the points reconstructed by the bundle adjustment.</param>
            <param name="error">Average error per reconstructed point.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProjMatchPointsDistortionRansacGuided(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute a projective transformation matrix and the radial distortion coefficient between two images by finding correspondences between points based on known approximations of the projective transformation matrix and the radial distortion coefficient.</summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="grayMatchMethod">Gray value match metric. Default: "ncc"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="homMat2DGuide">Approximation of the homogeneous projective transformation matrix between the two images.</param>
            <param name="kappaGuide">Approximation of the radial distortion coefficient in the two images.</param>
            <param name="distanceTolerance">Tolerance for the matching search window. Default: 20.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 0.7</param>
            <param name="estimationMethod">Algorithm for the computation of the projective transformation matrix. Default: "gold_standard"</param>
            <param name="distanceThreshold">Threshold for transformation consistency check. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="homMat2D">Computed homogeneous projective transformation matrix.</param>
            <param name="kappa">Computed radial distortion coefficient.</param>
            <param name="error">Root-Mean-Square transformation error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProjMatchPointsDistortionRansac(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute a projective transformation matrix between two images and the radial distortion coefficient by automatically finding correspondences between points.</summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="grayMatchMethod">Gray value match metric. Default: "ncc"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate offset of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate offset of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative rotation of the second image with respect to the first image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 0.7</param>
            <param name="estimationMethod">Algorithm for the computation of the projective transformation matrix. Default: "gold_standard"</param>
            <param name="distanceThreshold">Threshold for the transformation consistency check. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="homMat2D">Computed homogeneous projective transformation matrix.</param>
            <param name="kappa">Computed radial distortion coefficient.</param>
            <param name="error">Root-Mean-Square transformation error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProjMatchPointsRansacGuided(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute a projective transformation matrix between two images by finding correspondences between points based on a known approximation of the projective transformation matrix.</summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="homMat2DGuide">Approximation of the Homogeneous projective transformation matrix between the two images.</param>
            <param name="distanceTolerance">Tolerance for the matching search window. Default: 20.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Transformation matrix estimation algorithm. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Threshold for transformation consistency check. Default: 0.2</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="homMat2D">Homogeneous projective transformation matrix.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProjMatchPointsRansac(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute a projective transformation matrix between two images by finding correspondences between points.</summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift. Default: 0</param>
            <param name="colMove">Average column coordinate shift. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 256</param>
            <param name="colTolerance">Half width of matching search window. Default: 256</param>
            <param name="rotation">Range of rotation angles. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Transformation matrix estimation algorithm. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Threshold for transformation consistency check. Default: 0.2</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="homMat2D">Homogeneous projective transformation matrix.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.VectorToProjHomMat2dDistortion(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute a projective transformation matrix and the radial distortion coefficient using given point correspondences.</summary>
            <param name="points1Row">Input points in image 1 (row coordinate).</param>
            <param name="points1Col">Input points in image 1 (column coordinate).</param>
            <param name="points2Row">Input points in image 2 (row coordinate).</param>
            <param name="points2Col">Input points in image 2 (column coordinate).</param>
            <param name="covRR1">Row coordinate variance of the points in image 1. Default: []</param>
            <param name="covRC1">Covariance of the points in image 1. Default: []</param>
            <param name="covCC1">Column coordinate variance of the points in image 1. Default: []</param>
            <param name="covRR2">Row coordinate variance of the points in image 2. Default: []</param>
            <param name="covRC2">Covariance of the points in image 2. Default: []</param>
            <param name="covCC2">Column coordinate variance of the points in image 2. Default: []</param>
            <param name="imageWidth">Width of the images from which the points were extracted.</param>
            <param name="imageHeight">Height of the images from which the points were extracted.</param>
            <param name="method">Estimation algorithm. Default: "gold_standard"</param>
            <param name="homMat2D">Homogeneous projective transformation matrix.</param>
            <param name="kappa">Computed radial distortion coefficient.</param>
            <param name="error">Root-Mean-Square transformation error.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomVectorToProjHomMat2d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute a homogeneous transformation matrix using given point correspondences.</summary>
            <param name="px">Input points 1 (x coordinate).</param>
            <param name="py">Input points 1 (y coordinate).</param>
            <param name="pw">Input points 1 (w coordinate).</param>
            <param name="qx">Input points 2 (x coordinate).</param>
            <param name="qy">Input points 2 (y coordinate).</param>
            <param name="qw">Input points 2 (w coordinate).</param>
            <param name="method">Estimation algorithm. Default: "normalized_dlt"</param>
            <param name="homMat2D">Homogeneous projective transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.VectorToProjHomMat2d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute a projective transformation matrix using given point correspondences.</summary>
            <param name="px">Input points in image 1 (row coordinate).</param>
            <param name="py">Input points in image 1 (column coordinate).</param>
            <param name="qx">Input points in image 2 (row coordinate).</param>
            <param name="qy">Input points in image 2 (column coordinate).</param>
            <param name="method">Estimation algorithm. Default: "normalized_dlt"</param>
            <param name="covXX1">Row coordinate variance of the points in image 1. Default: []</param>
            <param name="covYY1">Column coordinate variance of the points in image 1. Default: []</param>
            <param name="covXY1">Covariance of the points in image 1. Default: []</param>
            <param name="covXX2">Row coordinate variance of the points in image 2. Default: []</param>
            <param name="covYY2">Column coordinate variance of the points in image 2. Default: []</param>
            <param name="covXY2">Covariance of the points in image 2. Default: []</param>
            <param name="homMat2D">Homogeneous projective transformation matrix.</param>
            <param name="covariance">9x9 covariance matrix of the projective transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat2dToAffinePar(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the affine transformation parameters from a homogeneous 2D transformation matrix.</summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="sx">Scaling factor along the x direction.</param>
            <param name="sy">Scaling factor along the y direction.</param>
            <param name="phi">Rotation angle.</param>
            <param name="theta">Slant angle.</param>
            <param name="tx">Translation along the x direction.</param>
            <param name="ty">Translation along the y direction.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.VectorAngleToRigid(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute a rigid affine transformation from points and angles.</summary>
            <param name="row1">Row coordinate of the original point.</param>
            <param name="column1">Column coordinate of the original point.</param>
            <param name="angle1">Angle of the original point.</param>
            <param name="row2">Row coordinate of the transformed point.</param>
            <param name="column2">Column coordinate of the transformed point.</param>
            <param name="angle2">Angle of the transformed point.</param>
            <param name="homMat2D">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PointLineToHomMat2d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Approximate an affine transformation from point-to-line correspondences.</summary>
            <param name="transformationType">Type of the transformation to compute. Default: "rigid"</param>
            <param name="px">X coordinates of the original points.</param>
            <param name="py">Y coordinates of the original points.</param>
            <param name="l1x">X coordinates of the first point on the corresponding line.</param>
            <param name="l1y">Y coordinates of the first point on the corresponding line.</param>
            <param name="l2x">X coordinates of the second point on the corresponding line.</param>
            <param name="l2y">Y coordinates of the second point on the corresponding line.</param>
            <param name="homMat2D">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.VectorToRigid(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Approximate a rigid affine transformation from point correspondences.</summary>
            <param name="px">X coordinates of the original points.</param>
            <param name="py">Y coordinates of the original points.</param>
            <param name="qx">X coordinates of the transformed points.</param>
            <param name="qy">Y coordinates of the transformed points.</param>
            <param name="homMat2D">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.VectorToSimilarity(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Approximate an similarity transformation from point correspondences.</summary>
            <param name="px">X coordinates of the original points.</param>
            <param name="py">Y coordinates of the original points.</param>
            <param name="qx">X coordinates of the transformed points.</param>
            <param name="qy">Y coordinates of the transformed points.</param>
            <param name="homMat2D">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.VectorToAniso(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Approximate an anisotropic similarity transformation from point correspondences.</summary>
            <param name="px">X coordinates of the original points.</param>
            <param name="py">Y coordinates of the original points.</param>
            <param name="qx">X coordinates of the transformed points.</param>
            <param name="qy">Y coordinates of the transformed points.</param>
            <param name="homMat2D">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.VectorToHomMat2d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Approximate an affine transformation from point correspondences.</summary>
            <param name="px">X coordinates of the original points.</param>
            <param name="py">Y coordinates of the original points.</param>
            <param name="qx">X coordinates of the transformed points.</param>
            <param name="qy">Y coordinates of the transformed points.</param>
            <param name="homMat2D">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProjectiveTransPixel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Project pixel coordinates using a homogeneous projective transformation matrix.</summary>
            <param name="homMat2D">Homogeneous projective transformation matrix.</param>
            <param name="row">Input pixel(s) (row coordinate). Default: 64</param>
            <param name="col">Input pixel(s) (column coordinate). Default: 64</param>
            <param name="rowTrans">Output pixel(s) (row coordinate).</param>
            <param name="colTrans">Output pixel(s) (column coordinate).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProjectiveTransPoint2d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Project a homogeneous 2D point using a projective transformation matrix.</summary>
            <param name="homMat2D">Homogeneous projective transformation matrix.</param>
            <param name="px">Input point (x coordinate).</param>
            <param name="py">Input point (y coordinate).</param>
            <param name="pw">Input point (w coordinate).</param>
            <param name="qx">Output point (x coordinate).</param>
            <param name="qy">Output point (y coordinate).</param>
            <param name="qw">Output point (w coordinate).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AffineTransPixel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Apply an arbitrary affine 2D transformation to pixel coordinates.</summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="row">Input pixel(s) (row coordinate). Default: 64</param>
            <param name="col">Input pixel(s) (column coordinate). Default: 64</param>
            <param name="rowTrans">Output pixel(s) (row coordinate).</param>
            <param name="colTrans">Output pixel(s) (column coordinate).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AffineTransPoint2d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Apply an arbitrary affine 2D transformation to points.</summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="px">Input point(s) (x or row coordinate). Default: 64</param>
            <param name="py">Input point(s) (y or column coordinate). Default: 64</param>
            <param name="qx">Output point(s) (x or row coordinate).</param>
            <param name="qy">Output point(s) (y or column coordinate).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat2dDeterminant(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the determinant of a homogeneous 2D transformation matrix.</summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="determinant">Determinant of the input matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat2dTranspose(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Transpose a homogeneous 2D transformation matrix.</summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="homMat2DTranspose">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat2dInvert(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Invert a homogeneous 2D transformation matrix.</summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="homMat2DInvert">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat2dCompose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Multiply two homogeneous 2D transformation matrices.</summary>
            <param name="homMat2DLeft">Left input transformation matrix.</param>
            <param name="homMat2DRight">Right input transformation matrix.</param>
            <param name="homMat2DCompose">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat2dReflectLocal(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a reflection to a homogeneous 2D transformation matrix.</summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="px">Point that defines the axis (x coordinate). Default: 16</param>
            <param name="py">Point that defines the axis (y coordinate). Default: 32</param>
            <param name="homMat2DReflect">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat2dReflect(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a reflection to a homogeneous 2D transformation matrix.</summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="px">First point of the axis (x coordinate). Default: 0</param>
            <param name="py">First point of the axis (y coordinate). Default: 0</param>
            <param name="qx">Second point of the axis (x coordinate). Default: 16</param>
            <param name="qy">Second point of the axis (y coordinate). Default: 32</param>
            <param name="homMat2DReflect">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat2dSlantLocal(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a slant to a homogeneous 2D transformation matrix.</summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="theta">Slant angle. Default: 0.78</param>
            <param name="axis">Coordinate axis that is slanted. Default: "x"</param>
            <param name="homMat2DSlant">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat2dSlant(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a slant to a homogeneous 2D transformation matrix.</summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="theta">Slant angle. Default: 0.78</param>
            <param name="axis">Coordinate axis that is slanted. Default: "x"</param>
            <param name="px">Fixed point of the transformation (x coordinate). Default: 0</param>
            <param name="py">Fixed point of the transformation (y coordinate). Default: 0</param>
            <param name="homMat2DSlant">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat2dRotateLocal(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a rotation to a homogeneous 2D transformation matrix.</summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="phi">Rotation angle. Default: 0.78</param>
            <param name="homMat2DRotate">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat2dRotate(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a rotation to a homogeneous 2D transformation matrix.</summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="phi">Rotation angle. Default: 0.78</param>
            <param name="px">Fixed point of the transformation (x coordinate). Default: 0</param>
            <param name="py">Fixed point of the transformation (y coordinate). Default: 0</param>
            <param name="homMat2DRotate">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat2dScaleLocal(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a scaling to a homogeneous 2D transformation matrix.</summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="sx">Scale factor along the x-axis. Default: 2</param>
            <param name="sy">Scale factor along the y-axis. Default: 2</param>
            <param name="homMat2DScale">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat2dScale(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a scaling to a homogeneous 2D transformation matrix.</summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="sx">Scale factor along the x-axis. Default: 2</param>
            <param name="sy">Scale factor along the y-axis. Default: 2</param>
            <param name="px">Fixed point of the transformation (x coordinate). Default: 0</param>
            <param name="py">Fixed point of the transformation (y coordinate). Default: 0</param>
            <param name="homMat2DScale">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat2dTranslateLocal(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a translation to a homogeneous 2D transformation matrix.</summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="tx">Translation along the x-axis. Default: 64</param>
            <param name="ty">Translation along the y-axis. Default: 64</param>
            <param name="homMat2DTranslate">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat2dTranslate(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a translation to a homogeneous 2D transformation matrix.</summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="tx">Translation along the x-axis. Default: 64</param>
            <param name="ty">Translation along the y-axis. Default: 64</param>
            <param name="homMat2DTranslate">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat2dIdentity(HalconDotNet.HTuple@)">
            <summary>Generate the homogeneous transformation matrix of the identical 2D transformation.</summary>
            <param name="homMat2DIdentity">Transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllScatteredDataInterpolators">
            <summary>Clear all scattered data interpolators.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearScatteredDataInterpolator(HalconDotNet.HTuple)">
            <summary>Clear a scattered data interpolator.</summary>
            <param name="scatteredDataInterpolatorHandle">Handle of the scattered data interpolator</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InterpolateScatteredData(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Interpolation of scattered data using a scattered data interpolator.</summary>
            <param name="scatteredDataInterpolatorHandle">Handle of the scattered data interpolator</param>
            <param name="row">Row coordinates of points  to be interpolated</param>
            <param name="column">Column coordinates of points  to be interpolated</param>
            <param name="valueInterpolated">Values of interpolated points</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateScatteredDataInterpolator(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Creates an interpolator for the interpolation of scattered data.</summary>
            <param name="method">Method for the interpolation Default: "thin_plate_splines"</param>
            <param name="rows">Row coordinates of the points used  for the interpolation</param>
            <param name="columns">Column coordinates of the points used  for the interpolation</param>
            <param name="values">Values of the points used  for the interpolation</param>
            <param name="genParamNames">Names of the generic parameters  that can be adjusted Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted Default: []</param>
            <param name="scatteredDataInterpolatorHandle">Handle of the scattered data interpolator</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InterpolateScatteredDataPointsToImage(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Creating an image from the interpolation of scattered data.</summary>
            <param name="imageInterpolated">Interpolated image</param>
            <param name="method">Method for the interpolation Default: "thin_plate_splines"</param>
            <param name="rows">Row coordinates of the points used for the interpolation</param>
            <param name="columns">Column coordinates of the points  used for the interpolation</param>
            <param name="values">Values of the points used for the interpolation</param>
            <param name="width">Width of the interpolated image Default: 640</param>
            <param name="height">Height of the interpolated image Default: 480</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InterpolateScatteredDataImage(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Interpolation of an image.</summary>
            <param name="image">Image to interpolate</param>
            <param name="regionInterpolate">Region to interpolate</param>
            <param name="imageInterpolated">Interpolated image</param>
            <param name="method">Method for the interpolation Default: "thin_plate_splines"</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSystemTime(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Read out the system time.</summary>
            <param name="MSecond">Milliseconds (0..999).</param>
            <param name="second">Seconds (0..59).</param>
            <param name="minute">Minutes (0..59).</param>
            <param name="hour">Hours (0..23).</param>
            <param name="day">Day of the month (1..31).</param>
            <param name="YDay">Day of the year (1..366).</param>
            <param name="month">Month (1..12).</param>
            <param name="year">Year (xxxx).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetComputeDeviceParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query compute device parameters.</summary>
            <param name="deviceHandle">Compute device handle.</param>
            <param name="paramName">Name of the parameter to query. Default: "buffer_cache_capacity"</param>
            <param name="paramValue">Value of the parameter.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetComputeDeviceParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set parameters of an compute device.</summary>
            <param name="deviceHandle">Compute device handle.</param>
            <param name="paramName">Name of the parameter to set. Default: "buffer_cache_capacity"</param>
            <param name="paramValue">New parameter value.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReleaseAllComputeDevices">
            <summary>Close all compute devices.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReleaseComputeDevice(HalconDotNet.HTuple)">
            <summary>Close a compute_device.</summary>
            <param name="deviceHandle">Compute device handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeactivateAllComputeDevices">
            <summary>Deactivate all compute devices.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeactivateComputeDevice(HalconDotNet.HTuple)">
            <summary>Deactivate a compute device.</summary>
            <param name="deviceHandle">Compute device handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ActivateComputeDevice(HalconDotNet.HTuple)">
            <summary>Activate a compute device.</summary>
            <param name="deviceHandle">Compute device handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InitComputeDevice(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Initialize a compute device.</summary>
            <param name="deviceHandle">Compute device handle.</param>
            <param name="operators">List of operators to prepare. Default: "all"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OpenComputeDevice(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Open a compute device.</summary>
            <param name="deviceIdentifier">Compute device Identifier.</param>
            <param name="deviceHandle">Compute device handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetComputeDeviceInfo(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get information on a compute device.</summary>
            <param name="deviceIdentifier">Compute device handle.</param>
            <param name="infoName">Name of Information to query. Default: "name"</param>
            <param name="info">Returned information.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryAvailableComputeDevices(HalconDotNet.HTuple@)">
            <summary>Get the list of available compute devices.</summary>
            <param name="deviceIdentifier">List of available compute devices.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearSerial(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Clear the buffer of a serial connection.</summary>
            <param name="serialHandle">Serial interface handle.</param>
            <param name="channel">Buffer to be cleared. Default: "input"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteSerial(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write to a serial connection.</summary>
            <param name="serialHandle">Serial interface handle.</param>
            <param name="data">Characters to write (as tuple of integers).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadSerial(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read from a serial device.</summary>
            <param name="serialHandle">Serial interface handle.</param>
            <param name="numCharacters">Number of characters to read. Default: 1</param>
            <param name="data">Read characters (as tuple of integers).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSerialParam(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get the parameters of a serial device.</summary>
            <param name="serialHandle">Serial interface handle.</param>
            <param name="baudRate">Speed of the serial interface.</param>
            <param name="dataBits">Number of data bits of the serial interface.</param>
            <param name="flowControl">Type of flow control of the serial interface.</param>
            <param name="parity">Parity of the serial interface.</param>
            <param name="stopBits">Number of stop bits of the serial interface.</param>
            <param name="totalTimeOut">Total timeout of the serial interface in ms.</param>
            <param name="interCharTimeOut">Inter-character timeout of the serial interface in ms.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetSerialParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the parameters of a serial device.</summary>
            <param name="serialHandle">Serial interface handle.</param>
            <param name="baudRate">Speed of the serial interface. Default: "unchanged"</param>
            <param name="dataBits">Number of data bits of the serial interface. Default: "unchanged"</param>
            <param name="flowControl">Type of flow control of the serial interface. Default: "unchanged"</param>
            <param name="parity">Parity of the serial interface. Default: "unchanged"</param>
            <param name="stopBits">Number of stop bits of the serial interface. Default: "unchanged"</param>
            <param name="totalTimeOut">Total timeout of the serial interface in ms. Default: "unchanged"</param>
            <param name="interCharTimeOut">Inter-character timeout of the serial interface in ms. Default: "unchanged"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseAllSerials">
            <summary>Close all serial devices.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseSerial(HalconDotNet.HTuple)">
            <summary>Close a serial device.</summary>
            <param name="serialHandle">Serial interface handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OpenSerial(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Open a serial device.</summary>
            <param name="portName">Name of the serial port. Default: "COM1"</param>
            <param name="serialHandle">Serial interface handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WaitSeconds(HalconDotNet.HTuple)">
            <summary>Delaying the execution of the program.</summary>
            <param name="seconds">Number of seconds by which the execution of the program will be delayed. Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SystemCall(HalconDotNet.HTuple)">
            <summary>Execute a system command.</summary>
            <param name="command">Command to be called by the system. Default: "ls"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetSystem(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set HALCON system parameters.</summary>
            <param name="systemParameter">Name of the system parameter to be changed. Default: "init_new_image"</param>
            <param name="value">New value of the system parameter. Default: "true"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetCheck(HalconDotNet.HTuple)">
            <summary>Activating and deactivating of HALCON control modes.</summary>
            <param name="check">Desired control mode. Default: "default"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ResetObjDb(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Initialization of the HALCON system.</summary>
            <param name="defaultImageWidth">Default image width (in pixels). Default: 128</param>
            <param name="defaultImageHeight">Default image height (in pixels). Default: 128</param>
            <param name="defaultChannels">Usual number of channels. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSystem(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get current value of HALCON system parameters.</summary>
            <param name="query">Desired system parameter. Default: "init_new_image"</param>
            <param name="information">Current value of the system parameter.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetCheck(HalconDotNet.HTuple@)">
            <summary>State of the HALCON control modes.</summary>
            <param name="check">Tuplet of the currently activated control modes.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetErrorText(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Inquiry after the error text of a HALCON error number.</summary>
            <param name="errorCode">HALCON error code.</param>
            <param name="errorMessage">Corresponding error message.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CountSeconds(HalconDotNet.HTuple@)">
            <summary>Passed Time.</summary>
            <param name="seconds">Processtime since the program start.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CountRelation(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Number of entries in the HALCON database.</summary>
            <param name="relationName">Relation of interest of the HALCON database. Default: "object"</param>
            <param name="numOfTuples">Number of tuples in the relation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReceiveImage(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Receive an image over a socket connection.</summary>
            <param name="image">Received image.</param>
            <param name="socket">Socket number.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SendImage(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Send an image over a socket connection.</summary>
            <param name="image">Image to be sent.</param>
            <param name="socket">Socket number.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReceiveRegion(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Receive regions over a socket connection.</summary>
            <param name="region">Received regions.</param>
            <param name="socket">Socket number.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SendRegion(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Send regions over a socket connection.</summary>
            <param name="region">Regions to be sent.</param>
            <param name="socket">Socket number.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReceiveXld(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Receive an XLD object over a socket connection.</summary>
            <param name="XLD">Received XLD object.</param>
            <param name="socket">Socket number.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SendXld(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Send an XLD object over a socket connection.</summary>
            <param name="XLD">XLD object to be sent.</param>
            <param name="socket">Socket number.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReceiveTuple(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Receive a tuple over a socket connection.</summary>
            <param name="socket">Socket number.</param>
            <param name="tuple">Received tuple.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SendTuple(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Send a tuple over a socket connection.</summary>
            <param name="socket">Socket number.</param>
            <param name="tuple">Tuple to be sent.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReceiveData(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Receive arbitrary data from external devices or applications using a generic socket connection.</summary>
            <param name="socket">Socket number.</param>
            <param name="format">Specification how to convert the data to tuples. Default: "z"</param>
            <param name="data">Value (or tuple of values) holding the received and converted data.</param>
            <param name="from">IP address or hostname and network port of the communication partner.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SendData(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Send arbitrary data to external devices or applications using a generic socket communication.</summary>
            <param name="socket">Socket number.</param>
            <param name="format">Specification how to convert the data. Default: "z"</param>
            <param name="data">Value (or tuple of values) holding the data to send.</param>
            <param name="to">IP address or hostname and network port of the communication partner. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSocketParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the value of a socket parameter.</summary>
            <param name="socket">Socket number.</param>
            <param name="paramName">Name of the socket parameter.</param>
            <param name="paramValue">Value of the socket parameter.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetSocketParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set a socket parameter.</summary>
            <param name="socket">Socket number.</param>
            <param name="paramName">Name of the socket parameter.</param>
            <param name="paramValue">Value of the socket parameter. Default: "on"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetNextSocketDataType(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Determine the HALCON data type of the next socket data.</summary>
            <param name="socket">Socket number.</param>
            <param name="dataType">Data type of next HALCON data.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSocketDescriptor(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the socket descriptor of a socket used by the operating system.</summary>
            <param name="socket">Socket number.</param>
            <param name="socketDescriptor">Socket descriptor used by the operating system.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSocketTimeout(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the timeout of a socket.</summary>
            <param name="socket">Socket number.</param>
            <param name="timeout">Socket timeout.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetSocketTimeout(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the timeout of a socket.</summary>
            <param name="socket">Socket number.</param>
            <param name="timeout">Socket timeout. Default: "infinite"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseAllSockets">
            <summary>Close all opened sockets.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseSocket(HalconDotNet.HTuple)">
            <summary>Close a socket.</summary>
            <param name="socket">Socket number.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SocketAcceptConnect(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Accept a connection request on a listening socket of the protocol type 'HALCON' or 'TCP'/'TCP4'/'TCP6'.</summary>
            <param name="acceptingSocket">Socket number of the accepting socket.</param>
            <param name="wait">Should the operator wait until a connection request arrives? Default: "auto"</param>
            <param name="socket">Socket number.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OpenSocketConnect(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Open a socket and connect it to an accepting socket.</summary>
            <param name="hostName">Hostname of the computer to connect to. Default: "localhost"</param>
            <param name="port">Port number.</param>
            <param name="genParamName">Names of the generic parameters that can be adjusted for the socket. Default: []</param>
            <param name="genParamValue">Values of the generic parameters that can be adjusted for the socket. Default: []</param>
            <param name="socket">Socket number.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OpenSocketAccept(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Open a socket that accepts connection requests.</summary>
            <param name="port">Port number. Default: 3000</param>
            <param name="genParamName">Names of the generic parameters that can be adjusted for the socket. Default: []</param>
            <param name="genParamValue">Values of the generic parameters that can be adjusted for the socket. Default: []</param>
            <param name="acceptingSocket">Socket number.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetExtendedErrorInfo(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Returns the extended error information for the calling thread's last HALCON error.</summary>
            <param name="operatorName">Operator that set the error code.</param>
            <param name="errorCode">Extended error code.</param>
            <param name="errorMessage">Extended error message.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetModules(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Query of used modules and the module key.</summary>
            <param name="usedModules">Names of used modules.</param>
            <param name="moduleKey">Key for licence manager.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BinocularDistanceMs(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the distance values for a rectified stereo image pair using multi-scanline optimization.</summary>
            <param name="imageRect1">Rectified image of camera 1.</param>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="distance">Distance image.</param>
            <param name="score">Score of the calculated disparity.</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <param name="relPoseRect">Point transformation from the rectified camera 2 to the rectified camera 1.</param>
            <param name="minDisparity">Minimum of the expected disparities. Default: -30</param>
            <param name="maxDisparity">Maximum of the expected disparities. Default: 30</param>
            <param name="surfaceSmoothing">Smoothing of surfaces. Default: 50</param>
            <param name="edgeSmoothing">Smoothing of edges. Default: 50</param>
            <param name="genParamName">Parameter name(s) for the multi-scanline algorithm. Default: []</param>
            <param name="genParamValue">Parameter value(s) for the multi-scanline algorithm. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BinocularDisparityMs(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the disparities of a rectified stereo image pair using multi-scanline optimization.</summary>
            <param name="imageRect1">Rectified image of camera 1.</param>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="disparity">Disparity map.</param>
            <param name="score">Score of the calculated disparity.</param>
            <param name="minDisparity">Minimum of the expected disparities. Default: -30</param>
            <param name="maxDisparity">Maximum of the expected disparities. Default: 30</param>
            <param name="surfaceSmoothing">Smoothing of surfaces. Default: 50</param>
            <param name="edgeSmoothing">Smoothing of edges. Default: 50</param>
            <param name="genParamName">Parameter name(s) for the multi-scanline algorithm. Default: []</param>
            <param name="genParamValue">Parameter value(s) for the multi-scanline algorithm. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BinocularDistanceMg(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the distance values for a rectified stereo image pair using multigrid methods.</summary>
            <param name="imageRect1">Rectified image of camera 1.</param>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="distance">Distance image.</param>
            <param name="score">Score of the calculated disparity if CalculateScore is set to 'true'.</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <param name="relPoseRect">Point transformation from the rectified camera 2 to the rectified camera 1.</param>
            <param name="grayConstancy">Weight of the gray value constancy in the data term. Default: 1.0</param>
            <param name="gradientConstancy">Weight of the gradient constancy in the data term. Default: 30.0</param>
            <param name="smoothness">Weight of the smoothness term in relation to the data term. Default: 5.0</param>
            <param name="initialGuess">Initial guess of the disparity. Default: 0.0</param>
            <param name="calculateScore">Should the quality measure be returned in Score? Default: "false"</param>
            <param name="MGParamName">Parameter name(s) for the multigrid algorithm. Default: "default_parameters"</param>
            <param name="MGParamValue">Parameter value(s) for the multigrid algorithm. Default: "fast_accurate"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BinocularDisparityMg(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the disparities of a rectified stereo image pair using multigrid methods.</summary>
            <param name="imageRect1">Rectified image of camera 1.</param>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="disparity">Disparity map.</param>
            <param name="score">Score of the calculated disparity if CalculateScore is set to 'true'.</param>
            <param name="grayConstancy">Weight of the gray value constancy in the data term. Default: 1.0</param>
            <param name="gradientConstancy">Weight of the gradient constancy in the data term. Default: 30.0</param>
            <param name="smoothness">Weight of the smoothness term in relation to the data term. Default: 5.0</param>
            <param name="initialGuess">Initial guess of the disparity. Default: 0.0</param>
            <param name="calculateScore">Should the quality measure should be returned in Score? Default: "false"</param>
            <param name="MGParamName">Parameter name(s) for the multigrid algorithm. Default: "default_parameters"</param>
            <param name="MGParamValue">Parameter value(s) for the multigrid algorithm. Default: "fast_accurate"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Reconst3dFromFundamentalMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the projective 3d reconstruction of points based on the fundamental matrix.</summary>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="covRR1">Row coordinate variance of the points in image 1. Default: []</param>
            <param name="covRC1">Covariance of the points in image 1. Default: []</param>
            <param name="covCC1">Column coordinate variance of the points in image 1. Default: []</param>
            <param name="covRR2">Row coordinate variance of the points in image 2. Default: []</param>
            <param name="covRC2">Covariance of the points in image 2. Default: []</param>
            <param name="covCC2">Column coordinate variance of the points in image 2. Default: []</param>
            <param name="FMatrix">Fundamental matrix.</param>
            <param name="covFMat">9x9 covariance matrix of the fundamental matrix. Default: []</param>
            <param name="x">X coordinates of the reconstructed points in projective 3D space.</param>
            <param name="y">Y coordinates of the reconstructed points in projective 3D space.</param>
            <param name="z">Z coordinates of the reconstructed points in projective 3D space.</param>
            <param name="w">W coordinates of the reconstructed points in projective 3D space.</param>
            <param name="covXYZW">Covariance matrices of the reconstructed points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenBinocularProjRectification(HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the projective rectification of weakly calibrated binocular stereo images.</summary>
            <param name="map1">Image coding the rectification of the 1. image.</param>
            <param name="map2">Image coding the rectification of the 2. image.</param>
            <param name="FMatrix">Fundamental matrix.</param>
            <param name="covFMat">9x9 covariance matrix of the fundamental matrix. Default: []</param>
            <param name="width1">Width of the 1. image. Default: 512</param>
            <param name="height1">Height of the 1. image. Default: 512</param>
            <param name="width2">Width of the 2. image. Default: 512</param>
            <param name="height2">Height of the 2. image. Default: 512</param>
            <param name="subSampling">Subsampling factor. Default: 1</param>
            <param name="mapping">Type of mapping. Default: "no_map"</param>
            <param name="covFMatRect">9x9 covariance matrix of the rectified fundamental matrix.</param>
            <param name="h1">Projective transformation of the 1. image.</param>
            <param name="h2">Projective transformation of the 2. image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.VectorToFundamentalMatrixDistortion(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the fundamental matrix and the radial distortion coefficient given a set of image point correspondences and reconstruct 3D points.</summary>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="covRR1">Row coordinate variance of the points in image 1. Default: []</param>
            <param name="covRC1">Covariance of the points in image 1. Default: []</param>
            <param name="covCC1">Column coordinate variance of the points in image 1. Default: []</param>
            <param name="covRR2">Row coordinate variance of the points in image 2. Default: []</param>
            <param name="covRC2">Covariance of the points in image 2. Default: []</param>
            <param name="covCC2">Column coordinate variance of the points in image 2. Default: []</param>
            <param name="imageWidth">Width of the images from which the points were extracted.</param>
            <param name="imageHeight">Height of the images from which the points were extracted.</param>
            <param name="method">Estimation algorithm. Default: "gold_standard"</param>
            <param name="FMatrix">Computed fundamental matrix.</param>
            <param name="kappa">Computed radial distortion coefficient.</param>
            <param name="error">Root-Mean-Square epipolar distance error.</param>
            <param name="x">X coordinates of the reconstructed points in projective 3D space.</param>
            <param name="y">Y coordinates of the reconstructed points in projective 3D space.</param>
            <param name="z">Z coordinates of the reconstructed points in projective 3D space.</param>
            <param name="w">W coordinates of the reconstructed points in projective 3D space.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RelPoseToFundamentalMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the fundamental matrix from the relative orientation of two cameras.</summary>
            <param name="relPose">Relative orientation of the cameras (3D pose).</param>
            <param name="covRelPose">6x6 covariance matrix of relative pose. Default: []</param>
            <param name="camPar1">Parameters of the 1. camera.</param>
            <param name="camPar2">Parameters of the 2. camera.</param>
            <param name="FMatrix">Computed fundamental matrix.</param>
            <param name="covFMat">9x9 covariance matrix of the fundamental matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EssentialToFundamentalMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the fundamental matrix from an essential matrix.</summary>
            <param name="EMatrix">Essential matrix.</param>
            <param name="covEMat">9x9 covariance matrix of the essential matrix. Default: []</param>
            <param name="camMat1">Camera matrix of the 1. camera.</param>
            <param name="camMat2">Camera matrix of the 2. camera.</param>
            <param name="FMatrix">Computed fundamental matrix.</param>
            <param name="covFMat">9x9 covariance matrix of the fundamental matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.VectorToRelPose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the relative orientation between two cameras given image point correspondences and known camera parameters and reconstruct 3D space points.</summary>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="covRR1">Row coordinate variance of the points in image 1. Default: []</param>
            <param name="covRC1">Covariance of the points in image 1. Default: []</param>
            <param name="covCC1">Column coordinate variance of the points in image 1. Default: []</param>
            <param name="covRR2">Row coordinate variance of the points in image 2. Default: []</param>
            <param name="covRC2">Covariance of the points in image 2. Default: []</param>
            <param name="covCC2">Column coordinate variance of the points in image 2. Default: []</param>
            <param name="camPar1">Camera parameters of the 1st camera.</param>
            <param name="camPar2">Camera parameters of the 2nd camera.</param>
            <param name="method">Algorithm for the computation of the relative pose and for special pose types. Default: "normalized_dlt"</param>
            <param name="relPose">Computed relative orientation of the cameras (3D pose).</param>
            <param name="covRelPose">6x6 covariance matrix of the relative camera orientation.</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="x">X coordinates of the reconstructed 3D points.</param>
            <param name="y">Y coordinates of the reconstructed 3D points.</param>
            <param name="z">Z coordinates of the reconstructed 3D points.</param>
            <param name="covXYZ">Covariance matrices of the  reconstructed 3D points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.VectorToEssentialMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the essential matrix given image point correspondences and known camera matrices and reconstruct 3D points.</summary>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="covRR1">Row coordinate variance of the points in image 1. Default: []</param>
            <param name="covRC1">Covariance of the points in image 1. Default: []</param>
            <param name="covCC1">Column coordinate variance of the points in image 1. Default: []</param>
            <param name="covRR2">Row coordinate variance of the points in image 2. Default: []</param>
            <param name="covRC2">Covariance of the points in image 2. Default: []</param>
            <param name="covCC2">Column coordinate variance of the points in image 2. Default: []</param>
            <param name="camMat1">Camera matrix of the 1st camera.</param>
            <param name="camMat2">Camera matrix of the 2nd camera.</param>
            <param name="method">Algorithm for the computation of the essential matrix and for special camera orientations. Default: "normalized_dlt"</param>
            <param name="EMatrix">Computed essential matrix.</param>
            <param name="covEMat">9x9 covariance matrix of the essential matrix.</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="x">X coordinates of the reconstructed 3D points.</param>
            <param name="y">Y coordinates of the reconstructed 3D points.</param>
            <param name="z">Z coordinates of the reconstructed 3D points.</param>
            <param name="covXYZ">Covariance matrices of the reconstructed 3D points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.VectorToFundamentalMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the fundamental matrix given a set of image point correspondences and reconstruct 3D points.</summary>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="covRR1">Row coordinate variance of the points in image 1. Default: []</param>
            <param name="covRC1">Covariance of the points in image 1. Default: []</param>
            <param name="covCC1">Column coordinate variance of the points in image 1. Default: []</param>
            <param name="covRR2">Row coordinate variance of the points in image 2. Default: []</param>
            <param name="covRC2">Covariance of the points in image 2. Default: []</param>
            <param name="covCC2">Column coordinate variance of the points in image 2. Default: []</param>
            <param name="method">Estimation algorithm. Default: "normalized_dlt"</param>
            <param name="FMatrix">Computed fundamental matrix.</param>
            <param name="covFMat">9x9 covariance matrix of the fundamental matrix.</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="x">X coordinates of the reconstructed points in projective 3D space.</param>
            <param name="y">Y coordinates of the reconstructed points in projective 3D space.</param>
            <param name="z">Z coordinates of the reconstructed points in projective 3D space.</param>
            <param name="w">W coordinates of the reconstructed points in projective 3D space.</param>
            <param name="covXYZW">Covariance matrices of the reconstructed 3D points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MatchFundamentalMatrixDistortionRansac(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the fundamental matrix and the radial distortion coefficient for a pair of stereo images by automatically finding correspondences between image points.</summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="grayMatchMethod">Gray value match metric. Default: "ncc"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate offset of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate offset of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative rotation of the second image with respect to the first image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 0.7</param>
            <param name="estimationMethod">Algorithm for the computation of the fundamental matrix and for special camera orientations. Default: "gold_standard"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="FMatrix">Computed fundamental matrix.</param>
            <param name="kappa">Computed radial distortion coefficient.</param>
            <param name="error">Root-Mean-Square epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MatchRelPoseRansac(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the relative orientation between two cameras by automatically finding correspondences between image points.</summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="camPar1">Parameters of the 1st camera.</param>
            <param name="camPar2">Parameters of the 2nd camera.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate shift of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative orientation of the right image with respect to the left image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Algorithm for the computation of the relative pose and for special pose types. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="relPose">Computed relative orientation of the cameras (3D pose).</param>
            <param name="covRelPose">6x6 covariance matrix of the relative orientation.</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MatchEssentialMatrixRansac(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the essential matrix for a pair of stereo images by automatically finding correspondences between image points.</summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="camMat1">Camera matrix of the 1st camera.</param>
            <param name="camMat2">Camera matrix of the 2nd camera.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate shift of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative orientation of the right image with respect to the left image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Algorithm for the computation of the essential matrix and for special camera orientations. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="EMatrix">Computed essential matrix.</param>
            <param name="covEMat">9x9 covariance matrix of the essential matrix.</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MatchFundamentalMatrixRansac(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the fundamental matrix for a pair of stereo images by automatically finding correspondences between image points.</summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate shift of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative orientation of the right image with respect to the left image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Algorithm for the computation of the fundamental matrix and for special camera orientations. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="FMatrix">Computed fundamental matrix.</param>
            <param name="covFMat">9x9 covariance matrix of the fundamental matrix.</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BinocularDistance(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the distance values for a rectified stereo image pair using correlation techniques.</summary>
            <param name="imageRect1">Rectified image of camera 1.</param>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="distance">Distance image.</param>
            <param name="score">Evaluation of a distance value.</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <param name="relPoseRect">Point transformation from the rectified camera 2 to the rectified camera 1.</param>
            <param name="method">Matching function. Default: "ncc"</param>
            <param name="maskWidth">Width of the correlation window. Default: 11</param>
            <param name="maskHeight">Height of the correlation window. Default: 11</param>
            <param name="textureThresh">Variance threshold of textured image regions. Default: 0.0</param>
            <param name="minDisparity">Minimum of the expected disparities. Default: 0</param>
            <param name="maxDisparity">Maximum of the expected disparities. Default: 30</param>
            <param name="numLevels">Number of pyramid levels. Default: 1</param>
            <param name="scoreThresh">Threshold of the correlation function. Default: 0.0</param>
            <param name="filter">Downstream filters. Default: "none"</param>
            <param name="subDistance">Distance interpolation. Default: "none"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BinocularDisparity(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the disparities of a rectified image pair using correlation techniques.</summary>
            <param name="imageRect1">Rectified image of camera 1.</param>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="disparity">Disparity map.</param>
            <param name="score">Evaluation of the disparity values.</param>
            <param name="method">Matching function. Default: "ncc"</param>
            <param name="maskWidth">Width of the correlation window. Default: 11</param>
            <param name="maskHeight">Height of the correlation window. Default: 11</param>
            <param name="textureThresh">Variance threshold of textured image regions. Default: 0.0</param>
            <param name="minDisparity">Minimum of the expected disparities. Default: -30</param>
            <param name="maxDisparity">Maximum of the expected disparities. Default: 30</param>
            <param name="numLevels">Number of pyramid levels. Default: 1</param>
            <param name="scoreThresh">Threshold of the correlation function. Default: 0.5</param>
            <param name="filter">Downstream filters. Default: "none"</param>
            <param name="subDisparity">Subpixel interpolation of disparities. Default: "none"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.IntersectLinesOfSight(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get a 3D point from the intersection of two lines of sight within a binocular camera system.</summary>
            <param name="camParam1">Internal parameters of the projective camera 1.</param>
            <param name="camParam2">Internal parameters of the projective camera 2.</param>
            <param name="relPose">Point transformation from camera 2 to camera 1.</param>
            <param name="row1">Row coordinate of a point in image 1.</param>
            <param name="col1">Column coordinate of a point in image 1.</param>
            <param name="row2">Row coordinate of the corresponding point in image 2.</param>
            <param name="col2">Column coordinate of the corresponding point in image 2.</param>
            <param name="x">X coordinate of the 3D point.</param>
            <param name="y">Y coordinate of the 3D point.</param>
            <param name="z">Z coordinate of the 3D point.</param>
            <param name="dist">Distance of the 3D point to the lines of sight.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DisparityImageToXyz(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Transform a disparity image into 3D points in a rectified stereo system.</summary>
            <param name="disparity">Disparity image.</param>
            <param name="x">X coordinates of the points in the rectified camera system 1.</param>
            <param name="y">Y coordinates of the points in the rectified camera system 1.</param>
            <param name="z">Z coordinates of the points in the rectified camera system 1.</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <param name="relPoseRect">Pose of the rectified camera 2 in relation to the rectified camera 1.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DisparityToPoint3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Transform an image point and its disparity into a 3D point in a rectified stereo system.</summary>
            <param name="camParamRect1">Rectified internal camera parameters of the projective camera 1.</param>
            <param name="camParamRect2">Rectified internal camera parameters of the projective camera 2.</param>
            <param name="relPoseRect">Pose of the rectified camera 2 in relation to the rectified camera 1.</param>
            <param name="row1">Row coordinate of a point in the rectified image 1.</param>
            <param name="col1">Column coordinate of a point in the rectified image 1.</param>
            <param name="disparity">Disparity of the images of the world point.</param>
            <param name="x">X coordinate of the 3D point.</param>
            <param name="y">Y coordinate of the 3D point.</param>
            <param name="z">Z coordinate of the 3D point.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DisparityToDistance(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Transform a disparity value into a distance value in a rectified binocular stereo system.</summary>
            <param name="camParamRect1">Rectified internal camera parameters of the projective camera 1.</param>
            <param name="camParamRect2">Rectified internal camera parameters of the projective camera 2.</param>
            <param name="relPoseRect">Point transformation from the rectified camera 2 to the rectified camera 1.</param>
            <param name="disparity">Disparity between the images of the world point.</param>
            <param name="distance">Distance of a world point to the rectified camera system.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistanceToDisparity(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Transfrom a distance value into a disparity in a rectified stereo system.</summary>
            <param name="camParamRect1">rectified internal camera parameters of the projective camera 1.</param>
            <param name="camParamRect2">rectified internal camera parameters of the projective camera 2.</param>
            <param name="relPoseRect">Point transformation from the rectified camera 2 to the rectified camera 1.</param>
            <param name="distance">Distance of a world point to camera 1.</param>
            <param name="disparity">Disparity between the images of the point.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenBinocularRectificationMap(HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Generate transformation maps that describe the mapping of the images of a binocular camera pair to a common rectified image plane.</summary>
            <param name="map1">Image containing the mapping data of camera 1.</param>
            <param name="map2">Image containing the mapping data of camera 2.</param>
            <param name="camParam1">Internal parameters of the projective camera 1.</param>
            <param name="camParam2">Internal parameters of the projective camera 2.</param>
            <param name="relPose">Point transformation from camera 2 to camera 1.</param>
            <param name="subSampling">Factor of sub sampling. Default: 1.0</param>
            <param name="method">Type of rectification. Default: "geometric"</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
            <param name="camParamRect1">Rectified internal parameters of the projective camera 1.</param>
            <param name="camParamRect2">Rectified internal parameters of the projective camera 2.</param>
            <param name="camPoseRect1">Point transformation from the rectified camera 1 to 			the original camera 1.</param>
            <param name="camPoseRect2">Point transformation from the rectified camera 1 to 			the original camera 1.</param>
            <param name="relPoseRect">Point transformation from the rectified camera 2 to 			the rectified camera 1.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BinocularCalibration(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Determine all camera parameters of a binocular stereo system.</summary>
            <param name="NX">Ordered Tuple with all X-coordinates of the calibration marks (in meters).</param>
            <param name="NY">Ordered Tuple with all Y-coordinates of the calibration marks (in meters).</param>
            <param name="NZ">Ordered Tuple with all Z-coordinates of the calibration marks (in meters).</param>
            <param name="NRow1">Ordered Tuple with all row-coordinates of the extracted calibration marks of camera 1 (in pixels).</param>
            <param name="NCol1">Ordered Tuple with all column-coordinates of the extracted calibration marks of camera 1 (in pixels).</param>
            <param name="NRow2">Ordered Tuple with all row-coordinates of the extracted calibration marks of camera 2 (in pixels).</param>
            <param name="NCol2">Ordered Tuple with all column-coordinates of the extracted calibration marks of camera 2 (in pixels).</param>
            <param name="startCamParam1">Initial values for the internal projective parameters of the projective camera 1.</param>
            <param name="startCamParam2">Initial values for the internal projective parameters of the projective camera 2.</param>
            <param name="NStartPose1">Ordered tuple with all initial values for the poses of the calibration model in relation to camera 1.</param>
            <param name="NStartPose2">Ordered tuple with all initial values for the poses of the calibration model in relation to camera 2.</param>
            <param name="estimateParams">Camera parameters to be estimated. Default: "all"</param>
            <param name="camParam1">Internal Parameters of the projective camera 1.</param>
            <param name="camParam2">Internal parameters of the projective camera 2.</param>
            <param name="NFinalPose1">Ordered tuple with all poses of the calibration model in relation to camera 1.</param>
            <param name="NFinalPose2">Ordered tuple with all poses of the calibration model in relation to camera 2.</param>
            <param name="relPose">Pose of camera 2 in relation to camera 1.</param>
            <param name="errors">Average error distances in pixels.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QuerySpy(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Inquiring for possible settings of the HALCON debugging tool.</summary>
            <param name="classes">Available control modes (see also set_spy).</param>
            <param name="values">Corresponding state of the control modes.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetSpy(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Control of the HALCON Debugging Tools.</summary>
            <param name="classVal">Control mode Default: "mode"</param>
            <param name="value">State of the control mode to be set. Default: "on"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSpy(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Current configuration of the HALCON debugging-tool.</summary>
            <param name="classVal">Control mode Default: "mode"</param>
            <param name="value">State of the control mode.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadSheetOfLightModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a sheet-of-light model from a file and create a new model.</summary>
            <param name="fileName">Name of the sheet-of-light model file. Default: "sheet_of_light_model.solm"</param>
            <param name="sheetOfLightModelID">Handle of the sheet-of-light model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteSheetOfLightModel(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a sheet-of-light model to a file.</summary>
            <param name="sheetOfLightModelID">Handle of the sheet-of-light model.</param>
            <param name="fileName">Name of the sheet-of-light model file. Default: "sheet_of_light_model.solm"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeSheetOfLightModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a sheet-of-light model.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="sheetOfLightModelID">Handle of the sheet-of-light model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeSheetOfLightModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a sheet-of-light model.</summary>
            <param name="sheetOfLightModelID">Handle of the sheet-of-light model.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateSheetOfLightCalibObject(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create a calibration object for sheet-of-light calibration.</summary>
            <param name="width">Width of the object. Default: 0.1</param>
            <param name="length">Length of the object. Default: 0.15</param>
            <param name="heightMin">Minimum height of the ramp. Default: 0.005</param>
            <param name="heightMax">Maximum height of the ramp. Default: 0.04</param>
            <param name="fileName">Filename of the model of the calibration object. Default: "calib_object.dxf"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CalibrateSheetOfLight(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calibrate a sheet-of-light setup with a 3D calibration object.</summary>
            <param name="sheetOfLightModelID">Handle of the sheet-of-light model.</param>
            <param name="error">Average back projection error of the optimization.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSheetOfLightResultObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the result of a calibrated measurement performed with the  sheet-of-light technique as a 3D object model.</summary>
            <param name="sheetOfLightModelID">Handle for accessing the sheet-of-light model.</param>
            <param name="objectModel3D">Handle of the resulting 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSheetOfLightResult(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Get the iconic results of a measurement performed with the sheet-of light technique.</summary>
            <param name="resultValue">Desired measurement result.</param>
            <param name="sheetOfLightModelID">Handle of the sheet-of-light model to be used.</param>
            <param name="resultName">Specify which result of the measurement shall be provided. Default: "disparity"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ApplySheetOfLightCalibration(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Apply the calibration transformations to the input disparity image.</summary>
            <param name="disparity">Height or range image to be calibrated.</param>
            <param name="sheetOfLightModelID">Handle of the sheet-of-light model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetProfileSheetOfLight(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set sheet of light profiles by measured disparities.</summary>
            <param name="profileDisparityImage">Disparity image that contains several profiles.</param>
            <param name="sheetOfLightModelID">Handle of the sheet-of-light model.</param>
            <param name="movementPoses">Poses describing the movement of the scene under measurement between the previously processed profile image and the current profile image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MeasureProfileSheetOfLight(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Process the profile image provided as input and store the resulting disparity to the sheet-of-light model.</summary>
            <param name="profileImage">Input image.</param>
            <param name="sheetOfLightModelID">Handle of the sheet-of-light model.</param>
            <param name="movementPose">Pose describing the movement of the scene under measurement between the previously processed profile image and the current profile image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetSheetOfLightParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set selected parameters of the sheet-of-light model.</summary>
            <param name="sheetOfLightModelID">Handle of the sheet-of-light model.</param>
            <param name="genParamName">Name of the model parameter that shall be adjusted for the sheet-of-light model. Default: "method"</param>
            <param name="genParamValue">Value of the model parameter that shall be adjusted for the sheet-of-light model. Default: "center_of_gravity"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSheetOfLightParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the value of a parameter, which has been set in a sheet-of-light model.</summary>
            <param name="sheetOfLightModelID">Handle of the sheet-of-light model.</param>
            <param name="genParamName">Name of the generic parameter that shall be queried. Default: "method"</param>
            <param name="genParamValue">Value of the model parameter that shall be queried.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QuerySheetOfLightParams(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>For a given sheet-of-light model get the names of the generic iconic or control parameters that can be used in the different sheet-of-light operators.</summary>
            <param name="sheetOfLightModelID">Handle of the sheet-of-light model.</param>
            <param name="queryName">Name of the parameter group. Default: "create_model_params"</param>
            <param name="genParamNames">List containing the names of the supported generic parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ResetSheetOfLightModel(HalconDotNet.HTuple)">
            <summary>Reset a sheet-of-light model.</summary>
            <param name="sheetOfLightModelID">Handle of the sheet-of-light model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllSheetOfLightModels">
            <summary>Delete all sheet-of-light models and free the allocated memory.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearSheetOfLightModel(HalconDotNet.HTuple)">
            <summary>Delete a sheet-of-light model and free the allocated memory.</summary>
            <param name="sheetOfLightModelID">Handle of the sheet-of-light model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateSheetOfLightModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a model to perform 3D-measurements using the sheet-of-light technique.</summary>
            <param name="profileRegion">Region of the images containing the profiles to be processed. If the provided region is not rectangular, its smallest enclosing rectangle will be used.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the sheet-of-light model. Default: "min_gray"</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the sheet-of-light model. Default: 50</param>
            <param name="sheetOfLightModelID">Handle for using and accessing the sheet-of-light model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ShadeHeightField(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Shade a height field.</summary>
            <param name="imageHeight">Height field to be shaded.</param>
            <param name="imageShade">Shaded image.</param>
            <param name="slant">Angle between the light source and the positive z-axis (in degrees). Default: 0.0</param>
            <param name="tilt">Angle between the light source and the x-axis after projection into the xy-plane (in degrees). Default: 0.0</param>
            <param name="albedo">Amount of light reflected by the surface. Default: 1.0</param>
            <param name="ambient">Amount of ambient light. Default: 0.0</param>
            <param name="shadows">Should shadows be calculated? Default: "false"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EstimateAlAm(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Estimate the albedo of a surface and the amount of ambient light.</summary>
            <param name="image">Image for which albedo and ambient are to be estimated.</param>
            <param name="albedo">Amount of light reflected by the surface.</param>
            <param name="ambient">Amount of ambient light.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EstimateSlAlZc(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Estimate the slant of a light source and the albedo of a surface.</summary>
            <param name="image">Image for which slant and albedo are to be estimated.</param>
            <param name="slant">Angle of the light sources and the positive z-axis (in degrees).</param>
            <param name="albedo">Amount of light reflected by the surface.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EstimateSlAlLr(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Estimate the slant of a light source and the albedo of a surface.</summary>
            <param name="image">Image for which slant and albedo are to be estimated.</param>
            <param name="slant">Angle between the light sources and the positive z-axis (in degrees).</param>
            <param name="albedo">Amount of light reflected by the surface.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EstimateTiltZc(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Estimate the tilt of a light source.</summary>
            <param name="image">Image for which the tilt is to be estimated.</param>
            <param name="tilt">Angle between the light source and the x-axis after projection into the xy-plane (in degrees).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EstimateTiltLr(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Estimate the tilt of a light source.</summary>
            <param name="image">Image for which the tilt is to be estimated.</param>
            <param name="tilt">Angle between the light source and the x-axis after projection into the xy-plane (in degrees).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PhotStereo(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Reconstruct a surface from at least three gray value images.</summary>
            <param name="images">Shaded input image with at least three channels.</param>
            <param name="height">Reconstructed height field.</param>
            <param name="slants">Angle between the light sources and the positive z-axis (in degrees). Default: 45.0</param>
            <param name="tilts">Angle between the light source and the x-axis after projection into the xy-plane (in degrees). Default: 45.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReconstructHeightFieldFromGradient(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Reconstruct a surface from surface gradients.</summary>
            <param name="gradient">The gradient field of the image.</param>
            <param name="heightField">Reconstructed height field.</param>
            <param name="reconstructionMethod">Type of the reconstruction method. Default: "poisson"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PhotometricStereo(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Reconstruct a surface according to the photometric stereo technique.</summary>
            <param name="images">Array with at least three input images with different directions of illumination.</param>
            <param name="heightField">Reconstructed height field.</param>
            <param name="gradient">The gradient field of the surface.</param>
            <param name="albedo">The albedo of the surface.</param>
            <param name="slants">Angle between the object plane and the direction of  illumination (in degrees). Default: 45.0</param>
            <param name="tilts">Angle of the direction of illumination within the object plane (in degrees). Default: 45.0</param>
            <param name="resultType">Types of the requested results. Default: "all"</param>
            <param name="reconstructionMethod">Type of the reconstruction method. Default: "poisson"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SfsPentland(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Reconstruct a surface from a gray value image.</summary>
            <param name="image">Shaded input image.</param>
            <param name="height">Reconstructed height field.</param>
            <param name="slant">Angle between the light source and the positive z-axis (in degrees). Default: 45.0</param>
            <param name="tilt">Angle between the light source and the x-axis after projection into the xy-plane (in degrees). Default: 45.0</param>
            <param name="albedo">Amount of light reflected by the surface. Default: 1.0</param>
            <param name="ambient">Amount of ambient light. Default: 0.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SfsOrigLr(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Reconstruct a surface from a gray value image.</summary>
            <param name="image">Shaded input image.</param>
            <param name="height">Reconstructed height field.</param>
            <param name="slant">Angle between the light source and the positive z-axis (in degrees). Default: 45.0</param>
            <param name="tilt">Angle between the light source and the x-axis after projection into the xy-plane (in degrees). Default: 45.0</param>
            <param name="albedo">Amount of light reflected by the surface. Default: 1.0</param>
            <param name="ambient">Amount of ambient light. Default: 0.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SfsModLr(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Reconstruct a surface from a gray value image.</summary>
            <param name="image">Shaded input image.</param>
            <param name="height">Reconstructed height field.</param>
            <param name="slant">Angle between the light source and the positive z-axis (in degrees). Default: 45.0</param>
            <param name="tilt">Angle between the light source and the x-axis after projection into the xy-plane (in degrees). Default: 45.0</param>
            <param name="albedo">Amount of light reflected by the surface. Default: 1.0</param>
            <param name="ambient">Amount of ambient light. Default: 0.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReceiveSerializedItem(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Receive a serialized item over a socket connection.</summary>
            <param name="socket">Socket number.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SendSerializedItem(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Send a serialized item over a socket connection.</summary>
            <param name="socket">Socket number.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FwriteSerializedItem(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a serialized item to a file.</summary>
            <param name="fileHandle">File handle.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FreadSerializedItem(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a serialized item from a file.</summary>
            <param name="fileHandle">File handle.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllSerializedItems">
            <summary>Delete all current existing serialized items.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearSerializedItem(HalconDotNet.HTuple)">
            <summary>Delete a serialized item.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSerializedItemPtr(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Access the data pointer of a serialized item.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="pointer">Data pointer of the serialized item.</param>
            <param name="size">Size of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateSerializedItemPtr(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a serialized item.</summary>
            <param name="pointer">Data pointer of the serialized item.</param>
            <param name="size">Size of the serialized item.</param>
            <param name="copy">Copy mode of the serialized item. Default: "true"</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FitPrimitivesObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Fit 3D primitives into a set of 3D points.</summary>
            <param name="objectModel3D">Handle of the input 3D object model.</param>
            <param name="paramName">Names of the generic parameters.</param>
            <param name="paramValue">Values of the generic parameters.</param>
            <param name="objectModel3DOut">Handle of the output 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SegmentObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Segment a set of 3D points into sub-sets with similar characteristics.</summary>
            <param name="objectModel3D">Handle of the input 3D object model.</param>
            <param name="paramName">Names of the generic parameters.</param>
            <param name="paramValue">Values of the generic parameters.</param>
            <param name="objectModel3DOut">Handle of the output 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllTextResults">
            <summary>Clear all text results.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearTextResult(HalconDotNet.HTuple)">
            <summary>Clear a text result.</summary>
            <param name="textResultID">Text result to be cleared.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetTextObject(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Query an iconic value of a text segmentation result.</summary>
            <param name="characters">Returned result.</param>
            <param name="textResultID">Text result.</param>
            <param name="resultName">Name of the result to be returned. Default: "all_lines"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetTextResult(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query a control value of a text segmentation result.</summary>
            <param name="textResultID">Text result.</param>
            <param name="resultName">Name of the result to be returned. Default: "class"</param>
            <param name="resultValue">Value of ResultName.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindText(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Find text in an image.</summary>
            <param name="image">Input image.</param>
            <param name="textModel">Text model specifying the text to be segmented.</param>
            <param name="textResultID">Result of the segmentation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetTextModelParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query parameters of a text model.</summary>
            <param name="textModel">Text model.</param>
            <param name="genParamName">Parameters to be queried. Default: "min_contrast"</param>
            <param name="genParamValue">Values of Parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetTextModelParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set parameters of a text model.</summary>
            <param name="textModel">Text model.</param>
            <param name="genParamName">Names of the parameters to be set. Default: "min_contrast"</param>
            <param name="genParamValue">Values of the parameters to be set. Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllTextModels">
            <summary>Clear all text models.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearTextModel(HalconDotNet.HTuple)">
            <summary>Clear a text model.</summary>
            <param name="textModel">Text model to be cleared.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateTextModelReader(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a text model.</summary>
            <param name="mode">The Mode of the text model. Default: "auto"</param>
            <param name="OCRClassifierMLP">OCR Classifier. Default: "Industrial_Rej.omc"</param>
            <param name="textModel">New text model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateTextModel(HalconDotNet.HTuple@)">
            <summary>Create a text model.</summary>
            <param name="textModel">New text model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectCharacters(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Selects characters from a given region.</summary>
            <param name="region">Region of text lines in which to select the characters.</param>
            <param name="regionCharacters">Selected characters.</param>
            <param name="dotPrint">Should dot print characters be detected? Default: "false"</param>
            <param name="strokeWidth">Stroke width of a character. Default: "medium"</param>
            <param name="charWidth">Width of a character. Default: 25</param>
            <param name="charHeight">Height of a character. Default: 25</param>
            <param name="punctuation">Add punctuation? Default: "false"</param>
            <param name="diacriticMarks">Exist diacritic marks? Default: "false"</param>
            <param name="partitionMethod">Method to partition neighbored characters. Default: "none"</param>
            <param name="partitionLines">Should lines be partitioned? Default: "false"</param>
            <param name="fragmentDistance">Distance of fragments. Default: "medium"</param>
            <param name="connectFragments">Connect fragments? Default: "false"</param>
            <param name="clutterSizeMax">Maximum size of clutter. Default: 0</param>
            <param name="stopAfter">Stop execution after this step. Default: "completion"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SegmentCharacters(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Segments characters in a given region of an image.</summary>
            <param name="region">Area in the image where the text lines are located.</param>
            <param name="image">Input image.</param>
            <param name="imageForeground">Image used for the segmentation.</param>
            <param name="regionForeground">Region of characters.</param>
            <param name="method">Method to segment the characters. Default: "local_auto_shape"</param>
            <param name="eliminateLines">Eliminate horizontal and vertical lines? Default: "false"</param>
            <param name="dotPrint">Should dot print characters be detected? Default: "false"</param>
            <param name="strokeWidth">Stroke width of a character. Default: "medium"</param>
            <param name="charWidth">Width of a character. Default: 25</param>
            <param name="charHeight">Height of a character. Default: 25</param>
            <param name="thresholdOffset">Value to adjust the segmentation. Default: 0</param>
            <param name="contrast">Minimum gray value difference between text and background. Default: 10</param>
            <param name="usedThreshold">Threshold used to segment the characters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TextLineSlant(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Determines the slant of characters of a text line or paragraph.</summary>
            <param name="region">Area of text lines.</param>
            <param name="image">Input image.</param>
            <param name="charHeight">Height of the text lines. Default: 25</param>
            <param name="slantFrom">Minimum slant of the characters Default: -0.523599</param>
            <param name="slantTo">Maximum slant of the characters Default: 0.523599</param>
            <param name="slantAngle">Calculated slant of the characters in the region</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TextLineOrientation(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Determines the orientation of a text line or paragraph.</summary>
            <param name="region">Area of text lines.</param>
            <param name="image">Input image.</param>
            <param name="charHeight">Height of the text lines. Default: 25</param>
            <param name="orientationFrom">Minimum rotation of the text lines. Default: -0.523599</param>
            <param name="orientationTo">Maximum rotation of the text lines. Default: 0.523599</param>
            <param name="orientationAngle">Calculated rotation angle of the text lines.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClassifyImageClassLut(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Classify a byte image using a look-up table.</summary>
            <param name="image">Input image.</param>
            <param name="classRegions">Segmented classes.</param>
            <param name="classLUTHandle">Handle of the LUT classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClassifyImageClassKnn(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Classify an image with a k-Nearest-Neighbor classifier.</summary>
            <param name="image">Input image.</param>
            <param name="classRegions">Segmented classes.</param>
            <param name="distanceImage">Distance of the pixel's nearest neighbor.</param>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
            <param name="rejectionThreshold">Threshold for the rejection of the classification. Default: 0.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddSamplesImageClassKnn(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Add training samples from an image to the training data of a k-Nearest-Neighbor classifier.</summary>
            <param name="image">Training image.</param>
            <param name="classRegions">Regions of the classes to be trained.</param>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClassifyImageClassGmm(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Classify an image with a Gaussian Mixture Model.</summary>
            <param name="image">Input image.</param>
            <param name="classRegions">Segmented classes.</param>
            <param name="GMMHandle">GMM handle.</param>
            <param name="rejectionThreshold">Threshold for the rejection of the classification. Default: 0.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddSamplesImageClassGmm(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add training samples from an image to the training data of a Gaussian Mixture Model.</summary>
            <param name="image">Training image.</param>
            <param name="classRegions">Regions of the classes to be trained.</param>
            <param name="GMMHandle">GMM handle.</param>
            <param name="randomize">Standard deviation of the Gaussian noise added to the training data. Default: 0.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClassifyImageClassSvm(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Classify an image with a support vector machine.</summary>
            <param name="image">Input image.</param>
            <param name="classRegions">Segmented classes.</param>
            <param name="SVMHandle">SVM handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddSamplesImageClassSvm(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Add training samples from an image to the training data of a support vector machine.</summary>
            <param name="image">Training image.</param>
            <param name="classRegions">Regions of the classes to be trained.</param>
            <param name="SVMHandle">SVM handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClassifyImageClassMlp(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Classify an image with a multilayer perceptron.</summary>
            <param name="image">Input image.</param>
            <param name="classRegions">Segmented classes.</param>
            <param name="MLPHandle">MLP handle.</param>
            <param name="rejectionThreshold">Threshold for the rejection of the classification. Default: 0.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddSamplesImageClassMlp(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Add training samples from an image to the training data of a multilayer perceptron.</summary>
            <param name="image">Training image.</param>
            <param name="classRegions">Regions of the classes to be trained.</param>
            <param name="MLPHandle">MLP handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LearnNdimNorm(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Construct classes for class_ndim_norm.</summary>
            <param name="foreground">Foreground pixels to be trained.</param>
            <param name="background">Background pixels to be trained (rejection class).</param>
            <param name="image">Multi-channel training image.</param>
            <param name="metric">Metric to be used. Default: "euclid"</param>
            <param name="distance">Maximum cluster radius. Default: 10.0</param>
            <param name="minNumberPercent">The ratio of the number of pixels in a cluster to the total number of pixels (in percent) must be larger than MinNumberPercent (otherwise the cluster is not output). Default: 0.01</param>
            <param name="radius">Cluster radii or half edge lengths.</param>
            <param name="center">Coordinates of all cluster centers.</param>
            <param name="quality">Overlap of the rejection class with the classified objects (1: no overlap).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LearnNdimBox(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Train a classificator using a multi-channel image.</summary>
            <param name="foreground">Foreground pixels to be trained.</param>
            <param name="background">Background pixels to be trained (rejection class).</param>
            <param name="multiChannelImage">Multi-channel training image.</param>
            <param name="classifHandle">Handle of the classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClassNdimBox(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Classify pixels using hyper-cuboids.</summary>
            <param name="multiChannelImage">Multi channel input image.</param>
            <param name="regions">Classification result.</param>
            <param name="classifHandle">Handle of the classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClassNdimNorm(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Classify pixels using hyper-spheres or hyper-cubes.</summary>
            <param name="multiChannelImage">Multi channel input image.</param>
            <param name="regions">Classification result.</param>
            <param name="metric">Metric to be used. Default: "euclid"</param>
            <param name="singleMultiple">Return one region or one region for each cluster. Default: "single"</param>
            <param name="radius">Cluster radii or half edge lengths (returned by learn_ndim_norm).</param>
            <param name="center">Coordinates of the cluster centers (returned by learn_ndim_norm).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Class2dimSup(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Segment an image using two-dimensional pixel classification.</summary>
            <param name="imageCol">Input image (first channel).</param>
            <param name="imageRow">Input image (second channel).</param>
            <param name="featureSpace">Region defining the feature space.</param>
            <param name="regionClass2Dim">Classified regions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Class2dimUnsup(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Segment two images by clustering.</summary>
            <param name="image1">First input image.</param>
            <param name="image2">Second input image.</param>
            <param name="classes">Classification result.</param>
            <param name="threshold">Threshold (maximum distance to the cluster's center). Default: 15</param>
            <param name="numClasses">Number of classes (cluster centers). Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CheckDifference(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compare two images pixel by pixel.</summary>
            <param name="image">Input image.</param>
            <param name="pattern">Comparison image.</param>
            <param name="selected">Points in which the two images are similar/different.</param>
            <param name="mode">Mode: return similar or different pixels. Default: "diff_outside"</param>
            <param name="diffLowerBound">Lower bound of the tolerated gray value difference. Default: -5</param>
            <param name="diffUpperBound">Upper bound of the tolerated gray value difference. Default: 5</param>
            <param name="grayOffset">Offset gray value subtracted from the input image. Default: 0</param>
            <param name="addRow">Row coordinate by which the comparison image is translated. Default: 0</param>
            <param name="addCol">Column coordinate by which the comparison image is translated. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CharThreshold(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Perform a threshold segmentation for extracting characters.</summary>
            <param name="image">Input image.</param>
            <param name="histoRegion">Region in which the histogram is computed.</param>
            <param name="characters">Dark regions (characters).</param>
            <param name="sigma">Sigma for the Gaussian smoothing of the histogram. Default: 2.0</param>
            <param name="percent">Percentage for the gray value difference. Default: 95</param>
            <param name="threshold">Calculated threshold.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LabelToRegion(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Extract regions with equal gray values from an image.</summary>
            <param name="labelImage">Label image.</param>
            <param name="regions">Regions having a constant gray value.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.NonmaxSuppressionAmp(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Suppress non-maximum points on an edge.</summary>
            <param name="imgAmp">Amplitude (gradient magnitude) image.</param>
            <param name="imageResult">Image with thinned edge regions.</param>
            <param name="mode">Select horizontal/vertical or undirected NMS. Default: "hvnms"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.NonmaxSuppressionDir(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Suppress non-maximum points on an edge using a direction image.</summary>
            <param name="imgAmp">Amplitude (gradient magnitude) image.</param>
            <param name="imgDir">Direction image.</param>
            <param name="imageResult">Image with thinned edge regions.</param>
            <param name="mode">Select non-maximum-suppression or interpolating NMS. Default: "nms"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HysteresisThreshold(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Perform a hysteresis threshold operation on an image.</summary>
            <param name="image">Input image.</param>
            <param name="regionHysteresis">Segmented region.</param>
            <param name="low">Lower threshold for the gray values. Default: 30</param>
            <param name="high">Upper threshold for the gray values. Default: 60</param>
            <param name="maxLength">Maximum length of a path of "potential" points to reach a "secure" point. Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BinaryThreshold(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Segment an image using binary thresholding.</summary>
            <param name="image">Input Image.</param>
            <param name="region">Segmented output region.</param>
            <param name="method">Segmentation method. Default: "max_separability"</param>
            <param name="lightDark">Extract foreground or background? Default: "dark"</param>
            <param name="usedThreshold">Used threshold.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LocalThreshold(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Segment an image using local thresholding.</summary>
            <param name="image">Input Image.</param>
            <param name="region">Segmented output region.</param>
            <param name="method">Segmentation method. Default: "adapted_std_deviation"</param>
            <param name="lightDark">Extract foreground or background? Default: "dark"</param>
            <param name="genParamName">List of generic parameter names. Default: []</param>
            <param name="genParamValue">List of generic parameter values. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.VarThreshold(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Threshold an image by local mean and standard deviation analysis.</summary>
            <param name="image">Input image.</param>
            <param name="region">Segmented regions.</param>
            <param name="maskWidth">Mask width for mean and deviation calculation. Default: 15</param>
            <param name="maskHeight">Mask height for mean and deviation calculation. Default: 15</param>
            <param name="stdDevScale">Factor for the standard deviation of the gray values. Default: 0.2</param>
            <param name="absThreshold">Minimum gray value difference from the mean. Default: 2</param>
            <param name="lightDark">Threshold type. Default: "dark"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DynThreshold(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Segment an image using a local threshold.</summary>
            <param name="origImage">Input image.</param>
            <param name="thresholdImage">Image containing the local thresholds.</param>
            <param name="regionDynThresh">Segmented regions.</param>
            <param name="offset">Offset applied to ThresholdImage. Default: 5.0</param>
            <param name="lightDark">Extract light, dark or similar areas? Default: "light"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Threshold(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Segment an image using global threshold.</summary>
            <param name="image">Input image.</param>
            <param name="region">Segmented region.</param>
            <param name="minGray">Lower threshold for the gray values. Default: 128.0</param>
            <param name="maxGray">Upper threshold for the gray values. Default: 255.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ThresholdSubPix(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Extract level crossings from an image with subpixel accuracy.</summary>
            <param name="image">Input image.</param>
            <param name="border">Extracted level crossings.</param>
            <param name="threshold">Threshold for the level crossings. Default: 128</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RegiongrowingN(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Segment an image using regiongrowing for multi-channel images.</summary>
            <param name="multiChannelImage">Input image.</param>
            <param name="regions">Segmented regions.</param>
            <param name="metric">Metric for the distance of the feature vectors. Default: "2-norm"</param>
            <param name="minTolerance">Lower threshold for the features' distance. Default: 0.0</param>
            <param name="maxTolerance">Upper threshold for the features' distance. Default: 20.0</param>
            <param name="minSize">Minimum size of the output regions. Default: 30</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Regiongrowing(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Segment an image using regiongrowing.</summary>
            <param name="image">Input image.</param>
            <param name="regions">Segmented regions.</param>
            <param name="row">Vertical distance between tested pixels (height of the raster). Default: 3</param>
            <param name="column">Horizontal distance between tested pixels (height of the raster). Default: 3</param>
            <param name="tolerance">Points with a gray value difference less then or equal to tolerance are accumulated into the same object. Default: 6.0</param>
            <param name="minSize">Minimum size of the output regions. Default: 100</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RegiongrowingMean(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Perform a regiongrowing using mean gray values.</summary>
            <param name="image">Input image.</param>
            <param name="regions">Segmented regions.</param>
            <param name="startRows">Row coordinates of the starting points. Default: []</param>
            <param name="startColumns">Column coordinates of the starting points. Default: []</param>
            <param name="tolerance">Maximum deviation from the mean. Default: 5.0</param>
            <param name="minSize">Minimum size of a region. Default: 100</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Pouring(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Segment an image by "pouring water" over it.</summary>
            <param name="image">Input image.</param>
            <param name="regions">Segmented regions.</param>
            <param name="mode">Mode of operation. Default: "all"</param>
            <param name="minGray">All gray values smaller than this threshold are disregarded. Default: 0</param>
            <param name="maxGray">All gray values larger than this threshold are disregarded. Default: 255</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WatershedsThreshold(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Extract watershed basins from an image using a threshold.</summary>
            <param name="image">Image to be segmented.</param>
            <param name="basins">Segments found (dark basins).</param>
            <param name="threshold">Threshold for the watersheds. Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Watersheds(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@)">
            <summary>Extract watersheds and basins from an image.</summary>
            <param name="image">Input image.</param>
            <param name="basins">Segmented basins.</param>
            <param name="watersheds">Watersheds between the basins.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ZeroCrossing(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Extract zero crossings from an image.</summary>
            <param name="image">Input image.</param>
            <param name="regionCrossing">Zero crossings.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ZeroCrossingSubPix(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Extract zero crossings from an image with subpixel accuracy.</summary>
            <param name="image">Input image.</param>
            <param name="zeroCrossings">Extracted zero crossings.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DualThreshold(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Threshold operator for signed images.</summary>
            <param name="image">Input image.</param>
            <param name="regionCrossings">Positive and negative regions.</param>
            <param name="minSize">Regions smaller than MinSize are suppressed. Default: 20</param>
            <param name="minGray">Regions whose maximum absolute gray value is smaller than MinGray are suppressed. Default: 5.0</param>
            <param name="threshold">Regions that have a gray value smaller than Threshold (or larger than -Threshold) are suppressed. Default: 2.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ExpandLine(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Expand a region starting at a given line.</summary>
            <param name="image">Input image.</param>
            <param name="regionExpand">Extracted segments.</param>
            <param name="coordinate">Row or column coordinate. Default: 256</param>
            <param name="expandType">Stopping criterion. Default: "gradient"</param>
            <param name="rowColumn">Segmentation mode (row or column). Default: "row"</param>
            <param name="threshold">Threshold for the expansion. Default: 3.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LocalMin(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Detect all local minima in an image.</summary>
            <param name="image">Image to be processed.</param>
            <param name="localMinima">Extracted local minima as regions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Lowlands(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Detect all gray value lowlands.</summary>
            <param name="image">Image to be processed.</param>
            <param name="lowlands">Extracted lowlands as regions (one region for each lowland).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LowlandsCenter(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Detect the centers of all gray value lowlands.</summary>
            <param name="image">Image to be processed.</param>
            <param name="lowlands">Centers of gravity of the extracted lowlands as regions (one region for each lowland).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LocalMax(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Detect all local maxima in an image.</summary>
            <param name="image">Input image.</param>
            <param name="localMaxima">Extracted local maxima as a region.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Plateaus(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Detect all gray value plateaus.</summary>
            <param name="image">Input image.</param>
            <param name="plateaus">Extracted plateaus as regions (one region for each plateau).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PlateausCenter(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Detect the centers of all gray value plateaus.</summary>
            <param name="image">Input image.</param>
            <param name="plateaus">Centers of gravity of the extracted plateaus as regions (one region for each plateau).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HistoToThresh(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Determine gray value thresholds from a histogram.</summary>
            <param name="histogramm">Gray value histogram.</param>
            <param name="sigma">Sigma for the Gaussian smoothing of the histogram. Default: 2.0</param>
            <param name="minThresh">Minimum thresholds.</param>
            <param name="maxThresh">Maximum thresholds.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AutoThreshold(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Segment an image using thresholds determined from its histogram.</summary>
            <param name="image">Input image.</param>
            <param name="regions">Regions with gray values within the automatically determined intervals.</param>
            <param name="sigma">Sigma for the Gaussian smoothing of the histogram. Default: 2.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BinThreshold(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Segment an image using an automatically determined threshold.</summary>
            <param name="image">Input image.</param>
            <param name="region">Dark regions of the image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FastThreshold(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Fast thresholding of images using global thresholds.</summary>
            <param name="image">Input image.</param>
            <param name="region">Segmented regions.</param>
            <param name="minGray">Lower threshold for the gray values. Default: 128</param>
            <param name="maxGray">Upper threshold for the gray values. Default: 255.0</param>
            <param name="minSize">Minimum size of objects to be extracted. Default: 20</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PolarTransRegionInv(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Transform a region in polar coordinates back to cartesian coordinates.</summary>
            <param name="polarRegion">Input region.</param>
            <param name="XYTransRegion">Output region.</param>
            <param name="row">Row coordinate of the center of the arc. Default: 256</param>
            <param name="column">Column coordinate of the center of the arc. Default: 256</param>
            <param name="angleStart">Angle of the ray to map the column coordinate 0 of PolarRegion to. Default: 0.0</param>
            <param name="angleEnd">Angle of the ray to map the column coordinate $WidthIn-1$ of PolarRegion to. Default: 6.2831853</param>
            <param name="radiusStart">Radius of the circle to map the row coordinate 0 of PolarRegion to. Default: 0</param>
            <param name="radiusEnd">Radius of the circle to map the row coordinate $HeightIn-1$ of PolarRegion to. Default: 100</param>
            <param name="widthIn">Width of the virtual input image. Default: 512</param>
            <param name="heightIn">Height of the virtual input image. Default: 512</param>
            <param name="width">Width of the virtual output image. Default: 512</param>
            <param name="height">Height of the virtual output image. Default: 512</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "nearest_neighbor"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PolarTransRegion(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Transform a region within an annular arc to polar coordinates.</summary>
            <param name="region">Input region.</param>
            <param name="polarTransRegion">Output region.</param>
            <param name="row">Row coordinate of the center of the arc. Default: 256</param>
            <param name="column">Column coordinate of the center of the arc. Default: 256</param>
            <param name="angleStart">Angle of the ray to be mapped to column coordinate 0 of PolarTransRegion. Default: 0.0</param>
            <param name="angleEnd">Angle of the ray to be mapped to column coordinate $Width-1$ of PolarTransRegion. Default: 6.2831853</param>
            <param name="radiusStart">Radius of the circle to be mapped to row coordinate 0 of PolarTransRegion. Default: 0</param>
            <param name="radiusEnd">Radius of the circle to be mapped to row coordinate $Height-1$ of PolarTransRegion. Default: 100</param>
            <param name="width">Width of the virtual output image. Default: 512</param>
            <param name="height">Height of the virtual output image. Default: 512</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "nearest_neighbor"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MergeRegionsLineScan(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Merge regions from line scan images.</summary>
            <param name="currRegions">Current input regions.</param>
            <param name="prevRegions">Merged regions from the previous iteration.</param>
            <param name="currMergedRegions">Current regions, merged with old ones where applicable.</param>
            <param name="prevMergedRegions">Regions from the previous iteration which could not be merged with the current ones.</param>
            <param name="imageHeight">Height of the line scan images. Default: 512</param>
            <param name="mergeBorder">Image line of the current image, which touches the previous image. Default: "top"</param>
            <param name="maxImagesRegion">Maximum number of images for a single region. Default: 3</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PartitionRectangle(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Partition a region into rectangles of approximately equal size.</summary>
            <param name="region">Region to be partitioned.</param>
            <param name="partitioned">Partitioned region.</param>
            <param name="width">Width of the individual rectangles.</param>
            <param name="height">Height of the individual rectangles.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PartitionDynamic(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Partition a region horizontally at positions of small vertical extent.</summary>
            <param name="region">Region to be partitioned.</param>
            <param name="partitioned">Partitioned region.</param>
            <param name="distance">Approximate width of the resulting region parts.</param>
            <param name="percent">Maximum percental shift of the split position. Default: 20</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RegionToLabel(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Convert regions to a label image.</summary>
            <param name="region">Regions to be converted.</param>
            <param name="imageLabel">Result image of dimension Width * Height containing the converted regions.</param>
            <param name="type">Pixel type of the result image. Default: "int2"</param>
            <param name="width">Width of the image to be generated. Default: 512</param>
            <param name="height">Height of the image to be generated. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RegionToBin(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Convert a region into a binary byte-image.</summary>
            <param name="region">Regions to be converted.</param>
            <param name="binImage">Result image of dimension Width * Height containing the converted regions.</param>
            <param name="foregroundGray">Gray value in which the regions are displayed. Default: 255</param>
            <param name="backgroundGray">Gray value in which the background is displayed. Default: 0</param>
            <param name="width">Width of the image to be generated. Default: 512</param>
            <param name="height">Height of the image to be generated. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Union2(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Return the union of two regions.</summary>
            <param name="region1">Region for which the union with all regions in Region2 is to be computed.</param>
            <param name="region2">Regions which should be added to Region1.</param>
            <param name="regionUnion">Resulting regions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Union1(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Return the union of all input regions.</summary>
            <param name="region">Regions of which the union is to be computed.</param>
            <param name="regionUnion">Union of all input regions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClosestPointTransform(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the closest-point transformation of a region.</summary>
            <param name="region">Region for which the distance to the border is computed.</param>
            <param name="distances">Image containing the distance information.</param>
            <param name="closestPoints">Image containing the coordinates of the closest points.</param>
            <param name="metric">Type of metric to be used for the closest-point transformation. Default: "city-block"</param>
            <param name="foreground">Compute the distance for pixels inside (true) or outside (false) the input region. Default: "true"</param>
            <param name="closestPointMode">Mode in which the coordinates of the closest points are returned. Default: "absolute"</param>
            <param name="width">Width of the output images. Default: 640</param>
            <param name="height">Height of the output images. Default: 480</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistanceTransform(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the distance transformation of a region.</summary>
            <param name="region">Region for which the distance to the border is computed.</param>
            <param name="distanceImage">Image containing the distance information.</param>
            <param name="metric">Type of metric to be used for the distance transformation. Default: "city-block"</param>
            <param name="foreground">Compute the distance for pixels inside (true) or outside (false) the input region. Default: "true"</param>
            <param name="width">Width of the output image. Default: 640</param>
            <param name="height">Height of the output image. Default: 480</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Skeleton(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Compute the skeleton of a region.</summary>
            <param name="region">Region to be thinned.</param>
            <param name="skeleton">Resulting skeleton.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProjectiveTransRegion(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Apply a projective transformation to a region.</summary>
            <param name="regions">Input regions.</param>
            <param name="transRegions">Output regions.</param>
            <param name="homMat2D">Homogeneous projective transformation matrix.</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "bilinear"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AffineTransRegion(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Apply an arbitrary affine 2D transformation to regions.</summary>
            <param name="region">Region(s) to be rotated and scaled.</param>
            <param name="regionAffineTrans">Transformed output region(s).</param>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="interpolate">Should the transformation be done using interpolation? Default: "nearest_neighbor"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MirrorRegion(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Reflect a region about an axis.</summary>
            <param name="region">Region(s) to be reflected.</param>
            <param name="regionMirror">Reflected region(s).</param>
            <param name="mode">Axis of symmetry. Default: "row"</param>
            <param name="widthHeight">Twice the coordinate of the axis of symmetry. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ZoomRegion(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Zoom a region.</summary>
            <param name="region">Region(s) to be zoomed.</param>
            <param name="regionZoom">Zoomed region(s).</param>
            <param name="scaleWidth">Scale factor in x-direction. Default: 2.0</param>
            <param name="scaleHeight">Scale factor in y-direction. Default: 2.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MoveRegion(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Translate a region.</summary>
            <param name="region">Region(s) to be moved.</param>
            <param name="regionMoved">Translated region(s).</param>
            <param name="row">Row coordinate of the vector by which the region is to be moved. Default: 30</param>
            <param name="column">Row coordinate of the vector by which the region is to be moved. Default: 30</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.JunctionsSkeleton(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@)">
            <summary>Find junctions and end points in a skeleton.</summary>
            <param name="region">Input skeletons.</param>
            <param name="endPoints">Extracted end points.</param>
            <param name="juncPoints">Extracted junctions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Intersection(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculate the intersection of two regions.</summary>
            <param name="region1">Regions to be intersected with all regions in Region2.</param>
            <param name="region2">Regions with which Region1 is intersected.</param>
            <param name="regionIntersection">Result of the intersection.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Interjacent(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Partition the image plane using given regions.</summary>
            <param name="region">Regions for which the separating lines are to be determined.</param>
            <param name="regionInterjacent">Output region containing the separating lines.</param>
            <param name="mode">Mode of operation. Default: "mixed"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FillUp(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Fill up holes in regions.</summary>
            <param name="region">Input regions containing holes.</param>
            <param name="regionFillUp">Regions without holes.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FillUpShape(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Fill up holes in regions having given shape features.</summary>
            <param name="region">Input region(s).</param>
            <param name="regionFillUp">Output region(s) with filled holes.</param>
            <param name="feature">Shape feature used. Default: "area"</param>
            <param name="min">Minimum value for Feature. Default: 1.0</param>
            <param name="max">Maximum value for Feature. Default: 100.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ExpandRegion(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Fill gaps between regions or split overlapping regions.</summary>
            <param name="regions">Regions for which the gaps are to be closed, or which are to be separated.</param>
            <param name="forbiddenArea">Regions in which no expansion takes place.</param>
            <param name="regionExpanded">Expanded or separated regions.</param>
            <param name="iterations">Number of iterations. Default: "maximal"</param>
            <param name="mode">Expansion mode. Default: "image"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClipRegionRel(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Clip a region relative to its smallest surrounding rectangle.</summary>
            <param name="region">Regions to be clipped.</param>
            <param name="regionClipped">Clipped regions.</param>
            <param name="top">Number of rows clipped at the top. Default: 1</param>
            <param name="bottom">Number of rows clipped at the bottom. Default: 1</param>
            <param name="left">Number of columns clipped at the left. Default: 1</param>
            <param name="right">Number of columns clipped at the right. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClipRegion(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Clip a region to a rectangle.</summary>
            <param name="region">Region to be clipped.</param>
            <param name="regionClipped">Clipped regions.</param>
            <param name="row1">Row coordinate of the upper left corner of the rectangle. Default: 0</param>
            <param name="column1">Column coordinate of the upper left corner of the rectangle. Default: 0</param>
            <param name="row2">Row coordinate of the lower right corner of the rectangle. Default: 256</param>
            <param name="column2">Column coordinate of the lower right corner of the rectangle. Default: 256</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RankRegion(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Rank operator for regions.</summary>
            <param name="region">Region(s) to be transformed.</param>
            <param name="regionCount">Resulting region(s).</param>
            <param name="width">Width of the filter mask. Default: 15</param>
            <param name="height">Height of the filter mask. Default: 15</param>
            <param name="number">Minimum number of points lying within the filter mask. Default: 70</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Connection(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Compute connected components of a region.</summary>
            <param name="region">Input region.</param>
            <param name="connectedRegions">Connected components.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SymmDifference(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculate the symmetric difference of two regions.</summary>
            <param name="region1">Input region 1.</param>
            <param name="region2">Input region 2.</param>
            <param name="regionDifference">Resulting region.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Difference(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculate the difference of two regions.</summary>
            <param name="region">Regions to be processed.</param>
            <param name="sub">The union of these regions is subtracted from Region.</param>
            <param name="regionDifference">Resulting region.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Complement(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Return the complement of a region.</summary>
            <param name="region">Input region(s).</param>
            <param name="regionComplement">Complemented regions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BackgroundSeg(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Determine the connected components of the background of given regions.</summary>
            <param name="foreground">Input regions.</param>
            <param name="backgroundRegions">Connected components of the background.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HammingChangeRegion(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate a region having a given Hamming distance.</summary>
            <param name="inputRegion">Region to be modified.</param>
            <param name="outputRegion">Regions having the required Hamming distance.</param>
            <param name="width">Width of the region to be changed. Default: 100</param>
            <param name="height">Height of the region to be changed. Default: 100</param>
            <param name="distance">Hamming distance between the old and new regions. Default: 1000</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RemoveNoiseRegion(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Remove noise from a region.</summary>
            <param name="inputRegion">Regions to be modified.</param>
            <param name="outputRegion">Less noisy regions.</param>
            <param name="type">Mode of noise removal. Default: "n_4"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ShapeTrans(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Transform the shape of a region.</summary>
            <param name="region">Regions to be transformed.</param>
            <param name="regionTrans">Transformed regions.</param>
            <param name="type">Type of transformation. Default: "convex"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ExpandGray(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Fill gaps between regions (depending on gray value or color) or split overlapping regions.</summary>
            <param name="regions">Regions for which the gaps are to be closed, or which are to be separated.</param>
            <param name="image">Image (possibly multi-channel) for gray value or color comparison.</param>
            <param name="forbiddenArea">Regions in which no expansion takes place.</param>
            <param name="regionExpand">Expanded or separated regions.</param>
            <param name="iterations">Number of iterations. Default: "maximal"</param>
            <param name="mode">Expansion mode. Default: "image"</param>
            <param name="threshold">Maximum difference between the gray value or color at the region's border and a candidate for expansion. Default: 32</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ExpandGrayRef(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Fill gaps between regions (depending on gray value or color) or split overlapping regions.</summary>
            <param name="regions">Regions for which the gaps are to be closed, or which are to be separated.</param>
            <param name="image">Image (possibly multi-channel) for gray value or color comparison.</param>
            <param name="forbiddenArea">Regions in which no expansion takes place.</param>
            <param name="regionExpand">Expanded or separated regions.</param>
            <param name="iterations">Number of iterations. Default: "maximal"</param>
            <param name="mode">Expansion mode. Default: "image"</param>
            <param name="refGray">Reference gray value or color for comparison. Default: 128</param>
            <param name="threshold">Maximum difference between the reference gray value or color and a candidate for expansion. Default: 32</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SplitSkeletonLines(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Split lines represented by one pixel wide, non-branching lines.</summary>
            <param name="skeletonRegion">Input lines (represented by 1 pixel wide, non-branching regions).</param>
            <param name="maxDistance">Maximum distance of the line points to the line segment connecting both end points. Default: 3</param>
            <param name="beginRow">Row coordinates of the start points of the output lines.</param>
            <param name="beginCol">Column coordinates of the start points of the output lines.</param>
            <param name="endRow">Row coordinates of the end points of the output lines.</param>
            <param name="endCol">Column coordinates of the end points of the output lines.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SplitSkeletonRegion(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Split lines represented by one pixel wide, non-branching regions.</summary>
            <param name="skeletonRegion">Input lines (represented by 1 pixel wide, non-branching regions).</param>
            <param name="regionLines">Split lines.</param>
            <param name="maxDistance">Maximum distance of the line points to the line segment connecting both end points. Default: 3</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenRegionHisto(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Convert a histogram into a region.</summary>
            <param name="region">Region containing the histogram.</param>
            <param name="histogram">Input histogram.</param>
            <param name="row">Row coordinate of the center of the histogram. Default: 255</param>
            <param name="column">Column coordinate of the center of the histogram. Default: 255</param>
            <param name="scale">Scale factor for the histogram. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EliminateRuns(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Eliminate runs of a given length.</summary>
            <param name="region">Region to be clipped.</param>
            <param name="regionClipped">Clipped regions.</param>
            <param name="elimShorter">All runs which are shorter are eliminated. Default: 3</param>
            <param name="elimLonger">All runs which are longer are eliminated. Default: 1000</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SurfaceNormalsObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the 3D surface normals of a 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model containing 3D point data.</param>
            <param name="method">Normals calculation method. Default: "mls"</param>
            <param name="genParamName">Names of generic smoothing parameters. Default: []</param>
            <param name="genParamValue">Values of generic smoothing parameters. Default: []</param>
            <param name="objectModel3DNormals">Handle of the 3D object model with calculated 3D normals.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SmoothObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Smooth the 3D points of a 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model containing 3D point data.</param>
            <param name="method">Smoothing method. Default: "mls"</param>
            <param name="genParamName">Names of generic smoothing parameters. Default: []</param>
            <param name="genParamValue">Values of generic smoothing parameters. Default: []</param>
            <param name="smoothObjectModel3D">Handle of the 3D object model with the smoothed 3D point data.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TriangulateObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Create a surface triangulation for a 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model containing 3D point data.</param>
            <param name="method">Triangulation method. Default: "greedy"</param>
            <param name="genParamName">Names of the generic triangulation parameters. Default: []</param>
            <param name="genParamValue">Values of the generic triangulation parameters. Default: []</param>
            <param name="triangulatedObjectModel3D">Handle of the 3D object model with the triangulated surface.</param>
            <param name="information">Additional information about the triangulation process.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllStereoModels">
            <summary>Free the memory of all stereo models.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearStereoModel(HalconDotNet.HTuple)">
            <summary>Free the memory of a stereo model.</summary>
            <param name="stereoModelID">Handle of the stereo model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReconstructPointsStereo(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Reconstruct 3D points from calibrated multi-view stereo images.</summary>
            <param name="stereoModelID">Handle of the stereo model.</param>
            <param name="row">Row coordinates of the detected points.</param>
            <param name="column">Column coordinates of the detected points.</param>
            <param name="covIP">Covariance matrices of the detected points. Default: []</param>
            <param name="cameraIdx">Indices of the observing cameras.</param>
            <param name="pointIdx">Indices of the observed world points.</param>
            <param name="x">X coordinates of the reconstructed 3D points.</param>
            <param name="y">Y coordinates of the reconstructed 3D points.</param>
            <param name="z">Z coordinates of the reconstructed 3D points.</param>
            <param name="covWP">Covariance matrices of the reconstructed 3D points.</param>
            <param name="pointIdxOut">Indices of the reconstructed 3D points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReconstructSurfaceStereo(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Reconstruct surface from calibrated multi-view stereo images.</summary>
            <param name="images">An image array acquired by the camera setup associated to the stereo model.</param>
            <param name="stereoModelID">Handle of the stereo model.</param>
            <param name="objectModel3D">Handle to the resulting surface.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetStereoModelObject(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Get intermediate iconic results of a stereo reconstruction.</summary>
            <param name="objectVal">Iconic result.</param>
            <param name="stereoModelID">Handle of the stereo model.</param>
            <param name="pairIndex">Camera indices of the pair ([From, To]).</param>
            <param name="objectName">Name of the iconic result to be returned.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetStereoModelImagePairs(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the list of image pairs set in a stereo model.</summary>
            <param name="stereoModelID">Handle of the stereo model.</param>
            <param name="from">Camera indices for the from cameras in the image pairs.</param>
            <param name="to">Camera indices for the to cameras in the image pairs.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetStereoModelImagePairs(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Specify image pairs to be used for surface stereo reconstruction.</summary>
            <param name="stereoModelID">Handle of the stereo model.</param>
            <param name="from">Camera indices for the from cameras in the image pairs.</param>
            <param name="to">Camera indices for the to cameras in the  image pairs.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetStereoModelParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get stereo model parameters.</summary>
            <param name="stereoModelID">Handle of the stereo model.</param>
            <param name="paramName">Names of the parameters to be set.</param>
            <param name="paramValue">Values of the parameters to be set.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetStereoModelParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set stereo model parameters.</summary>
            <param name="stereoModelID">Handle of the stereo model.</param>
            <param name="paramName">Names of the parameters to be set.</param>
            <param name="paramValue">Values of the parameters to be set.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateStereoModel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a HALCON stereo model.</summary>
            <param name="cameraSetupModelID">Handle to the camera setup model.</param>
            <param name="method">Reconstruction method. Default: "surface_pairwise"</param>
            <param name="genParamName">Name of the model parameter to be set. Default: []</param>
            <param name="genParamValue">Value of the model parameter to be set. Default: []</param>
            <param name="stereoModelID">Handle of the stereo model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetMessageQueueParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query message queue parameters or information about the queue.</summary>
            <param name="queueHandle">Message queue handle.</param>
            <param name="genParamName">Names of the queue parameters or info queries. Default: "max_message_num"</param>
            <param name="genParamValue">Values of the queue parameters or info queries.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetMessageQueueParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set message queue parameters or invokes commands on the queue.</summary>
            <param name="queueHandle">Message queue handle.</param>
            <param name="genParamName">Names of the queue parameters or action commands. Default: "max_message_num"</param>
            <param name="genParamValue">Values of the queue parameters or action commands. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DequeueMessage(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Receive one or more messages from the message queue.</summary>
            <param name="queueHandle">Message queue handle.</param>
            <param name="genParamName">Names of optional generic parameters Default: "timeout"</param>
            <param name="genParamValue">Values of optional generic parameters Default: "infinite"</param>
            <param name="messageHandle">Handle(s) of the dequeued message(s).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EnqueueMessage(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Enqueue one or more messages to the message queue.</summary>
            <param name="queueHandle">Message queue handle.</param>
            <param name="messageHandle">Handle(s) of message(s) to be enqueued.</param>
            <param name="genParamName">Names of optional generic parameters.</param>
            <param name="genParamValue">Values of optional generic parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearMessageQueue(HalconDotNet.HTuple)">
            <summary>Close a message queue handle and release all associated resources.</summary>
            <param name="queueHandle">Message queue handle(s) to be closed.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateMessageQueue(HalconDotNet.HTuple@)">
            <summary>Create a new empty message queue.</summary>
            <param name="queueHandle">Handle of the newly created message queue.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetMessageParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query message parameters or information about the message.</summary>
            <param name="messageHandle">Message handle.</param>
            <param name="genParamName">Names of the message parameters or info queries. Default: "message_keys"</param>
            <param name="key">Message keys the parameter/query should be applied to.</param>
            <param name="genParamValue">Values of the message parameters or info queries.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetMessageParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set message parameter or invoke commands on the message.</summary>
            <param name="messageHandle">Message handle.</param>
            <param name="genParamName">Names of the message parameters or action commands. Default: "remove_key"</param>
            <param name="key">Message keys the parameter/command should be applied to.</param>
            <param name="genParamValue">Values of the message parameters or action commands.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetMessageObj(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Retrieve an object associated with the key from the message.</summary>
            <param name="objectData">Tuple value retrieved from the message.</param>
            <param name="messageHandle">Message handle.</param>
            <param name="key">Key string.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetMessageObj(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add a key/object pair to the message.</summary>
            <param name="objectData">Object to be associated with the key.</param>
            <param name="messageHandle">Message handle.</param>
            <param name="key">Key string.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetMessageTuple(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Retrieve a tuple associated with the key from the message.</summary>
            <param name="messageHandle">Message handle.</param>
            <param name="key">Key string.</param>
            <param name="tupleData">Tuple value retrieved from the message.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetMessageTuple(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add a key/tuple pair to the message.</summary>
            <param name="messageHandle">Message handle.</param>
            <param name="key">Key string.</param>
            <param name="tupleData">Tuple value to be associated with the key.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearMessage(HalconDotNet.HTuple)">
            <summary>Close a message handle and release all associated resources.</summary>
            <param name="messageHandle">Message handle(s) to be closed.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateMessage(HalconDotNet.HTuple@)">
            <summary>Create a new empty message.</summary>
            <param name="messageHandle">Handle of the newly created message.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllConditions">
            <summary>Destroy all condition synchronization objects.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearCondition(HalconDotNet.HTuple)">
            <summary>Destroy a condition synchronization object.</summary>
            <param name="conditionHandle">Condition synchronization object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BroadcastCondition(HalconDotNet.HTuple)">
            <summary>Signal a condition synchronization object.</summary>
            <param name="conditionHandle">Condition synchronization object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SignalCondition(HalconDotNet.HTuple)">
            <summary>Signal a condition synchronization object.</summary>
            <param name="conditionHandle">Condition synchronization object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TimedWaitCondition(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Bounded wait on the signal of a condition synchronization object.</summary>
            <param name="conditionHandle">Condition synchronization object.</param>
            <param name="mutexHandle">Mutex synchronization object.</param>
            <param name="timeout">Timeout in micro seconds.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WaitCondition(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>wait on the signal of a condition synchronization object.</summary>
            <param name="conditionHandle">Condition synchronization object.</param>
            <param name="mutexHandle">Mutex synchronization object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateCondition(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a condition variable synchronization object.</summary>
            <param name="attribName">Mutex attribute. Default: ""</param>
            <param name="attribValue">Mutex attribute value. Default: ""</param>
            <param name="conditionHandle">Condition synchronization object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllBarriers">
            <summary>Destroy all barrier synchronization objects.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearBarrier(HalconDotNet.HTuple)">
            <summary>Destroy a barrier synchronization object.</summary>
            <param name="barrierHandle">Barrier synchronization object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WaitBarrier(HalconDotNet.HTuple)">
            <summary>Wait on the release of a barrier synchronization object.</summary>
            <param name="barrierHandle">Barrier synchronization object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateBarrier(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a barrier synchronization object.</summary>
            <param name="attribName">Barrier attribute. Default: ""</param>
            <param name="attribValue">Barrier attribute value. Default: ""</param>
            <param name="teamSize">Barrier team size. Default: 1</param>
            <param name="barrierHandle">Barrier synchronization object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllEvents">
            <summary>Clear all event synchronization objects.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearEvent(HalconDotNet.HTuple)">
            <summary>Clear the event synchronization object.</summary>
            <param name="eventHandle">Event synchronization object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SignalEvent(HalconDotNet.HTuple)">
            <summary>Unlock an event synchronization object. </summary>
            <param name="eventHandle">Event synchronization object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TryWaitEvent(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Lock an event synchronization object only it is unlocked.</summary>
            <param name="eventHandle">Event synchronization object.</param>
            <param name="busy">Object already locked?</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WaitEvent(HalconDotNet.HTuple)">
            <summary>Lock an event synchronization object.</summary>
            <param name="eventHandle">Event synchronization object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateEvent(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create an event synchronization object.</summary>
            <param name="attribName">Mutex attribute. Default: ""</param>
            <param name="attribValue">Mutex attribute value. Default: ""</param>
            <param name="eventHandle">Event synchronization object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllMutexes">
            <summary>Clear all mutex synchronization objects.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearMutex(HalconDotNet.HTuple)">
            <summary>Clear the mutex synchronization object.</summary>
            <param name="mutexHandle">Mutex synchronization object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.UnlockMutex(HalconDotNet.HTuple)">
            <summary>Unlock a mutex synchronization object.</summary>
            <param name="mutexHandle">Mutex synchronization object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TryLockMutex(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Lock a mutex synchronization object.</summary>
            <param name="mutexHandle">Mutex synchronization object.</param>
            <param name="busy">Mutex already locked?</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LockMutex(HalconDotNet.HTuple)">
            <summary>Lock a mutex synchronization object.</summary>
            <param name="mutexHandle">Mutex synchronization object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateMutex(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a mutual exclusion synchronization object.</summary>
            <param name="attribName">Mutex attribute class. Default: ""</param>
            <param name="attribValue">Mutex attribute kind. Default: ""</param>
            <param name="mutexHandle">Mutex synchronization object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetThreadingAttrib(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Query the attributes of a threading / synchronization object.</summary>
            <param name="threadingHandle">Threading object.</param>
            <param name="threadingClass">Class name of threading object.</param>
            <param name="attribName">Name of an attribute.</param>
            <param name="attribValue">Value of the attribute.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LoadParKnowledge(HalconDotNet.HTuple)">
            <summary>Load knowledge about automatic parallelization from file.</summary>
            <param name="fileName">Name of parallelization knowledge file. Default: ""</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.StoreParKnowledge(HalconDotNet.HTuple)">
            <summary>Store knowledge about automatic parallelization in file.</summary>
            <param name="fileName">Name of parallelization knowledge file. Default: ""</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CheckParHwPotential(HalconDotNet.HTuple)">
            <summary>Check hardware regarding its potential for parallel processing.</summary>
            <param name="allInpPars">Check every input parameter? Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetAopInfo(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set AOP information for operators.</summary>
            <param name="operatorName">Operator to set information to Default: ""</param>
            <param name="indexName">Further specific index Default: ""</param>
            <param name="indexValue">Further specific address Default: ""</param>
            <param name="infoName">Scope of information Default: "max_threads"</param>
            <param name="infoValue">AOP information value</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetAopInfo(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return AOP information for operators. </summary>
            <param name="operatorName">Operator to get information for</param>
            <param name="indexName">Further index stages Default: ["iconic_type","parameter:0"]</param>
            <param name="indexValue">Further index values Default: ["byte",""]</param>
            <param name="infoName">Scope of information Default: "max_threads"</param>
            <param name="infoValue">Value of information</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryAopInfo(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Query indexing struxture of AOP information for operators. </summary>
            <param name="operatorName">Operator to get information for Default: ""</param>
            <param name="indexName">Further specific index Default: ""</param>
            <param name="indexValue">Further specific address Default: ""</param>
            <param name="name">Name of next index stage</param>
            <param name="value">Values of next index stage</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OptimizeAop(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Check hardware regarding its potential for automatic operator parallelization.</summary>
            <param name="operatorName">Operators to check Default: ""</param>
            <param name="iconicType">Iconic object types to check Default: ""</param>
            <param name="fileName">Knowledge file name Default: ""</param>
            <param name="paramName">Parameter name Default: "none"</param>
            <param name="paramValue">Parameter value Default: "none"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteAopKnowledge(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write knowledge about hardware dependent behavior of automatic operator parallelization to file.</summary>
            <param name="fileName">Name of knowledge file Default: ""</param>
            <param name="paramName">Parameter name Default: "none"</param>
            <param name="paramValue">Parameter value Default: "none"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadAopKnowledge(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Load knowledge about hardware dependent behavior of automatic operator parallelization.</summary>
            <param name="fileName">Name of knowledge file Default: ""</param>
            <param name="paramName">Parameter name Default: "none"</param>
            <param name="paramValue">Parameter value Default: "none"</param>
            <param name="attributes">Knowledge attributes</param>
            <param name="operatorNames">Updated Operators</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SensorKalman(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary></summary>
            <param name="dimension"></param>
            <param name="measurementIn"></param>
            <param name="measurementOut"></param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TestObjDef(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary></summary>
            <param name="objectVal"></param>
            <param name="isDefined"></param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TestAccess(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary></summary>
            <param name="objectVal"></param>
            <param name="dummy"></param>
            <param name="numReadChord"></param>
            <param name="numCopyObj"></param>
            <param name="writeChord"></param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ObjDiff(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculate the difference of two object tuples.</summary>
            <param name="objects">Object tuple 1.</param>
            <param name="objectsSub">Object tuple 2.</param>
            <param name="objectsDiff">Objects from Objects that are not part of ObjectsSub.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetGrayval(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set single gray values in an image.</summary>
            <param name="image">Image to be modified.</param>
            <param name="row">Row coordinates of the pixels to be modified. Default: 0</param>
            <param name="column">Column coordinates of the pixels to be modified. Default: 0</param>
            <param name="grayval">Gray values to be used. Default: 255.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PaintXld(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Paint XLD objects into an image.</summary>
            <param name="XLD">XLD objects to be painted into the input image.</param>
            <param name="image">Image in which the xld objects are to be painted.</param>
            <param name="imageResult">Image containing the result.</param>
            <param name="grayval">Desired gray value of the xld object. Default: 255.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PaintRegion(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Paint regions into an image.</summary>
            <param name="region">Regions to be painted into the input image.</param>
            <param name="image">Image in which the regions are to be painted.</param>
            <param name="imageResult">Image containing the result.</param>
            <param name="grayval">Desired gray values of the regions. Default: 255.0</param>
            <param name="type">Paint regions filled or as boundaries. Default: "fill"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OverpaintRegion(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Overpaint regions in an image.</summary>
            <param name="image">Image in which the regions are to be painted.</param>
            <param name="region">Regions to be painted into the input image.</param>
            <param name="grayval">Desired gray values of the regions. Default: 255.0</param>
            <param name="type">Paint regions filled or as boundaries. Default: "fill"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenImageProto(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Create an image with a specified constant gray value.</summary>
            <param name="image">Input image.</param>
            <param name="imageCleared">Image with constant gray value.</param>
            <param name="grayval">Gray value to be used for the output image. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PaintGray(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Paint the gray values of an image into another image.</summary>
            <param name="imageSource">Input image containing the desired gray values.</param>
            <param name="imageDestination">Input image to be painted over.</param>
            <param name="mixedImage">Result image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OverpaintGray(HalconDotNet.HObject,HalconDotNet.HObject)">
            <summary>Overpaint the gray values of an image.</summary>
            <param name="imageDestination">Input image to be painted over.</param>
            <param name="imageSource">Input image containing the desired gray values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.IntegerToObj(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Convert an "integer number" into an iconic object.</summary>
            <param name="objects">Created objects.</param>
            <param name="surrogateTuple">Tuple of object surrogates.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ObjToInteger(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Convert an iconic object into an "integer number."</summary>
            <param name="objects">Objects for which the surrogates are to be returned.</param>
            <param name="index">Starting index of the surrogates to be returned. Default: 1</param>
            <param name="number">Number of surrogates to be returned. Default: -1</param>
            <param name="surrogateTuple">Tuple containing the surrogates.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CopyObj(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Copy an iconic object in the HALCON database.</summary>
            <param name="objects">Objects to be copied.</param>
            <param name="objectsSelected">Copied objects.</param>
            <param name="index">Starting index of the objects to be copied. Default: 1</param>
            <param name="numObj">Number of objects to be copied or -1. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ConcatObj(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Concatenate two iconic object tuples.</summary>
            <param name="objects1">Object tuple 1.</param>
            <param name="objects2">Object tuple 2.</param>
            <param name="objectsConcat">Concatenated objects.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearObj(HalconDotNet.HObject)">
            <summary>Delete an iconic object from the HALCON database.</summary>
            <param name="objects">Objects to be deleted.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CopyImage(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Copy an image and allocate new memory for it.</summary>
            <param name="image">Image to be copied.</param>
            <param name="dupImage">Copied image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectObj(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Select objects from an object tuple.</summary>
            <param name="objects">Input objects.</param>
            <param name="objectSelected">Selected objects.</param>
            <param name="index">Indices of the objects to be selected. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CompareObj(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compare iconic objects regarding equality.</summary>
            <param name="objects1">Reference objects.</param>
            <param name="objects2">Test objects.</param>
            <param name="epsilon">Maximum allowed difference between two gray values or  coordinates etc. Default: 0.0</param>
            <param name="isEqual">Boolean result value.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TestSubsetRegion(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Test whether a region is contained in another region.</summary>
            <param name="region1">Test region.</param>
            <param name="region2">Region for comparison.</param>
            <param name="isSubset">Is Region1 contained in Region2?</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TestEqualRegion(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Test whether the regions of two objects are identical.</summary>
            <param name="regions1">Test regions.</param>
            <param name="regions2">Comparative regions.</param>
            <param name="isEqual">boolean result value.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TestEqualObj(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Compare image objects regarding equality.</summary>
            <param name="objects1">Test objects.</param>
            <param name="objects2">Comparative objects.</param>
            <param name="isEqual">boolean result value.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CountObj(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Number of objects in a tuple.</summary>
            <param name="objects">Objects to be examined.</param>
            <param name="number">Number of objects in the tuple Objects.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetChannelInfo(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Informations about the components of an image object.</summary>
            <param name="objectVal">Image object to be examined.</param>
            <param name="request">Required information about object components. Default: "creator"</param>
            <param name="channel">Components to be examined (0 for region/XLD). Default: 0</param>
            <param name="information">Requested information.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetObjClass(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Name of the class of an image object.</summary>
            <param name="objectVal">Image objects to be examined.</param>
            <param name="classVal">Name of class.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenImageInterleaved(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create a three-channel image from a pointer to the interleaved pixels.</summary>
            <param name="imageRGB">Created image with new image matrix.</param>
            <param name="pixelPointer">Pointer to interleaved pixels.</param>
            <param name="colorFormat">Format of the input pixels. Default: "rgb"</param>
            <param name="originalWidth">Width of input image. Default: 512</param>
            <param name="originalHeight">Height of input image. Default: 512</param>
            <param name="alignment">Reserved.</param>
            <param name="type">Pixel type of output image. Default: "byte"</param>
            <param name="imageWidth">Width of output image. Default: 0</param>
            <param name="imageHeight">Height of output image. Default: 0</param>
            <param name="startRow">Line number of upper left corner of desired image part. Default: 0</param>
            <param name="startColumn">Column number of upper left corner of desired image part. Default: 0</param>
            <param name="bitsPerChannel">Number of used bits per pixel and channel of the output image (-1: All bits are used). Default: -1</param>
            <param name="bitShift">Number of bits that the color values of the input pixels are shifted to the right (only uint2 images). Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenRegionPolygonXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Create a region from an XLD polygon.</summary>
            <param name="polygon">Input polygon(s).</param>
            <param name="region">Created region(s).</param>
            <param name="mode">Fill mode of the region(s). Default: "filled"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenRegionContourXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Create a region from an XLD contour.</summary>
            <param name="contour">Input contour(s).</param>
            <param name="region">Created region(s).</param>
            <param name="mode">Fill mode of the region(s). Default: "filled"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenRegionPolygonFilled(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Store a polygon as a "filled" region.</summary>
            <param name="region">Created region.</param>
            <param name="rows">Line indices of the base points of the region contour. Default: 100</param>
            <param name="columns">Column indices of the base points of the region contour. Default: 100</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenRegionPolygon(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Store a polygon as a region.</summary>
            <param name="region">Created region.</param>
            <param name="rows">Line indices of the base points of the region contour. Default: 100</param>
            <param name="columns">Colum indices of the base points of the region contour. Default: 100</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenRegionPoints(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Store individual pixels as image region.</summary>
            <param name="region">Created region.</param>
            <param name="rows">Lines of the pixels in the region. Default: 100</param>
            <param name="columns">Columns of the pixels in the region. Default: 100</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenRegionRuns(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create a region from a runlength coding.</summary>
            <param name="region">Created region.</param>
            <param name="row">Lines of the runs. Default: 100</param>
            <param name="columnBegin">Columns of the starting points of the runs. Default: 50</param>
            <param name="columnEnd">Columns of the ending points of the runs. Default: 200</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenRectangle2(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create a rectangle of any orientation.</summary>
            <param name="rectangle">Created rectangle.</param>
            <param name="row">Line index of the center. Default: 300.0</param>
            <param name="column">Column index of the center. Default: 200.0</param>
            <param name="phi">Angle of longitudinal axis to the horizontal (in radians). Default: 0.0</param>
            <param name="length1">Half width. Default: 100.0</param>
            <param name="length2">Half height. Default: 20.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenRectangle1(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create a rectangle parallel to the coordinate axes.</summary>
            <param name="rectangle">Created rectangle.</param>
            <param name="row1">Line of upper left corner point. Default: 30.0</param>
            <param name="column1">Column of upper left corner point. Default: 20.0</param>
            <param name="row2">Line of lower right corner point. Default: 100.0</param>
            <param name="column2">Column of lower right corner point. Default: 200.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenRandomRegion(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create a random region.</summary>
            <param name="regionRandom">Created random region with expansion Width x Height.</param>
            <param name="width">Maximum horizontal expansion of random region. Default: 128</param>
            <param name="height">Maximum vertical expansion of random region. Default: 128</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenImage3(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create an image from three pointers to the pixels (red/green/blue).</summary>
            <param name="imageRGB">Created image with new image matrix.</param>
            <param name="type">Pixel type. Default: "byte"</param>
            <param name="width">Width of image. Default: 512</param>
            <param name="height">Height of image. Default: 512</param>
            <param name="pixelPointerRed">Pointer to first red value (channel 1).</param>
            <param name="pixelPointerGreen">Pointer to first green value (channel 2).</param>
            <param name="pixelPointerBlue">Pointer to first blue value (channel 3).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenImage1(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create an image from a pointer to the pixels.</summary>
            <param name="image">Created image with new image matrix.</param>
            <param name="type">Pixel type. Default: "byte"</param>
            <param name="width">Width of image. Default: 512</param>
            <param name="height">Height of image. Default: 512</param>
            <param name="pixelPointer">Pointer to first gray value.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenImageConst(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create an image with constant gray value.</summary>
            <param name="image">Created image with new image matrix.</param>
            <param name="type">Pixel type. Default: "byte"</param>
            <param name="width">Width of image. Default: 512</param>
            <param name="height">Height of image. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenEllipseSector(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create an ellipse sector.</summary>
            <param name="ellipseSector">Created ellipse(s).</param>
            <param name="row">Line index of center. Default: 200.0</param>
            <param name="column">Column index of center. Default: 200.0</param>
            <param name="phi">Orientation of the longer radius (Radius1). Default: 0.0</param>
            <param name="radius1">Longer radius. Default: 100.0</param>
            <param name="radius2">Shorter radius. Default: 60.0</param>
            <param name="startAngle">Start angle of the sector. Default: 0.0</param>
            <param name="endAngle">End angle of the sector. Default: 3.14159</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenEllipse(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create an ellipse.</summary>
            <param name="ellipse">Created ellipse(s).</param>
            <param name="row">Line index of center. Default: 200.0</param>
            <param name="column">Column index of center. Default: 200.0</param>
            <param name="phi">Orientation of the longer radius (Radius1). Default: 0.0</param>
            <param name="radius1">Longer radius. Default: 100.0</param>
            <param name="radius2">Shorter radius. Default: 60.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenCircleSector(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create a circle sector.</summary>
            <param name="circleSector">Generated circle sector.</param>
            <param name="row">Line index of center. Default: 200.0</param>
            <param name="column">Column index of center. Default: 200.0</param>
            <param name="radius">Radius of circle. Default: 100.5</param>
            <param name="startAngle">Start angle of the circle sector. Default: 0.0</param>
            <param name="endAngle">End angle of the circle sector. Default: 3.14159</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenCircle(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create a circle.</summary>
            <param name="circle">Generated circle.</param>
            <param name="row">Line index of center. Default: 200.0</param>
            <param name="column">Column index of center. Default: 200.0</param>
            <param name="radius">Radius of circle. Default: 100.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenCheckerRegion(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create a checkered region.</summary>
            <param name="regionChecker">Created checkerboard region.</param>
            <param name="widthRegion">Largest occurring $x$ value of the region. Default: 511</param>
            <param name="heightRegion">Largest occurring $y$ value of the region. Default: 511</param>
            <param name="widthPattern">Width of a field of the checkerboard. Default: 64</param>
            <param name="heightPattern">Height of a field of the checkerboard. Default: 64</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenGridRegion(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create a region from lines or pixels.</summary>
            <param name="regionGrid">Created lines/pixel region.</param>
            <param name="rowSteps">Step width in line direction or zero. Default: 10</param>
            <param name="columnSteps">Step width in column direction or zero. Default: 10</param>
            <param name="type">Type of created pattern. Default: "lines"</param>
            <param name="width">Maximum width of pattern. Default: 512</param>
            <param name="height">Maximum height of pattern. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenRandomRegions(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create random regions like circles, rectangles and ellipses.</summary>
            <param name="regions">Created regions.</param>
            <param name="type">Type of regions to be created. Default: "circle"</param>
            <param name="widthMin">Minimum width of the region. Default: 10.0</param>
            <param name="widthMax">Maximum width of the region. Default: 20.0</param>
            <param name="heightMin">Minimum height of the region. Default: 10.0</param>
            <param name="heightMax">Maximum height of the region. Default: 30.0</param>
            <param name="phiMin">Minimum rotation angle of the region. Default: -0.7854</param>
            <param name="phiMax">Maximum rotation angle of the region. Default: 0.7854</param>
            <param name="numRegions">Number of regions. Default: 100</param>
            <param name="width">Maximum horizontal expansion. Default: 512</param>
            <param name="height">Maximum vertical expansion. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenRegionHline(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Store input lines described in Hesse normal form as regions.</summary>
            <param name="regions">Created regions (one for every line), clipped to maximum image format.</param>
            <param name="orientation">Orientation of the normal vector in radians. Default: 0.0</param>
            <param name="distance">Distance from the line to the coordinate origin (0.0). Default: 200</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenRegionLine(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Store input lines as regions.</summary>
            <param name="regionLines">Created regions.</param>
            <param name="beginRow">Line coordinates of the starting points of the input lines. Default: 100</param>
            <param name="beginCol">Column coordinates of the starting points of the input lines. Default: 50</param>
            <param name="endRow">Line coordinates of the ending points of the input lines. Default: 150</param>
            <param name="endCol">Column coordinates of the ending points of the input lines. Default: 250</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenEmptyObj(HalconDotNet.HObject@)">
            <summary>Create an empty object tuple.</summary>
            <param name="emptyObject">No objects.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenEmptyRegion(HalconDotNet.HObject@)">
            <summary>Create an empty region.</summary>
            <param name="emptyRegion">Empty region (no pixels).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenImageGrayRamp(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create a gray value ramp.</summary>
            <param name="imageGrayRamp">Created image with new image matrix.</param>
            <param name="alpha">Gradient in line direction. Default: 1.0</param>
            <param name="beta">Gradient in column direction. Default: 1.0</param>
            <param name="mean">Mean gray value. Default: 128</param>
            <param name="row">Line index of reference point. Default: 256</param>
            <param name="column">Column index of reference point. Default: 256</param>
            <param name="width">Width of image. Default: 512</param>
            <param name="height">Height of image. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenImage3Extern(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create a three-channel image from three pointers on the pixels with storage management.</summary>
            <param name="image">Created HALCON image.</param>
            <param name="type">Pixel type. Default: "byte"</param>
            <param name="width">Width of image. Default: 512</param>
            <param name="height">Height of image. Default: 512</param>
            <param name="pointerRed">Pointer to the first gray value of the first channel.</param>
            <param name="pointerGreen">Pointer to the first gray value of the second channel.</param>
            <param name="pointerBlue">Pointer to the first gray value of the third channel.</param>
            <param name="clearProc">Pointer to the procedure re-releasing the memory of the image when deleting the object. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenImage1Extern(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create an image from a pointer on the pixels with storage management.</summary>
            <param name="image">Created HALCON image.</param>
            <param name="type">Pixel type. Default: "byte"</param>
            <param name="width">Width of image. Default: 512</param>
            <param name="height">Height of image. Default: 512</param>
            <param name="pixelPointer">Pointer to the first gray value.</param>
            <param name="clearProc">Pointer to the procedure re-releasing the memory of the image when deleting the object. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenImage1Rect(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create an image with a rectangular domain from a pointer on the pixels (with storage management).</summary>
            <param name="image">Created HALCON image.</param>
            <param name="pixelPointer">Pointer to the first pixel.</param>
            <param name="width">Width of the image. Default: 512</param>
            <param name="height">Height of the image. Default: 512</param>
            <param name="verticalPitch">Distance (in bytes) between pixel m in row n and pixel m in row n+1 of the 'input image'.</param>
            <param name="horizontalBitPitch">Distance between two neighboring pixels in bits . Default: 8</param>
            <param name="bitsPerPixel">Number of used bits per pixel. Default: 8</param>
            <param name="doCopy">Copy image data. Default: "false"</param>
            <param name="clearProc">Pointer to the procedure releasing the memory of the image when deleting the object. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetImagePointer1Rect(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Access to the image data pointer and the image data inside the smallest rectangle of the domain of the input image.</summary>
            <param name="image">Input image (Himage).</param>
            <param name="pixelPointer">Pointer to the image data.</param>
            <param name="width">Width of the output image.</param>
            <param name="height">Height of the output image.</param>
            <param name="verticalPitch">Width(input image)*(HorizontalBitPitch/8).</param>
            <param name="horizontalBitPitch">Distance between two neighboring pixels in bits .</param>
            <param name="bitsPerPixel">Number of used bits per pixel.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetImagePointer3(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Access the pointers of a colored image.</summary>
            <param name="imageRGB">Input image.</param>
            <param name="pointerRed">Pointer to the pixels of the first channel.</param>
            <param name="pointerGreen">Pointer to the pixels of the second channel.</param>
            <param name="pointerBlue">Pointer to the pixels of the third channel.</param>
            <param name="type">Type of image.</param>
            <param name="width">Width of image.</param>
            <param name="height">Height of image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetImagePointer1(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Access the pointer of a channel.</summary>
            <param name="image">Input image.</param>
            <param name="pointer">Pointer to the image data in the HALCON database.</param>
            <param name="type">Type of image.</param>
            <param name="width">Width of image.</param>
            <param name="height">Height of image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetImageType(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Return the type of an image.</summary>
            <param name="image">Input image.</param>
            <param name="type">Type of image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetImageSize(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the size of an image.</summary>
            <param name="image">Input image.</param>
            <param name="width">Width of image.</param>
            <param name="height">Height of image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetImageTime(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Request time at which the image was created.</summary>
            <param name="image">Input image.</param>
            <param name="MSecond">Milliseconds (0..999).</param>
            <param name="second">Seconds (0..59).</param>
            <param name="minute">Minutes (0..59).</param>
            <param name="hour">Hours (0..23).</param>
            <param name="day">Day of the month (1..31).</param>
            <param name="YDay">Day of the year (1..366).</param>
            <param name="month">Month (1..12).</param>
            <param name="year">Year (xxxx).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetGrayvalInterpolated(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return gray values of an image at the positions given by tuples of rows and columns.</summary>
            <param name="image">Image whose gray values are to be accessed.</param>
            <param name="row">Row coordinates of positions. Default: 0</param>
            <param name="column">Column coordinates of positions. Default: 0</param>
            <param name="interpolation">Interpolation method. Default: "bilinear"</param>
            <param name="grayval">Gray values of the selected image coordinates.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetGrayval(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Access the gray values of an image object.</summary>
            <param name="image">Image whose gray value is to be accessed.</param>
            <param name="row">Row coordinates of pixels to be viewed. Default: 0</param>
            <param name="column">Column coordinates of pixels to be viewed. Default: 0</param>
            <param name="grayval">Gray values of indicated pixels.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetRegionThickness(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Access the thickness of a region along the main axis.</summary>
            <param name="region">Region to be analysed.</param>
            <param name="thickness">Thickness of the region along its main axis.</param>
            <param name="histogramm">Histogram of the thickness of the region along its main axis.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetRegionPolygon(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Polygon approximation of a region.</summary>
            <param name="region">Region to be approximated.</param>
            <param name="tolerance">Maximum distance between the polygon and the edge of the region. Default: 5.0</param>
            <param name="rows">Line numbers of the base points of the contour.</param>
            <param name="columns">Column numbers of the base points of the contour.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetRegionPoints(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Access the pixels of a region.</summary>
            <param name="region">This region is accessed.</param>
            <param name="rows">Line numbers of the pixels in the region</param>
            <param name="columns">Column numbers of the pixels in the region.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetRegionContour(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Access the contour of an object.</summary>
            <param name="region">Output region.</param>
            <param name="rows">Line numbers of the contour pixels.</param>
            <param name="columns">Column numbers of the contour pixels.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetRegionRuns(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Access the runlength coding of a region.</summary>
            <param name="region">Output region.</param>
            <param name="row">Line numbers of the chords.</param>
            <param name="columnBegin">Column numbers of the starting points of the chords.</param>
            <param name="columnEnd">Column numbers of the ending points of the chords.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetRegionChain(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Contour of an object as chain code.</summary>
            <param name="region">Region to be transformed.</param>
            <param name="row">Line of starting point.</param>
            <param name="column">Column of starting point.</param>
            <param name="chain">Direction code of the contour (from starting point).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetRegionConvex(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Access convex hull as contour.</summary>
            <param name="region">Output region.</param>
            <param name="rows">Line numbers of contour pixels.</param>
            <param name="columns">Column numbers of the contour pixels.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DoOcvSimple(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Verification of a pattern using an OCV tool.</summary>
            <param name="pattern">Characters to be verified.</param>
            <param name="OCVHandle">Handle of the OCV tool.</param>
            <param name="patternName">Name of the character. Default: "a"</param>
            <param name="adaptPos">Adaption to vertical and horizontal translation. Default: "true"</param>
            <param name="adaptSize">Adaption to vertical and horizontal scaling of the size. Default: "true"</param>
            <param name="adaptAngle">Adaption to changes of the orientation (not implemented). Default: "false"</param>
            <param name="adaptGray">Adaption to additive and scaling gray value changes. Default: "true"</param>
            <param name="threshold">Minimum difference between objects. Default: 10</param>
            <param name="quality">Evaluation of the character.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TraindOcvProj(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Training of an OCV tool.</summary>
            <param name="pattern">Pattern to be trained.</param>
            <param name="OCVHandle">Handle of the OCV tool to be trained.</param>
            <param name="name">Name(s) of the object(s) to analyse. Default: "a"</param>
            <param name="mode">Mode for training (only one mode implemented). Default: "single"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeOcv(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized OCV tool.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="OCVHandle">Handle of the OCV tool.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeOcv(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize an OCV tool.</summary>
            <param name="OCVHandle">Handle of the OCV tool.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadOcv(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Reading an OCV tool from file.</summary>
            <param name="fileName">Name of the file which has to be read. Default: "test_ocv"</param>
            <param name="OCVHandle">Handle of read OCV tool.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteOcv(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Saving an OCV tool to file.</summary>
            <param name="OCVHandle">Handle of the OCV tool to be written.</param>
            <param name="fileName">Name of the file where the tool has to be saved. Default: "test_ocv"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseAllOcvs">
            <summary>Clear all OCV tools.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseOcv(HalconDotNet.HTuple)">
            <summary>Clear an OCV tool.</summary>
            <param name="OCVHandle">Handle of the OCV tool which has to be freed.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateOcvProj(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a new OCV tool based on gray value projections.</summary>
            <param name="patternNames">List of names for patterns to be trained. Default: "a"</param>
            <param name="OCVHandle">Handle of the created OCV tool.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DoOcrWordKnn(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Classify a related group of characters with an OCR classifier.</summary>
            <param name="character">Characters to be recognized.</param>
            <param name="image">Gray values of the characters.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="expression">Expression describing the allowed word structure.</param>
            <param name="numAlternatives">Number of classes per character considered for the internal word correction. Default: 3</param>
            <param name="numCorrections">Maximum number of corrected characters. Default: 2</param>
            <param name="classVal">Result of classifying the characters with the k-NN.</param>
            <param name="confidence">Confidence of the class of the characters.</param>
            <param name="word">Word text after classification and correction.</param>
            <param name="score">Measure of similarity between corrected word and uncorrected classification results.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeOcrClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized k-NN-based OCR classifier.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeOcrClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a k-NN-based OCR classifier.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadOcrClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read an OCR classifier from a file.</summary>
            <param name="fileName">File name.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteOcrClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a k-NN classifier for an OCR task to a file.</summary>
            <param name="OCRHandle">Handle of the k-NN classifier for an OCR task.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllOcrClassKnn">
            <summary>Clear all OCR classifiers.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearOcrClassKnn(HalconDotNet.HTuple)">
            <summary>Clear an OCR classifier.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateOcrClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create an OCR classifier using a k-Nearest Neighbor (k-NN) classifier.</summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 8</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 10</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters. Default: "constant"</param>
            <param name="features">Features to be used for classification. Default: "default"</param>
            <param name="characters">All characters of the character set to be read. Default: ["0","1","2","3","4","5","6","7","8","9"]</param>
            <param name="genParamNames">This parameter is not yet supported. Default: []</param>
            <param name="genParamValues">This parameter is not yet supported. Default: []</param>
            <param name="OCRHandle">Handle of the k-NN classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TrainfOcrClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Trains an k-NN classifier for an OCR task.</summary>
            <param name="OCRHandle">Handle of the k-NN classifier.</param>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the k-NN classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the k-NN classifier creation. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetFeaturesOcrClassKnn(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the features of a character.</summary>
            <param name="character">Input character.</param>
            <param name="OCRHandle">Handle of the k-NN classifier.</param>
            <param name="transform">Should the feature vector be transformed with the preprocessing? Default: "true"</param>
            <param name="features">Feature vector of the character.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetParamsOcrClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the parameters of an OCR classifier.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed.</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed.</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters.</param>
            <param name="features">Features to be used for classification.</param>
            <param name="characters">Characters of the character set to be read.</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors.</param>
            <param name="numTrees">Number of different trees used during the classifcation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DoOcrMultiClassKnn(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Classify multiple characters with an k-NN classifier.</summary>
            <param name="character">Characters to be recognized.</param>
            <param name="image">Gray values of the characters.</param>
            <param name="OCRHandle">Handle of the k-NN classifier.</param>
            <param name="classVal">Result of classifying the characters with the k-NN.</param>
            <param name="confidence">Confidence of the class of the characters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DoOcrSingleClassKnn(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Classify a single character with an OCR classifier.</summary>
            <param name="character">Character to be recognized.</param>
            <param name="image">Gray values of the character.</param>
            <param name="OCRHandle">Handle of the k-NN classifier.</param>
            <param name="numClasses">Number of maximal classes to determine. Default: 1</param>
            <param name="numNeighbors">Number of neighbors to consider. Default: 1</param>
            <param name="classVal">Results of classifying the character with the k-NN.</param>
            <param name="confidence">Confidence(s) of the class(es) of the character.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectFeatureSetTrainfKnn(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Select an optimal combination of features to classify OCR data.</summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="featureList">List of features that should be considered for selection. Default: ["zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"]</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="width">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 15</param>
            <param name="height">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 16</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="OCRHandle">Trained OCR-k-NN classifier.</param>
            <param name="featureSet">Selected feature set, contains only entries from  FeatureList.</param>
            <param name="score">Achieved score using tow-fold cross-validation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectFeatureSetTrainfMlpProtected(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Select an optimal combination of features to classify OCR data from a (protected) training file.</summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="password">Passwords for protected training files.</param>
            <param name="featureList">List of features that should be considered for selection. Default: ["zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"]</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="width">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 15</param>
            <param name="height">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 16</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="OCRHandle">Trained OCR-MLP classifier.</param>
            <param name="featureSet">Selected feature set, contains only entries from  FeatureList.</param>
            <param name="score">Achieved score using tow-fold cross-validation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectFeatureSetTrainfMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Selects an optimal combination of features to classify OCR data.</summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="featureList">List of features that should be considered for selection. Default: ["zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"]</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="width">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 15</param>
            <param name="height">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 16</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="OCRHandle">Trained OCR-MLP classifier.</param>
            <param name="featureSet">Selected feature set, contains only entries from  FeatureList.</param>
            <param name="score">Achieved score using tow-fold cross-validation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectFeatureSetTrainfSvmProtected(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Select an optimal combination of features to classify OCR data from a (protected) training file.</summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="password">Passwords for protected training files.</param>
            <param name="featureList">List of features that should be considered for selection. Default: ["zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"]</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="width">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 15</param>
            <param name="height">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 16</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="OCRHandle">Trained OCR-SVM Classifier.</param>
            <param name="featureSet">Selected feature set, contains only entries from  FeatureList.</param>
            <param name="score">Achieved score using tow-fold cross-validation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectFeatureSetTrainfSvm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Selects an optimal combination of features to classify OCR  data.</summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="featureList">List of features that should be considered for selection. Default: ["zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"]</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="width">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 15</param>
            <param name="height">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 16</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="OCRHandle">Trained OCR-SVM Classifier.</param>
            <param name="featureSet">Selected feature set, contains only entries from  FeatureList.</param>
            <param name="score">Achieved score using tow-fold cross-validation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllLexica">
            <summary>Clear all lexica.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearLexicon(HalconDotNet.HTuple)">
            <summary>Clear a lexicon.</summary>
            <param name="lexiconHandle">Handle of the lexicon.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SuggestLexicon(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find a similar word in a lexicon.</summary>
            <param name="lexiconHandle">Handle of the lexicon.</param>
            <param name="word">Word to be looked up. Default: "word"</param>
            <param name="suggestion">Most similar word found in the lexicon.</param>
            <param name="numCorrections">Difference between the words in edit operations.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LookupLexicon(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Check if a word is contained in a lexicon.</summary>
            <param name="lexiconHandle">Handle of the lexicon.</param>
            <param name="word">Word to be looked up. Default: "word"</param>
            <param name="found">Result of the search.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InspectLexicon(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query all words from a lexicon.</summary>
            <param name="lexiconHandle">Handle of the lexicon.</param>
            <param name="words">List of all words.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ImportLexicon(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a lexicon from a text file.</summary>
            <param name="name">Unique name for the new lexicon. Default: "lex1"</param>
            <param name="fileName">Name of a text file containing words for the new lexicon. Default: "words.txt"</param>
            <param name="lexiconHandle">Handle of the lexicon.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateLexicon(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a lexicon from a tuple of words.</summary>
            <param name="name">Unique name for the new lexicon. Default: "lex1"</param>
            <param name="words">Word list for the new lexicon. Default: ["word1","word2","word3"]</param>
            <param name="lexiconHandle">Handle of the lexicon.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllOcrClassSvm">
            <summary>Clear all SVM based OCR classifiers.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearOcrClassSvm(HalconDotNet.HTuple)">
            <summary>Clear an SVM-based OCR classifier.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeOcrClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized SVM-based OCR classifier.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeOcrClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a SVM-based OCR classifier</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadOcrClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a SVM-based OCR classifier from a file.</summary>
            <param name="fileName">File name.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteOcrClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write an OCR classifier to a file.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetFeaturesOcrClassSvm(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the features of a character.</summary>
            <param name="character">Input character.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="transform">Should the feature vector be transformed with the preprocessing? Default: "true"</param>
            <param name="features">Feature vector of the character.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DoOcrWordSvm(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Classify a related group of characters with an OCR classifier.</summary>
            <param name="character">Characters to be recognized.</param>
            <param name="image">Gray values of the characters.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="expression">Expression describing the allowed word structure.</param>
            <param name="numAlternatives">Number of classes per character considered for the internal word correction. Default: 3</param>
            <param name="numCorrections">Maximum number of corrected characters. Default: 2</param>
            <param name="classVal">Result of classifying the characters with the SVM.</param>
            <param name="word">Word text after classification and correction.</param>
            <param name="score">Measure of similarity between corrected word and uncorrected classification results.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DoOcrMultiClassSvm(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Classify multiple characters with an SVM-based OCR classifier.</summary>
            <param name="character">Characters to be recognized.</param>
            <param name="image">Gray values of the characters.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="classVal">Result of classifying the characters with the SVM.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DoOcrSingleClassSvm(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Classify a single character with an SVM-based OCR classifier.</summary>
            <param name="character">Character to be recognized.</param>
            <param name="image">Gray values of the character.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="num">Number of best classes to determine. Default: 1</param>
            <param name="classVal">Result of classifying the character with the SVM.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReduceOcrClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Approximate a trained SVM-based OCR classifier by a reduced SVM.</summary>
            <param name="OCRHandle">Original handle of SVM-based OCR-classifier.</param>
            <param name="method">Type of postprocessing to reduce number of SVs. Default: "bottom_up"</param>
            <param name="minRemainingSV">Minimum number of remaining SVs. Default: 2</param>
            <param name="maxError">Maximum allowed error of reduction. Default: 0.001</param>
            <param name="OCRHandleReduced">SVMHandle of reduced OCR classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TrainfOcrClassSvmProtected(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Train an OCR classifier with data from a (protected) training file.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="password">Passwords for protected training files.</param>
            <param name="epsilon">Stop parameter for training. Default: 0.001</param>
            <param name="trainMode">Mode of training. Default: "default"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TrainfOcrClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Train an OCR classifier.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="epsilon">Stop parameter for training. Default: 0.001</param>
            <param name="trainMode">Mode of training. Default: "default"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetPrepInfoOcrClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the information content of the preprocessed feature vectors of an SVM-based OCR classifier.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "principal_components"</param>
            <param name="informationCont">Relative information content of the transformed feature vectors.</param>
            <param name="cumInformationCont">Cumulative information content of the transformed feature vectors.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSupportVectorNumOcrClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the number of support vectors of an OCR classifier.</summary>
            <param name="OCRHandle">OCR handle.</param>
            <param name="numSupportVectors">Total number of support vectors.</param>
            <param name="numSVPerSVM">Number of SV of each sub-SVM.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSupportVectorOcrClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the index of a support vector from a trained OCR classifier that is based on support vector machines.</summary>
            <param name="OCRHandle">OCR handle.</param>
            <param name="indexSupportVector">Number of stored support vectors.</param>
            <param name="index">Index of the support vector in the training set.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetParamsOcrClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the parameters of an OCR classifier.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed.</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed.</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters.</param>
            <param name="features">Features to be used for classification.</param>
            <param name="characters">Characters of the character set to be read.</param>
            <param name="kernelType">The kernel type.</param>
            <param name="kernelParam">Additional parameters for the kernel function.</param>
            <param name="nu">Regularization constant of the SVM.</param>
            <param name="mode">The mode of the SVM.</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors.</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization').</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateOcrClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create an OCR classifier using a support vector machine.</summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 8</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 10</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters. Default: "constant"</param>
            <param name="features">Features to be used for classification. Default: "default"</param>
            <param name="characters">All characters of the character set to be read. Default: ["0","1","2","3","4","5","6","7","8","9"]</param>
            <param name="kernelType">The kernel type. Default: "rbf"</param>
            <param name="kernelParam">Additional parameter for the kernel function. Default: 0.02</param>
            <param name="nu">Regularization constant of the SVM. Default: 0.05</param>
            <param name="mode">The mode of the SVM. Default: "one-versus-one"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "normalization"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllOcrClassMlp">
            <summary>Clear all OCR classifiers.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearOcrClassMlp(HalconDotNet.HTuple)">
            <summary>Clear an OCR classifier.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeOcrClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized MLP-based OCR classifier.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeOcrClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a MLP-based OCR classifier.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadOcrClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read an OCR classifier from a file.</summary>
            <param name="fileName">File name.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteOcrClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write an OCR classifier to a file.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetFeaturesOcrClassMlp(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the features of a character.</summary>
            <param name="character">Input character.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="transform">Should the feature vector be transformed with the preprocessing? Default: "true"</param>
            <param name="features">Feature vector of the character.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DoOcrWordMlp(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Classify a related group of characters with an OCR classifier.</summary>
            <param name="character">Characters to be recognized.</param>
            <param name="image">Gray values of the characters.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="expression">Expression describing the allowed word structure.</param>
            <param name="numAlternatives">Number of classes per character considered for the internal word correction. Default: 3</param>
            <param name="numCorrections">Maximum number of corrected characters. Default: 2</param>
            <param name="classVal">Result of classifying the characters with the MLP.</param>
            <param name="confidence">Confidence of the class of the characters.</param>
            <param name="word">Word text after classification and correction.</param>
            <param name="score">Measure of similarity between corrected word and uncorrected classification results.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DoOcrMultiClassMlp(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Classify multiple characters with an OCR classifier.</summary>
            <param name="character">Characters to be recognized.</param>
            <param name="image">Gray values of the characters.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="classVal">Result of classifying the characters with the MLP.</param>
            <param name="confidence">Confidence of the class of the characters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DoOcrSingleClassMlp(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Classify a single character with an OCR classifier.</summary>
            <param name="character">Character to be recognized.</param>
            <param name="image">Gray values of the character.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="num">Number of best classes to determine. Default: 1</param>
            <param name="classVal">Result of classifying the character with the MLP.</param>
            <param name="confidence">Confidence(s) of the class(es) of the character.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TrainfOcrClassMlpProtected(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Train an OCR classifier with data from a (protected) training file.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="password">Passwords for protected training files.</param>
            <param name="maxIterations">Maximum number of iterations of the optimization algorithm. Default: 200</param>
            <param name="weightTolerance">Threshold for the difference of the weights of the MLP between two iterations of the optimization algorithm. Default: 1.0</param>
            <param name="errorTolerance">Threshold for the difference of the mean error of the MLP on the training data between two iterations of the optimization algorithm. Default: 0.01</param>
            <param name="error">Mean error of the MLP on the training data.</param>
            <param name="errorLog">Mean error of the MLP on the training data as a function of the number of iterations of the optimization algorithm.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TrainfOcrClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Train an OCR classifier.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="maxIterations">Maximum number of iterations of the optimization algorithm. Default: 200</param>
            <param name="weightTolerance">Threshold for the difference of the weights of the MLP between two iterations of the optimization algorithm. Default: 1.0</param>
            <param name="errorTolerance">Threshold for the difference of the mean error of the MLP on the training data between two iterations of the optimization algorithm. Default: 0.01</param>
            <param name="error">Mean error of the MLP on the training data.</param>
            <param name="errorLog">Mean error of the MLP on the training data as a function of the number of iterations of the optimization algorithm.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetPrepInfoOcrClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the information content of the preprocessed feature vectors of an OCR classifier.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "principal_components"</param>
            <param name="informationCont">Relative information content of the transformed feature vectors.</param>
            <param name="cumInformationCont">Cumulative information content of the transformed feature vectors.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetRejectionParamsOcrClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the rejection class parameters of an OCR classifier.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="genParamName">Name of the general parameter. Default: "sampling_strategy"</param>
            <param name="genParamValue">Value of the general parameter.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetRejectionParamsOcrClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the rejection class parameters of an OCR classifier.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="genParamName">Name of the general parameter. Default: "sampling_strategy"</param>
            <param name="genParamValue">Value of the general parameter. Default: "hyperbox_around_all_classes"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetRegularizationParamsOcrClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the regularization parameters of an OCR classifier.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="genParamName">Name of the regularization parameter to return. Default: "weight_prior"</param>
            <param name="genParamValue">Value of the regularization parameter.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetRegularizationParamsOcrClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the regularization parameters of an OCR classifier.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="genParamName">Name of the regularization parameter to return. Default: "weight_prior"</param>
            <param name="genParamValue">Value of the regularization parameter. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetParamsOcrClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the parameters of an OCR classifier.</summary>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed.</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed.</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters.</param>
            <param name="features">Features to be used for classification.</param>
            <param name="characters">Characters of the character set to be read.</param>
            <param name="numHidden">Number of hidden units of the MLP.</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors.</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateOcrClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create an OCR classifier using a multilayer perceptron.</summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 8</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 10</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters. Default: "constant"</param>
            <param name="features">Features to be used for classification. Default: "default"</param>
            <param name="characters">All characters of the character set to be read. Default: ["0","1","2","3","4","5","6","7","8","9"]</param>
            <param name="numHidden">Number of hidden units of the MLP. Default: 80</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "none"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
            <param name="randSeed">Seed value of the random number generator that is used to initialize the MLP with random values. Default: 42</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeOcr(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize an OCR classifier.</summary>
            <param name="ocrHandle">ID of the OCR classifier.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeOcr(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized OCR classifier.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="ocrHandle">ID of the OCR classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteOcr(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Writing an OCR classifier into a file.</summary>
            <param name="ocrHandle">ID of the OCR classifier.</param>
            <param name="fileName">Name of the file for the OCR classifier (without extension). Default: "my_ocr"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadOcr(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read an OCR classifier from a file.</summary>
            <param name="fileName">Name of the OCR classifier file. Default: "testnet"</param>
            <param name="ocrHandle">ID of the read OCR classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DoOcrSingle(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Classify one character.</summary>
            <param name="character">Character to be recognized.</param>
            <param name="image">Gray values of the characters.</param>
            <param name="ocrHandle">ID of the OCR classifier.</param>
            <param name="classes">Classes (names) of the characters.</param>
            <param name="confidences">Confidence values of the characters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DoOcrMulti(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Classify characters.</summary>
            <param name="character">Characters to be recognized.</param>
            <param name="image">Gray values for the characters.</param>
            <param name="ocrHandle">ID of the OCR classifier.</param>
            <param name="classVal">Class (name) of the characters.</param>
            <param name="confidence">Confidence values of the characters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InfoOcrClassBox(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get information about an OCR classifier.</summary>
            <param name="ocrHandle">ID of the OCR classifier.</param>
            <param name="widthPattern">Width of the scaled characters.</param>
            <param name="heightPattern">Height of the scaled characters.</param>
            <param name="interpolation">Interpolation mode for scaling the characters.</param>
            <param name="widthMaxChar">Width of the largest trained character.</param>
            <param name="heightMaxChar">Height of the largest trained character.</param>
            <param name="features">Used features.</param>
            <param name="characters">All characters of the set.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateOcrClassBox(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a new OCR-classifier.</summary>
            <param name="widthPattern">Width of the input layer of the network. Default: 8</param>
            <param name="heightPattern">Height of the input layer of the network. Default: 10</param>
            <param name="interpolation">Interpolation mode concerning scaling of characters. Default: 1</param>
            <param name="features">Additional features. Default: "default"</param>
            <param name="character">All characters of a set. Default: ["a","b","c"]</param>
            <param name="ocrHandle">ID of the created OCR classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TraindOcrClassBox(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Train an OCR classifier by the input of regions.</summary>
            <param name="character">Characters to be trained.</param>
            <param name="image">Gray values for the characters.</param>
            <param name="ocrHandle">ID of the desired OCR-classifier.</param>
            <param name="classVal">Class (name) of the characters. Default: "a"</param>
            <param name="avgConfidence">Average confidence during a re-classification of the trained characters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TrainfOcrClassBox(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Train an OCR classifier with the help of a training file.</summary>
            <param name="ocrHandle">ID of the desired OCR-network.</param>
            <param name="trainingFile">Names of the training files. Default: "train_ocr"</param>
            <param name="avgConfidence">Average confidence during a re-classification of the trained characters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProtectOcrTrainf(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Protection of training data.</summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="password">Passwords for protecting the training files.</param>
            <param name="trainingFileProtected">Names of the protected training files.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteOcrTrainf(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Storing of training characters into a file.</summary>
            <param name="character">Characters to be trained.</param>
            <param name="image">Gray values of the characters.</param>
            <param name="classVal">Class (name) of the characters.</param>
            <param name="trainingFile">Name of the training file. Default: "train_ocr"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OcrChangeChar(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Define a new conversion table for the characters.</summary>
            <param name="ocrHandle">ID of the OCR-network to be changed.</param>
            <param name="character">New assign of characters. Default: ["a","b","c"]</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseOcr(HalconDotNet.HTuple)">
            <summary>Deallocation of the memory of an OCR classifier.</summary>
            <param name="ocrHandle">ID of the OCR classifier to be deleted.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SortRegion(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Sorting of regions with respect to their relative position.</summary>
            <param name="regions">Regions to be sorted.</param>
            <param name="sortedRegions">Sorted regions.</param>
            <param name="sortMode">Kind of sorting. Default: "first_point"</param>
            <param name="order">Increasing or decreasing sorting order. Default: "true"</param>
            <param name="rowOrCol">Sorting first with respect to row, then to column. Default: "row"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseAllOcrs">
            <summary>Destroy all OCR classifiers.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TestdOcrClassBox(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test an OCR classifier.</summary>
            <param name="character">Characters to be tested.</param>
            <param name="image">Gray values for the characters.</param>
            <param name="ocrHandle">ID of the desired OCR-classifier.</param>
            <param name="classVal">Class (name) of the characters. Default: "a"</param>
            <param name="confidence">Confidence for the character to belong to the class.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CropDomainRel(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Cut out an image area relative to the domain.</summary>
            <param name="image">Input image.</param>
            <param name="imagePart">Image area.</param>
            <param name="top">Number of rows clipped at the top. Default: -1</param>
            <param name="left">Number of columns clipped at the left. Default: -1</param>
            <param name="bottom">Number of rows clipped at the bottom. Default: -1</param>
            <param name="right">Number of columns clipped at the right. Default: -1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OcrGetFeatures(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Access the features which correspond to a character.</summary>
            <param name="character">Characters to be trained.</param>
            <param name="ocrHandle">ID of the desired OCR-classifier.</param>
            <param name="featureVector">Feature vector.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ConcatOcrTrainf(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Concat training files.</summary>
            <param name="singleFiles">Names of the single training files. Default: ""</param>
            <param name="composedFile">Name of the composed training file. Default: "all_characters"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteOcrTrainfImage(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write characters into a training file.</summary>
            <param name="character">Characters to be trained.</param>
            <param name="classVal">Class (name) of the characters.</param>
            <param name="trainingFile">Name of the training file. Default: "train_ocr"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AppendOcrTrainf(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add characters to a training file.</summary>
            <param name="character">Characters to be trained.</param>
            <param name="image">Gray values of the characters.</param>
            <param name="classVal">Class (name) of the characters.</param>
            <param name="trainingFile">Name of the training file. Default: "train_ocr"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadOcrTrainfNamesProtected(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Query which characters are stored in a (protected) training file.</summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="password">Passwords for protected training files.</param>
            <param name="characterNames">Names of the read characters.</param>
            <param name="characterCount">Number of characters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadOcrTrainfNames(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Query which characters are stored in a training file.</summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="characterNames">Names of the read characters.</param>
            <param name="characterCount">Number of characters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadOcrTrainfSelect(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read training specific characters from files and convert to images.</summary>
            <param name="characters">Images read from file.</param>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="searchNames">Names of the characters to be extracted. Default: "0"</param>
            <param name="foundNames">Names of the read characters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadOcrTrainf(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read training characters from files and convert to images.</summary>
            <param name="characters">Images read from file.</param>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="characterNames">Names of the read characters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Pruning(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Prune the branches of a region.</summary>
            <param name="region">Regions to be processed.</param>
            <param name="regionPrune">Result of the pruning operation.</param>
            <param name="length">Length of the branches to be removed. Default: 2</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Boundary(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Reduce a region to its boundary.</summary>
            <param name="region">Regions for which the boundary is to be computed.</param>
            <param name="regionBorder">Resulting boundaries.</param>
            <param name="boundaryType">Boundary type. Default: "inner"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Fitting(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Perform a closing after an opening with multiple structuring elements.</summary>
            <param name="region">Regions to be processed.</param>
            <param name="structElements">Structuring elements.</param>
            <param name="regionFitted">Fitted regions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenStructElements(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate standard structuring elements.</summary>
            <param name="structElements">Generated structuring elements.</param>
            <param name="type">Type of structuring element to generate. Default: "noise"</param>
            <param name="row">Row coordinate of the reference point. Default: 1</param>
            <param name="column">Column coordinate of the reference point. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TransposeRegion(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Reflect a region about a point.</summary>
            <param name="region">Region to be reflected.</param>
            <param name="transposed">Transposed region.</param>
            <param name="row">Row coordinate of the reference point. Default: 0</param>
            <param name="column">Column coordinate of the reference point. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ThinningSeq(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Remove the result of a hit-or-miss operation from a region (sequential).</summary>
            <param name="region">Regions to be processed.</param>
            <param name="regionThin">Result of the thinning operator.</param>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "l"</param>
            <param name="iterations">Number of iterations. For 'f', 'f2', 'h' and 'i' the only useful value is 1. Default: 20</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ThinningGolay(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Remove the result of a hit-or-miss operation from a region (using a Golay structuring element).</summary>
            <param name="region">Regions to be processed.</param>
            <param name="regionThin">Result of the thinning operator.</param>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="rotation">Rotation of the Golay element. Depending on the element, not all rotations are valid. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Thinning(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Remove the result of a hit-or-miss operation from a region.</summary>
            <param name="region">Regions to be processed.</param>
            <param name="structElement1">Structuring element for the foreground.</param>
            <param name="structElement2">Structuring element for the background.</param>
            <param name="regionThin">Result of the thinning operator.</param>
            <param name="row">Row coordinate of the reference point. Default: 0</param>
            <param name="column">Column coordinate of the reference point. Default: 0</param>
            <param name="iterations">Number of iterations. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ThickeningSeq(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add the result of a hit-or-miss operation to a region (sequential).</summary>
            <param name="region">Regions to be processed.</param>
            <param name="regionThick">Result of the thickening operator.</param>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="iterations">Number of iterations. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ThickeningGolay(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add the result of a hit-or-miss operation to a region (using a Golay structuring element).</summary>
            <param name="region">Regions to be processed.</param>
            <param name="regionThick">Result of the thickening operator.</param>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="rotation">Rotation of the Golay element. Depending on the element, not all rotations are valid. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Thickening(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add the result of a hit-or-miss operation to a region.</summary>
            <param name="region">Regions to be processed.</param>
            <param name="structElement1">Structuring element for the foreground.</param>
            <param name="structElement2">Structuring element for the background.</param>
            <param name="regionThick">Result of the thickening operator.</param>
            <param name="row">Row coordinate of the reference point. Default: 16</param>
            <param name="column">Column coordinate of the reference point. Default: 16</param>
            <param name="iterations">Number of iterations. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HitOrMissSeq(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Hit-or-miss operation for regions using the Golay alphabet (sequential).</summary>
            <param name="region">Regions to be processed.</param>
            <param name="regionHitMiss">Result of the hit-or-miss operation.</param>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HitOrMissGolay(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Hit-or-miss operation for regions using the Golay alphabet.</summary>
            <param name="region">Regions to be processed.</param>
            <param name="regionHitMiss">Result of the hit-or-miss operation.</param>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="rotation">Rotation of the Golay element. Depending on the element, not all rotations are valid. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HitOrMiss(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Hit-or-miss operation for regions.</summary>
            <param name="region">Regions to be processed.</param>
            <param name="structElement1">Erosion mask for the input regions.</param>
            <param name="structElement2">Erosion mask for the complements of the input regions.</param>
            <param name="regionHitMiss">Result of the hit-or-miss operation.</param>
            <param name="row">Row coordinate of the reference point. Default: 16</param>
            <param name="column">Column coordinate of the reference point. Default: 16</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GolayElements(HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate the structuring elements of the Golay alphabet.</summary>
            <param name="structElement1">Structuring element for the foreground.</param>
            <param name="structElement2">Structuring element for the background.</param>
            <param name="golayElement">Name of the structuring element. Default: "l"</param>
            <param name="rotation">Rotation of the Golay element. Depending on the element, not all rotations are valid. Default: 0</param>
            <param name="row">Row coordinate of the reference point. Default: 16</param>
            <param name="column">Column coordinate of the reference point. Default: 16</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MorphSkiz(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Thinning of a region.</summary>
            <param name="region">Regions to be thinned.</param>
            <param name="regionSkiz">Result of the skiz operator.</param>
            <param name="iterations1">Number of iterations for the sequential thinning with the element 'l' of the Golay alphabet. Default: 100</param>
            <param name="iterations2">Number of iterations for the sequential thinning with the element 'e' of the Golay alphabet. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MorphSkeleton(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Compute the morphological skeleton of a region.</summary>
            <param name="region">Regions to be processed.</param>
            <param name="regionSkeleton">Resulting morphological skeleton.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MorphHat(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Compute the union of bottom_hat and top_hat.</summary>
            <param name="region">Regions to be processed.</param>
            <param name="structElement">Structuring element (position-invariant).</param>
            <param name="regionMorphHat">Union of top hat and bottom hat.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BottomHat(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Compute the bottom hat of regions.</summary>
            <param name="region">Regions to be processed.</param>
            <param name="structElement">Structuring element (position independent).</param>
            <param name="regionBottomHat">Result of the bottom hat operator.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TopHat(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Compute the top hat of regions.</summary>
            <param name="region">Regions to be processed.</param>
            <param name="structElement">Structuring element (position independent).</param>
            <param name="regionTopHat">Result of the top hat operator.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MinkowskiSub2(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Erode a region (using a reference point).</summary>
            <param name="region">Regions to be eroded.</param>
            <param name="structElement">Structuring element.</param>
            <param name="regionMinkSub">Eroded regions.</param>
            <param name="row">Row coordinate of the reference point. Default: 0</param>
            <param name="column">Column coordinate of the reference point. Default: 0</param>
            <param name="iterations">Number of iterations. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MinkowskiSub1(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Erode a region.</summary>
            <param name="region">Regions to be eroded.</param>
            <param name="structElement">Structuring element.</param>
            <param name="regionMinkSub">Eroded regions.</param>
            <param name="iterations">Number of iterations. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MinkowskiAdd2(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Dilate a region (using a reference point).</summary>
            <param name="region">Regions to be dilated.</param>
            <param name="structElement">Structuring element.</param>
            <param name="regionMinkAdd">Dilated regions.</param>
            <param name="row">Row coordinate of the reference point.</param>
            <param name="column">Column coordinate of the reference point.</param>
            <param name="iterations">Number of iterations. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MinkowskiAdd1(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Perform a Minkowski addition on a region.</summary>
            <param name="region">Regions to be dilated.</param>
            <param name="structElement">Structuring element.</param>
            <param name="regionMinkAdd">Dilated regions.</param>
            <param name="iterations">Number of iterations. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClosingRectangle1(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Close a region with a rectangular structuring element.</summary>
            <param name="region">Regions to be closed.</param>
            <param name="regionClosing">Closed regions.</param>
            <param name="width">Width of the structuring rectangle. Default: 10</param>
            <param name="height">Height of the structuring rectangle. Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClosingGolay(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Close a region with an element from the Golay alphabet.</summary>
            <param name="region">Regions to be closed.</param>
            <param name="regionClosing">Closed regions.</param>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="rotation">Rotation of the Golay element. Depending on the element, not all rotations are valid. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClosingCircle(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Close a region with a circular structuring element.</summary>
            <param name="region">Regions to be closed.</param>
            <param name="regionClosing">Closed regions.</param>
            <param name="radius">Radius of the circular structuring element. Default: 3.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Closing(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Close a region.</summary>
            <param name="region">Regions to be closed.</param>
            <param name="structElement">Structuring element (position-invariant).</param>
            <param name="regionClosing">Closed regions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OpeningSeg(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Separate overlapping regions.</summary>
            <param name="region">Regions to be opened.</param>
            <param name="structElement">Structuring element (position-invariant).</param>
            <param name="regionOpening">Opened regions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OpeningGolay(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Open a region with an element from the Golay alphabet.</summary>
            <param name="region">Regions to be opened.</param>
            <param name="regionOpening">Opened regions.</param>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="rotation">Rotation of the Golay element. Depending on the element, not all rotations are valid. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OpeningRectangle1(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Open a region with a rectangular structuring element.</summary>
            <param name="region">Regions to be opened.</param>
            <param name="regionOpening">Opened regions.</param>
            <param name="width">Width of the structuring rectangle. Default: 10</param>
            <param name="height">Height of the structuring rectangle. Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OpeningCircle(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Open a region with a circular structuring element.</summary>
            <param name="region">Regions to be opened.</param>
            <param name="regionOpening">Opened regions.</param>
            <param name="radius">Radius of the circular structuring element. Default: 3.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Opening(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Open a region.</summary>
            <param name="region">Regions to be opened.</param>
            <param name="structElement">Structuring element (position-invariant).</param>
            <param name="regionOpening">Opened regions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ErosionSeq(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Erode a region sequentially.</summary>
            <param name="region">Regions to be eroded.</param>
            <param name="regionErosion">Eroded regions.</param>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="iterations">Number of iterations. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ErosionGolay(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Erode a region with an element from the Golay alphabet.</summary>
            <param name="region">Regions to be eroded.</param>
            <param name="regionErosion">Eroded regions.</param>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="iterations">Number of iterations. Default: 1</param>
            <param name="rotation">Rotation of the Golay element. Depending on the element, not all rotations are valid. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ErosionRectangle1(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Erode a region with a rectangular structuring element.</summary>
            <param name="region">Regions to be eroded.</param>
            <param name="regionErosion">Eroded regions.</param>
            <param name="width">Width of the structuring rectangle. Default: 11</param>
            <param name="height">Height of the structuring rectangle. Default: 11</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ErosionCircle(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Erode a region with a circular structuring element.</summary>
            <param name="region">Regions to be eroded.</param>
            <param name="regionErosion">Eroded regions.</param>
            <param name="radius">Radius of the circular structuring element. Default: 3.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Erosion2(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Erode a region (using a reference point).</summary>
            <param name="region">Regions to be eroded.</param>
            <param name="structElement">Structuring element.</param>
            <param name="regionErosion">Eroded regions.</param>
            <param name="row">Row coordinate of the reference point. Default: 0</param>
            <param name="column">Column coordinate of the reference point. Default: 0</param>
            <param name="iterations">Number of iterations. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Erosion1(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Erode a region.</summary>
            <param name="region">Regions to be eroded.</param>
            <param name="structElement">Structuring element.</param>
            <param name="regionErosion">Eroded regions.</param>
            <param name="iterations">Number of iterations. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DilationSeq(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Dilate a region sequentially.</summary>
            <param name="region">Regions to be dilated.</param>
            <param name="regionDilation">Dilated regions.</param>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="iterations">Number of iterations. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DilationGolay(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Dilate a region with an element from the Golay alphabet.</summary>
            <param name="region">Regions to be dilated.</param>
            <param name="regionDilation">Dilated regions.</param>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="iterations">Number of iterations. Default: 1</param>
            <param name="rotation">Rotation of the Golay element. Depending on the element, not all rotations are valid. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DilationRectangle1(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Dilate a region with a rectangular structuring element.</summary>
            <param name="region">Regions to be dilated.</param>
            <param name="regionDilation">Dilated regions.</param>
            <param name="width">Width of the structuring rectangle. Default: 11</param>
            <param name="height">Height of the structuring rectangle. Default: 11</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DilationCircle(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Dilate a region with a circular structuring element.</summary>
            <param name="region">Regions to be dilated.</param>
            <param name="regionDilation">Dilated regions.</param>
            <param name="radius">Radius of the circular structuring element. Default: 3.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Dilation2(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Dilate a region (using a reference point).</summary>
            <param name="region">Regions to be dilated.</param>
            <param name="structElement">Structuring element.</param>
            <param name="regionDilation">Dilated regions.</param>
            <param name="row">Row coordinate of the reference point. Default: 0</param>
            <param name="column">Column coordinate of the reference point. Default: 0</param>
            <param name="iterations">Number of iterations. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Dilation1(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Dilate a region.</summary>
            <param name="region">Regions to be dilated.</param>
            <param name="structElement">Structuring element.</param>
            <param name="regionDilation">Dilated regions.</param>
            <param name="iterations">Number of iterations. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayBothat(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Perform a gray value bottom hat transformation on an image.</summary>
            <param name="image">Input image.</param>
            <param name="SE">Structuring element.</param>
            <param name="imageBotHat">Bottom hat image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayTophat(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Perform a gray value top hat transformation on an image.</summary>
            <param name="image">Input image.</param>
            <param name="SE">Structuring element.</param>
            <param name="imageTopHat">Top hat image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayClosing(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Perform a gray value closing on an image.</summary>
            <param name="image">Input image.</param>
            <param name="SE">Structuring element.</param>
            <param name="imageClosing">Gray-closed image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayOpening(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Perform a gray value opening on an image.</summary>
            <param name="image">Input image.</param>
            <param name="SE">Structuring element.</param>
            <param name="imageOpening">Gray-opened image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayDilation(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Perform a gray value dilation on an image.</summary>
            <param name="image">Input image.</param>
            <param name="SE">Structuring element.</param>
            <param name="imageDilation">Gray-dilated image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayErosion(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Perform a gray value erosion on an image.</summary>
            <param name="image">Input image.</param>
            <param name="SE">Structuring element.</param>
            <param name="imageErosion">Gray-eroded image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadGraySe(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Load a structuring element for gray morphology.</summary>
            <param name="SE">Generated structuring element.</param>
            <param name="fileName">Name of the file containing the structuring element.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenDiscSe(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate ellipsoidal structuring elements for gray morphology.</summary>
            <param name="SE">Generated structuring element.</param>
            <param name="type">Pixel type. Default: "byte"</param>
            <param name="width">Width of the structuring element. Default: 5</param>
            <param name="height">Height of the structuring element. Default: 5</param>
            <param name="smax">Maximum gray value of the structuring element. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetMetrologyObjectModelContour(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Query the model contour of a metrology object in image coordinates. </summary>
            <param name="contour">Model contour.</param>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="index">Index of the metrology object. Default: "all"</param>
            <param name="resolution">Distance between neighboring contour points. Default: 1.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetMetrologyObjectResultContour(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Query the result contour of a metrology object. </summary>
            <param name="contour">Result contour for the given metrology object.</param>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="index">Index of the metrology object. Default: "all"</param>
            <param name="instance">Instance of the metrology object. Default: "all"</param>
            <param name="resolution">Distance between neighboring contour points. Default: 1.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AlignMetrologyModel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Alignment of a metrology model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="row">Row coordinate of the alignment. Default: 0</param>
            <param name="column">Column coordinate of the alignment. Default: 0</param>
            <param name="angle">Rotation angle of the alignment. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddMetrologyObjectGeneric(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a metrology object to a metrology model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="shape">Type of the metrology object to be added. Default: "circle"</param>
            <param name="shapeParam">Parameters of the metrology object to be added.</param>
            <param name="measureLength1">Half length of the measure regions perpendicular to the boundary. Default: 20.0</param>
            <param name="measureLength2">Half length of the measure regions tangetial to the boundary. Default: 5.0</param>
            <param name="measureSigma">Sigma of the Gaussian function for the smoothing. Default: 1.0</param>
            <param name="measureThreshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="index">Index of the created metrology object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetMetrologyModelParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get parameters that are valid for the entire metrology model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="genParamName">Name of the generic parameter. Default: "camera_param"</param>
            <param name="genParamValue">Value of the generic parameter.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetMetrologyModelParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set parameters that are valid for the entire metrology model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="genParamName">Name of the generic parameter. Default: "camera_param"</param>
            <param name="genParamValue">Value of the generic parameter. Default: [0,0,0,0,0,0,0,0]</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeMetrologyModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized metrology model.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="metrologyHandle">Handle of the metrology model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeMetrologyModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a metrology model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TransformMetrologyObject(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Transform metrology objects of a metrology model, e.g. for alignment.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <param name="row">Translation in row direction.</param>
            <param name="column">Translation in column direction.</param>
            <param name="phi">Rotation angle.</param>
            <param name="mode">Mode of the transformation. Default: "absolute"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteMetrologyModel(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a metrology model to a file.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadMetrologyModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a metrology model from a file.</summary>
            <param name="fileName">File name.</param>
            <param name="metrologyHandle">Handle of the metrology model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CopyMetrologyModel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Copy a metrology model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <param name="copiedMetrologyHandle">Handle of the copied metrology model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CopyMetrologyObject(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Copy metrology metrology objects of a metrology model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <param name="copiedIndices">Indices of the copied metrology objects.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetMetrologyObjectNumInstances(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the number of instances of the metrology objects of a metrology model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="index">Index of the metrology objects. Default: 0</param>
            <param name="numInstances">Number of Instances of the metrology objects.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetMetrologyObjectResult(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the results of the measurement of a metrology model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="index">Index of the metrology object. Default: "all"</param>
            <param name="instance">Instance of the metrology object. Default: "all"</param>
            <param name="genParamName">Name of the generic parameter. Default: "result_type"</param>
            <param name="genParamValue">Value of the generic parameter. Default: "all_param"</param>
            <param name="parameter">Result values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetMetrologyObjectMeasures(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get the measure regions and the results of the edge location for the metrology objects of a metrology model.</summary>
            <param name="contours">Rectangular XLD Contours of measure regions.</param>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <param name="transition">Select light/dark or dark/light edges. Default: "all"</param>
            <param name="row">Row coordinates of the measured edges.</param>
            <param name="column">Column coordinates of the measured edges.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ApplyMetrologyModel(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Measure and fit the geometric shapes of all metrology objects of a metrology model.</summary>
            <param name="image">Input image.</param>
            <param name="metrologyHandle">Handle of the metrology model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetMetrologyObjectIndices(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the indices of the metrology objects of a metrology model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="indices">Indices of the metrology objects.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ResetMetrologyObjectFuzzyParam(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Reset all fuzzy parameters and fuzzy functions of a metrology model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="index">Index of the metrology objects. Default: "all"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ResetMetrologyObjectParam(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Reset all parameters of a metrology model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="index">Index of the metrology objects. Default: "all"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetMetrologyObjectFuzzyParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get a fuzzy parameter of a metroloy model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="index">Index of the metrology objects. Default: 0</param>
            <param name="genParamName">Names of the generic parameters. Default: "fuzzy_thresh"</param>
            <param name="genParamValue">Values of the generic parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetMetrologyObjectParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get one or several parameters of a metroloy model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <param name="genParamName">Names of the generic parameters. Default: "num_measures"</param>
            <param name="genParamValue">Values of the generic parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetMetrologyObjectFuzzyParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set fuzzy parameters or fuzzy functions for a metrology model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <param name="genParamName">Names of the generic parameters. Default: "fuzzy_thresh"</param>
            <param name="genParamValue">Values of the generic parameters. Default: 0.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetMetrologyObjectParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set parameters for the metrology objects of a metrology model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="index">Index of the metrology objects. Default: "all"</param>
            <param name="genParamName">Names of the generic parameters. Default: "num_instances"</param>
            <param name="genParamValue">Values of the generic parameters. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddMetrologyObjectRectangle2Measure(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a rectangle to a metrology model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="row">Row (or Y) coordinate of the center of the rectangle.</param>
            <param name="column">Column (or X) coordinate of the center of the rectangle.</param>
            <param name="phi">Orientation of the main axis [rad].</param>
            <param name="length1">Length of the larger half edge of the rectangle.</param>
            <param name="length2">Length of the smaller half edge of the rectangle.</param>
            <param name="measureLength1">Half length of the measure regions perpendicular to the boundary. Default: 20.0</param>
            <param name="measureLength2">Half length of the measure regions tangetial to the boundary. Default: 5.0</param>
            <param name="measureSigma">Sigma of the Gaussian function for the smoothing. Default: 1.0</param>
            <param name="measureThreshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="index">Index of the created metrology object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddMetrologyObjectLineMeasure(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a line to a metrology model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="rowBegin">Row (or Y) coordinate of the start of the line.</param>
            <param name="columnBegin">Column (or X) coordinate of the start of the line.</param>
            <param name="rowEnd">Row (or Y) coordinate of the end of the line.</param>
            <param name="columnEnd">Column (or X) coordinate of the end of the line.</param>
            <param name="measureLength1">Half length of the measure regions perpendicular to the boundary. Default: 20.0</param>
            <param name="measureLength2">Half length of the measure regions tangetial to the boundary. Default: 5.0</param>
            <param name="measureSigma">Sigma of the Gaussian function for the smoothing. Default: 1.0</param>
            <param name="measureThreshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="index">Index of the created metrology object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddMetrologyObjectEllipseMeasure(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add an ellipse or an elliptic arc to a metrology model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="row">Row (or Y) coordinate of the center of the ellipse.</param>
            <param name="column">Column (or X) coordinate of the center of the ellipse.</param>
            <param name="phi">Orientation of the main axis [rad].</param>
            <param name="radius1">Length of the larger half axis.</param>
            <param name="radius2">Length of the smaller half axis.</param>
            <param name="measureLength1">Half length of the measure regions perpendicular to the boundary. Default: 20.0</param>
            <param name="measureLength2">Half length of the measure regions tangetial to the boundary. Default: 5.0</param>
            <param name="measureSigma">Sigma of the Gaussian function for the smoothing. Default: 1.0</param>
            <param name="measureThreshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="index">Index of the created metrology object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddMetrologyObjectCircleMeasure(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a circle or a circular arc to a metrology model.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="row">Row coordinate (or Y) of the center of the circle or circular arc.</param>
            <param name="column">Column (or X) coordinate of the center of the circle or circular arc.</param>
            <param name="radius">Radius of the circle or circular arc.</param>
            <param name="measureLength1">Half length of the measure regions perpendicular to the boundary. Default: 20.0</param>
            <param name="measureLength2">Half length of the measure regions tangetial to the boundary. Default: 5.0</param>
            <param name="measureSigma">Sigma of the Gaussian function for the smoothing. Default: 1.0</param>
            <param name="measureThreshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="index">Index of the created metrology object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllMetrologyModels">
            <summary>Delete all metrology models and free the allocated memory.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearMetrologyModel(HalconDotNet.HTuple)">
            <summary>Delete a metrology model and free the allocated memory.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearMetrologyObject(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Delete metrology objects and free the allocated memory.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="index">Index of the metrology objects. Default: "all"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetMetrologyModelImageSize(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the size of the image of metrology objects.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
            <param name="width">Width of the image to be processed. Default: 640</param>
            <param name="height">Height of the image to be processed. Default: 480</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateMetrologyModel(HalconDotNet.HTuple@)">
            <summary>Create the data structure that is needed to measure geometric shapes.</summary>
            <param name="metrologyHandle">Handle of the metrology model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeMeasure(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a measure object.</summary>
            <param name="measureHandle">Measure object handle.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeMeasure(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized measure object.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="measureHandle">Measure object handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteMeasure(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a measure object to a file.</summary>
            <param name="measureHandle">Measure object handle.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadMeasure(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a measure object from a file.</summary>
            <param name="fileName">File name.</param>
            <param name="measureHandle">Measure object handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MeasureThresh(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Extracting points with a particular gray value along a rectangle or an annular arc.</summary>
            <param name="image">Input image.</param>
            <param name="measureHandle">Measure object handle.</param>
            <param name="sigma">Sigma of gaussian smoothing. Default: 1.0</param>
            <param name="threshold">Threshold. Default: 128.0</param>
            <param name="select">Selection of points. Default: "all"</param>
            <param name="rowThresh">Row coordinates of points with threshold value.</param>
            <param name="columnThresh">Column coordinates of points with threshold value.</param>
            <param name="distance">Distance between consecutive points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseAllMeasures">
            <summary>Delete all measure objects.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseMeasure(HalconDotNet.HTuple)">
            <summary>Delete a measure object.</summary>
            <param name="measureHandle">Measure object handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MeasureProjection(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Extract a gray value profile perpendicular to a rectangle or annular arc.</summary>
            <param name="image">Input image.</param>
            <param name="measureHandle">Measure object handle.</param>
            <param name="grayValues">Gray value profile.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ResetFuzzyMeasure(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Reset a fuzzy function.</summary>
            <param name="measureHandle">Measure object handle.</param>
            <param name="setType">Selection of the fuzzy set. Default: "contrast"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetFuzzyMeasureNormPair(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Specify a normalized fuzzy function for edge pairs.</summary>
            <param name="measureHandle">Measure object handle.</param>
            <param name="pairSize">Favored width of edge pairs. Default: 10.0</param>
            <param name="setType">Selection of the fuzzy set. Default: "size_abs_diff"</param>
            <param name="function">Fuzzy function.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetFuzzyMeasure(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Specify a fuzzy function.</summary>
            <param name="measureHandle">Measure object handle.</param>
            <param name="setType">Selection of the fuzzy set. Default: "contrast"</param>
            <param name="function">Fuzzy function.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FuzzyMeasurePairing(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Extract straight edge pairs perpendicular to a rectangle or an annular arc.</summary>
            <param name="image">Input image.</param>
            <param name="measureHandle">Measure object handle.</param>
            <param name="sigma">Sigma of Gaussian smoothing. Default: 1.0</param>
            <param name="ampThresh">Minimum edge amplitude. Default: 30.0</param>
            <param name="fuzzyThresh">Minimum fuzzy value. Default: 0.5</param>
            <param name="transition">Select the first gray value transition of the edge pairs. Default: "all"</param>
            <param name="pairing">Constraint of pairing. Default: "no_restriction"</param>
            <param name="numPairs">Number of edge pairs. Default: 10</param>
            <param name="rowEdgeFirst">Row coordinate of the first edge.</param>
            <param name="columnEdgeFirst">Column coordinate of the first edge.</param>
            <param name="amplitudeFirst">Edge amplitude of the first edge (with sign).</param>
            <param name="rowEdgeSecond">Row coordinate of the second edge.</param>
            <param name="columnEdgeSecond">Column coordinate of the second edge.</param>
            <param name="amplitudeSecond">Edge amplitude of the second edge (with sign).</param>
            <param name="rowPairCenter">Row coordinate of the center of the edge pair.</param>
            <param name="columnPairCenter">Column coordinate of the center of the edge pair.</param>
            <param name="fuzzyScore">Fuzzy evaluation of the edge pair.</param>
            <param name="intraDistance">Distance between the edges of the edge pair.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FuzzyMeasurePairs(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Extract straight edge pairs perpendicular to a rectangle or an annular arc.</summary>
            <param name="image">Input image.</param>
            <param name="measureHandle">Measure object handle.</param>
            <param name="sigma">Sigma of Gaussian smoothing. Default: 1.0</param>
            <param name="ampThresh">Minimum edge amplitude. Default: 30.0</param>
            <param name="fuzzyThresh">Minimum fuzzy value. Default: 0.5</param>
            <param name="transition">Select the first gray value transition of the edge pairs. Default: "all"</param>
            <param name="rowEdgeFirst">Row coordinate of the first edge point.</param>
            <param name="columnEdgeFirst">Column coordinate of the first edge point.</param>
            <param name="amplitudeFirst">Edge amplitude of the first edge (with sign).</param>
            <param name="rowEdgeSecond">Row coordinate of the second edge point.</param>
            <param name="columnEdgeSecond">Column coordinate of the second edge point.</param>
            <param name="amplitudeSecond">Edge amplitude of the second edge (with sign).</param>
            <param name="rowEdgeCenter">Row coordinate of the center of the edge pair.</param>
            <param name="columnEdgeCenter">Column coordinate of the center of the edge pair.</param>
            <param name="fuzzyScore">Fuzzy evaluation of the edge pair.</param>
            <param name="intraDistance">Distance between edges of an edge pair.</param>
            <param name="interDistance">Distance between consecutive edge pairs.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FuzzyMeasurePos(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Extract straight edges perpendicular to a rectangle or an annular arc.</summary>
            <param name="image">Input image.</param>
            <param name="measureHandle">Measure object handle.</param>
            <param name="sigma">Sigma of Gaussian smoothing. Default: 1.0</param>
            <param name="ampThresh">Minimum edge amplitude. Default: 30.0</param>
            <param name="fuzzyThresh">Minimum fuzzy value. Default: 0.5</param>
            <param name="transition">Select light/dark or dark/light edges. Default: "all"</param>
            <param name="rowEdge">Row coordinate of the edge point.</param>
            <param name="columnEdge">Column coordinate of the edge point.</param>
            <param name="amplitude">Edge amplitude of the edge (with sign).</param>
            <param name="fuzzyScore">Fuzzy evaluation of the edges.</param>
            <param name="distance">Distance between consecutive edges.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MeasurePairs(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Extract straight edge pairs perpendicular to a rectangle or annular arc.</summary>
            <param name="image">Input image.</param>
            <param name="measureHandle">Measure object handle.</param>
            <param name="sigma">Sigma of gaussian smoothing. Default: 1.0</param>
            <param name="threshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="transition">Type of gray value transition that determines how edges are grouped to edge pairs. Default: "all"</param>
            <param name="select">Selection of edge pairs. Default: "all"</param>
            <param name="rowEdgeFirst">Row coordinate of the center of the first edge.</param>
            <param name="columnEdgeFirst">Column coordinate of the center of the first edge.</param>
            <param name="amplitudeFirst">Edge amplitude of the first edge (with sign).</param>
            <param name="rowEdgeSecond">Row coordinate of the center of the second edge.</param>
            <param name="columnEdgeSecond">Column coordinate of the center of the second edge.</param>
            <param name="amplitudeSecond">Edge amplitude of the second edge (with sign).</param>
            <param name="intraDistance">Distance between edges of an edge pair.</param>
            <param name="interDistance">Distance between consecutive edge pairs.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MeasurePos(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Extract straight edges perpendicular to a rectangle or annular arc.</summary>
            <param name="image">Input image.</param>
            <param name="measureHandle">Measure object handle.</param>
            <param name="sigma">Sigma of gaussian smoothing. Default: 1.0</param>
            <param name="threshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="transition">Light/dark or dark/light edge. Default: "all"</param>
            <param name="select">Selection of end points. Default: "all"</param>
            <param name="rowEdge">Row coordinate of the center of the edge.</param>
            <param name="columnEdge">Column coordinate of the center of the edge.</param>
            <param name="amplitude">Edge amplitude of the edge (with sign).</param>
            <param name="distance">Distance between consecutive edges.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TranslateMeasure(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Translate a measure object.</summary>
            <param name="measureHandle">Measure object handle.</param>
            <param name="row">Row coordinate of the new reference point. Default: 50.0</param>
            <param name="column">Column coordinate of the new reference point. Default: 100.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenMeasureArc(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Prepare the extraction of straight edges perpendicular to an annular arc.</summary>
            <param name="centerRow">Row coordinate of the center of the arc. Default: 100.0</param>
            <param name="centerCol">Column coordinate of the center of the arc. Default: 100.0</param>
            <param name="radius">Radius of the arc. Default: 50.0</param>
            <param name="angleStart">Start angle of the arc in radians. Default: 0.0</param>
            <param name="angleExtent">Angular extent of the arc in radians. Default: 6.28318</param>
            <param name="annulusRadius">Radius (half width) of the annulus. Default: 10.0</param>
            <param name="width">Width of the image to be processed subsequently. Default: 512</param>
            <param name="height">Height of the image to be processed subsequently. Default: 512</param>
            <param name="interpolation">Type of interpolation to be used. Default: "nearest_neighbor"</param>
            <param name="measureHandle">Measure object handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenMeasureRectangle2(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Prepare the extraction of straight edges perpendicular to a rectangle.</summary>
            <param name="row">Row coordinate of the center of the rectangle. Default: 300.0</param>
            <param name="column">Column coordinate of the center of the rectangle. Default: 200.0</param>
            <param name="phi">Angle of longitudinal axis of the rectangle to horizontal (radians). Default: 0.0</param>
            <param name="length1">Half width of the rectangle. Default: 100.0</param>
            <param name="length2">Half height of the rectangle. Default: 20.0</param>
            <param name="width">Width of the image to be processed subsequently. Default: 512</param>
            <param name="height">Height of the image to be processed subsequently. Default: 512</param>
            <param name="interpolation">Type of interpolation to be used. Default: "nearest_neighbor"</param>
            <param name="measureHandle">Measure object handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized matrix.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="matrixID">Matrix handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a matrix.</summary>
            <param name="matrixID">Matrix handle.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a matrix from a file.</summary>
            <param name="fileName">File name.</param>
            <param name="matrixID">Matrix handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a matrix to a file.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="fileFormat">Format of the file. Default: "binary"</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OrthogonalDecomposeMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Perform an orthogonal decomposition of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="decompositionType">Method of decomposition. Default: "qr"</param>
            <param name="outputMatricesType">Type of output matrices. Default: "full"</param>
            <param name="computeOrthogonal">Computation of the orthogonal matrix. Default: "true"</param>
            <param name="matrixOrthogonalID">Matrix handle with the orthogonal part of the decomposed input matrix.</param>
            <param name="matrixTriangularID">Matrix handle with the triangular part of the decomposed input matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DecomposeMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Decompose a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="matrixType">Type of the input matrix. Default: "general"</param>
            <param name="matrix1ID">Matrix handle with the output matrix 1.</param>
            <param name="matrix2ID">Matrix handle with the output matrix 2.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SvdMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the singular value decomposition of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="SVDType">Type of computation. Default: "full"</param>
            <param name="computeSingularVectors">Computation of singular values. Default: "both"</param>
            <param name="matrixUID">Matrix handle with the left singular vectors.</param>
            <param name="matrixSID">Matrix handle with singular values.</param>
            <param name="matrixVID">Matrix handle with the right singular vectors.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GeneralizedEigenvaluesGeneralMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the generalized eigenvalues and optionally the generalized eigenvectors of general matrices.</summary>
            <param name="matrixAID">Matrix handle of the input matrix A.</param>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
            <param name="computeEigenvectors">Computation of the eigenvectors. Default: "none"</param>
            <param name="eigenvaluesRealID">Matrix handle with the real parts of the eigenvalues.</param>
            <param name="eigenvaluesImagID">Matrix handle with the imaginary parts of the eigenvalues.</param>
            <param name="eigenvectorsRealID">Matrix handle with the real parts of the eigenvectors.</param>
            <param name="eigenvectorsImagID">Matrix handle with the imaginary parts of the eigenvectors.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GeneralizedEigenvaluesSymmetricMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the generalized eigenvalues and optionally generalized eigenvectors of symmetric input matrices.</summary>
            <param name="matrixAID">Matrix handle of the symmetric input matrix A.</param>
            <param name="matrixBID">Matrix handle of the symmetric positive definite input matrix B.</param>
            <param name="computeEigenvectors">Computation of the eigenvectors. Default: "false"</param>
            <param name="eigenvaluesID">Matrix handle with the eigenvalues.</param>
            <param name="eigenvectorsID">Matrix handle with the eigenvectors.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EigenvaluesGeneralMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the eigenvalues and optionally the eigenvectors of a general matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="computeEigenvectors">Computation of the eigenvectors. Default: "none"</param>
            <param name="eigenvaluesRealID">Matrix handle with the real parts of the eigenvalues.</param>
            <param name="eigenvaluesImagID">Matrix handle with the imaginary parts of the eigenvalues.</param>
            <param name="eigenvectorsRealID">Matrix handle with the real parts of the eigenvectors.</param>
            <param name="eigenvectorsImagID">Matrix handle with the imaginary parts of the eigenvectors.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EigenvaluesSymmetricMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the eigenvalues and optionally eigenvectors of a symmetric matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="computeEigenvectors">Computation of the eigenvectors. Default: "false"</param>
            <param name="eigenvaluesID">Matrix handle with the eigenvalues.</param>
            <param name="eigenvectorsID">Matrix handle with the eigenvectors.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SolveMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the solution of a system of equations.</summary>
            <param name="matrixLHSID">Matrix handle of the input matrix of the left hand side.</param>
            <param name="matrixLHSType">The type of the input matrix of the left hand side. Default: "general"</param>
            <param name="epsilon">Type of solving and limitation to set singular values to be 0. Default: 0.0</param>
            <param name="matrixRHSID">Matrix handle of the input matrix of right hand side.</param>
            <param name="matrixResultID">New matrix handle with the solution.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeterminantMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the determinant of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="matrixType">The type of the input matrix. Default: "general"</param>
            <param name="value">Determinant of the input matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InvertMatrixMod(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Invert a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="matrixType">The type of the input matrix. Default: "general"</param>
            <param name="epsilon">Type of inversion. Default: 0.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InvertMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Invert a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="matrixType">The type of the input matrix. Default: "general"</param>
            <param name="epsilon">Type of inversion. Default: 0.0</param>
            <param name="matrixInvID">Matrix handle with the inverse matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TransposeMatrixMod(HalconDotNet.HTuple)">
            <summary>Transpose a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TransposeMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Transpose a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="matrixTransposedID">Matrix handle with the transpose of the input matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MaxMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Returns the elementwise maximum of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="maxType">Type of maximum determination. Default: "columns"</param>
            <param name="matrixMaxID">Matrix handle with the maximum values of the input matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MinMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Returns the elementwise minimum of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="minType">Type of minimum determination. Default: "columns"</param>
            <param name="matrixMinID">Matrix handle with the minimum values of the input matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PowMatrixMod(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the power functions of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="matrixType">The type of the input matrix. Default: "general"</param>
            <param name="power">The power. Default: 2.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PowMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the power functions of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="matrixType">The type of the input matrix. Default: "general"</param>
            <param name="power">The power. Default: 2.0</param>
            <param name="matrixPowID">Matrix handle with the raised powered matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PowElementMatrixMod(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the power functions of the elements of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix of the base.</param>
            <param name="matrixExpID">Matrix handle of the input matrix with exponents.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PowElementMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the power functions of the elements of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix of the base.</param>
            <param name="matrixExpID">Matrix handle of the input matrix with exponents.</param>
            <param name="matrixPowID">Matrix handle with the raised power of the input matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PowScalarElementMatrixMod(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the power functions of the elements of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="power">The power. Default: 2.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PowScalarElementMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the power functions of the elements of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="power">The power. Default: 2.0</param>
            <param name="matrixPowID">Matrix handle with the raised power of the input matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SqrtMatrixMod(HalconDotNet.HTuple)">
            <summary>Compute the square root values of the elements of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SqrtMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the square root values of the elements of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="matrixSqrtID">Matrix handle with the square root values of the input matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AbsMatrixMod(HalconDotNet.HTuple)">
            <summary>Compute the absolute values of the elements of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AbsMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the absolute values of the elements of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="matrixAbsID">Matrix handle with the absolute values of the input matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.NormMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Norm of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="normType">Type of norm. Default: "2-norm"</param>
            <param name="value">Norm of the input matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MeanMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Returns the elementwise mean of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="meanType">Type of mean determination. Default: "columns"</param>
            <param name="matrixMeanID">Matrix handle with the mean values of the input matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SumMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Returns the elementwise sum of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="sumType">Type of summation. Default: "columns"</param>
            <param name="matrixSumID">Matrix handle with the sum of the input matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DivElementMatrixMod(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Divide matrices element-by-element.</summary>
            <param name="matrixAID">Matrix handle of the input matrix A.</param>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DivElementMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Divide matrices element-by-element.</summary>
            <param name="matrixAID">Matrix handle of the input matrix A.</param>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
            <param name="matrixDivID">Matrix handle with the divided values of input matrices.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MultElementMatrixMod(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Multiply matrices element-by-element.</summary>
            <param name="matrixAID">Matrix handle of the input matrix A.</param>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MultElementMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Multiply matrices element-by-element.</summary>
            <param name="matrixAID">Matrix handle of the input matrix A.</param>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
            <param name="matrixMultID">Matrix handle with the multiplied values of the input matrices.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ScaleMatrixMod(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Scale a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="factor">Scale factor. Default: 2.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ScaleMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Scale a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="factor">Scale factor. Default: 2.0</param>
            <param name="matrixScaledID">Matrix handle with the scaled elements.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SubMatrixMod(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Subtract two matrices.</summary>
            <param name="matrixAID">Matrix handle of the input matrix A.</param>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SubMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Subtract two matrices.</summary>
            <param name="matrixAID">Matrix handle of the input matrix A.</param>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
            <param name="matrixSubID">Matrix handle with the difference of the input matrices.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddMatrixMod(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add two matrices.</summary>
            <param name="matrixAID">Matrix handle of the input matrix A.</param>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add two matrices.</summary>
            <param name="matrixAID">Matrix handle of the input matrix A.</param>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
            <param name="matrixSumID">Matrix handle with the sum of the input matrices.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MultMatrixMod(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Multiply two matrices.</summary>
            <param name="matrixAID">Matrix handle of the input matrix A.</param>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
            <param name="multType">Type of the input matrices. Default: "AB"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MultMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Multiply two matrices.</summary>
            <param name="matrixAID">Matrix handle of the input matrix A.</param>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
            <param name="multType">Type of the input matrices. Default: "AB"</param>
            <param name="matrixMultID">Matrix handle of the multiplied matrices.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSizeMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get the size of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="rows">Number of rows of the matrix.</param>
            <param name="columns">Number of columns of the matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RepeatMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Repeat a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="rows">Number of copies of input matrix in row direction. Default: 2</param>
            <param name="columns">Number of copies of input matrix in column direction. Default: 2</param>
            <param name="matrixRepeatedID">Matrix handle of the repeated copied matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CopyMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Copy a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="matrixCopyID">Matrix handle of the copied matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetDiagonalMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the diagonal elements of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="vectorID">Matrix handle containing the diagonal elements to be set.</param>
            <param name="diagonal">Position of the diagonal. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDiagonalMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the diagonal elements of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="diagonal">Number of the desired diagonal. Default: 0</param>
            <param name="vectorID">Matrix handle containing the diagonal elements.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetSubMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set a sub-matrix of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="matrixSubID">Matrix handle of the input sub-matrix.</param>
            <param name="row">Upper row position of the sub-matrix in the matrix. Default: 0</param>
            <param name="column">Left column position of the sub-matrix in the matrix. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSubMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get a sub-matrix of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="row">Upper row position of the sub-matrix in the input matrix. Default: 0</param>
            <param name="column">Left column position of the sub-matrix in the input matrix. Default: 0</param>
            <param name="rowsSub">Number of rows of the sub-matrix. Default: 1</param>
            <param name="columnsSub">Number of columns of the sub-matrix. Default: 1</param>
            <param name="matrixSubID">Matrix handle of the sub-matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetFullMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set all values of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="values">Values to be set.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetFullMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return all values of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="values">Values of the matrix elements.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetValueMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set one or more elements of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="row">Row numbers of the matrix elements to be modified. Default: 0</param>
            <param name="column">Column numbers of the matrix elements to be modified. Default: 0</param>
            <param name="value">Values to be set in the indicated matrix elements. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetValueMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return one ore more elements of a matrix.</summary>
            <param name="matrixID">Matrix handle of the input matrix.</param>
            <param name="row">Row numbers of matrix elements to be returned. Default: 0</param>
            <param name="column">Column numbers of matrix elements to be returned. Default: 0</param>
            <param name="value">Values of indicated matrix elements.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllMatrices">
            <summary>Clear all matrices from memory.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearMatrix(HalconDotNet.HTuple)">
            <summary>Free the memory of a matrix.</summary>
            <param name="matrixID">Matrix handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a matrix.</summary>
            <param name="rows">Number of rows of the matrix. Default: 3</param>
            <param name="columns">Number of columns of the matrix. Default: 3</param>
            <param name="value">Values for initializing the elements of the matrix. Default: 0</param>
            <param name="matrixID">Matrix handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllSampleIdentifiers">
            <summary>Free the memory of all sample identifiers.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearSampleIdentifier(HalconDotNet.HTuple)">
            <summary>Free the memory of a sample identifier.</summary>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeSampleIdentifier(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized sample identifier.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadSampleIdentifier(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a sample identifier from a file.</summary>
            <param name="fileName">File name.</param>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeSampleIdentifier(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a sample identifier.</summary>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteSampleIdentifier(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a sample identifier to a file.</summary>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ApplySampleIdentifier(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Identify objects with a sample identifier. </summary>
            <param name="image">Image showing the object to be identified.</param>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
            <param name="numResults">Number of suggested object indices. Default: 1</param>
            <param name="ratingThreshold">Rating threshold. Default: 0.0</param>
            <param name="genParamName">Generic parameter name. Default: []</param>
            <param name="genParamValue">Generic parameter value. Default: []</param>
            <param name="objectIdx">Index of the identified object.</param>
            <param name="rating">Rating value of the identified object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSampleIdentifierParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get selected parameters of a sample identifier.</summary>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
            <param name="paramName">Parameter name. Default: "rating_method"</param>
            <param name="paramValue">Parameter value.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetSampleIdentifierParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set selected parameters of a sample identifier.</summary>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
            <param name="paramName">Parameter name. Default: "rating_method"</param>
            <param name="paramValue">Parameter value. Default: "score_single"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSampleIdentifierObjectInfo(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Retrieve information about an object of a sample identifier.</summary>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
            <param name="objectIdx">Index of the object for which information is retrieved.</param>
            <param name="infoName">Define, for which kind of object information is retrieved. Default: "num_training_objects"</param>
            <param name="infoValue">Information about the object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetSampleIdentifierObjectInfo(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Define a name or a description for an object of a sample identifier.</summary>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
            <param name="objectIdx">Index of the object for which information is set.</param>
            <param name="infoName">Define, for which kind of object information is set. Default: "training_object_name"</param>
            <param name="infoValue">Information about the object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RemoveSampleIdentifierTrainingData(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Remove training data from a sample identifier.  </summary>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
            <param name="objectIdx">Index of the training object, from which samples should be removed.</param>
            <param name="objectSampleIdx">Index of the training sample that should be removed.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RemoveSampleIdentifierPreparationData(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Remove preparation data from a sample identifier.  </summary>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
            <param name="objectIdx">Index of the preparation object, of which samples should be removed.</param>
            <param name="objectSampleIdx">Index of the preparation sample that should be removed.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TrainSampleIdentifier(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Train a sample identifier.  </summary>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
            <param name="paramName">Parameter name. Default: []</param>
            <param name="paramValue">Parameter value. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddSampleIdentifierTrainingData(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add training data to an existing sample identifier. </summary>
            <param name="sampleImage">Image that shows an object.</param>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
            <param name="objectIdx">Index of the object visible in the SampleImage.</param>
            <param name="genParamName">Generic parameter name. Default: []</param>
            <param name="genParamValue">Generic parameter value. Default: []</param>
            <param name="objectSampleIdx">Index of the object sample.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PrepareSampleIdentifier(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Adapt the internal data structure of a sample identifier to the objects to be identified.  </summary>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
            <param name="removePreparationData">Indicates if the preparation data should be removed. Default: "true"</param>
            <param name="genParamName">Generic parameter name. Default: []</param>
            <param name="genParamValue">Generic parameter value. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddSampleIdentifierPreparationData(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add preparation data to an existing sample identifier. </summary>
            <param name="sampleImage">Image that shows an object.</param>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
            <param name="objectIdx">Index of the object visible in the SampleImage. Default: "unknown"</param>
            <param name="genParamName">Generic parameter name. Default: []</param>
            <param name="genParamValue">Generic parameter value. Default: []</param>
            <param name="objectSampleIdx">Index of the object sample.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateSampleIdentifier(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a new sample identifier.</summary>
            <param name="paramName">Parameter name. Default: []</param>
            <param name="paramValue">Parameter value. Default: []</param>
            <param name="sampleIdentifier">Handle of the sample identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeShapeModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized shape model.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadShapeModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a shape model from a file.</summary>
            <param name="fileName">File name.</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeShapeModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a shape model.</summary>
            <param name="modelID">Handle of the model.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteShapeModel(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a shape model to a file.</summary>
            <param name="modelID">Handle of the model.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllShapeModels">
            <summary>Free the memory of all shape models.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearShapeModel(HalconDotNet.HTuple)">
            <summary>Free the memory of a shape model.</summary>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetShapeModelContours(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Return the contour representation of a shape model.</summary>
            <param name="modelContours">Contour representation of the shape model.</param>
            <param name="modelID">Handle of the model.</param>
            <param name="level">Pyramid level for which the contour representation should be returned. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DetermineShapeModelParams(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Determine the parameters of a shape model.</summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="scaleMin">Minimum scale of the model. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the model. Default: 1.1</param>
            <param name="optimization">Kind of optimization. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="parameters">Parameters to be determined automatically. Default: "all"</param>
            <param name="parameterName">Name of the automatically determined parameter.</param>
            <param name="parameterValue">Value of the automatically determined parameter.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetShapeModelParams(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the parameters of a shape model.</summary>
            <param name="modelID">Handle of the model.</param>
            <param name="numLevels">Number of pyramid levels.</param>
            <param name="angleStart">Smallest rotation of the pattern.</param>
            <param name="angleExtent">Extent of the rotation angles.</param>
            <param name="angleStep">Step length of the angles (resolution).</param>
            <param name="scaleMin">Minimum scale of the pattern.</param>
            <param name="scaleMax">Maximum scale of the pattern.</param>
            <param name="scaleStep">Scale step length (resolution).</param>
            <param name="metric">Match metric.</param>
            <param name="minContrast">Minimum contrast of the objects in the search images.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetShapeModelOrigin(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the origin (reference point) of a shape model.</summary>
            <param name="modelID">Handle of the model.</param>
            <param name="row">Row coordinate of the origin of the shape model.</param>
            <param name="column">Column coordinate of the origin of the shape model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetShapeModelOrigin(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the origin (reference point) of a shape model.</summary>
            <param name="modelID">Handle of the model.</param>
            <param name="row">Row coordinate of the origin of the shape model.</param>
            <param name="column">Column coordinate of the origin of the shape model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindAnisoShapeModels(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find the best matches of multiple anisotropic scale invariant shape models.</summary>
            <param name="image">Input image in which the models should be found.</param>
            <param name="modelIDs">Handle of the models.</param>
            <param name="angleStart">Smallest rotation of the models. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the models in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the models in the row direction. Default: 1.1</param>
            <param name="scaleCMin">Minimum scale of the models in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the models in the column direction. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the models to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the models to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the models.</param>
            <param name="column">Column coordinate of the found instances of the models.</param>
            <param name="angle">Rotation angle of the found instances of the models.</param>
            <param name="scaleR">Scale of the found instances of the models in the row direction.</param>
            <param name="scaleC">Scale of the found instances of the models in the column direction.</param>
            <param name="score">Score of the found instances of the models.</param>
            <param name="model">Index of the found instances of the models.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindScaledShapeModels(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find the best matches of multiple scale invariant shape models.</summary>
            <param name="image">Input image in which the models should be found.</param>
            <param name="modelIDs">Handle of the models.</param>
            <param name="angleStart">Smallest rotation of the models. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleMin">Minimum scale of the models. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the models. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the models to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the models to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the models.</param>
            <param name="column">Column coordinate of the found instances of the models.</param>
            <param name="angle">Rotation angle of the found instances of the models.</param>
            <param name="scale">Scale of the found instances of the models.</param>
            <param name="score">Score of the found instances of the models.</param>
            <param name="model">Index of the found instances of the models.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindShapeModels(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find the best matches of multiple shape models.</summary>
            <param name="image">Input image in which the models should be found.</param>
            <param name="modelIDs">Handle of the models.</param>
            <param name="angleStart">Smallest rotation of the models. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the models to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the models to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the models.</param>
            <param name="column">Column coordinate of the found instances of the models.</param>
            <param name="angle">Rotation angle of the found instances of the models.</param>
            <param name="score">Score of the found instances of the models.</param>
            <param name="model">Index of the found instances of the models.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindAnisoShapeModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find the best matches of an anisotropic scale invariant shape model in an image.</summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the model in the row direction. Default: 1.1</param>
            <param name="scaleCMin">Minimum scale of the model in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the model in the column direction. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="scaleR">Scale of the found instances of the model in the row direction.</param>
            <param name="scaleC">Scale of the found instances of the model in the column direction.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindScaledShapeModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find the best matches of a scale invariant shape model in an image.</summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleMin">Minimum scale of the model. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the model. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="scale">Scale of the found instances of the model.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindShapeModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find the best matches of a shape model in an image.</summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetShapeModelMetric(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the metric of a shape model that was created from XLD contours.</summary>
            <param name="image">Input image used for the determination of the polarity.</param>
            <param name="modelID">Handle of the model.</param>
            <param name="homMat2D">Transformation matrix.</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetShapeModelParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set selected parameters of the shape model.</summary>
            <param name="modelID">Handle of the model.</param>
            <param name="genParamNames">Parameter names.</param>
            <param name="genParamValues">Parameter values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateAnisoShapeModelXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Prepare a shape model for anisotropic scale invariant matching from XLD contours.</summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.1</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.1</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateScaledShapeModelXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Prepare a shape model for scale invariant matching from XLD contours.</summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleMin">Minimum scale of the pattern. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the pattern. Default: 1.1</param>
            <param name="scaleStep">Scale step length (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateShapeModelXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Prepare a shape model for matching from XLD contours.</summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateAnisoShapeModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Prepare a shape model for anisotropic scale invariant matching.</summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.1</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.1</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateScaledShapeModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Prepare a shape model for scale invariant matching.</summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleMin">Minimum scale of the pattern. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the pattern. Default: 1.1</param>
            <param name="scaleStep">Scale step length (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateShapeModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Prepare a shape model for matching.</summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InspectShapeModel(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create the representation of a shape model.</summary>
            <param name="image">Input image.</param>
            <param name="modelImages">Image pyramid of the input image</param>
            <param name="modelRegions">Model region pyramid</param>
            <param name="numLevels">Number of pyramid levels. Default: 4</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the image and optionally minimum size of the object parts. Default: 30</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllDescriptorModels">
            <summary>Free the memory of all descriptor models in RAM.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearDescriptorModel(HalconDotNet.HTuple)">
            <summary>Free the memory of a descriptor model.</summary>
            <param name="modelID">Handle of the desicriptor model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeDescriptorModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a descriptor model.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeDescriptorModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a descriptor model.</summary>
            <param name="modelID">Handle of a model to be saved.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadDescriptorModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a descriptor model from a file.</summary>
            <param name="fileName">File name.</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteDescriptorModel(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a descriptor model to a file.</summary>
            <param name="modelID">Handle of a model to be saved.</param>
            <param name="fileName">The path and filename of the model to be saved.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindCalibDescriptorModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find the best matches of a calibrated descriptor model in an image and return their 3D pose.</summary>
            <param name="image">Input image where the model should be found.</param>
            <param name="modelID">The handle to the descriptor model.</param>
            <param name="detectorParamName">The detector's parameter names. Default: []</param>
            <param name="detectorParamValue">Values of the detector's parameters. Default: []</param>
            <param name="descriptorParamName">The descriptor's parameter names. Default: []</param>
            <param name="descriptorParamValue">Values of the descriptor's parameters. Default: []</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.2</param>
            <param name="numMatches">Maximal number of found instances. Default: 1</param>
            <param name="camParam">Camera parameter (inner orientation) obtained from camera calibration.</param>
            <param name="scoreType">Score type to be evaluated in Score. Default: "num_points"</param>
            <param name="pose">3D pose of the object.</param>
            <param name="score">Score of the found instances according to the ScoreType input.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindUncalibDescriptorModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find the best matches of a descriptor model in an image.</summary>
            <param name="image">Input image where the model should be found.</param>
            <param name="modelID">The handle to the descriptor model.</param>
            <param name="detectorParamName">The detector's parameter names. Default: []</param>
            <param name="detectorParamValue">Values of the detector's parameters. Default: []</param>
            <param name="descriptorParamName">The descriptor's parameter names. Default: []</param>
            <param name="descriptorParamValue">Values of the descriptor's parameters. Default: []</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.2</param>
            <param name="numMatches">Maximal number of found instances. Default: 1</param>
            <param name="scoreType">Score type to be evaluated in Score. Default: "num_points"</param>
            <param name="homMat2D">Homography between model and found instance.</param>
            <param name="score">Score of the found instances according to the ScoreType input.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDescriptorModelPoints(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Query the interest points of the descriptor model or the last processed search image.</summary>
            <param name="modelID">The handle to the descriptor model.</param>
            <param name="set">Set of interest points. Default: "model"</param>
            <param name="subset">Subset of interest points. Default: "all"</param>
            <param name="row">Row coordinates of interest points.</param>
            <param name="column">Column coordinates of interest points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDescriptorModelParams(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the parameters of a descriptor model.</summary>
            <param name="modelID">The object handle to the descriptor model.</param>
            <param name="detectorType">The type of the detector.</param>
            <param name="detectorParamName">The detectors parameter names.</param>
            <param name="detectorParamValue">Values of the detectors parameters.</param>
            <param name="descriptorParamName">The descriptors parameter names.</param>
            <param name="descriptorParamValue">Values of the descriptors parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateCalibDescriptorModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a descriptor model for calibrated perspective matching.</summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="camParam">The parameters of the internal orientation of the camera.</param>
            <param name="referencePose">The reference pose of the object in the reference image.</param>
            <param name="detectorType">The type of the detector. Default: "lepetit"</param>
            <param name="detectorParamName">The detector's parameter names. Default: []</param>
            <param name="detectorParamValue">Values of the detector's parameters. Default: []</param>
            <param name="descriptorParamName">The descriptor's parameter names. Default: []</param>
            <param name="descriptorParamValue">Values of the descriptor's parameters. Default: []</param>
            <param name="seed">The seed for the random number generator. Default: 42</param>
            <param name="modelID">The handle to the descriptor model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateUncalibDescriptorModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Prepare a descriptor model for interest point matching.</summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="detectorType">The type of the detector. Default: "lepetit"</param>
            <param name="detectorParamName">The detector's parameter names. Default: []</param>
            <param name="detectorParamValue">Values of the detector's parameters. Default: []</param>
            <param name="descriptorParamName">The descriptor's parameter names. Default: []</param>
            <param name="descriptorParamValue">Values of the descriptor's parameters. Default: []</param>
            <param name="seed">The seed for the random number generator. Default: 42</param>
            <param name="modelID">The handle to the descriptor model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDescriptorModelResults(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query alphanumerical results that were accumulated during descriptor-based matching.</summary>
            <param name="modelID">Handle of a descriptor model.</param>
            <param name="objectID">Handle of the object for which the results are queried. Default: "all"</param>
            <param name="resultNames">Name of the results to be queried. Default: "num_points"</param>
            <param name="results">Returned results.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDescriptorModelOrigin(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the origin of a descriptor model.</summary>
            <param name="modelID">Handle of a descriptor model.</param>
            <param name="row">Position of origin in row direction.</param>
            <param name="column">Position of origin in column direction.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetDescriptorModelOrigin(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Sets the origin of a descriptor model.</summary>
            <param name="modelID">Handle of a descriptor model.</param>
            <param name="row">Translation of origin in row direction. Default: 0</param>
            <param name="column">Translation of origin in column direction. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDeformableModelOrigin(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the origin (reference point) of a deformable model.</summary>
            <param name="modelID">Handle of the model.</param>
            <param name="row">Row coordinate of the origin of the deformable model.</param>
            <param name="column">Column coordinate of the origin of the deformable model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetDeformableModelOrigin(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the origin (reference point) of a deformable model.</summary>
            <param name="modelID">Handle of the model.</param>
            <param name="row">Row coordinate of the origin of the deformable model.</param>
            <param name="column">Column coordinate of the origin of the deformable model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetDeformableModelParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set selected parameters of the deformable model.</summary>
            <param name="modelID">Handle of the model.</param>
            <param name="genParamNames">Parameter names.</param>
            <param name="genParamValues">Parameter values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDeformableModelParams(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the parameters of a deformable model.</summary>
            <param name="modelID">Handle of the model.</param>
            <param name="genParamNames">Names of the generic parameters that are to be queried for the deformable model. Default: "angle_start"</param>
            <param name="genParamValues">Values of the generic parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDeformableModelContours(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Return the contour representation of a deformable model.</summary>
            <param name="modelContours">Contour representation of the deformable model.</param>
            <param name="modelID">Handle of the model.</param>
            <param name="level">Pyramid level for which the contour representation should be returned. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DetermineDeformableModelParams(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Determine the parameters of a deformable model.</summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="scaleMin">Minimum scale of the model. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the model. Default: 1.1</param>
            <param name="optimization">Kind of optimization. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The general parameter names. Default: []</param>
            <param name="paramValue">Values of the general parameter. Default: []</param>
            <param name="parameters">Parameters to be determined automatically. Default: "all"</param>
            <param name="parameterName">Name of the automatically determined parameter.</param>
            <param name="parameterValue">Value of the automatically determined parameter.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeDeformableModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a deformable model.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeDeformableModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a deformable model.</summary>
            <param name="modelID">Handle of a model to be saved.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadDeformableModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a deformable model from a file.</summary>
            <param name="fileName">File name.</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteDeformableModel(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a deformable model to a file.</summary>
            <param name="modelID">Handle of a model to be saved.</param>
            <param name="fileName">The path and filename of the model to be saved.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllDeformableModels">
            <summary>Free the memory of all deformable models.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearDeformableModel(HalconDotNet.HTuple)">
            <summary>Free the memory of a deformable model.</summary>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindLocalDeformableModel(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find the best matches of a local deformable model in an image.</summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="imageRectified">Rectified image of the found model.</param>
            <param name="vectorField">Vector field of the rectification transformation.</param>
            <param name="deformedContours">Contours of the found instances of the model.</param>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleCMin">Minimum scale of the model in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the model in column direction. Default: 1.0</param>
            <param name="minScore">Minumum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 1.0</param>
            <param name="numLevels">Number of pyramid levels used in the matching. Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="resultType">Switch for requested iconic result. Default: []</param>
            <param name="paramName">The general parameter names. Default: []</param>
            <param name="paramValue">Values of the general parameters. Default: []</param>
            <param name="score">Scores of the found instances of the model.</param>
            <param name="row">Row coordinates of the found instances of the model.</param>
            <param name="column">Column coordinates of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindPlanarCalibDeformableModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find the best matches of a calibrated deformable model in an image and return their 3D pose.</summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleCMin">Minimum scale of the model in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the model in column direction. Default: 1.0</param>
            <param name="minScore">Minumum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 1.0</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="paramName">The general parameter names. Default: []</param>
            <param name="paramValue">Values of the general parameters. Default: []</param>
            <param name="pose">Pose of the object.</param>
            <param name="covPose">6 standard deviations or 36 covariances of the pose parameters.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindPlanarUncalibDeformableModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find the best matches of a planar projective invariant deformable model in an image.</summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleCMin">Minimum scale of the model in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the model in column direction. Default: 1.0</param>
            <param name="minScore">Minumum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 1.0</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="paramName">The general parameter names. Default: []</param>
            <param name="paramValue">Values of the general parameters. Default: []</param>
            <param name="homMat2D">Homographies between model and found instances.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetLocalDeformableModelMetric(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the metric of a local deformable model that was created from XLD contours.</summary>
            <param name="image">Input image used for the determination of the polarity.</param>
            <param name="vectorField">Vector field of the local deformation.</param>
            <param name="modelID">Handle of the model.</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetPlanarCalibDeformableModelMetric(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the metric of a planar calibrated deformable model that was created from XLD contours.</summary>
            <param name="image">Input image used for the determination of the polarity.</param>
            <param name="modelID">Handle of the model.</param>
            <param name="pose">Pose of the model in the image.</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetPlanarUncalibDeformableModelMetric(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the metric of a planar uncalibrated deformable model that was created from XLD contours.</summary>
            <param name="image">Input image used for the determination of the polarity.</param>
            <param name="modelID">Handle of the model.</param>
            <param name="homMat2D">Transformation matrix.</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateLocalDeformableModelXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Prepare a deformable model for local deformable matching from XLD contours.</summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameters. Default: []</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreatePlanarCalibDeformableModelXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Prepare a deformable model for planar calibrated matching from XLD contours.</summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="camParam">The parameters of the internal orientation of the camera.</param>
            <param name="referencePose">The reference pose of the object.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameter. Default: []</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreatePlanarUncalibDeformableModelXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Prepare a deformable model for planar uncalibrated matching from XLD contours.</summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameters. Default: []</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateLocalDeformableModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Creates a deformable model for local, deformable matching.</summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "none"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Thresholds or hysteresis thresholds for the contrast of the object in the template image. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameters. Default: []</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreatePlanarCalibDeformableModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a deformable model for calibrated perspective matching.</summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="camParam">The parameters of the internal orientation of the camera.</param>
            <param name="referencePose">The reference pose of the object in the reference image.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "none"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Thresholds or hysteresis thresholds for the contrast of the object in the template image. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The parameter names. Default: []</param>
            <param name="paramValue">Values of the parameters. Default: []</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreatePlanarUncalibDeformableModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Creates a deformable model for uncalibrated, perspective matching.</summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "none"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Thresholds or hysteresis thresholds for the contrast of the object in the template image. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameter. Default: []</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllNccModels">
            <summary>Free the memory of all NCC models.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearNccModel(HalconDotNet.HTuple)">
            <summary>Free the memory of an NCC model.</summary>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeNccModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize an NCC model.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeNccModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize an NCC model.</summary>
            <param name="modelID">Handle of the model.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadNccModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read an NCC model from a file.</summary>
            <param name="fileName">File name.</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteNccModel(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write an NCC model to a file.</summary>
            <param name="modelID">Handle of the model.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DetermineNccModelParams(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Determine the parameters of an NCC model.</summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="parameters">Parameters to be determined automatically. Default: "all"</param>
            <param name="parameterName">Name of the automatically determined parameter.</param>
            <param name="parameterValue">Value of the automatically determined parameter.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetNccModelParams(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the parameters of an NCC model.</summary>
            <param name="modelID">Handle of the model.</param>
            <param name="numLevels">Number of pyramid levels.</param>
            <param name="angleStart">Smallest rotation of the pattern.</param>
            <param name="angleExtent">Extent of the rotation angles.</param>
            <param name="angleStep">Step length of the angles (resolution).</param>
            <param name="metric">Match metric.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetNccModelOrigin(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the origin (reference point) of an NCC model.</summary>
            <param name="modelID">Handle of the model.</param>
            <param name="row">Row coordinate of the origin of the NCC model.</param>
            <param name="column">Column coordinate of the origin of the NCC model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetNccModelOrigin(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the origin (reference point) of an NCC model.</summary>
            <param name="modelID">Handle of the model.</param>
            <param name="row">Row coordinate of the origin of the NCC model.</param>
            <param name="column">Column coordinate of the origin of the NCC model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindNccModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find the best matches of an NCC model in an image.</summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="modelID">Handle of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.8</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy. Default: "true"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetNccModelParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set selected parameters of the NCC model.</summary>
            <param name="modelID">Handle of the model.</param>
            <param name="genParamNames">Parameter names.</param>
            <param name="genParamValues">Parameter values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateNccModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Prepare an NCC model for matching.</summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="modelID">Handle of the model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetFoundComponentModel(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the components of a found instance of a component model.</summary>
            <param name="foundComponents">Found components of the selected component model instance.</param>
            <param name="componentModelID">Handle of the component model.</param>
            <param name="modelStart">Start index of each found instance of the component model in the tuples describing the component matches.</param>
            <param name="modelEnd">End index of each found instance of the component model to the tuples describing the component matches.</param>
            <param name="rowComp">Row coordinate of the found component matches.</param>
            <param name="columnComp">Column coordinate of the found component matches.</param>
            <param name="angleComp">Rotation angle of the found component matches.</param>
            <param name="scoreComp">Score of the found component matches.</param>
            <param name="modelComp">Index of the found components.</param>
            <param name="modelMatch">Index of the found instance of the component model to be returned.</param>
            <param name="markOrientation">Mark the orientation of the components. Default: "false"</param>
            <param name="rowCompInst">Row coordinate of all components of the selected model instance.</param>
            <param name="columnCompInst">Column coordinate of all components of the selected model instance.</param>
            <param name="angleCompInst">Rotation angle of all components of the selected model instance.</param>
            <param name="scoreCompInst">Score of all components of the selected model instance.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindComponentModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find the best matches of a component model in an image.</summary>
            <param name="image">Input image in which the component model should be found.</param>
            <param name="componentModelID">Handle of the component model.</param>
            <param name="rootComponent">Index of the root component.</param>
            <param name="angleStartRoot">Smallest rotation of the root component Default: -0.39</param>
            <param name="angleExtentRoot">Extent of the rotation of the root component. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the component model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the component model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the component models to be found. Default: 0.5</param>
            <param name="ifRootNotFound">Behavior if the root component is missing. Default: "stop_search"</param>
            <param name="ifComponentNotFound">Behavior if a component is missing. Default: "prune_branch"</param>
            <param name="posePrediction">Pose prediction of components that are not found. Default: "none"</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found. Default: 0.5</param>
            <param name="subPixelComp">Subpixel accuracy of the component poses if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevelsComp">Number of pyramid levels for the components used in the matching (and lowest pyramid level to use if $|NumLevelsComp| = 2n$). Default: 0</param>
            <param name="greedinessComp">"Greediness" of the search heuristic for the components (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="modelStart">Start index of each found instance of the component model in the tuples describing the component matches.</param>
            <param name="modelEnd">End index of each found instance of the component model in the tuples describing the component matches.</param>
            <param name="score">Score of the found instances of the component model.</param>
            <param name="rowComp">Row coordinate of the found component matches.</param>
            <param name="columnComp">Column coordinate of the found component matches.</param>
            <param name="angleComp">Rotation angle of the found component matches.</param>
            <param name="scoreComp">Score of the found component matches.</param>
            <param name="modelComp">Index of the found components.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllComponentModels">
            <summary>Free the memory of all component models.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearComponentModel(HalconDotNet.HTuple)">
            <summary>Free the memory of a component model.</summary>
            <param name="componentModelID">Handle of the component model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetComponentModelTree(HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the search tree of a component model.</summary>
            <param name="tree">Search tree.</param>
            <param name="relations">Relations of components that are connected in the search tree.</param>
            <param name="componentModelID">Handle of the component model.</param>
            <param name="rootComponent">Index of the root component.</param>
            <param name="image">Image for which the tree is to be returned. Default: "model_image"</param>
            <param name="startNode">Component index of the start node of an arc in the search tree.</param>
            <param name="endNode">Component index of the end node of an arc in the search tree.</param>
            <param name="row">Row coordinate of the center of the rectangle representing the relation.</param>
            <param name="column">Column index of the center of the rectangle representing the relation.</param>
            <param name="phi">Orientation of the rectangle representing the relation (radians).</param>
            <param name="length1">First radius (half length) of the rectangle representing the relation.</param>
            <param name="length2">Second radius (half width) of the rectangle representing the relation.</param>
            <param name="angleStart">Smallest relative orientation angle.</param>
            <param name="angleExtent">Extent of the relative orientation angle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetComponentModelParams(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the parameters of a component model.</summary>
            <param name="componentModelID">Handle of the component model.</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found.</param>
            <param name="rootRanking">Ranking of the model components expressing their suitability to act as root component.</param>
            <param name="shapeModelIDs">Handles of the shape models of the individual model components.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeComponentModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized component model.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="componentModelID">Handle of the component model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeComponentModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a component model.</summary>
            <param name="componentModelID">Handle of the component model.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadComponentModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a component model from a file.</summary>
            <param name="fileName">File name.</param>
            <param name="componentModelID">Handle of the component model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteComponentModel(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a component model to a file.</summary>
            <param name="componentModelID">Handle of the component model.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateComponentModel(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Prepare a component model for matching based on explicitly specified components and relations.</summary>
            <param name="modelImage">Input image from which the shape models of the model components should be created.</param>
            <param name="componentRegions">Input regions from which the shape models of the model components should be created.</param>
            <param name="variationRow">Variation of the model components in row direction.</param>
            <param name="variationColumn">Variation of the model components in column direction.</param>
            <param name="variationAngle">Angle variation of the model components.</param>
            <param name="angleStart">Smallest rotation of the component model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation of the component model. Default: 0.79</param>
            <param name="contrastLowComp">Lower hysteresis threshold for the contrast of the components in the model image. Default: "auto"</param>
            <param name="contrastHighComp">Upper hysteresis threshold for the contrast of the components in the model image. Default: "auto"</param>
            <param name="minSizeComp">Minimum size of the contour regions in the model. Default: "auto"</param>
            <param name="minContrastComp">Minimum contrast of the components in the search images. Default: "auto"</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found. Default: 0.5</param>
            <param name="numLevelsComp">Maximum number of pyramid levels for the components. Default: "auto"</param>
            <param name="angleStepComp">Step length of the angles (resolution) for the components. Default: "auto"</param>
            <param name="optimizationComp">Kind of optimization for the components. Default: "auto"</param>
            <param name="metricComp">Match metric used for the components. Default: "use_polarity"</param>
            <param name="pregenerationComp">Complete pregeneration of the shape models for the components if equal to 'true'. Default: "false"</param>
            <param name="componentModelID">Handle of the component model.</param>
            <param name="rootRanking">Ranking of the model components expressing the suitability to act as the root component.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateTrainedComponentModel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Prepare a component model for matching based on trained components.</summary>
            <param name="componentTrainingID">Handle of the training result.</param>
            <param name="angleStart">Smallest rotation of the component model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation of the component model. Default: 0.79</param>
            <param name="minContrastComp">Minimum contrast of the components in the search images. Default: "auto"</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found. Default: 0.5</param>
            <param name="numLevelsComp">Maximum number of pyramid levels for the components. Default: "auto"</param>
            <param name="angleStepComp">Step length of the angles (resolution) for the components. Default: "auto"</param>
            <param name="optimizationComp">Kind of optimization for the components. Default: "auto"</param>
            <param name="metricComp">Match metric used for the components. Default: "use_polarity"</param>
            <param name="pregenerationComp">Complete pregeneration of the shape models for the components if equal to 'true'. Default: "false"</param>
            <param name="componentModelID">Handle of the component model.</param>
            <param name="rootRanking">Ranking of the model components expressing the suitability to act as the root component.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllTrainingComponents">
            <summary>Free the memory of all component training results.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearTrainingComponents(HalconDotNet.HTuple)">
            <summary>Free the memory of a component training result.</summary>
            <param name="componentTrainingID">Handle of the training result.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetComponentRelations(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the relations between the model components that are contained in a training result.</summary>
            <param name="relations">Region representation of the relations.</param>
            <param name="componentTrainingID">Handle of the training result.</param>
            <param name="referenceComponent">Index of reference component.</param>
            <param name="image">Image for which the component relations are to be returned. Default: "model_image"</param>
            <param name="row">Row coordinate of the center of the rectangle representing the relation.</param>
            <param name="column">Column index of the center of the rectangle representing the relation.</param>
            <param name="phi">Orientation of the rectangle representing the relation (radians).</param>
            <param name="length1">First radius (half length) of the rectangle representing the relation.</param>
            <param name="length2">Second radius (half width) of the rectangle representing the relation.</param>
            <param name="angleStart">Smallest relative orientation angle.</param>
            <param name="angleExtent">Extent of the relative orientation angles.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetTrainingComponents(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the initial or model components in a certain image.</summary>
            <param name="trainingComponents">Contour regions of the initial components or of the model components.</param>
            <param name="componentTrainingID">Handle of the training result.</param>
            <param name="components">Type of returned components or index of an initial component. Default: "model_components"</param>
            <param name="image">Image for which the components are to be returned. Default: "model_image"</param>
            <param name="markOrientation">Mark the orientation of the components. Default: "false"</param>
            <param name="row">Row coordinate of the found instances of all initial components or model components.</param>
            <param name="column">Column coordinate of the found instances of all initial components or model components.</param>
            <param name="angle">Rotation angle of the found instances of all components.</param>
            <param name="score">Score of the found instances of all components.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ModifyComponentRelations(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Modify the relations within a training result.</summary>
            <param name="componentTrainingID">Handle of the training result.</param>
            <param name="referenceComponent">Model component(s) relative to which the movement(s) should be modified. Default: "all"</param>
            <param name="toleranceComponent">Model component(s) of which the relative movement(s) should be modified. Default: "all"</param>
            <param name="positionTolerance">Change of the position relation in pixels.</param>
            <param name="angleTolerance">Change of the orientation relation in radians.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeTrainingComponents(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a component training result.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="componentTrainingID">Handle of the training result.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeTrainingComponents(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a component training result.</summary>
            <param name="componentTrainingID">Handle of the training result.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadTrainingComponents(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a component training result from a file.</summary>
            <param name="fileName">File name.</param>
            <param name="componentTrainingID">Handle of the training result.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteTrainingComponents(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a component training result to a file.</summary>
            <param name="componentTrainingID">Handle of the training result.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClusterModelComponents(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Adopt new parameters that are used to create the model components into the training result.</summary>
            <param name="trainingImages">Training images that were used for training the model components.</param>
            <param name="modelComponents">Contour regions of rigid model components.</param>
            <param name="componentTrainingID">Handle of the training result.</param>
            <param name="ambiguityCriterion">Criterion for solving the ambiguities. Default: "rigidity"</param>
            <param name="maxContourOverlap">Maximum contour overlap of the found initial components. Default: 0.2</param>
            <param name="clusterThreshold">Threshold for clustering the initial components. Default: 0.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InspectClusteredComponents(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Inspect the rigid model components obtained from the training.</summary>
            <param name="modelComponents">Contour regions of rigid model components.</param>
            <param name="componentTrainingID">Handle of the training result.</param>
            <param name="ambiguityCriterion">Criterion for solving the ambiguities. Default: "rigidity"</param>
            <param name="maxContourOverlap">Maximum contour overlap of the found initial components. Default: 0.2</param>
            <param name="clusterThreshold">Threshold for clustering the initial components. Default: 0.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TrainModelComponents(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Train components and relations for the component-based matching.</summary>
            <param name="modelImage">Input image from which the shape models of the initial components should be created.</param>
            <param name="initialComponents">Contour regions or enclosing regions of the initial components.</param>
            <param name="trainingImages">Training images that are used for training the model components.</param>
            <param name="modelComponents">Contour regions of rigid model components.</param>
            <param name="contrastLow">Lower hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="contrastHigh">Upper hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="minSize">Minimum size of connected contour regions. Default: "auto"</param>
            <param name="minScore">Minimum score of the instances of the initial components to be found. Default: 0.5</param>
            <param name="searchRowTol">Search tolerance in row direction. Default: -1</param>
            <param name="searchColumnTol">Search tolerance in column direction. Default: -1</param>
            <param name="searchAngleTol">Angle search tolerance. Default: -1</param>
            <param name="trainingEmphasis">Decision whether the training emphasis should lie on a fast computation or on a high robustness. Default: "speed"</param>
            <param name="ambiguityCriterion">Criterion for solving ambiguous matches of the initial components in the training images. Default: "rigidity"</param>
            <param name="maxContourOverlap">Maximum contour overlap of the found initial components in a training image. Default: 0.2</param>
            <param name="clusterThreshold">Threshold for clustering the initial components. Default: 0.5</param>
            <param name="componentTrainingID">Handle of the training result.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenInitialComponents(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Extract the initial components of a component model.</summary>
            <param name="modelImage">Input image from which the initial components should be extracted.</param>
            <param name="initialComponents">Contour regions of initial components.</param>
            <param name="contrastLow">Lower hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="contrastHigh">Upper hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="minSize">Minimum size of the initial components. Default: "auto"</param>
            <param name="mode">Type of automatic segmentation. Default: "connection"</param>
            <param name="genericName">Names of optional control parameters. Default: []</param>
            <param name="genericValue">Values of optional control parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDeformableSurfaceMatchingResult(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get details of a result from deformable surface based matching.</summary>
            <param name="deformableSurfaceMatchingResult">Handle of the deformable surface matching result.</param>
            <param name="resultName">Name of the result property. Default: "sampled_scene"</param>
            <param name="resultIndex">Index of the result property. Default: 0</param>
            <param name="resultValue">Value of the result property.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearDeformableSurfaceMatchingResult(HalconDotNet.HTuple)">
            <summary>Free the memory of a deformable surface matching result.</summary>
            <param name="deformableSurfaceMatchingResult">Handle of the deformable surface matching result.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearDeformableSurfaceModel(HalconDotNet.HTuple)">
            <summary>Free the memory of a deformable surface model.</summary>
            <param name="deformableSurfaceModel">Handle of the deformable surface model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeDeformableSurfaceModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a deformable surface model.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="deformableSurfaceModel">Handle of the deformable surface model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeDeformableSurfaceModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a deformable surface_model.</summary>
            <param name="deformableSurfaceModel">Handle of the deformable surface model.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadDeformableSurfaceModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a deformable surface model from a file.</summary>
            <param name="fileName">Name of the file to read.</param>
            <param name="deformableSurfaceModel">Handle of the read deformable surface model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteDeformableSurfaceModel(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a deformable surface model to a file.</summary>
            <param name="deformableSurfaceModel">Handle of the deformable surface model to write.</param>
            <param name="fileName">File name to write to.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RefineDeformableSurfaceModel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Refine the position and deformation of a deformable surface model in a 3D scene.</summary>
            <param name="deformableSurfaceModel">Handle of the deformable surface model.</param>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="relSamplingDistance">Relative sampling distance of the scene. Default: 0.05</param>
            <param name="initialDeformationObjectModel3D">Initial deformation of the 3D object model</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="score">Score of the refined model.</param>
            <param name="deformableSurfaceMatchingResult">Handle of the matching result.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindDeformableSurfaceModel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find the best match of a deformable surface model in a 3D scene.</summary>
            <param name="deformableSurfaceModel">Handle of the deformable surface model.</param>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="relSamplingDistance">Scene sampling distance relative to the diameter of the surface model. Default: 0.05</param>
            <param name="minScore">Minimum score of the returned match. Default: 0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="score">Score of the found instances of the surface model.</param>
            <param name="deformableSurfaceMatchingResult">Handle of the matching result.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDeformableSurfaceModelParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the parameters and properties of a deformable surface model.</summary>
            <param name="deformableSurfaceModel">Handle of the deformable surface model.</param>
            <param name="paramName">Name of the parameter. Default: "sampled_model"</param>
            <param name="paramValue">Value of the parameter.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddDeformableSurfaceModelReferencePoint(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a reference point to a deformable surface model.</summary>
            <param name="deformableSurfaceModel">Handle of the deformable surface model.</param>
            <param name="referencePointX">x-coordinates of a reference point.</param>
            <param name="referencePointY">x-coordinates of a reference point.</param>
            <param name="referencePointZ">x-coordinates of a reference point.</param>
            <param name="referencePointIndex">Index of the new reference point.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddDeformableSurfaceModelSample(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add a sample deformation to a deformable surface model</summary>
            <param name="deformableSurfaceModel">Handle of the deformable surface model.</param>
            <param name="objectModel3D">Handle of the deformed 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateDeformableSurfaceModel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create the data structure needed to perform deformable surface-based matching.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="relSamplingDistance">Sampling distance relative to the object's diameter Default: 0.05</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="deformableSurfaceModel">Handle of the deformable surface model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSurfaceMatchingResult(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get details of a result from surface based matching.</summary>
            <param name="surfaceMatchingResultID">Handle of the surface matching result.</param>
            <param name="resultName">Name of the result property. Default: "pose"</param>
            <param name="resultIndex">Index of the matching result, starting with 0. Default: 0</param>
            <param name="resultValue">Value of the result property.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllSurfaceMatchingResults">
            <summary>Free the memory of all surface matching results.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearSurfaceMatchingResult(HalconDotNet.HTuple)">
            <summary>Free the memory of a surface matching result.</summary>
            <param name="surfaceMatchingResultID">Handle of the surface matching result.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllSurfaceModels">
            <summary>Free the memory of all surface models.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearSurfaceModel(HalconDotNet.HTuple)">
            <summary>Free the memory of a surface model.</summary>
            <param name="surfaceModelID">Handle of the surface model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeSurfaceModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a surface model.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="surfaceModelID">Handle of the surface model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeSurfaceModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a surface_model.</summary>
            <param name="surfaceModelID">Handle of the surface model.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadSurfaceModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a surface model from a file.</summary>
            <param name="fileName">Name of the SFM file.</param>
            <param name="surfaceModelID">Handle of the read surface model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteSurfaceModel(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a surface model to a file.</summary>
            <param name="surfaceModelID">Handle of the surface model.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RefineSurfaceModelPose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Refine the pose of a surface model in a 3D scene.</summary>
            <param name="surfaceModelID">Handle of the surface model.</param>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="initialPose">Initial pose of the surface model in the scene.</param>
            <param name="minScore">Minimum score of the returned poses. Default: 0</param>
            <param name="returnResultHandle">Enable returning a result handle in SurfaceMatchingResultID. Default: "false"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="pose">3D pose of the surface model in the scene.</param>
            <param name="score">Score of the found instances of the model.</param>
            <param name="surfaceMatchingResultID">Handle of the matching result, if enabled in ReturnResultHandle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindSurfaceModel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find the best matches of a surface model in a 3D scene.</summary>
            <param name="surfaceModelID">Handle of the surface model.</param>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="relSamplingDistance">Scene sampling distance relative to the diameter of the surface model. Default: 0.05</param>
            <param name="keyPointFraction">Fraction of sampled scene points used as key points. Default: 0.2</param>
            <param name="minScore">Minimum score of the returned poses. Default: 0</param>
            <param name="returnResultHandle">Enable returning a result handle in SurfaceMatchingResultID. Default: "false"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="pose">3D pose of the surface model in the scene.</param>
            <param name="score">Score of the found instances of the surface model.</param>
            <param name="surfaceMatchingResultID">Handle of the matching result, if enabled in ReturnResultHandle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSurfaceModelParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the parameters and properties of a surface model.</summary>
            <param name="surfaceModelID">Handle of the surface model.</param>
            <param name="paramName">Name of the parameter. Default: "diameter"</param>
            <param name="paramValue">Value of the parameter.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateSurfaceModel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create the data structure needed to perform surface-based matching.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="relSamplingDistance">Sampling distance relative to the object's diameter Default: 0.03</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="surfaceModelID">Handle of the surface model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateCamPoseLookAtPoint(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a 3D camera pose from camera center and viewing direction.</summary>
            <param name="camPosX">X coordinate of the optical center of the camera.</param>
            <param name="camPosY">Y coordinate of the optical center of the camera.</param>
            <param name="camPosZ">Z coordinate of the optical center of the camera.</param>
            <param name="lookAtX">X coordinate of the 3D point to which the camera is directed.</param>
            <param name="lookAtY">Y coordinate of the 3D point to which the camera is directed.</param>
            <param name="lookAtZ">Z coordinate of the 3D point to which the camera is directed.</param>
            <param name="refPlaneNormal">Normal vector of the reference plane (points up). Default: "-y"</param>
            <param name="camRoll">Camera roll angle. Default: 0</param>
            <param name="camPose">3D camera pose.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ConvertPoint3dSpherToCart(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Convert spherical coordinates of a 3D point to Cartesian coordinates.</summary>
            <param name="longitude">Longitude of the 3D point.</param>
            <param name="latitude">Latitude of the 3D point.</param>
            <param name="radius">Radius of the 3D point.</param>
            <param name="equatPlaneNormal">Normal vector of the equatorial plane (points to the north pole). Default: "-y"</param>
            <param name="zeroMeridian">Coordinate axis in the equatorial plane that points to the zero meridian. Default: "-z"</param>
            <param name="x">X coordinate of the 3D point.</param>
            <param name="y">Y coordinate of the 3D point.</param>
            <param name="z">Z coordinate of the 3D point.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ConvertPoint3dCartToSpher(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Convert Cartesian coordinates of a 3D point to spherical coordinates.</summary>
            <param name="x">X coordinate of the 3D point.</param>
            <param name="y">Y coordinate of the 3D point.</param>
            <param name="z">Z coordinate of the 3D point.</param>
            <param name="equatPlaneNormal">Normal vector of the equatorial plane (points to the north pole). Default: "-y"</param>
            <param name="zeroMeridian">Coordinate axis in the equatorial plane that points to the zero meridian. Default: "-z"</param>
            <param name="longitude">Longitude of the 3D point.</param>
            <param name="latitude">Latitude of the 3D point.</param>
            <param name="radius">Radius of the 3D point.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllShapeModel3d">
            <summary>Free the memory of all 3D shape models.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearShapeModel3d(HalconDotNet.HTuple)">
            <summary>Free the memory of a 3D shape model.</summary>
            <param name="shapeModel3DID">Handle of the 3D shape model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeShapeModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized 3D shape model.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="shapeModel3DID">Handle of the 3D shape model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeShapeModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a 3D shape model.</summary>
            <param name="shapeModel3DID">Handle of the 3D shape model.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadShapeModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a 3D shape model from a file.</summary>
            <param name="fileName">File name.</param>
            <param name="shapeModel3DID">Handle of the 3D shape model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteShapeModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a 3D shape model to a file.</summary>
            <param name="shapeModel3DID">Handle of the 3D shape model.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TransPoseShapeModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Transform a pose that refers to the coordinate system of a 3D object model to a pose that refers to the reference coordinate system of a 3D shape model and vice versa.</summary>
            <param name="shapeModel3DID">Handle of the 3D shape model.</param>
            <param name="poseIn">Pose to be transformed in the source system.</param>
            <param name="transformation">Direction of the transformation. Default: "ref_to_model"</param>
            <param name="poseOut">Transformed 3D pose in the target system.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProjectShapeModel3d(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Project the edges of a 3D shape model into image coordinates.</summary>
            <param name="modelContours">Contour representation of the model view.</param>
            <param name="shapeModel3DID">Handle of the 3D shape model.</param>
            <param name="camParam">Internal camera parameters.</param>
            <param name="pose">3D pose of the 3D shape model in the world coordinate system.</param>
            <param name="hiddenSurfaceRemoval">Remove hidden surfaces? Default: "true"</param>
            <param name="minFaceAngle">Smallest face angle for which the edge is displayed Default: 0.523599</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetShapeModel3dContours(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the contour representation of a 3D shape model view.</summary>
            <param name="modelContours">Contour representation of the model view.</param>
            <param name="shapeModel3DID">Handle of the 3D shape model.</param>
            <param name="level">Pyramid level for which the contour representation should be returned. Default: 1</param>
            <param name="view">View for which the contour representation should be returned. Default: 1</param>
            <param name="viewPose">3D pose of the 3D shape model at the current view.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetShapeModel3dParams(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the parameters of a 3D shape model.</summary>
            <param name="shapeModel3DID">Handle of the 3D shape model.</param>
            <param name="genParamNames">Names of the generic parameters that are to be queried for the 3D shape model. Default: "num_levels_max"</param>
            <param name="genParamValues">Values of the generic parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindShapeModel3d(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find the best matches of a 3D shape model in an image.</summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="shapeModel3DID">Handle of the 3D shape model.</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.7</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="genParamNames">Names of (optional) parameters for controlling the behavior of the operator. Default: []</param>
            <param name="genParamValues">Values of the optional generic parameters. Default: []</param>
            <param name="pose">3D pose of the 3D shape model.</param>
            <param name="covPose">6 standard deviations or 36 covariances of the pose parameters.</param>
            <param name="score">Score of the found instances of the 3D shape model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateShapeModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Prepare a 3D object model for matching.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="camParam">Internal camera parameters.</param>
            <param name="refRotX">Reference orientation: Rotation around x-axis or x component of the Rodriguez vector (in radians or without unit). Default: 0</param>
            <param name="refRotY">Reference orientation: Rotation around y-axis or y component of the Rodriguez vector (in radians or without unit). Default: 0</param>
            <param name="refRotZ">Reference orientation: Rotation around z-axis or z component of the Rodriguez vector (in radians or without unit). Default: 0</param>
            <param name="orderOfRotation">Meaning of the rotation values of the reference orientation. Default: "gba"</param>
            <param name="longitudeMin">Minimum longitude of the model views. Default: -0.35</param>
            <param name="longitudeMax">Maximum longitude of the model views. Default: 0.35</param>
            <param name="latitudeMin">Minimum latitude of the model views. Default: -0.35</param>
            <param name="latitudeMax">Maximum latitude of the model views. Default: 0.35</param>
            <param name="camRollMin">Minimum camera roll angle of the model views. Default: -3.1416</param>
            <param name="camRollMax">Maximum camera roll angle of the model views. Default: 3.1416</param>
            <param name="distMin">Minimum camera-object-distance of the model views. Default: 0.3</param>
            <param name="distMax">Maximum camera-object-distance of the model views. Default: 0.4</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 10</param>
            <param name="genParamNames">Names of (optional) parameters for controlling the behavior of the operator. Default: []</param>
            <param name="genParamValues">Values of the optional generic parameters. Default: []</param>
            <param name="shapeModel3DID">Handle of the 3D shape model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SimplifyObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Simplify a triangulated 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model that should be simplified.</param>
            <param name="method">Method that should be used for simplification. Default: "preserve_point_coordinates"</param>
            <param name="amount">Degree of simplification (default: percentage of remaining model points).</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="simplifiedObjectModel3D">Handle of the simplified 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistanceObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the distances of the points of one 3D object model to another 3D object model.</summary>
            <param name="objectModel3DFrom">Handle of the source 3D object model.</param>
            <param name="objectModel3DTo">Handle of the target 3D object model.</param>
            <param name="pose">Pose of the source 3D object model in the target 3D object model. Default: []</param>
            <param name="maxDistance">Maximum distance of interest. Default: 0</param>
            <param name="genParamNames">Names of the generic input parameters. Default: []</param>
            <param name="genParamValues">Values of the generic input parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.UnionObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Combine several 3D object models to a new 3D object model.</summary>
            <param name="objectModels3D">Handle of input 3D object models.</param>
            <param name="method">Method used for the union. Default: "points_surface"</param>
            <param name="unionObjectModel3D">Handle of the resulting 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetObjectModel3dAttribMod(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set attributes of a 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="attribName">Name of the attributes.</param>
            <param name="attachExtAttribTo">Defines where extended attributes are attached to. Default: []</param>
            <param name="attribValues">Attribute values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetObjectModel3dAttrib(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Set attributes of a 3D object model.</summary>
            <param name="objectModel3D">Handle of the input 3D object model.</param>
            <param name="attribName">Name of the attributes.</param>
            <param name="attachExtAttribTo">Defines where extended attributes are attached to. Default: []</param>
            <param name="attribValues">Attribute values.</param>
            <param name="objectModel3DOut">Handle of the resulting 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenEmptyObjectModel3d(HalconDotNet.HTuple@)">
            <summary>Create an empty 3D object model.</summary>
            <param name="emptyObjectModel3D">Handle of the new 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SampleObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Sample a 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model to be sampled.</param>
            <param name="method">Selects between the different subsampling methods. Default: "fast"</param>
            <param name="sampleDistance">Sampling distance. Default: 0.05</param>
            <param name="genParamName">Names of the generic parameters that can be adjusted. Default: []</param>
            <param name="genParamValue">Values of the generic parameters that can be  adjusted. Default: []</param>
            <param name="sampledObjectModel3D">Handle of the 3D object model that contains the sampled points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RegisterObjectModel3dGlobal(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Improve the relative transformations between 3D object models based on  their overlaps.</summary>
            <param name="objectModels3D">Handles of several 3D object models.</param>
            <param name="homMats3D">Approximate relative transformations between  the 3D object models.</param>
            <param name="from">Type of interpretation for the transformations. Default: "global"</param>
            <param name="to">Target indices of the transformations if  From specifies the source indices, otherwise  the parameter must be empty. Default: []</param>
            <param name="genParamName">Names of the generic parameters that can be adjusted  for the global 3D object model registration. Default: []</param>
            <param name="genParamValue">Values of the generic parameters that can be adjusted  for the global 3D object model registration. Default: []</param>
            <param name="homMats3DOut">Resulting Transformations.</param>
            <param name="scores">Number of overlapping neighbors for each  3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RegisterObjectModel3dPair(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Search for a transformation between two 3D object models.</summary>
            <param name="objectModel3D1">Handle of the first 3D object model.</param>
            <param name="objectModel3D2">Handle of the second 3D object model.</param>
            <param name="method">Method for the registration. Default: "matching"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="pose">Pose to transform ObjectModel3D1 in  the reference frame of ObjectModel3D2.</param>
            <param name="score">Overlapping of the two 3D object models.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenObjectModel3dFromPoints(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a 3D object model that represents a point cloud from a set of 3D points.</summary>
            <param name="x">The x-coodinates of the points in the 3D point  cloud.</param>
            <param name="y">The y-coodinates of the points in the 3D point  cloud.</param>
            <param name="z">The z-coodinates of the points in the 3D point  cloud.</param>
            <param name="objectModel3D">Handle of the resulting 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenBoxObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a 3D object model that represents a box.</summary>
            <param name="pose">The pose that describes the position and  orientation of the box.  The pose has its origin in the center of the box.</param>
            <param name="lengthX">The length of the box along the x-axis.</param>
            <param name="lengthY">The length of the box along the y-axis.</param>
            <param name="lengthZ">The length of the box along the z-axis.</param>
            <param name="objectModel3D">Handle of the resulting 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenPlaneObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a 3D object model that represents a plane.</summary>
            <param name="pose">The center and the rotation of the plane.</param>
            <param name="XExtent">x coordinates specifying the extent of the plane.</param>
            <param name="YExtent">y coordinates specifying the extent of the plane.</param>
            <param name="objectModel3D">Handle of the resulting 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenSphereObjectModel3dCenter(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a 3D object model that represents a sphere from x,y,z coordinates.</summary>
            <param name="x">The x-coodinate of the center point of the sphere.</param>
            <param name="y">The y-coodinate of the center point of the sphere.</param>
            <param name="z">The z-coodinate of the center point of the sphere.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="objectModel3D">Handle of the resulting 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenSphereObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a 3D object model that represents a sphere.</summary>
            <param name="pose">The pose that describes the position of the sphere.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="objectModel3D">Handle of the resulting 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenCylinderObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a 3D object model that represents a cylinder.</summary>
            <param name="pose">The pose that describes the position and  orientation of the cylinder.</param>
            <param name="radius">The radius of the cylinder.</param>
            <param name="minExtent">The length of the cylinder in negative direction of the rotation axis.</param>
            <param name="maxExtent">The length of the cylinder in positive direction of the rotation axis.</param>
            <param name="objectModel3D">Handle of the resulting 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SmallestBoundingBoxObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the smallest bounding box around the points of a  3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="type">The method that is used to estimate the  smallest box. Default: "oriented"</param>
            <param name="pose">The pose that describes the position and  orientation of the box that is generated.  The pose has its origin in the center of the  box and is oriented such  that the x-axis is aligned with the longest  side of the box.</param>
            <param name="length1">The length of the longest side of the box.</param>
            <param name="length2">The length of the second longest side of the  box.</param>
            <param name="length3">The length of the third longest side of the  box.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SmallestSphereObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the smallest sphere around the points of a 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="centerPoint">x-, y-, and z-coordinates  describing the center point of the sphere.</param>
            <param name="radius">The estimated radius of the sphere.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.IntersectPlaneObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Intersect a 3D object model with a plane.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="plane">Pose of the plane. Default: [0,0,0,0,0,0,0]</param>
            <param name="objectModel3DIntersection">Handle of the 3D object model that describes  the intersection as a set of lines.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ConvexHullObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the convex hull of a 3D object model. </summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="objectModel3DConvexHull">Handle of the 3D object model that describes  the convex hull.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Select 3D object models from an array of 3D object models according  to global features.</summary>
            <param name="objectModel3D">Handles of the available 3D object models to  select.</param>
            <param name="feature">List of features a test is performed on. Default: "has_triangles"</param>
            <param name="operation">Logical operation to combine the features given in Feature. Default: "and"</param>
            <param name="minValue">Minimum value for the given feature. Default: 1</param>
            <param name="maxValue">Maximum value for the given feature. Default: 1</param>
            <param name="objectModel3DSelected">A subset of ObjectModel3D fulfilling  the given conditions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AreaObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the area of all faces of a 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="area">Calculated area.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MaxDiameterObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the maximal diameter of a 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="diameter">Calculated diameter.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MomentsObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculates the mean or the central moment of second order for a 3D object  model.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="momentsToCalculate">Moment to calculate. Default: "mean_points"</param>
            <param name="moments">Calculated moment.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.VolumeObjectModel3dRelativeToPlane(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the volume of a 3D object model relative to a plane.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="plane">Pose of the plane. Default: [0,0,0,0,0,0,0]</param>
            <param name="mode">Method to combine volumes laying  above and below the reference plane. Default: "signed"</param>
            <param name="useFaceOrientation">Decides whether the orientation of a face should  affect the resulting sign of the underlying  volume. Default: "true"</param>
            <param name="volume">Calculated volume.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReduceObjectModel3dByView(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Remove points from a 3D object model by projecting it to a virtual view  and removing all points outside of a given region.</summary>
            <param name="region">Region in the image plane.</param>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="camParam">Internal camera parameters.</param>
            <param name="pose">3D pose of the world coordinate system in camera coordinates.</param>
            <param name="objectModel3DReduced">Handle of the reduced 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ConnectionObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Determine the connected components of the 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="feature">Attribute used to calculate the connected  components. Default: "distance_3d"</param>
            <param name="value">Maximum value for the distance between two  connected components. Default: 1.0</param>
            <param name="objectModel3DConnected">Handle of the 3D object models that represent  the connected components.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectPointsObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Apply a threshold to an attribute of 3D object models.</summary>
            <param name="objectModel3D">Handle of the 3D object models.</param>
            <param name="attrib">Attributes the threshold is applied to. Default: "point_coord_z"</param>
            <param name="minValue">Minimum value for the attributes specified by  Attrib. Default: 0.5</param>
            <param name="maxValue">Maximum value for the attributes specified  by Attrib. Default: 1.0</param>
            <param name="objectModel3DThresholded">Handle of the reduced 3D object models.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDispObjectModel3dInfo(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the depth or the index of a displayed 3D object model.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row coordinates.</param>
            <param name="column">Column coordinates.</param>
            <param name="information">Information. Default: "depth"</param>
            <param name="value">Indices or the depth of the objects at (Row,Column).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RenderObjectModel3d(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Render 3D object models to get an image.</summary>
            <param name="image">Rendered scene.</param>
            <param name="objectModel3D">Handles of the 3D object models.</param>
            <param name="camParam">Camera parameters of the scene.</param>
            <param name="pose">3D poses of the objects.</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DispObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Display 3D object models.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="objectModel3D">Handles of the 3D object models.</param>
            <param name="camParam">Camera parameters of the scene. Default: []</param>
            <param name="pose">3D poses of the objects. Default: []</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CopyObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Copy a 3D object model.</summary>
            <param name="objectModel3D">Handle of the input 3D object model.</param>
            <param name="attributes">Attributes to be copyied. Default: "all"</param>
            <param name="copiedObjectModel3D">Handle of the copied 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PrepareObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Prepare a 3D object model for a certain operation.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="purpose">Purpose of the 3D object model. Default: "shape_based_matching_3d"</param>
            <param name="overwriteData">Specify if already existing data should be overwritten. Default: "true"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ObjectModel3dToXyz(HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Transform 3D points from a 3D object model to images.</summary>
            <param name="x">Image with the X-Coordinates of the 3D points.</param>
            <param name="y">Image with the Y-Coordinates of the 3D points.</param>
            <param name="z">Image with the Z-Coordinates of the 3D points.</param>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="type">Type of the conversion. Default: "cartesian"</param>
            <param name="camParam">Camera parameters.</param>
            <param name="pose">Pose of the 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.XyzToObjectModel3d(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Transform 3D points from images to a 3D object model.</summary>
            <param name="x">Image with the X-Coordinates and the ROI of the 3D points.</param>
            <param name="y">Image with the Y-Coordinates of the 3D points.</param>
            <param name="z">Image with the Z-Coordinates of the 3D points.</param>
            <param name="objectModel3D">Handle of the 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetObjectModel3dParams(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return attributes of 3D object models.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="paramName">Names of the generic attributes that are queried for the 3D object model. Default: "num_points"</param>
            <param name="paramValue">Values of the generic parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProjectObjectModel3d(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Project a 3D object model into image coordinates.</summary>
            <param name="modelContours">Projected model contours.</param>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="camParam">Internal camera parameters.</param>
            <param name="pose">3D pose of the world coordinate system in camera coordinates.</param>
            <param name="genParamName">Name of the generic parameter. Default: []</param>
            <param name="genParamValue">Value of the generic parameter. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RigidTransObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Apply a rigid 3D transformation to 3D object models.</summary>
            <param name="objectModel3D">Handles of the 3D object models.</param>
            <param name="pose">Poses.</param>
            <param name="objectModel3DRigidTrans">Handles of the transformed 3D object models.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProjectiveTransObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Apply an arbitrary projective 3D transformation to 3D object models.</summary>
            <param name="objectModel3D">Handles of the 3D object models.</param>
            <param name="homMat3D">Homogeneous projective transformation matrix.</param>
            <param name="objectModel3DProjectiveTrans">Handles of the transformed 3D object models.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AffineTransObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Apply an arbitrary affine 3D transformation to 3D object models.</summary>
            <param name="objectModel3D">Handles of the 3D object models.</param>
            <param name="homMat3D">Transformation matrices.</param>
            <param name="objectModel3DAffineTrans">Handles of the transformed 3D object models.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllObjectModel3d">
            <summary>Free the memory of all 3D object models.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearObjectModel3d(HalconDotNet.HTuple)">
            <summary>Free the memory of a 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized 3D object model.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="objectModel3D">Handle of the 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Writes a 3D object model to a file.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="fileType">Type of the file that is written. Default: "om3"</param>
            <param name="fileName">Name of the file that is written.</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Read a 3D object model from a file.</summary>
            <param name="fileName">Filename of the file to be read.</param>
            <param name="scale">Scale of the data in the file. Default: "m"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="status">Status information.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadObjectModel3dDxf(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Read a 3D object model from a DXF file.</summary>
            <param name="fileName">Name of the DXF file</param>
            <param name="scale">Scale or unit. Default: "m"</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the DXF input. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the DXF input. Default: []</param>
            <param name="objectModel3D">Handle of the read 3D object model.</param>
            <param name="dxfStatus">Status information.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadKalman(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Read the description file of a Kalman filter.</summary>
            <param name="fileName">Description file for a Kalman filter. Default: "kalman.init"</param>
            <param name="dimension">The dimensions of the state vector, the measurement vector and the controller vector.</param>
            <param name="model">The lined up matrices A, C, Q, possibly G and u, and if necessary L stored in row-major order.</param>
            <param name="measurement">The matrix R stored in row-major order.</param>
            <param name="prediction">The matrix P0@f$P_{0}$ (error covariance matrix of the initial state estimate) stored in row-major order and the initial state estimate x0@f$x_{0}$ lined up.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.UpdateKalman(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Read an update file of a Kalman filter.</summary>
            <param name="fileName">Update file for a Kalman filter. Default: "kalman.updt"</param>
            <param name="dimensionIn">The dimensions of the state vector, measurement vector and controller vector. Default: [3,1,0]</param>
            <param name="modelIn">The lined up matrices A,C,Q, possibly G and u, and if necessary L which all have been stored in row-major order. Default: [1.0,1.0,0.5,0.0,1.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,54.3,37.9,48.0,37.9,34.3,42.5,48.0,42.5,43.7]</param>
            <param name="measurementIn">The matrix R stored in row-major order. Default: [1,2]</param>
            <param name="dimensionOut">The dimensions of the state vector, measurement vector and controller vector.</param>
            <param name="modelOut">The lined up matrices A,C,Q, possibly G and u, and if necessary L which all have been stored in row-major order.</param>
            <param name="measurementOut">The matrix R stored in row-major order.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FilterKalman(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Estimate the current state of a system with the help of the Kalman filtering.</summary>
            <param name="dimension">The dimensions of the state vector, the measurement and the controller vector. Default: [3,1,0]</param>
            <param name="model">The lined up matrices A,C,Q, possibly G and u, and if necessary L which have been stored in row-major order. Default: [1.0,1.0,0.5,0.0,1.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,54.3,37.9,48.0,37.9,34.3,42.5,48.0,42.5,43.7]</param>
            <param name="measurement">The matrix R stored in row-major order and the measurement vector y lined up. Default: [1.2,1.0]</param>
            <param name="predictionIn">The matrix P*@f$P$ (the extrapolation-error covariances) stored in row-major order and the extrapolation vector x*@f$x$ lined up. Default: [0.0,0.0,0.0,0.0,180.5,0.0,0.0,0.0,100.0,0.0,100.0,0.0]</param>
            <param name="predictionOut">The matrix P* (the extrapolation-error covariances)stored in row-major order and the extrapolation vector x*@f$x$ lined up.</param>
            <param name="estimate">The matrix P~@f$P$ (the estimation-error covariances) stored in row-major order and the estimated state x~@f$x$ lined up.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryOperatorInfo(HalconDotNet.HTuple@)">
            <summary>Query slots concerning information with relation to the operator get_operator_info.</summary>
            <param name="slots">Slotnames of the operator get_operator_info.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryParamInfo(HalconDotNet.HTuple@)">
            <summary>Query slots of the online-information concerning the operator get_param_info.</summary>
            <param name="slots">Slotnames for the operator get_param_info.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetOperatorName(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get operators with the given string as a substring of their name.</summary>
            <param name="pattern">Substring of the seeked names (empty $ less than = greater than $ all names). Default: "info"</param>
            <param name="operatorNames">Detected operator names.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetParamTypes(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get default data type for the control parameters of a HALCON-operator.</summary>
            <param name="operatorName">Name of the operator. Default: "get_param_types"</param>
            <param name="inpCtrlParType">Default type of the input control parameters.</param>
            <param name="outpCtrlParType">Default type of the output control parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetParamNum(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get number of the different parameter classes of a HALCON-operator.</summary>
            <param name="operatorName">Name of the operator. Default: "get_param_num"</param>
            <param name="CName">Name of the called C-function.</param>
            <param name="inpObjPar">Number of the input object parameters.</param>
            <param name="outpObjPar">Number of the output object parameters.</param>
            <param name="inpCtrlPar">Number of the input control parameters.</param>
            <param name="outpCtrlPar">Number of the output control parameters.</param>
            <param name="type">System operator or user procedure.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetParamNames(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get the names of the parameters of a HALCON-operator.</summary>
            <param name="operatorName">Name of the operator. Default: "get_param_names"</param>
            <param name="inpObjPar">Names of the input objects.</param>
            <param name="outpObjPar">Names of the output objects.</param>
            <param name="inpCtrlPar">Names of the input control parameters.</param>
            <param name="outpCtrlPar">Names of the output control parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetOperatorInfo(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get information concerning a HALCON-operator.</summary>
            <param name="operatorName">Name of the operator on which more information is needed. Default: "get_operator_info"</param>
            <param name="slot">Desired information. Default: "abstract"</param>
            <param name="information">Information (empty if no information is available)</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetParamInfo(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get information concerning the operator parameters.</summary>
            <param name="operatorName">Name of the operator on whose parameter more information is needed. Default: "get_param_info"</param>
            <param name="paramName">Name of the parameter on which more information is needed. Default: "Slot"</param>
            <param name="slot">Desired information. Default: "description"</param>
            <param name="information">Information (empty in case there is no information available).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SearchOperator(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Search names of all operators assigned to one keyword.</summary>
            <param name="keyword">Keyword for which corresponding operators are searched. Default: "Information"</param>
            <param name="operatorNames">Operators whose slot 'keyword' contains the keyword.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetKeywords(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get keywords which are assigned to operators.</summary>
            <param name="operatorName">Substring in the names of those operators for which keywords are needed. Default: "get_keywords"</param>
            <param name="keywords">Keywords for the operators.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetChapterInfo(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get information concerning the chapters on operators.</summary>
            <param name="chapter">Operator class or subclass of interest. Default: ""</param>
            <param name="info">Operator classes (Chapter = ") or operator subclasses respectively operators.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ChannelsToImage(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Convert one-channel images into a multichannel image</summary>
            <param name="images">One-channel images to be combined into a one-channel image.</param>
            <param name="multiChannelImage">Multichannel image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ImageToChannels(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Convert a multichannel image into One-channel images</summary>
            <param name="multiChannelImage">Multichannel image to be decomposed.</param>
            <param name="images">Generated one-channel images.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Compose7(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Convert 7 images into a seven-channel image.</summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="image3">Input image 3.</param>
            <param name="image4">Input image 4.</param>
            <param name="image5">Input image 5.</param>
            <param name="image6">Input image 6.</param>
            <param name="image7">Input image 7.</param>
            <param name="multiChannelImage">Multichannel image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Compose6(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Convert 6 images into a six-channel image.</summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="image3">Input image 3.</param>
            <param name="image4">Input image 4.</param>
            <param name="image5">Input image 5.</param>
            <param name="image6">Input image 6.</param>
            <param name="multiChannelImage">Multichannel image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Compose5(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Convert 5 images into a five-channel image.</summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="image3">Input image 3.</param>
            <param name="image4">Input image 4.</param>
            <param name="image5">Input image 5.</param>
            <param name="multiChannelImage">Multichannel image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Compose4(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Convert 4 images into a four-channel image.</summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="image3">Input image 3.</param>
            <param name="image4">Input image 4.</param>
            <param name="multiChannelImage">Multichannel image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Compose3(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Convert 3 images into a three-channel image.</summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="image3">Input image 3.</param>
            <param name="multiChannelImage">Multichannel image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Compose2(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Convert two images into a two-channel image.</summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="multiChannelImage">Multichannel image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Decompose7(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@)">
            <summary>Convert a seven-channel image into seven images.</summary>
            <param name="multiChannelImage">Multichannel image.</param>
            <param name="image1">Output image 1.</param>
            <param name="image2">Output image 2.</param>
            <param name="image3">Output image 3.</param>
            <param name="image4">Output image 4.</param>
            <param name="image5">Output image 5.</param>
            <param name="image6">Output image 6.</param>
            <param name="image7">Output image 7.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Decompose6(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@)">
            <summary>Convert a six-channel image into six images.</summary>
            <param name="multiChannelImage">Multichannel image.</param>
            <param name="image1">Output image 1.</param>
            <param name="image2">Output image 2.</param>
            <param name="image3">Output image 3.</param>
            <param name="image4">Output image 4.</param>
            <param name="image5">Output image 5.</param>
            <param name="image6">Output image 6.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Decompose5(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@)">
            <summary>Convert a five-channel image into five images.</summary>
            <param name="multiChannelImage">Multichannel image.</param>
            <param name="image1">Output image 1.</param>
            <param name="image2">Output image 2.</param>
            <param name="image3">Output image 3.</param>
            <param name="image4">Output image 4.</param>
            <param name="image5">Output image 5.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Decompose4(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@)">
            <summary>Convert a four-channel image into four images.</summary>
            <param name="multiChannelImage">Multichannel image.</param>
            <param name="image1">Output image 1.</param>
            <param name="image2">Output image 2.</param>
            <param name="image3">Output image 3.</param>
            <param name="image4">Output image 4.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Decompose3(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@)">
            <summary>Convert a three-channel image into three images.</summary>
            <param name="multiChannelImage">Multichannel image.</param>
            <param name="image1">Output image 1.</param>
            <param name="image2">Output image 2.</param>
            <param name="image3">Output image 3.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Decompose2(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@)">
            <summary>Convert a two-channel image into two images.</summary>
            <param name="multiChannelImage">Multichannel image.</param>
            <param name="image1">Output image 1.</param>
            <param name="image2">Output image 2.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CountChannels(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Count channels of image.</summary>
            <param name="multiChannelImage">One- or multichannel image.</param>
            <param name="channels">Number of channels.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AppendChannel(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Append additional matrices (channels) to the image.</summary>
            <param name="multiChannelImage">Multichannel image.</param>
            <param name="image">Image to be appended.</param>
            <param name="imageExtended">Image appended by Image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AccessChannel(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Access a channel of a multichannel image.</summary>
            <param name="multiChannelImage">Multichannel image.</param>
            <param name="image">One channel of MultiChannelImage.</param>
            <param name="channel">Index of channel to be accessed. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TileImagesOffset(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Tile multiple image objects into a large image with explicit positioning information.</summary>
            <param name="images">Input images.</param>
            <param name="tiledImage">Tiled output image.</param>
            <param name="offsetRow">Row coordinate of the upper left corner of the input images in the output image. Default: 0</param>
            <param name="offsetCol">Column coordinate of the upper left corner of the input images in the output image. Default: 0</param>
            <param name="row1">Row coordinate of the upper left corner of the copied part of the respective input image. Default: -1</param>
            <param name="col1">Column coordinate of the upper left corner of the copied part of the respective input image. Default: -1</param>
            <param name="row2">Row coordinate of the lower right corner of the copied part of the respective input image. Default: -1</param>
            <param name="col2">Column coordinate of the lower right corner of the copied part of the respective input image. Default: -1</param>
            <param name="width">Width of the output image. Default: 512</param>
            <param name="height">Height of the output image. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TileImages(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Tile multiple image objects into a large image.</summary>
            <param name="images">Input images.</param>
            <param name="tiledImage">Tiled output image.</param>
            <param name="numColumns">Number of columns to use for the output image. Default: 1</param>
            <param name="tileOrder">Order of the input images in the output image. Default: "vertical"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TileChannels(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Tile multiple images into a large image.</summary>
            <param name="image">Input image.</param>
            <param name="tiledImage">Tiled output image.</param>
            <param name="numColumns">Number of columns to use for the output image. Default: 1</param>
            <param name="tileOrder">Order of the input images in the output image. Default: "vertical"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CropDomain(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Cut out of defined gray values.</summary>
            <param name="image">Input image.</param>
            <param name="imagePart">Image area.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CropRectangle1(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Cut out one or more rectangular image areas.</summary>
            <param name="image">Input image.</param>
            <param name="imagePart">Image area.</param>
            <param name="row1">Line index of upper left corner of image area. Default: 100</param>
            <param name="column1">Column index of upper left corner of image area. Default: 100</param>
            <param name="row2">Line index of lower right corner of image area. Default: 200</param>
            <param name="column2">Column index of lower right corner of image area. Default: 200</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CropPart(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Cut out one or more rectangular image areas.</summary>
            <param name="image">Input image.</param>
            <param name="imagePart">Image area.</param>
            <param name="row">Line index of upper left corner of image area. Default: 100</param>
            <param name="column">Column index of upper left corner of image area. Default: 100</param>
            <param name="width">Width of new image. Default: 128</param>
            <param name="height">Height of new image. Default: 128</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ChangeFormat(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Change image size.</summary>
            <param name="image">Input image.</param>
            <param name="imagePart">Image with new format.</param>
            <param name="width">Width of new image. Default: 512</param>
            <param name="height">Height of new image. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ChangeDomain(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Change definition domain of an image.</summary>
            <param name="image">Input image.</param>
            <param name="newDomain">New definition domain.</param>
            <param name="imageNew">Image with new definition domain.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddChannels(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Add gray values to regions.</summary>
            <param name="regions">Input regions (without pixel values).</param>
            <param name="image">Input image with pixel values for regions.</param>
            <param name="grayRegions">Output image(s) with regions and pixel values (one image per input region).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Rectangle1Domain(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Reduce the domain of an image to a rectangle.</summary>
            <param name="image">Input image.</param>
            <param name="imageReduced">Image with reduced definition domain.</param>
            <param name="row1">Line index of upper left corner of image area. Default: 100</param>
            <param name="column1">Column index of upper left corner of image area. Default: 100</param>
            <param name="row2">Line index of lower right corner of image area. Default: 200</param>
            <param name="column2">Column index of lower right corner of image area. Default: 200</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReduceDomain(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Reduce the domain of an image.</summary>
            <param name="image">Input image.</param>
            <param name="region">New definition domain.</param>
            <param name="imageReduced">Image with reduced definition domain.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FullDomain(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Expand the domain of an image to maximum.</summary>
            <param name="image">Input image.</param>
            <param name="imageFull">Image with maximum definition domain.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDomain(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Get the domain of an image.</summary>
            <param name="image">Input images.</param>
            <param name="domain">Definition domains of input images.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HoughCircles(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Centres of circles for a specific radius.</summary>
            <param name="regionIn">Binary edge image in which the circles are to be detected.</param>
            <param name="regionOut">Centres of those circles which are included in the edge image by Percent percent.</param>
            <param name="radius">Radius of the circle to be searched in the image. Default: 12</param>
            <param name="percent">Indicates the percentage (approximately) of the (ideal) circle which must be present in the edge image RegionIn. Default: 60</param>
            <param name="mode">The modus defines the position of the circle in question: 0 - the radius is equivalent to the outer border of the set pixels. 1 - the radius is equivalent to the centres of the circle lines´ pixels. 2 - both 0 and 1 (a little more fuzzy, but more reliable in contrast to circles set slightly differently, necessitates 50  </param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HoughCircleTrans(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Return the Hough-Transform for circles with a given radius.</summary>
            <param name="region">Binary edge image in which the circles are to be detected.</param>
            <param name="houghImage">Hough transform for circles with a given radius.</param>
            <param name="radius">Radius of the circle to be searched in the image. Default: 12</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HoughLinesDir(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Detect lines in edge images with the help of the Hough transform using local gradient direction and return them in normal form.</summary>
            <param name="imageDir">Image containing the edge direction. The edges are described by the image domain.</param>
            <param name="houghImage">Hough transform.</param>
            <param name="lines">Regions of the input image that contributed to the local maxima.</param>
            <param name="directionUncertainty">Uncertainty of edge direction (in degrees). Default: 2</param>
            <param name="angleResolution">Resolution in the angle area (in 1/degrees). Default: 4</param>
            <param name="smoothing">Smoothing filter for hough image. Default: "mean"</param>
            <param name="filterSize">Required smoothing filter size. Default: 5</param>
            <param name="threshold">Threshold value in the Hough image. Default: 100</param>
            <param name="angleGap">Minimum distance of two maxima in the Hough image (direction: angle). Default: 5</param>
            <param name="distGap">Minimum distance of two maxima in the Hough image (direction: distance). Default: 5</param>
            <param name="genLines">Create line regions if 'true'. Default: "true"</param>
            <param name="angle">Angles (in radians) of the detected lines' normal vectors.</param>
            <param name="dist">Distance of the detected lines from the origin.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HoughLineTransDir(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the Hough transform for lines using local gradient direction.</summary>
            <param name="imageDir">Image containing the edge direction. The edges must be described by the image domain.</param>
            <param name="houghImage">Hough transform.</param>
            <param name="directionUncertainty">Uncertainty of the edge direction (in degrees). Default: 2</param>
            <param name="angleResolution">Resolution in the angle area (in 1/degrees). Default: 4</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HoughLines(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Detect lines in edge images with the help of the Hough transform and returns it in HNF.</summary>
            <param name="regionIn">Binary edge image in which the lines are to be detected.</param>
            <param name="angleResolution">Adjusting the resolution in the angle area. Default: 4</param>
            <param name="threshold">Threshold value in the Hough image. Default: 100</param>
            <param name="angleGap">Minimal distance of two maxima in the Hough image (direction: angle). Default: 5</param>
            <param name="distGap">Minimal distance of two maxima in the Hough image (direction: distance). Default: 5</param>
            <param name="angle">Angles (in radians) of the detected lines' normal vectors.</param>
            <param name="dist">Distance of the detected lines from the origin.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HoughLineTrans(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Produce the Hough transform for lines within regions.</summary>
            <param name="region">Binary edge image in which lines are to be detected.</param>
            <param name="houghImage">Hough transform for lines.</param>
            <param name="angleResolution">Adjusting the resolution in the angle area. Default: 4</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectMatchingLines(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Select those lines from a set of lines (in HNF) which fit best into a region.</summary>
            <param name="regionIn">Region in which the lines are to be matched.</param>
            <param name="regionLines">Region array containing the matched lines.</param>
            <param name="angleIn">Angles (in radians) of the normal vectors of the input lines.</param>
            <param name="distIn">Distances of the input lines form the origin.</param>
            <param name="lineWidth">Widths of the lines. Default: 7</param>
            <param name="thresh">Threshold value for the number of line points in the region. Default: 100</param>
            <param name="angleOut">Angles (in radians) of the normal vectors of the selected lines.</param>
            <param name="distOut">Distances of the selected lines from the origin.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindRectificationGrid(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Segment the rectification grid region in the image.</summary>
            <param name="image">Input image.</param>
            <param name="gridRegion">Output region containing the rectification grid.</param>
            <param name="minContrast">Minimum contrast. Default: 8.0</param>
            <param name="radius">Radius of the circular structuring element. Default: 7.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateRectificationGrid(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate a PostScript file, which describes the rectification grid.</summary>
            <param name="width">Width of the checkered pattern in meters (without the two frames). Default: 0.17</param>
            <param name="numSquares">Number of squares per row and column. Default: 17</param>
            <param name="gridFile">File name of the PostScript file. Default: "rectification_grid.ps"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ConnectGridPoints(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Establish connections between the grid points of the rectification grid.</summary>
            <param name="image">Input image.</param>
            <param name="connectingLines">Output contours.</param>
            <param name="row">Row coordinates of the grid points.</param>
            <param name="column">Column coordinates of the grid points.</param>
            <param name="sigma">Size of the applied Gaussians. Default: 0.9</param>
            <param name="maxDist">Maximum distance of the connecting lines from the grid points. Default: 5.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenGridRectificationMap(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.</summary>
            <param name="image">Input image.</param>
            <param name="connectingLines">Input contours.</param>
            <param name="map">Image containing the mapping data.</param>
            <param name="meshes">Output contours.</param>
            <param name="gridSpacing">Distance of the grid points in the rectified image.</param>
            <param name="rotation">Rotation to be applied to the point grid. Default: "auto"</param>
            <param name="row">Row coordinates of the grid points.</param>
            <param name="column">Column coordinates of the grid points.</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenArbitraryDistortionMap(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate a projection map that describes the mapping between an arbitrarily distorted image and the rectified image.</summary>
            <param name="map">Image containing the mapping data.</param>
            <param name="gridSpacing">Distance of the grid points in the rectified image.</param>
            <param name="row">Row coordinates of the grid points in the distorted image.</param>
            <param name="column">Column coordinates of the grid points in the distorted image.</param>
            <param name="gridWidth">Width of the point grid (number of grid points).</param>
            <param name="imageWidth">Width of the images to be rectified.</param>
            <param name="imageHeight">Height of the images to be rectified.</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetWindowBackgroundImage(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Gets a copy of the background image of the HALCON window.</summary>
            <param name="backgroundImage">Copy of the background image.</param>
            <param name="windowHandle">HALCON Window ID.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetDrawingObjectCallback(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add a callback function to a drawing object.</summary>
            <param name="drawID">Handle of the drawing object.</param>
            <param name="drawObjectEvent">Events to be captured.</param>
            <param name="callbackFunction">Callback functions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DetachBackgroundFromWindow(HalconDotNet.HTuple)">
            <summary>Detach the background image from a HALCON window.</summary>
            <param name="windowHandle">Window handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AttachBackgroundToWindow(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Attach a background image to a HALCON window.</summary>
            <param name="image">Background image.</param>
            <param name="windowHandle">Window handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DetachDrawingObjectFromWindow(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Detach an existing drawing object from a HALCON window.</summary>
            <param name="windowHandle">Window Handle.</param>
            <param name="drawID">Handle of the drawing object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AttachDrawingObjectToWindow(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Attach an existing drawing object to a HALCON window.</summary>
            <param name="windowHandle">Window handle.</param>
            <param name="drawID">Handle of the drawing object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.UpdateWindowPose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Modify the pose of a 3D plot.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="lastRow">Row coordinate of the first point.</param>
            <param name="lastCol">Column coordinate of the first point.</param>
            <param name="currentRow">Row coordinate of the second point.</param>
            <param name="currentCol">Column coordinate of the second point.</param>
            <param name="mode">Navigation mode. Default: "rotate"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.UnprojectCoordinates(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculates image coordinates for a point in a 3D plot window.</summary>
            <param name="image">Displayed image.</param>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row coordinate in the window.</param>
            <param name="column">Column coordinate in the window.</param>
            <param name="imageRow">Row coordinate in the image.</param>
            <param name="imageColumn">Column coordinate in the image.</param>
            <param name="height">Height value.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetOsWindowHandle(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get the operating system window handle.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="OSWindowHandle">Operating system window handle.</param>
            <param name="OSDisplayHandle">Operating system display handle (under Unix-like systems only).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetWindowDc(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the device context of a virtual graphics window (Windows NT).</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="WINHDC">device context of WINHWnd.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.NewExternWindow(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a virtual graphics window under Windows.</summary>
            <param name="WINHWnd">Windows window handle of a previously created window.</param>
            <param name="row">Row coordinate of upper left corner. Default: 0</param>
            <param name="column">Column coordinate of upper left corner. Default: 0</param>
            <param name="width">Width of the window. Default: 512</param>
            <param name="height">Height of the window. Default: 512</param>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SlideImage(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Interactive output from two window buffers.</summary>
            <param name="windowHandleSource1">Logical window number of the "`upper window"'.</param>
            <param name="windowHandleSource2">Logical window number of the "`lower window"'.</param>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetWindowType(HalconDotNet.HTuple)">
            <summary>Specify a window type.</summary>
            <param name="windowType">Name of the window type which has to be set. Default: "X-Window"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetWindowExtents(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Modify position and size of a window.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row index of upper left corner in target position. Default: 0</param>
            <param name="column">Column index of upper left corner in target position. Default: 0</param>
            <param name="width">Width of the window. Default: 512</param>
            <param name="height">Height of the window. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetWindowAttr(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get window characteristics.</summary>
            <param name="attributeName">Name of the attribute that should be returned.</param>
            <param name="attributeValue">Attribute value.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetWindowAttr(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set window characteristics.</summary>
            <param name="attributeName">Name of the attribute that should be modified.</param>
            <param name="attributeValue">Value of the attribute that should be set.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryWindowType(HalconDotNet.HTuple@)">
            <summary>Query all available window types.</summary>
            <param name="windowTypes">Names of available window types.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OpenWindow(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Open a graphics window.</summary>
            <param name="row">Row index of upper left corner. Default: 0</param>
            <param name="column">Column index of upper left corner. Default: 0</param>
            <param name="width">Width of the window. Default: 256</param>
            <param name="height">Height of the window. Default: 256</param>
            <param name="fatherWindow">Logical number of the father window. To specify the display as father you may enter 'root' or 0. Default: 0</param>
            <param name="mode">Window mode. Default: "visible"</param>
            <param name="machine">Name of the computer on which you want to open the window. Otherwise the empty string. Default: ""</param>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OpenTextwindow(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Open a textual window.</summary>
            <param name="row">Row index of upper left corner. Default: 0</param>
            <param name="column">Column index of upper left corner. Default: 0</param>
            <param name="width">Window's width. Default: 256</param>
            <param name="height">Window's height. Default: 256</param>
            <param name="borderWidth">Window border's width. Default: 2</param>
            <param name="borderColor">Window border's color. Default: "white"</param>
            <param name="backgroundColor">Background color. Default: "black"</param>
            <param name="fatherWindow">Logical number of the father window. For the display as father you may specify 'root' or 0. Default: 0</param>
            <param name="mode">Window mode. Default: "visible"</param>
            <param name="machine">Computer name, where the window has to be opened or empty string. Default: ""</param>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MoveRectangle(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Copy inside an output window.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row1">Row index of upper left corner of the source rectangle. Default: 0</param>
            <param name="column1">Column index of upper left corner of the source rectangle. Default: 0</param>
            <param name="row2">Row index of lower right corner of the source rectangle. Default: 64</param>
            <param name="column2">Column index of lower right corner of the source rectangle. Default: 64</param>
            <param name="destRow">Row index of upper left corner of the target position. Default: 64</param>
            <param name="destColumn">Column index of upper left corner of the target position. Default: 64</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetWindowType(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the window type.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="windowType">Window type</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetWindowPointer3(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Access to a window's pixel data.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="imageRed">Pointer on red channel of pixel data.</param>
            <param name="imageGreen">Pointer on green channel of pixel data.</param>
            <param name="imageBlue">Pointer on blue channel of pixel data.</param>
            <param name="width">Length of an image line.</param>
            <param name="height">Number of image lines.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetWindowExtents(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Information about a window's size and position.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row index of upper left corner of the window.</param>
            <param name="column">Column index of upper left corner of the window.</param>
            <param name="width">Window width.</param>
            <param name="height">Window height.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DumpWindowImage(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Write the window content in an image object.</summary>
            <param name="image">Saved image.</param>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DumpWindow(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write the window content to a file.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="device">Name of the target device or of the graphic format. Default: "postscript"</param>
            <param name="fileName">File name (without extension). Default: "halcon_dump"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CopyRectangle(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Copy all pixels within rectangles between output windows.</summary>
            <param name="windowHandleSource">Number of the source window.</param>
            <param name="windowHandleDestination">Number of the destination window.</param>
            <param name="row1">Row index of upper left corner in the source window. Default: 0</param>
            <param name="column1">Column index of upper left corner in the source window. Default: 0</param>
            <param name="row2">Row index of lower right corner in the source window. Default: 128</param>
            <param name="column2">Column index of lower right corner in the source window. Default: 128</param>
            <param name="destRow">Row index of upper left corner in the target window. Default: 0</param>
            <param name="destColumn">Column index of upper left corner in the target window. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseWindow(HalconDotNet.HTuple)">
            <summary>Close an output window.</summary>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearWindow(HalconDotNet.HTuple)">
            <summary>Delete the contents of an output window.</summary>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearRectangle(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Delete a rectangle on the output window.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row1">Line index of upper left corner. Default: 10</param>
            <param name="column1">Column index of upper left corner. Default: 10</param>
            <param name="row2">Row index of lower right corner. Default: 118</param>
            <param name="column2">Column index of lower right corner. Default: 118</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteString(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Print text in a window.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="stringVal">Tuple of output values (all types). Default: "hello"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetTshape(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the shape of the text cursor.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="textCursor">Name of cursor shape. Default: "invisible"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetTposition(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the position of the text cursor.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row index of text cursor position. Default: 24</param>
            <param name="column">Column index of text cursor position. Default: 12</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadString(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a string in a text window.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="inString">Default string (visible before input). Default: ""</param>
            <param name="length">Maximum number of characters. Default: 32</param>
            <param name="outString">Read string.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadChar(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Read a character from a text window.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="charVal">Input character (if it is not a control character).</param>
            <param name="code">Code for input character.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.NewLine(HalconDotNet.HTuple)">
            <summary>Set the position of the text cursor to the beginning of the next line.</summary>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetTshape(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the shape of the text cursor.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="textCursor">Name of the current text cursor.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetTposition(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get cursor position.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row index of text cursor position.</param>
            <param name="column">Column index of text cursor position.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetFontExtents(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get the maximum size of all characters of a font.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="maxAscent">Maximum height above baseline.</param>
            <param name="maxDescent">Maximum extension below baseline.</param>
            <param name="maxWidth">Maximum character width.</param>
            <param name="maxHeight">Maximum character height.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetStringExtents(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get the spatial size of a string.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="values">Values to consider. Default: "test_string"</param>
            <param name="ascent">Maximum height above baseline.</param>
            <param name="descent">Maximum extension below baseline.</param>
            <param name="width">Text width.</param>
            <param name="height">Text height.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryFont(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query the available fonts.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="font">Tuple with available font names.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryTshape(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query all shapes available for text cursors.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="textCursor">Names of the available text cursors.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetFont(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the font used for text output.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="font">Name of new font.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetFont(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the current font.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="font">Name of the current font.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDisplayScene3dInfo(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the depth or the index of instances in a displayed 3D scene.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="scene3D">Handle of the 3D scene.</param>
            <param name="row">Row coordinates.</param>
            <param name="column">Column coordinates.</param>
            <param name="information">Information. Default: "depth"</param>
            <param name="value">Indices or the depth of the objects at (Row,Column).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetScene3dToWorldPose(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the pose of a 3D scene.</summary>
            <param name="scene3D">Handle of the 3D scene.</param>
            <param name="toWorldPose">New pose of the 3D scene.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetScene3dParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set parameters of a 3D scene.</summary>
            <param name="scene3D">Handle of the 3D scene.</param>
            <param name="genParamName">Names of the generic parameters. Default: "quality"</param>
            <param name="genParamValue">Values of the generic parameters. Default: "high"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetScene3dLightParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set parameters of a light in a 3D scene.</summary>
            <param name="scene3D">Handle of the 3D scene.</param>
            <param name="lightIndex">Index of the light source.</param>
            <param name="genParamName">Names of the generic parameters. Default: "ambient"</param>
            <param name="genParamValue">Values of the generic parameters. Default: [0.2,0.2,0.2]</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetScene3dInstancePose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the pose of an instance in a 3D scene.</summary>
            <param name="scene3D">Handle of the 3D scene.</param>
            <param name="instanceIndex">Index of the instance.</param>
            <param name="pose">New pose of the instance.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetScene3dInstanceParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set parameters of an instance in a 3D scene.</summary>
            <param name="scene3D">Handle of the 3D scene.</param>
            <param name="instanceIndex">Index of the instance.</param>
            <param name="genParamName">Names of the generic parameters. Default: "color"</param>
            <param name="genParamValue">Values of the generic parameters. Default: "green"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetScene3dCameraPose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the pose of a camera in a 3D scene.</summary>
            <param name="scene3D">Handle of the 3D scene.</param>
            <param name="cameraIndex">Index of the camera.</param>
            <param name="pose">New pose of the camera.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RenderScene3d(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Render an image of a 3D scene.</summary>
            <param name="image">Rendered 3D scene.</param>
            <param name="scene3D">Handle of the 3D scene.</param>
            <param name="cameraIndex">Index of the camera used to display the scene.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RemoveScene3dLight(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Remove a light from a 3D scene.</summary>
            <param name="scene3D">Handle of the 3D scene.</param>
            <param name="lightIndex">Light to remove.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RemoveScene3dInstance(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Remove an object instance from a 3D scene.</summary>
            <param name="scene3D">Handle of the 3D scene.</param>
            <param name="instanceIndex">Index of the instance to remove.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RemoveScene3dCamera(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Remove a camera from a 3D scene.</summary>
            <param name="scene3D">Handle of the 3D scene.</param>
            <param name="cameraIndex">Index of the camera to remove.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DisplayScene3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Display a 3D scene.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="scene3D">Handle of the 3D scene.</param>
            <param name="cameraIndex">Index of the camera used to display the scene.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddScene3dLight(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a light source to a 3D scene.</summary>
            <param name="scene3D">Handle of the 3D scene.</param>
            <param name="lightPosition">Position of the new light source. Default: [-100.0,-100.0,0.0]</param>
            <param name="lightKind">Type of the new light source. Default: "point_light"</param>
            <param name="lightIndex">Index of the new light source in the 3D scene.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddScene3dInstance(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add an instance of a 3D object model to a 3D scene.</summary>
            <param name="scene3D">Handle of the 3D scene.</param>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="pose">Pose of the 3D object model.</param>
            <param name="instanceIndex">Index of the new instance in the 3D scene.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddScene3dCamera(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Add a camera to a 3D scene.</summary>
            <param name="scene3D">Handle of the 3D scene.</param>
            <param name="cameraParam">Parameters of the new camera.</param>
            <param name="cameraIndex">Index of the new camera in the 3D scene.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearScene3d(HalconDotNet.HTuple)">
            <summary>Delete a 3D scene and free all allocated memory.</summary>
            <param name="scene3D">Handle of the 3D scene.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateScene3d(HalconDotNet.HTuple@)">
            <summary>Create the data structure that is needed to visualize collections of 3D objects.</summary>
            <param name="scene3D">Handle of the 3D scene.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetWindowParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get window parameters.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="param">Name of the parameter. Default: "save_depth_buffer"</param>
            <param name="value">Value of the parameter.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetWindowParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set window parameters.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="param">Name of the parameter. Default: "save_depth_buffer"</param>
            <param name="value">Value to be set. Default: "true"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetShape(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Define the region output shape.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="shape">Region output mode. Default: "original"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetRgb(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the color definition via RGB values.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="red">Red component of the color. Default: 255</param>
            <param name="green">Green component of the color. Default: 0</param>
            <param name="blue">Blue component of the color. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetPixel(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Define a color lookup table index.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="pixel">Color lookup table index. Default: 128</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetPartStyle(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Define an interpolation method for gray value output. </summary>
            <param name="windowHandle">Window_id.</param>
            <param name="style">Interpolation method for image output: 0 (fast, low quality) to 2 (slow, high quality). Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetPart(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Modify the displayed image part.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="row1">Row of the upper left corner of the chosen image part. Default: 0</param>
            <param name="column1">Column of the upper left corner of the chosen image part. Default: 0</param>
            <param name="row2">Row of the lower right corner of the chosen image part. Default: -1</param>
            <param name="column2">Column of the lower right corner of the chosen image part. Default: -1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetPaint(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Define the gray value output mode.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="mode">Output mode. Additional parameters possible. Default: "default"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetLineWidth(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Define the line width for region contour output.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="width">Line width for region output in contour mode. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetLineStyle(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Define a contour output pattern.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="style">Contour pattern. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetLineApprox(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Define the approximation error for contour display.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="approximation">Maximum deviation from the original contour. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetInsert(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Define the pixel output function.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="mode">Name of the display function. Default: "copy"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetHsi(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Define output colors (HSI-coded).</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="hue">Hue for region output. Default: 30</param>
            <param name="saturation">Saturation for region output. Default: 255</param>
            <param name="intensity">Intensity for region output. Default: 84</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetGray(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Define gray values for region output.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="grayValues">Gray values for region output. Default: 255</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetDraw(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Define the region fill mode.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="mode">Fill mode for region output. Default: "fill"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetComprise(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Define the image matrix output clipping.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="mode">Clipping mode for gray value output. Default: "object"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetColored(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set multiple output colors.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="numberOfColors">Number of output colors. Default: 12</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetColor(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set output color.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="color">Output color names. Default: "white"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetShape(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the current region output shape.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="displayShape">Current region output shape.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetRgb(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get the current color in RGB-coding.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="red">The current color's red value.</param>
            <param name="green">The current color's green value.</param>
            <param name="blue">The current color's blue value.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetPixel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the current color lookup table index.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="pixel">Index of the current color look-up table.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetPartStyle(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the current interpolation mode for gray value display.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="style">Interpolation mode for image display: 0 (fast, low quality) to 2 (slow, high quality).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetPart(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get the image part.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="row1">Row index of the image part's upper left corner.</param>
            <param name="column1">Column index of the image part's upper left corner.</param>
            <param name="row2">Row index of the image part's lower right corner.</param>
            <param name="column2">Column index of the image part's lower right corner.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetPaint(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the current display mode for gray values.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="mode">Name and parameter values of the current display mode.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetLineWidth(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the current line width for contour display.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="width">Current line width for contour display.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetLineStyle(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the current graphic mode for contours.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="style">Template for contour display.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetLineApprox(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the current approximation error for contour display.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="approximation">Current approximation error for contour display.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetInsert(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the current display mode.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="mode">Display mode.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetHsi(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get the HSI coding of the current color.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="hue">Hue (color value) of the current color.</param>
            <param name="saturation">Saturation of the current color.</param>
            <param name="intensity">Intensity of the current color.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDraw(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the current region fill mode.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="mode">Current region fill mode.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetComprise(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the output treatment of an image matrix.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="mode">Display mode for images.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryShape(HalconDotNet.HTuple@)">
            <summary>Query the region display modes.</summary>
            <param name="displayShape">region display mode names.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryPaint(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query the gray value display modes.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="mode">Gray value display mode names.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryLineWidth(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Query the possible line widths.</summary>
            <param name="min">Displayable minimum width.</param>
            <param name="max">Displayable maximum width.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryInsert(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query the possible graphic modes.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="mode">Display function name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryGray(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query the displayable gray values.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="grayval">Tuple of all displayable gray values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryColored(HalconDotNet.HTuple@)">
            <summary>Query the number of colors for color output.</summary>
            <param name="possibleNumberOfColors">Tuple of the possible numbers of colors.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryAllColors(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query all color names.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="colors">Color names.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryColor(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query all color names displayable in the window.</summary>
            <param name="windowHandle">Window_id.</param>
            <param name="colors">Color names.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetIcon(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Query the icon for region output</summary>
            <param name="icon">Icon for the regions center of gravity.</param>
            <param name="windowHandle">Window_id.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetIcon(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Icon definition for region output.</summary>
            <param name="icon">Icon for center of gravity.</param>
            <param name="windowHandle">Window_id.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DispRegion(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Displays regions in a window.</summary>
            <param name="dispRegions">Regions to display.</param>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DispRectangle2(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Displays arbitrarily oriented rectangles.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="centerRow">Row index of the center. Default: 48</param>
            <param name="centerCol">Column index of the center. Default: 64</param>
            <param name="phi">Orientation of rectangle in radians. Default: 0.0</param>
            <param name="length1">Half of the length of the longer side. Default: 48</param>
            <param name="length2">Half of the length of the shorter side. Default: 32</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DispRectangle1(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Display of rectangles aligned to the coordinate axes.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row1">Row index of the upper left corner. Default: 16</param>
            <param name="column1">Column index of the upper left corner. Default: 16</param>
            <param name="row2">Row index of the lower right corner. Default: 48</param>
            <param name="column2">Column index of the lower right corner. Default: 80</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DispPolygon(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Displays a polyline.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row index Default: [16,80,80]</param>
            <param name="column">Column index Default: [48,16,80]</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DispLine(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Draws lines in a window.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row1">Row index of the start. Default: 32.0</param>
            <param name="column1">Column index of the start. Default: 32.0</param>
            <param name="row2">Row index of end. Default: 64.0</param>
            <param name="column2">Column index of end. Default: 64.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DispCross(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Displays crosses in a window.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row coordinate of the center. Default: 32.0</param>
            <param name="column">Column coordinate of the center. Default: 32.0</param>
            <param name="size">Length of the bars. Default: 6.0</param>
            <param name="angle">Orientation. Default: 0.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DispImage(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Displays gray value images.</summary>
            <param name="image">Gray value image to display.</param>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DispChannel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Displays images with several channels.</summary>
            <param name="multichannelImage">Multichannel images to be displayed.</param>
            <param name="windowHandle">Window identifier.</param>
            <param name="channel">Number of channel or the numbers of the RGB-channels Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DispColor(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Displays a color (RGB) image</summary>
            <param name="colorImage">Color image to display.</param>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DispEllipse(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Displays ellipses.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="centerRow">Row index of center. Default: 64</param>
            <param name="centerCol">Column index of center. Default: 64</param>
            <param name="phi">Orientation of the ellipse in radians Default: 0.0</param>
            <param name="radius1">Radius of major axis. Default: 24.0</param>
            <param name="radius2">Radius of minor axis. Default: 14.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DispDistribution(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Displays a noise distribution.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="distribution">Gray value distribution (513 values).</param>
            <param name="row">Row index of center. Default: 256</param>
            <param name="column">Column index of center. Default: 256</param>
            <param name="scale">Size of display. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DispCircle(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Displays circles in a window.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row index of the center. Default: 64</param>
            <param name="column">Column index of the center. Default: 64</param>
            <param name="radius">Radius of the circle. Default: 64</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DispArrow(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Displays arrows in a window.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row1">Row index of the start. Default: 10.0</param>
            <param name="column1">Column index of the start. Default: 10.0</param>
            <param name="row2">Row index of the end. Default: 118.0</param>
            <param name="column2">Column index of the end. Default: 118.0</param>
            <param name="size">Size of the arrowhead. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DispArc(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Displays circular arcs in a window.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="centerRow">Row coordinate of center point. Default: 64</param>
            <param name="centerCol">Column coordinate of center point. Default: 64</param>
            <param name="angle">Angle between start and end of the arc (in radians). Default: 3.1415926</param>
            <param name="beginRow">Row coordinate of the start of the arc. Default: 32</param>
            <param name="beginCol">Column coordinate of the start of the arc. Default: 32</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DispObj(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Displays image objects (image, region, XLD).</summary>
            <param name="objectVal">Image object to be displayed.</param>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetMshape(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the current mouse pointer shape.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="cursor">Mouse pointer name. Default: "arrow"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetMshape(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query the current mouse pointer shape.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="cursor">Mouse pointer name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryMshape(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query all available mouse pointer shapes.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="shapeNames">Available mouse pointer names.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetMpositionSubPix(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Query the subpixel mouse position.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row coordinate of the mouse position in the window.</param>
            <param name="column">Column coordinate of the mouse position in the window.</param>
            <param name="button">Mouse button(s) pressed or 0.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetMposition(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Query the mouse position.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row coordinate of the mouse position in the window.</param>
            <param name="column">Column coordinate of the mouse position in the window.</param>
            <param name="button">Mouse button(s) pressed or 0.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetMbuttonSubPix(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Wait until a mouse button is pressed and get the subpixel mouse position.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row coordinate of the mouse position in the window.</param>
            <param name="column">Column coordinate of the mouse position in the window.</param>
            <param name="button">Mouse button(s) pressed.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetMbutton(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Wait until a mouse button is pressed.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row coordinate of the mouse position in the window.</param>
            <param name="column">Column coordinate of the mouse position in the window.</param>
            <param name="button">Mouse button(s) pressed.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteLut(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write look-up-table (lut) as file.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="fileName">File name (of file containing the look-up-table). Default: "/tmp/lut"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DispLut(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Graphical view of the look-up-table (lut).</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row of centre of the graphic. Default: 128</param>
            <param name="column">Column of centre of the graphic. Default: 128</param>
            <param name="scale">Scaling of the graphic. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryLut(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query all available look-up-tables (lut).</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="lookUpTable">Names of look-up-tables.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawLut(HalconDotNet.HTuple)">
            <summary>Manipulate look-up-table (lut) interactively.</summary>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetLutStyle(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get modification parameters of look-up-table (lut).</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="hue">Modification of color value.</param>
            <param name="saturation">Modification of saturation.</param>
            <param name="intensity">Modification of intensity.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetLutStyle(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Changing the look-up-table (lut).</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="hue">Modification of color value. Default: 0.0</param>
            <param name="saturation">Modification of saturation. Default: 1.5</param>
            <param name="intensity">Modification of intensity. Default: 1.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetLut(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get current look-up-table (lut).</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="lookUpTable">Name of look-up-table or tuple of RGB-values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetLut(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set "`look-up-table"' (lut).</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="lookUpTable">Name of look-up-table, values of look-up-table (RGB) or file name. Default: "default"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetFix(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get mode of fixing of current look-up-table (lut).</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="mode">Current Mode of fixing.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetFix(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set fixing of "`look-up-table"' (lut)</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="mode">Mode of fixing. Default: "true"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetFixedLut(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get fixing of "`look-up-table"' (lut) for "`real color images"'</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="mode">Mode of fixing.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetFixedLut(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Fix "`look-up-table"' (lut) for "`real color images"'.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="mode">Mode of fixing. Default: "true"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GnuplotPlotFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Plot a function using gnuplot.</summary>
            <param name="gnuplotFileID">Identifier for the gnuplot output stream.</param>
            <param name="function">Function to be plotted.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GnuplotPlotCtrl(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Plot control values using gnuplot.</summary>
            <param name="gnuplotFileID">Identifier for the gnuplot output stream.</param>
            <param name="values">Control values to be plotted (y-values).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GnuplotPlotImage(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Visualize images using gnuplot.</summary>
            <param name="image">Image to be plotted.</param>
            <param name="gnuplotFileID">Identifier for the gnuplot output stream.</param>
            <param name="samplesX">Number of samples in the x-direction. Default: 64</param>
            <param name="samplesY">Number of samples in the y-direction. Default: 64</param>
            <param name="viewRotX">Rotation of the plot about the x-axis. Default: 60</param>
            <param name="viewRotZ">Rotation of the plot about the z-axis. Default: 30</param>
            <param name="hidden3D">Plot the image with hidden surfaces removed. Default: "hidden3d"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GnuplotClose(HalconDotNet.HTuple)">
            <summary>Close all open gnuplot files or terminate an active gnuplot sub-process.</summary>
            <param name="gnuplotFileID">Identifier for the gnuplot output stream.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GnuplotOpenFile(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Open a gnuplot file for visualization of images and control values.</summary>
            <param name="fileName">Base name for control and data files.</param>
            <param name="gnuplotFileID">Identifier for the gnuplot output stream.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GnuplotOpenPipe(HalconDotNet.HTuple@)">
            <summary>Open a pipe to a gnuplot process for visualization of images and control values.</summary>
            <param name="gnuplotFileID">Identifier for the gnuplot output stream.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateDrawingObjectText(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a text object which can be moved interactively.</summary>
            <param name="row">Row coordinate of the text position. Default: 12</param>
            <param name="column">Column coordinate of the text position. Default: 12</param>
            <param name="stringVal">Character string to be displayed. Default: "Text"</param>
            <param name="drawID">Handle of the drawing object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDrawingObjectIconic(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Return the iconic object of a drawing object.</summary>
            <param name="objectVal">Copy of the iconic object represented by the drawing object.</param>
            <param name="drawID">Handle of the drawing object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearDrawingObject(HalconDotNet.HTuple)">
            <summary>Delete drawing object.</summary>
            <param name="drawID">Handle of the drawing object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetDrawingObjectParams(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the parameters of a drawing object.</summary>
            <param name="drawID">Handle of the drawing object.</param>
            <param name="paramNames">Parameter names of the drawing object.</param>
            <param name="paramValues">Parameter values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDrawingObjectParams(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the parameters of a drawing object.</summary>
            <param name="drawID">Handle of the drawing object.</param>
            <param name="paramNames">Parameter names of the drawing object.</param>
            <param name="paramValues">Parameter values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetDrawingObjectXld(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Set the contour of an interactive draw XLD.</summary>
            <param name="contour">XLD contour.</param>
            <param name="drawID">Handle of the drawing object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateDrawingObjectXld(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a XLD contour which can be modified interactively.</summary>
            <param name="row">Row coordinates of the polygon. Default: [100,200,200,100]</param>
            <param name="column">Column coordinates of the polygon. Default: [100,100,200,200]</param>
            <param name="drawID">Handle of the drawing object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateDrawingObjectCircleSector(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a circle sector which can be modified interactively.</summary>
            <param name="row">Row coordinate of the center. Default: 100</param>
            <param name="column">Column coordinate of the center. Default: 100</param>
            <param name="radius">Radius of the circle. Default: 80</param>
            <param name="startAngle">Start angle of the arc. Default: 0</param>
            <param name="endAngle">End angle of the arc. Default: 3.14159</param>
            <param name="drawID">Handle of the drawing object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateDrawingObjectEllipseSector(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create an elliptic sector which can be modified interactively.</summary>
            <param name="row">Row index of the center. Default: 200</param>
            <param name="column">Column index of the center. Default: 200</param>
            <param name="phi">Orientation of the first half axis in radians. Default: 0</param>
            <param name="radius1">First half axis. Default: 100</param>
            <param name="radius2">Second half axis. Default: 60</param>
            <param name="startAngle">Start angle of the arc. Default: 0</param>
            <param name="endAngle">End angle of the arc. Default: 3.14159</param>
            <param name="drawID">Handle of the drawing object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateDrawingObjectLine(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a line which can be modified interactively.</summary>
            <param name="row1">Row index of the first line point. Default: 100</param>
            <param name="column1">Column index of the first line point. Default: 100</param>
            <param name="row2">Row index of the second line point. Default: 200</param>
            <param name="column2">Column index of the second line point. Default: 200</param>
            <param name="drawID">Handle of the drawing object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateDrawingObjectCircle(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a circle which can be modified interactively.</summary>
            <param name="row">Row coordinate of the center. Default: 100</param>
            <param name="column">Column coordinate of the center. Default: 100</param>
            <param name="radius">Radius of the circle. Default: 80</param>
            <param name="drawID">Handle of the drawing object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateDrawingObjectEllipse(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create an ellipse which can be modified interactively.</summary>
            <param name="row">Row index of the center. Default: 200</param>
            <param name="column">Column index of the center. Default: 200</param>
            <param name="phi">Orientation of the first half axis in radians. Default: 0</param>
            <param name="radius1">First half axis. Default: 100</param>
            <param name="radius2">Second half axis. Default: 60</param>
            <param name="drawID">Handle of the drawing object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateDrawingObjectRectangle2(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a rectangle of any orientation which can be modified interactively.</summary>
            <param name="row">Row coordinate of the center. Default: 150</param>
            <param name="column">Column coordinate of the center. Default: 150</param>
            <param name="phi">Orientation of the first half axis in radians. Default: 0</param>
            <param name="length1">First half axis. Default: 100</param>
            <param name="length2">Second half axis. Default: 100</param>
            <param name="drawID">Handle of the drawing object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateDrawingObjectRectangle1(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a rectangle parallel to the coordinate axis which can be modified interactively.</summary>
            <param name="row1">Row coordinate of the upper left corner. Default: 100</param>
            <param name="column1">Column coordinate of the upper left corner. Default: 100</param>
            <param name="row2">Row coordinate of the lower right corner. Default: 200</param>
            <param name="column2">Column coordinate of the lower right corner. Default: 200</param>
            <param name="drawID">Handle of the drawing object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DragRegion3(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Interactive movement of a region with restriction of positions.</summary>
            <param name="sourceRegion">Regions to move.</param>
            <param name="maskRegion">Points on which it is allowed for a region to move.</param>
            <param name="destinationRegion">Moved regions.</param>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row index of the reference point. Default: 100</param>
            <param name="column">Column index of the reference point. Default: 100</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DragRegion2(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Interactive movement of a region with fixpoint specification.</summary>
            <param name="sourceRegion">Regions to move.</param>
            <param name="destinationRegion">Moved regions.</param>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row index of the reference point. Default: 100</param>
            <param name="column">Column index of the reference point. Default: 100</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DragRegion1(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Interactive moving of a region.</summary>
            <param name="sourceRegion">Regions to move.</param>
            <param name="destinationRegion">Moved Regions.</param>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawNurbsInterpMod(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Interactive modification of a NURBS curve using interpolation.</summary>
            <param name="contOut">Contour of the modified curve.</param>
            <param name="windowHandle">Window identifier.</param>
            <param name="rotate">Enable rotation? Default: "true"</param>
            <param name="move">Enable moving? Default: "true"</param>
            <param name="scale">Enable scaling? Default: "true"</param>
            <param name="keepRatio">Keep ratio while scaling? Default: "true"</param>
            <param name="edit">Enable editing? Default: "true"</param>
            <param name="degree">The degree $p$ of the NURBS curve. Reasonable values are 3 to 5. Default: 3</param>
            <param name="rowsIn">Row coordinates of the input interpolation points.</param>
            <param name="colsIn">Column coordinates of the input interpolation points.</param>
            <param name="tangentsIn">Input tangents.</param>
            <param name="controlRows">Row coordinates of the control polygon.</param>
            <param name="controlCols">Column coordinates of the control polygon.</param>
            <param name="knots">Knot vector.</param>
            <param name="rows">Row coordinates of the points specified by the user.</param>
            <param name="cols">Column coordinates of the points specified by the user.</param>
            <param name="tangents">Tangents specified by the user.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawNurbsInterp(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Interactive drawing of a NURBS curve using interpolation.</summary>
            <param name="contOut">Contour of the curve.</param>
            <param name="windowHandle">Window identifier.</param>
            <param name="rotate">Enable rotation? Default: "true"</param>
            <param name="move">Enable moving? Default: "true"</param>
            <param name="scale">Enable scaling? Default: "true"</param>
            <param name="keepRatio">Keep ratio while scaling? Default: "true"</param>
            <param name="degree">The degree $p$ of the NURBS curve. Reasonable values are 3 to 5. Default: 3</param>
            <param name="controlRows">Row coordinates of the control polygon.</param>
            <param name="controlCols">Column coordinates of the control polygon.</param>
            <param name="knots">Knot vector.</param>
            <param name="rows">Row coordinates of the points specified by the user.</param>
            <param name="cols">Column coordinates of the points specified by the user.</param>
            <param name="tangents">Tangents specified by the user.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawNurbsMod(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Interactive modification of a NURBS curve.</summary>
            <param name="contOut">Contour of the modified curve.</param>
            <param name="windowHandle">Window identifier.</param>
            <param name="rotate">Enable rotation? Default: "true"</param>
            <param name="move">Enable moving? Default: "true"</param>
            <param name="scale">Enable scaling? Default: "true"</param>
            <param name="keepRatio">Keep ratio while scaling? Default: "true"</param>
            <param name="edit">Enable editing? Default: "true"</param>
            <param name="degree">The degree $p$ of the NURBS curve. Reasonable values are 3 to 25. Default: 3</param>
            <param name="rowsIn">Row coordinates of the input control polygon.</param>
            <param name="colsIn">Column coordinates of the input control polygon.</param>
            <param name="weightsIn">Input weight vector.</param>
            <param name="rows">Row coordinates of the control polygon.</param>
            <param name="cols">Columns coordinates of the control polygon.</param>
            <param name="weights">Weight vector.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawNurbs(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Interactive drawing of a NURBS curve.</summary>
            <param name="contOut">Contour approximating the NURBS curve.</param>
            <param name="windowHandle">Window identifier.</param>
            <param name="rotate">Enable rotation? Default: "true"</param>
            <param name="move">Enable moving? Default: "true"</param>
            <param name="scale">Enable scaling? Default: "true"</param>
            <param name="keepRatio">Keep ratio while scaling? Default: "true"</param>
            <param name="degree">The degree $p$ of the NURBS curve. Reasonable values are 3 to 25. Default: 3</param>
            <param name="rows">Row coordinates of the control polygon.</param>
            <param name="cols">Columns coordinates of the control polygon.</param>
            <param name="weights">Weight vector.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawXldMod(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Interactive modification of a contour.</summary>
            <param name="contIn">Input contour.</param>
            <param name="contOut">Modified contour.</param>
            <param name="windowHandle">Window identifier.</param>
            <param name="rotate">Enable rotation? Default: "true"</param>
            <param name="move">Enable moving? Default: "true"</param>
            <param name="scale">Enable scaling? Default: "true"</param>
            <param name="keepRatio">Keep ratio while scaling? Default: "true"</param>
            <param name="edit">Enable editing? Default: "true"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawXld(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Interactive drawing of a contour.</summary>
            <param name="contOut">Modified contour.</param>
            <param name="windowHandle">Window identifier.</param>
            <param name="rotate">Enable rotation? Default: "true"</param>
            <param name="move">Enable moving? Default: "true"</param>
            <param name="scale">Enable scaling? Default: "true"</param>
            <param name="keepRatio">Keep ratio while scaling? Default: "true"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawRectangle2Mod(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Interactive drawing of any orientated rectangle.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="rowIn">Row index of the center.</param>
            <param name="columnIn">Column index of the center.</param>
            <param name="phiIn">Orientation of the bigger half axis in radians.</param>
            <param name="length1In">Bigger half axis.</param>
            <param name="length2In">Smaller half axis.</param>
            <param name="row">Row index of the center.</param>
            <param name="column">Column index of the center.</param>
            <param name="phi">Orientation of the bigger half axis in radians.</param>
            <param name="length1">Bigger half axis.</param>
            <param name="length2">Smaller half axis.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawRectangle2(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Interactive drawing of any orientated rectangle.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row index of the center.</param>
            <param name="column">Column index of the center.</param>
            <param name="phi">Orientation of the bigger half axis in radians.</param>
            <param name="length1">Bigger half axis.</param>
            <param name="length2">Smaller half axis.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawRectangle1Mod(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Draw a rectangle parallel to the coordinate axis.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row1In">Row index of the left upper corner.</param>
            <param name="column1In">Column index of the left upper corner.</param>
            <param name="row2In">Row index of the right lower corner.</param>
            <param name="column2In">Column index of the right lower corner.</param>
            <param name="row1">Row index of the left upper corner.</param>
            <param name="column1">Column index of the left upper corner.</param>
            <param name="row2">Row index of the right lower corner.</param>
            <param name="column2">Column index of the right lower corner.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawRectangle1(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Draw a rectangle parallel to the coordinate axis.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row1">Row index of the left upper corner.</param>
            <param name="column1">Column index of the left upper corner.</param>
            <param name="row2">Row index of the right lower corner.</param>
            <param name="column2">Column index of the right lower corner.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawPointMod(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Draw a point.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="rowIn">Row index of the point.</param>
            <param name="columnIn">Column index of the point.</param>
            <param name="row">Row index of the point.</param>
            <param name="column">Column index of the point.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawPoint(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Draw a point.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row index of the point.</param>
            <param name="column">Column index of the point.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawLineMod(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Draw a line.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row1In">Row index of the first point of the line.</param>
            <param name="column1In">Column index of the first point of the line.</param>
            <param name="row2In">Row index of the second point of the line.</param>
            <param name="column2In">Column index of the second point of the line.</param>
            <param name="row1">Row index of the first point of the line.</param>
            <param name="column1">Column index of the first point of the line.</param>
            <param name="row2">Row index of the second point of the line.</param>
            <param name="column2">Column index of the second point of the line.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawLine(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Draw a line.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row1">Row index of the first point of the line.</param>
            <param name="column1">Column index of the first point of the line.</param>
            <param name="row2">Row index of the second point of the line.</param>
            <param name="column2">Column index of the second point of the line.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawEllipseMod(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Interactive drawing of an ellipse.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="rowIn">Row index of the center.</param>
            <param name="columnIn">Column index of the center.</param>
            <param name="phiIn">Orientation of the bigger half axis in radians.</param>
            <param name="radius1In">Bigger half axis.</param>
            <param name="radius2In">Smaller half axis.</param>
            <param name="row">Row index of the center.</param>
            <param name="column">Column index of the center.</param>
            <param name="phi">Orientation of the first half axis in radians.</param>
            <param name="radius1">First half axis.</param>
            <param name="radius2">Second half axis.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawEllipse(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Interactive drawing of an ellipse.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row index of the center.</param>
            <param name="column">Column index of the center.</param>
            <param name="phi">Orientation of the first half axis in radians.</param>
            <param name="radius1">First half axis.</param>
            <param name="radius2">Second half axis.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawCircleMod(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Interactive drawing of a circle.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="rowIn">Row index of the center.</param>
            <param name="columnIn">Column index of the center.</param>
            <param name="radiusIn">Radius of the circle.</param>
            <param name="row">Row index of the center.</param>
            <param name="column">Column index of the center.</param>
            <param name="radius">Circle's radius.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawCircle(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Interactive drawing of a circle.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Barycenter's row index.</param>
            <param name="column">Barycenter's column index.</param>
            <param name="radius">Circle's radius.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawRegion(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Interactive drawing of a closed region.</summary>
            <param name="region">Interactive created region.</param>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DrawPolygon(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Interactive drawing of a polygon row.</summary>
            <param name="polygonRegion">Region, which encompasses all painted points.</param>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProjectionPl(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the projection of a point onto a line.</summary>
            <param name="row">Row coordinate of the point.</param>
            <param name="column">Column coordinate of the point.</param>
            <param name="row1">Row coordinate of the first point on the line.</param>
            <param name="column1">Column coordinate of the first point on the line.</param>
            <param name="row2">Row coordinate of the second point on the line.</param>
            <param name="column2">Column coordinate of the second point on the line.</param>
            <param name="rowProj">Row coordinate of the projected point.</param>
            <param name="colProj">Column coordinate of the projected point</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetPointsEllipse(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate a point of an ellipse corresponding to a specific angle.</summary>
            <param name="angle">Angle corresponding to the resulting point [rad]. Default: 0</param>
            <param name="row">Row coordinate of the center of the ellipse.</param>
            <param name="column">Column coordinate of the center of the ellipse.</param>
            <param name="phi">Orientation of the main axis [rad].</param>
            <param name="radius1">Length of the larger half axis.</param>
            <param name="radius2">Length of the smaller half axis.</param>
            <param name="rowPoint">Row coordinate of the point on the ellipse.</param>
            <param name="colPoint">Column coordinates of the point on the ellipse.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.IntersectionLl(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the intersection point of two lines.</summary>
            <param name="rowA1">Row coordinate of the first point of the first line.</param>
            <param name="columnA1">Column coordinate of the first point of the first line.</param>
            <param name="rowA2">Row coordinate of the second point of the first line.</param>
            <param name="columnA2">Column coordinate of the second point of the first line.</param>
            <param name="rowB1">Row coordinate of the first point of the second line.</param>
            <param name="columnB1">Column coordinate of the first point of the second line.</param>
            <param name="rowB2">Row coordinate of the second point of the second line.</param>
            <param name="columnB2">Column coordinate of the second point of the second line.</param>
            <param name="row">Row coordinate of the intersection point.</param>
            <param name="column">Column coordinate of the intersection point.</param>
            <param name="isParallel">Are the two lines parallel?</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.IntersectionContoursXld(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the intersection points of two XLD contours </summary>
            <param name="contour1">First XLD contour.</param>
            <param name="contour2">Second XLD contour.</param>
            <param name="intersectionType">Intersection points to be returned. Default: "all"</param>
            <param name="row">Row coordinates of the intersection points.</param>
            <param name="column">Column coordinates of the intersection points.</param>
            <param name="isOverlapping">Does a part of a contour lies above another contour part?</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.IntersectionCircleContourXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the intersection points of a circle or circular arc and an XLD contour </summary>
            <param name="contour">XLD contour.</param>
            <param name="circleRow">Row coordinate of the center of the circle or circular arc.</param>
            <param name="circleColumn">Column coordinate of the center of the circle or circular arc.</param>
            <param name="circleRadius">Radius of the circle or circular arc.</param>
            <param name="circleStartPhi">Angle of the start point of the circle or circular arc [rad]. Default: 0.0</param>
            <param name="circleEndPhi">Angle of the end point of the circle or  circular arc [rad]. Default: 6.28318</param>
            <param name="circlePointOrder">Point order along the circle or circular arc. Default: "positive"</param>
            <param name="row">Row coordinates of the intersection points.</param>
            <param name="column">Column coordinates of the intersection points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.IntersectionCircles(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the intersection points of two circles or circular arcs </summary>
            <param name="circle1Row">Row coordinate of the center of the first circle or circular arc.</param>
            <param name="circle1Column">Column coordinate of the center of the first circle or circular arc.</param>
            <param name="circle1Radius">Radius of the first circle or circular arc.</param>
            <param name="circle1StartPhi">Angle of the start point of the first circle or circular arc [rad]. Default: 0.0</param>
            <param name="circle1EndPhi">Angle of the end point of the first circle or  circular arc [rad]. Default: 6.28318</param>
            <param name="circle1PointOrder">Point order along the first circle or circular arc. Default: "positive"</param>
            <param name="circle2Row">Row coordinate of the center of the second circle or circular arc.</param>
            <param name="circle2Column">Column coordinate of the center of the second circle or circular arc.</param>
            <param name="circle2Radius">Radius of the second circle or circular arc.</param>
            <param name="circle2StartPhi">Angle of the start point of the second circle or circular arc [rad]. Default: 0.0</param>
            <param name="circle2EndPhi">Angle of the end point of the second circle or  circular arc [rad]. Default: 6.28318</param>
            <param name="circle2PointOrder">Point order along the second circle or circular arc. Default: "positive"</param>
            <param name="row">Row coordinates of the intersection points.</param>
            <param name="column">Column coordinates of the intersection points.</param>
            <param name="isOverlapping">Do both circles or circular arcs have a part in common?</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.IntersectionLineContourXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the intersection points of a line and an XLD contour </summary>
            <param name="contour">XLD contour.</param>
            <param name="lineRow1">Row coordinate of the first point of the line.</param>
            <param name="lineColumn1">Column coordinate of the first point of the line.</param>
            <param name="lineRow2">Row coordinate of the second point of the line.</param>
            <param name="lineColumn2">Column coordinate of the second point of the line.</param>
            <param name="row">Row coordinates of the intersection points.</param>
            <param name="column">Column coordinates of the intersection points.</param>
            <param name="isOverlapping">Does a part of the XLD contour lies on the line?</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.IntersectionLineCircle(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the intersection points of a line and a circle or circular arc </summary>
            <param name="lineRow1">Row coordinate of the first point of the line.</param>
            <param name="lineColumn1">Column coordinate of the first point of the line.</param>
            <param name="lineRow2">Row coordinate of the second point of the line.</param>
            <param name="lineColumn2">Column coordinate of the second point of the line.</param>
            <param name="circleRow">Row coordinate of the center of the circle or circular arc.</param>
            <param name="circleColumn">Column coordinate of the center of the circle or circular arc.</param>
            <param name="circleRadius">Radius of the circle or circular arc.</param>
            <param name="circleStartPhi">Angle of the start point of the circle or circular arc [rad]. Default: 0.0</param>
            <param name="circleEndPhi">Angle of the end point of the circle or  circular arc [rad]. Default: 6.28318</param>
            <param name="circlePointOrder">Point order along the circle or circular arc. Default: "positive"</param>
            <param name="row">Row coordinates of the intersection points.</param>
            <param name="column">Column coordinates of the intersection points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.IntersectionLines(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the intersection point of two lines </summary>
            <param name="line1Row1">Row coordinate of the first point of the first line.</param>
            <param name="line1Column1">Column coordinate of the first point of the first line.</param>
            <param name="line1Row2">Row coordinate of the second point of the first line.</param>
            <param name="line1Column2">Column coordinate of the second point of the first line.</param>
            <param name="line2Row1">Row coordinate of the first point of the second line.</param>
            <param name="line2Column1">Column coordinate of the first point of the second line.</param>
            <param name="line2Row2">Row coordinate of the second point of the second line.</param>
            <param name="line2Column2">Column coordinate of the second point of the second line.</param>
            <param name="row">Row coordinate of the intersection point.</param>
            <param name="column">Column coordinate of the intersection point.</param>
            <param name="isOverlapping">Are both lines identical?</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.IntersectionSegmentContourXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the intersection points of a segment and an XLD contour </summary>
            <param name="contour">XLD contour.</param>
            <param name="segmentRow1">Row coordinate of the first point of the segment.</param>
            <param name="segmentColumn1">Column coordinate of the first point of the segment.</param>
            <param name="segmentRow2">Row coordinate of the second point of the segment.</param>
            <param name="segmentColumn2">Column coordinate of the second point of the segment.</param>
            <param name="row">Row coordinates of the intersection points.</param>
            <param name="column">Column coordinates of the intersection points.</param>
            <param name="isOverlapping">Do the segment and the XLD contour have a part in common?</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.IntersectionSegmentCircle(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the intersection points of a segment and a circle or circular arc </summary>
            <param name="segmentRow1">Row coordinate of the first point of the segment.</param>
            <param name="segmentColumn1">Column coordinate of the first point of the segment.</param>
            <param name="segmentRow2">Row coordinate of the second point of the segment.</param>
            <param name="segmentColumn2">Column coordinate of the second point of the segment.</param>
            <param name="circleRow">Row coordinate of the center of the circle or circular arc.</param>
            <param name="circleColumn">Column coordinate of the center of the circle or circular arc.</param>
            <param name="circleRadius">Radius of the circle or circular arc.</param>
            <param name="circleStartPhi">Angle of the start point of the circle or circular arc [rad]. Default: 0.0</param>
            <param name="circleEndPhi">Angle of the end point of the circle or  circular arc [rad]. Default: 6.28318</param>
            <param name="circlePointOrder">Point order along the circle or circular arc. Default: "positive"</param>
            <param name="row">Row coordinates of the intersection points.</param>
            <param name="column">Column coordinates of the intersection points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.IntersectionSegmentLine(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the intersection point of a segment and a line </summary>
            <param name="segmentRow1">Row coordinate of the first point of the segment.</param>
            <param name="segmentColumn1">Column coordinate of the first point of the segment.</param>
            <param name="segmentRow2">Row coordinate of the second point of the segment.</param>
            <param name="segmentColumn2">Column coordinate of the second point of the segment.</param>
            <param name="lineRow1">Row coordinate of the first point of the line.</param>
            <param name="lineColumn1">Column coordinate of the first point of the line.</param>
            <param name="lineRow2">Row coordinate of the second point of the line.</param>
            <param name="lineColumn2">Column coordinate of the second point of the line.</param>
            <param name="row">Row coordinate of the intersection point.</param>
            <param name="column">Column coordinate of the intersection point.</param>
            <param name="isOverlapping">Do the segment and the line have a part in common?</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.IntersectionSegments(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the intersection point of two line segments </summary>
            <param name="segment1Row1">Row coordinate of the first point  of the first segment.</param>
            <param name="segment1Column1">Column coordinate of the first point  of the first segment.</param>
            <param name="segment1Row2">Row coordinate of the second point  of the first segment.</param>
            <param name="segment1Column2">Column coordinate of the second point  of the first segment.</param>
            <param name="segment2Row1">Row coordinate of the first point  of the second segment.</param>
            <param name="segment2Column1">Column coordinate of the first point  of the second segment.</param>
            <param name="segment2Row2">Row coordinate of the second point  of the second segment.</param>
            <param name="segment2Column2">Column coordinate of the second point  of the second segment.</param>
            <param name="row">Row coordinate of the intersection point.</param>
            <param name="column">Column coordinate of the intersection point.</param>
            <param name="isOverlapping">Do both segments have a part in common?</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearDistanceTransformXld(HalconDotNet.HTuple)">
            <summary>Clear a XLD distance transform.</summary>
            <param name="distanceTransformID">Handle of the XLD distance transform.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ApplyDistanceTransformXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Determine the pointwise distance of two contours using an XLD distance transform.</summary>
            <param name="contour">Contour(s) for whose points the distances are calculated.</param>
            <param name="contourOut">Copy of Contour containing the distances as an attribute.</param>
            <param name="distanceTransformID">Handle of the XLD distance transform of the reference contour.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadDistanceTransformXld(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read an XLD distance transform from a file.</summary>
            <param name="fileName">Name of the file.</param>
            <param name="distanceTransformID">Handle of the XLD distance transform.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeDistanceTransformXld(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize an XLD distance transform.</summary>
            <param name="serializedItemHandle">Handle of the serialized XLD distance  transform.</param>
            <param name="distanceTransformID">Handle of the deserialized XLD distance  transform.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeDistanceTransformXld(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize an XLD distance transform.</summary>
            <param name="distanceTransformID">Handle of the XLD distance transform.</param>
            <param name="serializedItemHandle">Handle of the serialized XLD distance  transform.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteDistanceTransformXld(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write an XLD distance transform into a file.</summary>
            <param name="distanceTransformID">Handle of the XLD distance transform.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetDistanceTransformXldParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set new parameters for an XLD distance transform.</summary>
            <param name="distanceTransformID">Handle of the XLD distance transform.</param>
            <param name="genParamName">Names of the generic parameters. Default: "mode"</param>
            <param name="genParamValue">Values of the generic parameters. Default: "point_to_point"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDistanceTransformXldParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the parameters used to build an XLD distance transform.</summary>
            <param name="distanceTransformID">Handle of the XLD distance transform.</param>
            <param name="genParamName">Names of the generic parameters. Default: "mode"</param>
            <param name="genParamValue">Values of the generic parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDistanceTransformXldContour(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Get the reference contour used to build the XLD distance transform.</summary>
            <param name="contour">Reference contour.</param>
            <param name="distanceTransformID">Handle of the XLD distance transform.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateDistanceTransformXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create the XLD distance transform.</summary>
            <param name="contour">Reference contour(s).</param>
            <param name="mode">Compute the distance to points ('point_to_point') or entire segments ('point_to_segment'). Default: "point_to_point"</param>
            <param name="maxDistance">Maximum distance of interest. Default: 20.0</param>
            <param name="distanceTransformID">Handle of the XLD distance transform.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistanceContoursXld(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Calculate the pointwise distance from one contour to another.</summary>
            <param name="contourFrom">Contours for whose points the distances are calculated.</param>
            <param name="contourTo">Contours to which the distances are calculated to.</param>
            <param name="contourOut">Copy of ContourFrom containing the distances as an attribute.</param>
            <param name="mode">Compute the distance to points ('point_to_point') or to entire segments ('point_to_segment'). Default: "point_to_point"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistanceCcMin(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the minimum distance between two contours.</summary>
            <param name="contour1">First input contour.</param>
            <param name="contour2">Second input contour.</param>
            <param name="mode">Distance calculation mode. Default: "fast_point_to_segment"</param>
            <param name="distanceMin">Minimum distance between the two contours.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistanceCc(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the distance between two contours.</summary>
            <param name="contour1">First input contour.</param>
            <param name="contour2">Second input contour.</param>
            <param name="mode">Distance calculation mode. Default: "point_to_point"</param>
            <param name="distanceMin">Minimum distance between both contours.</param>
            <param name="distanceMax">Maximum distance between both contours.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistanceSc(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the distance between a line segment and one contour.</summary>
            <param name="contour">Input contour.</param>
            <param name="row1">Row coordinate of the first point of the line segment.</param>
            <param name="column1">Column coordinate of the first point of the line segment.</param>
            <param name="row2">Row coordinate of the second point of the line segment.</param>
            <param name="column2">Column coordinate of the second point of the line segment.</param>
            <param name="distanceMin">Minimum distance between the line segment and the contour.</param>
            <param name="distanceMax">Maximum distance between the line segment and the contour.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistanceLc(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the distance between a line and one contour.</summary>
            <param name="contour">Input contour.</param>
            <param name="row1">Row coordinate of the first point of the line.</param>
            <param name="column1">Column coordinate of the first point of the line.</param>
            <param name="row2">Row coordinate of the second point of the line.</param>
            <param name="column2">Column coordinate of the second point of the line.</param>
            <param name="distanceMin">Minimum distance between the line and the contour.</param>
            <param name="distanceMax">Maximum distance between the line and the contour.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistancePc(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the distance between a point and one contour.</summary>
            <param name="contour">Input contour.</param>
            <param name="row">Row coordinate of the point.</param>
            <param name="column">Column coordinate of the point.</param>
            <param name="distanceMin">Minimum distance between the point and the contour.</param>
            <param name="distanceMax">Maximum distance between the point and the contour.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistanceSr(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the distance between a line segment and one region.</summary>
            <param name="region">Input region.</param>
            <param name="row1">Row coordinate of the first point of the line segment.</param>
            <param name="column1">Column coordinate of the first point of the line segment.</param>
            <param name="row2">Row coordinate of the second point of the line segment.</param>
            <param name="column2">Column coordinate of the second point of the line segment.</param>
            <param name="distanceMin">Minimum distance between the line segment and the region.</param>
            <param name="distanceMax">Maximum distance between the line segment and the region.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistanceLr(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the distance between a line and a region.</summary>
            <param name="region">Input region.</param>
            <param name="row1">Row coordinate of the first point of the line.</param>
            <param name="column1">Column coordinate of the first point of the line.</param>
            <param name="row2">Row coordinate of the second point of the line.</param>
            <param name="column2">Column coordinate of the second point of the line.</param>
            <param name="distanceMin">Minimum distance between the line and the region</param>
            <param name="distanceMax">Maximum distance between the line and the region</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistancePr(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the distance between a point and a region.</summary>
            <param name="region">Input region.</param>
            <param name="row">Row coordinate of the point.</param>
            <param name="column">Column coordinate of the point.</param>
            <param name="distanceMin">Minimum distance between the point and the region.</param>
            <param name="distanceMax">Maximum distance between the point and the region.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AngleLx(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the angle between one line and the horizontal axis.</summary>
            <param name="row1">Row coordinate the first point of the line.</param>
            <param name="column1">Column coordinate of the first point of the line.</param>
            <param name="row2">Row coordinate of the second point of the line.</param>
            <param name="column2">Column coordinate of the second point of the line.</param>
            <param name="angle">Angle between the line and the horizontal axis [rad].</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AngleLl(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the angle between two lines.</summary>
            <param name="rowA1">Row coordinate of the first point of the first line.</param>
            <param name="columnA1">Column coordinate of the first point of the first line.</param>
            <param name="rowA2">Row coordinate of the second point of the first line.</param>
            <param name="columnA2">Column coordinate of the second point of the first line.</param>
            <param name="rowB1">Row coordinate of the first point of the second line.</param>
            <param name="columnB1">Column coordinate of the first point of the second line.</param>
            <param name="rowB2">Row coordinate of the second point of the second line.</param>
            <param name="columnB2">Column coordinate of the second point of the second line.</param>
            <param name="angle">Angle between the lines [rad].</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistanceSl(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the distances between a line segment and a line.</summary>
            <param name="rowA1">Row coordinate of the first point of the line segment.</param>
            <param name="columnA1">Column coordinate of the first point of the line segment.</param>
            <param name="rowA2">Row coordinate of the second point of the line segment.</param>
            <param name="columnA2">Column coordinate of the second point of the line segment.</param>
            <param name="rowB1">Row coordinate of the first point of the line.</param>
            <param name="columnB1">Column coordinate of the first point of the line.</param>
            <param name="rowB2">Row coordinate of the second point of the line.</param>
            <param name="columnB2">Column coordinate of the second point of the line.</param>
            <param name="distanceMin">Minimum distance between the line segment and the line.</param>
            <param name="distanceMax">Maximum distance between the line segment and the line.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistanceSs(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the distances between two line segments.</summary>
            <param name="rowA1">Row coordinate of the first point of the line segment.</param>
            <param name="columnA1">Column coordinate of the first point of the line segment.</param>
            <param name="rowA2">Row coordinate of the second point of the line segment.</param>
            <param name="columnA2">Column coordinate of the second point of the line segment.</param>
            <param name="rowB1">Row coordinate of the first point of the line.</param>
            <param name="columnB1">Column of the first point of the line.</param>
            <param name="rowB2">Row coordinate of the second point of the line.</param>
            <param name="columnB2">Column coordinate of the second point of the line.</param>
            <param name="distanceMin">Minimum distance between the line segments.</param>
            <param name="distanceMax">Maximum distance between the line segments.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistancePs(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the distances between a point and a line segment.</summary>
            <param name="row">Row coordinate of the first point.</param>
            <param name="column">Column coordinate of the first point.</param>
            <param name="row1">Row coordinate of the first point of the line segment.</param>
            <param name="column1">Column coordinate of the first point of the line segment.</param>
            <param name="row2">Row coordinate of the second point of the line segment.</param>
            <param name="column2">Column coordinate of the second point of the line segment.</param>
            <param name="distanceMin">Minimum distance between the point and the line segment.</param>
            <param name="distanceMax">Maximum distance between the point and the line segment.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistancePl(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the distance between one point and one line.</summary>
            <param name="row">Row coordinate of the point.</param>
            <param name="column">Column of the point.</param>
            <param name="row1">Row coordinate of the first point of the line.</param>
            <param name="column1">Column coordinate of the first point of the line.</param>
            <param name="row2">Row coordinate of the second point of the line.</param>
            <param name="column2">Column coordinate of the second point of the line.</param>
            <param name="distance">Distance between the points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistancePp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the distance between two points.</summary>
            <param name="row1">Row coordinate of the first point.</param>
            <param name="column1">Column coordinate of the first point.</param>
            <param name="row2">Row coordinate of the second point.</param>
            <param name="column2">Column coordinate of the second point.</param>
            <param name="distance">Distance between the points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ComposeFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compose two functions.</summary>
            <param name="function1">Input function 1.</param>
            <param name="function2">Input function 2.</param>
            <param name="border">Border treatment for the input functions. Default: "constant"</param>
            <param name="composedFunction">Composed function.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InvertFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the inverse of a function.</summary>
            <param name="function">Input function.</param>
            <param name="inverseFunction">Inverse of the input function.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DerivateFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the derivatives of a function.</summary>
            <param name="function">Input function</param>
            <param name="mode">Type of derivative Default: "first"</param>
            <param name="derivative">Derivative of the input function</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LocalMinMaxFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the local minimum and maximum points of a function.</summary>
            <param name="function">Input function</param>
            <param name="mode">Handling of plateaus Default: "strict_min_max"</param>
            <param name="interpolation">Interpolation of the input function Default: "true"</param>
            <param name="min">Minimum points of the input function</param>
            <param name="max">Maximum points of the input function</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ZeroCrossingsFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the zero crossings of a function.</summary>
            <param name="function">Input function</param>
            <param name="zeroCrossings">Zero crossings of the input function</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ScaleYFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Multiplication and addition of the y values.</summary>
            <param name="function">Input function.</param>
            <param name="mult">Factor for scaling of the y values. Default: 2.0</param>
            <param name="add">Constant which is added to the y values. Default: 0.0</param>
            <param name="functionScaled">Transformed function.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.NegateFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Negation of the y values.</summary>
            <param name="function">Input function.</param>
            <param name="functionInverted">Function with the negated y values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AbsFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Absolute value of the y values.</summary>
            <param name="function">Input function.</param>
            <param name="functionAbsolute">Function with the absolute values of the y values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetYValueFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the value of a function at an arbitrary position.</summary>
            <param name="function">Input function.</param>
            <param name="x">X coordinate at which the function should be evaluated.</param>
            <param name="border">Border treatment for the input function. Default: "constant"</param>
            <param name="y">Y value at the given x value.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetPairFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Access a function value using the index of the control points.</summary>
            <param name="function">Input function.</param>
            <param name="index">Index of the control points.</param>
            <param name="x">X value at the given control points.</param>
            <param name="y">Y value at the given control points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.NumPointsFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Number of control points of the function.</summary>
            <param name="function">Input function.</param>
            <param name="length">Number of control points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.YRangeFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Smallest and largest y value of the function.</summary>
            <param name="function">Input function.</param>
            <param name="YMin">Smallest y value.</param>
            <param name="YMax">Largest y value.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.XRangeFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Smallest and largest x value of the function.</summary>
            <param name="function">Input function.</param>
            <param name="XMin">Smallest x value.</param>
            <param name="XMax">Largest x value.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Funct1dToPairs(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Access to the x/y values of a function.</summary>
            <param name="function">Input function.</param>
            <param name="XValues">X values of the function.</param>
            <param name="YValues">Y values of the function.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SampleFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Sample a function equidistantly in an interval.</summary>
            <param name="function">Input function.</param>
            <param name="XMin">Minimum x value of the output function.</param>
            <param name="XMax">Maximum x value of the output function.</param>
            <param name="XDist">Distance of the samples.</param>
            <param name="border">Border treatment for the input function. Default: "constant"</param>
            <param name="sampledFunction">Sampled function.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TransformFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Transform a function using given transformation parameters.</summary>
            <param name="function">Input function.</param>
            <param name="paramsVal">Transformation parameters between the functions.</param>
            <param name="transformedFunction">Transformed function.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MatchFunct1dTrans(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate transformation parameters between two functions.</summary>
            <param name="function1">Function 1.</param>
            <param name="function2">Function 2.</param>
            <param name="border">Border treatment for function 2. Default: "constant"</param>
            <param name="paramsConst">Values of the parameters to remain constant. Default: [1.0,0.0,1.0,0.0]</param>
            <param name="useParams">Should a parameter be adapted for it? Default: ["true","true","true","true"]</param>
            <param name="paramsVal">Transformation parameters between the functions.</param>
            <param name="chiSquare">Quadratic error of the output function.</param>
            <param name="covar">Covariance Matrix of the transformation parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistanceFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the distance of two functions.</summary>
            <param name="function1">Input function 1.</param>
            <param name="function2">Input function 2.</param>
            <param name="mode">Modes of invariants. Default: "length"</param>
            <param name="sigma">Variance of the optional smoothing with a Gaussian filter. Default: 0.0</param>
            <param name="distance">Distance of the functions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SmoothFunct1dGauss(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Smooth an equidistant 1D function with a Gaussian function.</summary>
            <param name="function">Function to be smoothed.</param>
            <param name="sigma">Sigma of the Gaussian function for the smoothing. Default: 2.0</param>
            <param name="smoothedFunction">Smoothed function.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.IntegrateFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the positive and negative areas of a function.</summary>
            <param name="function">Input function.</param>
            <param name="positive">Area under the positive part of the function.</param>
            <param name="negative">Area under the negative part of the function.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a function from a file.</summary>
            <param name="fileName">Name of the file to be read.</param>
            <param name="function">Function from the file.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a function to a file.</summary>
            <param name="function">Function to be written.</param>
            <param name="fileName">Name of the file to be written.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateFunct1dArray(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a function from a sequence of y-values.</summary>
            <param name="YValues">X value for function points.</param>
            <param name="function">Created function.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateFunct1dPairs(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a function from a set of (x,y) pairs.</summary>
            <param name="XValues">X value for function points.</param>
            <param name="YValues">Y-value for function points.</param>
            <param name="function">Created function.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SmoothFunct1dMean(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Smooth an equidistant 1D function by averaging its values.</summary>
            <param name="function">1D function.</param>
            <param name="smoothSize">Size of the averaging mask. Default: 9</param>
            <param name="iterations">Number of iterations for the smoothing. Default: 3</param>
            <param name="smoothedFunction">Smoothed function.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MatchFourierCoeff(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Similarity of two contours.</summary>
            <param name="realCoef1">Real parts of the pattern Fourier coefficients.</param>
            <param name="imaginaryCoef1">Imaginary parts of the pattern Fourier coefficients.</param>
            <param name="realCoef2">Real parts of the Fourier coefficients to be compared.</param>
            <param name="imaginaryCoef2">Imaginary parts of the Fourier coefficients to be compared.</param>
            <param name="maxCoef">Total number of Fourier coefficients. Default: 50</param>
            <param name="damping">Kind of attenuation. Default: "1/index"</param>
            <param name="distance">Similarity of the contours.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Fourier1dimInv(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>One dimensional Fourier synthesis (inverse Fourier transform).</summary>
            <param name="realCoef">Real parts.</param>
            <param name="imaginaryCoef">Imaginary parts.</param>
            <param name="maxCoef">Input of the steps for the backtransformation. Default: 100</param>
            <param name="rows">Row coordinates.</param>
            <param name="columns">Column coordinates.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AbsInvarFourierCoeff(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Normalizing of the Fourier coefficients with respect to the displacment of the starting point. </summary>
            <param name="realInvar">Real parts of the normalized Fourier coefficients.</param>
            <param name="imaginaryInvar">Imaginary parts of the normalized Fourier coefficients.</param>
            <param name="coefP">Normalizing coefficients p. Default: 1</param>
            <param name="coefQ">Normalizing coefficients q. Default: 1</param>
            <param name="AZInvar">Order of the AZ-invariants. Default: "abs_amount"</param>
            <param name="realAbsInvar">Real parts of the normalized Fourier coefficients.</param>
            <param name="imaginaryAbsInvar">Imaginary parts of the normalized Fourier coefficients.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InvarFourierCoeff(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Normalize the Fourier coefficients.</summary>
            <param name="realCoef">Real parts of the Fourier coefficients.</param>
            <param name="imaginaryCoef">Imaginary parts of the Fourier coefficients.</param>
            <param name="normPar">Input of the normalizing coefficients. Default: 1</param>
            <param name="invarType">Indicates the level of the affine mappings. Default: "affine_invar"</param>
            <param name="realInvar">Real parts of the normalized Fourier coefficients.</param>
            <param name="imaginaryInvar">Imaginary parts of the normalized Fourier coefficients.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Fourier1dim(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the Fourier coefficients of a parameterized contour.</summary>
            <param name="rows">Row coordinates of the contour.</param>
            <param name="columns">Column coordinates of the contour.</param>
            <param name="parContour">Parameter scale.</param>
            <param name="maxCoef">Desired number of Fourier coefficients or all of them (0). Default: 50</param>
            <param name="realCoef">Real parts of the Fourier coefficients.</param>
            <param name="imaginaryCoef">Imaginary parts of the Fourier coefficients.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PrepContourFourier(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Parameterize the passed contour.</summary>
            <param name="rows">Row indices of the contour.</param>
            <param name="columns">Column indices of the contour.</param>
            <param name="transMode">Kind of parameterization. Default: "signed_area"</param>
            <param name="parContour">Parameterized contour.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MoveContourOrig(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Transformation of the origin into the centre of gravity.</summary>
            <param name="rows">Row coordinates of the contour.</param>
            <param name="columns">Column coordinates of the contour.</param>
            <param name="rowsMoved">Row coordinates of the displaced contour.</param>
            <param name="columnsMoved">Column coordinates of the displaced contour.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TextureLaws(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Filter an image using a Laws texture filter.</summary>
            <param name="image">Images to which the texture transformation is to be applied.</param>
            <param name="imageTexture">Texture images.</param>
            <param name="filterTypes">Desired filter. Default: "el"</param>
            <param name="shift">Shift to reduce the gray value dynamics. Default: 2</param>
            <param name="filterSize">Size of the filter kernel. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeviationImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Calculate the standard deviation of gray values within rectangular windows.</summary>
            <param name="image">Image for which the standard deviation is to be calculated.</param>
            <param name="imageDeviation">Image containing the standard deviation.</param>
            <param name="width">Width of the mask in which the standard deviation is calculated. Default: 11</param>
            <param name="height">Height of the mask in which the standard deviation is calculated. Default: 11</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EntropyImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Calculate the entropy of gray values within a rectangular window.</summary>
            <param name="image">Image for which the entropy is to be calculated.</param>
            <param name="imageEntropy">Entropy image.</param>
            <param name="width">Width of the mask in which the entropy is calculated. Default: 9</param>
            <param name="height">Height of the mask in which the entropy is calculated. Default: 9</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.IsotropicDiffusion(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Perform an isotropic diffusion of an image.</summary>
            <param name="image">Input image.</param>
            <param name="smoothedImage">Output image.</param>
            <param name="sigma">Standard deviation of the Gauss distribution. Default: 1.0</param>
            <param name="iterations">Number of iterations. Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AnisotropicDiffusion(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Perform an anisotropic diffusion of an image.</summary>
            <param name="image">Input image.</param>
            <param name="imageAniso">Output image.</param>
            <param name="mode">Diffusion coefficient as a function of the edge amplitude. Default: "weickert"</param>
            <param name="contrast">Contrast parameter. Default: 5.0</param>
            <param name="theta">Time step. Default: 1.0</param>
            <param name="iterations">Number of iterations. Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SmoothImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Smooth an image using various filters.</summary>
            <param name="image">Image to be smoothed.</param>
            <param name="imageSmooth">Smoothed image.</param>
            <param name="filter">Filter. Default: "deriche2"</param>
            <param name="alpha">Filterparameter: small values cause strong smoothing (vice versa by using bei 'gauss'). Default: 0.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SigmaImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Non-linear smoothing with the sigma filter.</summary>
            <param name="image">Image to be smoothed.</param>
            <param name="imageSigma">Smoothed image.</param>
            <param name="maskHeight">Height of the mask (number of lines). Default: 5</param>
            <param name="maskWidth">Width of the mask (number of columns). Default: 5</param>
            <param name="sigma">Max. deviation to the average. Default: 3</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MidrangeImage(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Calculate the average of maximum and minimum inside any mask.</summary>
            <param name="image">Image to be filtered.</param>
            <param name="mask">Filter mask.</param>
            <param name="imageMidrange">Filtered image.</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TrimmedMean(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Smooth an image with an arbitrary rank mask.</summary>
            <param name="image">Image to be filtered.</param>
            <param name="mask">Image whose region serves as filter mask.</param>
            <param name="imageTMean">Filtered output image.</param>
            <param name="number">Number of averaged pixels. Typical value:       Surface(Mask) / 2. Default: 5</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MedianSeparate(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Separated median filtering with rectangle masks.</summary>
            <param name="image">Image to be filtered.</param>
            <param name="imageSMedian">Median filtered image.</param>
            <param name="maskWidth">Width of rank mask. Default: 25</param>
            <param name="maskHeight">Height of rank mask. Default: 25</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MedianRect(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute a median filter with rectangular masks.</summary>
            <param name="image">Image to be filtered.</param>
            <param name="imageMedian">Filtered image.</param>
            <param name="maskWidth">Width of the filter mask. Default: 15</param>
            <param name="maskHeight">Height of the filter mask. Default: 15</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MedianImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute a median filter with various masks.</summary>
            <param name="image">Image to be filtered.</param>
            <param name="imageMedian">Filtered image.</param>
            <param name="maskType">Filter mask type. Default: "circle"</param>
            <param name="radius">Radius of the filter mask. Default: 1</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MedianWeighted(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Weighted median filtering with different rank masks.</summary>
            <param name="image">Image to be filtered.</param>
            <param name="imageWMedian">Median filtered image.</param>
            <param name="maskType">Type of median mask. Default: "inner"</param>
            <param name="maskSize">mask size. Default: 3</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RankRect(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute a rank filter with rectangular masks.</summary>
            <param name="image">Image to be filtered.</param>
            <param name="imageRank">Filtered image.</param>
            <param name="maskWidth">Width of the filter mask. Default: 15</param>
            <param name="maskHeight">Height of the filter mask. Default: 15</param>
            <param name="rank">Rank of the output gray value. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RankImage(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute a rank filter with arbitrary masks.</summary>
            <param name="image">Image to be filtered.</param>
            <param name="mask">Filter mask.</param>
            <param name="imageRank">Filtered image.</param>
            <param name="rank">Rank of the output gray value. Default: 5</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DualRank(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Opening, Median and Closing with circle or rectangle mask.</summary>
            <param name="image">Image to be filtered.</param>
            <param name="imageRank">Filtered Image.</param>
            <param name="maskType">Shape of the mask. Default: "circle"</param>
            <param name="radius">Radius of the filter mask. Default: 1</param>
            <param name="modePercent">Filter Mode: 0 corresponds to a gray value opening , 50 corresponds to a median and 100 to a gray values closing. Default: 10</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MeanImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Smooth by averaging.</summary>
            <param name="image">Image to be smoothed.</param>
            <param name="imageMean">Smoothed image.</param>
            <param name="maskWidth">Width of filter mask. Default: 9</param>
            <param name="maskHeight">Height of filter mask. Default: 9</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InfoSmooth(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Information on smoothing filter smooth_image.</summary>
            <param name="filter">Name of required filter. Default: "deriche2"</param>
            <param name="alpha">Filter parameter: small values effect strong smoothing (reversed in case of 'gauss'). Default: 0.5</param>
            <param name="size">Width of filter is approx. size x size pixels.</param>
            <param name="coeffs">In case of gauss filter: coefficients of the "positive" half of the 1D impulse answer.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BinomialFilter(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Smooth an image using the binomial filter.</summary>
            <param name="image">Input image.</param>
            <param name="imageBinomial">Smoothed image.</param>
            <param name="maskWidth">Filter width. Default: 5</param>
            <param name="maskHeight">Filter height. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GaussImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Smooth an image using discrete Gaussian functions.</summary>
            <param name="image">Image to be smoothed.</param>
            <param name="imageGauss">Filtered image.</param>
            <param name="size">Required filter size. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GaussFilter(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Smooth using discrete gauss functions.</summary>
            <param name="image">Image to be smoothed.</param>
            <param name="imageGauss">Filtered image.</param>
            <param name="size">Required filter size. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EliminateMinMax(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Smooth an image in the spatial domain to suppress noise.</summary>
            <param name="image">Image to smooth.</param>
            <param name="filteredImage">Smoothed image.</param>
            <param name="maskWidth">Width of filter mask. Default: 3</param>
            <param name="maskHeight">Height of filter mask. Default: 3</param>
            <param name="gap">Gap between local maximum/minimum and all other gray values of the neighborhood. Default: 1.0</param>
            <param name="mode">Replacement rule (1 = next minimum/maximum, 2 = average, 3 =median). Default: 3</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AnisotropeDiff(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Smooth an image by edge-preserving anisotropic diffusion.</summary>
            <param name="image">Image to be smoothed.</param>
            <param name="imageAniso">Smoothed image.</param>
            <param name="percent">For histogram analysis; higher values increase the smoothing effect, typically: 80-90. Default: 80</param>
            <param name="mode">Selection of diffusion function. Default: 1</param>
            <param name="iteration">Number of iterations, typical values: 3-7. Default: 5</param>
            <param name="neighborhoodType">Required neighborhood type. Default: 8</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FillInterlace(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Interpolate 2 video half images.</summary>
            <param name="imageCamera">Gray image consisting of two half images.</param>
            <param name="imageFilled">Full image with interpolated/removed lines.</param>
            <param name="mode">Instruction whether even or odd lines should be replaced/removed. Default: "odd"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RankN(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Return gray values with given rank from multiple channels.</summary>
            <param name="image">Multichannel gray image.</param>
            <param name="rankImage">Result of the rank function.</param>
            <param name="rankIndex">Rank of the gray value images to return. Default: 2</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MeanN(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Average gray values over several channels.</summary>
            <param name="image">Multichannel gray image.</param>
            <param name="imageMean">Result of averaging.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EliminateSp(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Replace values outside of thresholds with average value.</summary>
            <param name="image">Input image.</param>
            <param name="imageFillSP">Smoothed image.</param>
            <param name="maskWidth">Width of filter mask. Default: 3</param>
            <param name="maskHeight">Height of filter mask. Default: 3</param>
            <param name="minThresh">Minimum gray value. Default: 1</param>
            <param name="maxThresh">Maximum gray value. Default: 254</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MeanSp(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Suppress salt and pepper noise.</summary>
            <param name="image">Input image.</param>
            <param name="imageSPMean">Smoothed image.</param>
            <param name="maskWidth">Width of filter mask. Default: 3</param>
            <param name="maskHeight">Height of filter mask. Default: 3</param>
            <param name="minThresh">Minimum gray value. Default: 1</param>
            <param name="maxThresh">Maximum gray value. Default: 254</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PointsSojka(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find corners using the Sojka operator.</summary>
            <param name="image">Input image.</param>
            <param name="maskSize">Required filter size. Default: 9</param>
            <param name="sigmaW">Sigma of the weight function according to the distance to the corner candidate. Default: 2.5</param>
            <param name="sigmaD">Sigma of the weight function for the distance to the ideal gray value edge. Default: 0.75</param>
            <param name="minGrad">Threshold for the magnitude of the gradient. Default: 30.0</param>
            <param name="minApparentness">Threshold for Apparentness. Default: 90.0</param>
            <param name="minAngle">Threshold for the direction change in a corner point (radians). Default: 0.5</param>
            <param name="subpix">Subpixel precise calculation of the corner points. Default: "false"</param>
            <param name="row">Row coordinates of the detected corner points.</param>
            <param name="column">Column coordinates of the detected corner points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DotsImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Enhance circular dots in an image.</summary>
            <param name="image">Input image.</param>
            <param name="dotImage">Output image.</param>
            <param name="diameter">Diameter of the dots to be enhanced. Default: 5</param>
            <param name="filterType">Enhance dark, light, or all dots. Default: "light"</param>
            <param name="pixelShift">Shift of the filter response. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LocalMinSubPix(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Subpixel precise detection of local minima in an image.</summary>
            <param name="image">Input image.</param>
            <param name="filter">Method for the calculation of the partial derivatives. Default: "facet"</param>
            <param name="sigma">Sigma of the Gaussian. If Filter is 'facet', Sigma may be 0.0 to avoid the smoothing of the input image.</param>
            <param name="threshold">Minimum absolute value of the eigenvalues of the Hessian matrix. Default: 5.0</param>
            <param name="row">Row coordinates of the detected minima.</param>
            <param name="column">Column coordinates of the detected minima.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LocalMaxSubPix(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Subpixel precise detection of local maxima in an image.</summary>
            <param name="image">Input image.</param>
            <param name="filter">Method for the calculation of the partial derivatives. Default: "facet"</param>
            <param name="sigma">Sigma of the Gaussian. If Filter is 'facet', Sigma may be 0.0 to avoid the smoothing of the input image.</param>
            <param name="threshold">Minimum absolute value of the eigenvalues of the Hessian matrix. Default: 5.0</param>
            <param name="row">Row coordinates of the detected maxima.</param>
            <param name="column">Column coordinates of the detected maxima.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SaddlePointsSubPix(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Subpixel precise detection of saddle points in an image.</summary>
            <param name="image">Input image.</param>
            <param name="filter">Method for the calculation of the partial derivatives. Default: "facet"</param>
            <param name="sigma">Sigma of the Gaussian. If Filter is 'facet', Sigma may be 0.0 to avoid the smoothing of the input image.</param>
            <param name="threshold">Minimum absolute value of the eigenvalues of the Hessian matrix. Default: 5.0</param>
            <param name="row">Row coordinates of the detected saddle points.</param>
            <param name="column">Column coordinates of the detected saddle points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CriticalPointsSubPix(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Subpixel precise detection of critical points in an image.</summary>
            <param name="image">Input image.</param>
            <param name="filter">Method for the calculation of the partial derivatives. Default: "facet"</param>
            <param name="sigma">Sigma of the Gaussian. If Filter is 'facet', Sigma may be 0.0 to avoid the smoothing of the input image.</param>
            <param name="threshold">Minimum absolute value of the eigenvalues of the Hessian matrix. Default: 5.0</param>
            <param name="rowMin">Row coordinates of the detected minima.</param>
            <param name="columnMin">Column coordinates of the detected minima.</param>
            <param name="rowMax">Row coordinates of the detected maxima.</param>
            <param name="columnMax">Column coordinates of the detected maxima.</param>
            <param name="rowSaddle">Row coordinates of the detected saddle points.</param>
            <param name="columnSaddle">Column coordinates of the detected saddle points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PointsHarris(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Detect points of interest using the Harris operator.</summary>
            <param name="image">Input image.</param>
            <param name="sigmaGrad">Amount of smoothing used for the calculation of the gradient. Default: 0.7</param>
            <param name="sigmaSmooth">Amount of smoothing used for the integration of the gradients. Default: 2.0</param>
            <param name="alpha">Weight of the squared trace of the squared gradient matrix. Default: 0.08</param>
            <param name="threshold">Minimum filter response for the points. Default: 1000.0</param>
            <param name="row">Row coordinates of the detected points.</param>
            <param name="column">Column coordinates of the detected points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PointsHarrisBinomial(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Detect points of interest using the binomial approximation of the Harris operator.</summary>
            <param name="image">Input image.</param>
            <param name="maskSizeGrad">Amount of binomial smoothing used for the calculation of the gradient. Default: 5</param>
            <param name="maskSizeSmooth">Amount of smoothing used for the integration of the gradients. Default: 15</param>
            <param name="alpha">Weight of the squared trace of the squared gradient matrix. Default: 0.08</param>
            <param name="threshold">Minimum filter response for the points. Default: 1000.0</param>
            <param name="subpix">Turn on or off subpixel refinement. Default: "on"</param>
            <param name="row">Row coordinates of the detected points.</param>
            <param name="column">Column coordinates of the detected points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PointsLepetit(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Detect points of interest using the Lepetit operator.</summary>
            <param name="image">Input image.</param>
            <param name="radius">Radius of the circle. Default: 3</param>
            <param name="checkNeighbor">Number of checked neighbors on the circle. Default: 1</param>
            <param name="minCheckNeighborDiff">Threshold of grayvalue difference to each circle point. Default: 15</param>
            <param name="minScore">Threshold of grayvalue difference to all circle points. Default: 30</param>
            <param name="subpix">Subpixel accuracy of point coordinates. Default: "interpolation"</param>
            <param name="row">Row-coordinates of the detected points.</param>
            <param name="column">Column-coordinates of the detected points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PointsFoerstner(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Detect points of interest using the Foerstner operator.</summary>
            <param name="image">Input image.</param>
            <param name="sigmaGrad">Amount of smoothing used for the calculation of the gradient. If Smoothing is 'mean', SigmaGrad is ignored. Default: 1.0</param>
            <param name="sigmaInt">Amount of smoothing used for the integration of the gradients. Default: 2.0</param>
            <param name="sigmaPoints">Amount of smoothing used in the optimization functions. Default: 3.0</param>
            <param name="threshInhom">Threshold for the segmentation of inhomogeneous image areas. Default: 200</param>
            <param name="threshShape">Threshold for the segmentation of point areas. Default: 0.3</param>
            <param name="smoothing">Used smoothing method. Default: "gauss"</param>
            <param name="eliminateDoublets">Elimination of multiply detected points. Default: "false"</param>
            <param name="rowJunctions">Row coordinates of the detected junction points.</param>
            <param name="columnJunctions">Column coordinates of the detected junction points.</param>
            <param name="coRRJunctions">Row part of the covariance matrix of the detected junction points.</param>
            <param name="coRCJunctions">Mixed part of the covariance matrix of the detected junction points.</param>
            <param name="coCCJunctions">Column part of the covariance matrix of the detected junction points.</param>
            <param name="rowArea">Row coordinates of the detected area points.</param>
            <param name="columnArea">Column coordinates of the detected area points.</param>
            <param name="coRRArea">Row part of the covariance matrix of the detected area points.</param>
            <param name="coRCArea">Mixed part of the covariance matrix of the detected area points.</param>
            <param name="coCCArea">Column part of the covariance matrix of the detected area points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EstimateNoise(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Estimate the image noise from a single image.</summary>
            <param name="image">Input image.</param>
            <param name="method">Method to estimate the image noise. Default: "foerstner"</param>
            <param name="percent">Percentage of used image points. Default: 20</param>
            <param name="sigma">Standard deviation of the image noise.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.NoiseDistributionMean(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Determine the noise distribution of an image.</summary>
            <param name="constRegion">Region from which the noise distribution is to be estimated.</param>
            <param name="image">Corresponding image.</param>
            <param name="filterSize">Size of the mean filter. Default: 21</param>
            <param name="distribution">Noise distribution of all input regions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddNoiseWhite(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Add noise to an image.</summary>
            <param name="image">Input image.</param>
            <param name="imageNoise">Noisy image.</param>
            <param name="amp">Maximum noise amplitude. Default: 60.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddNoiseDistribution(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Add noise to an image.</summary>
            <param name="image">Input image.</param>
            <param name="imageNoise">Noisy image.</param>
            <param name="distribution">Noise distribution.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GaussDistribution(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Generate a Gaussian noise distribution.</summary>
            <param name="sigma">Standard deviation of the Gaussian noise distribution. Default: 2.0</param>
            <param name="distribution">Resulting Gaussian noise distribution.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SpDistribution(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Generate a salt-and-pepper noise distribution.</summary>
            <param name="percentSalt">Percentage of salt (white noise pixels). Default: 5.0</param>
            <param name="percentPepper">Percentage of pepper (black noise pixels). Default: 5.0</param>
            <param name="distribution">Resulting noise distribution.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeviationN(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculate standard deviation over several channels.</summary>
            <param name="image">Multichannel gray image.</param>
            <param name="imageDeviation">Result of calculation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InpaintingTexture(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Perform an inpainting by texture propagation.</summary>
            <param name="image">Input image.</param>
            <param name="region">Inpainting region.</param>
            <param name="inpaintedImage">Output image.</param>
            <param name="maskSize">Size of the inpainting blocks. Default: 9</param>
            <param name="searchSize">Size of the search window. Default: 30</param>
            <param name="anisotropy">Influence of the edge amplitude on the inpainting order. Default: 1.0</param>
            <param name="postIteration">Post-iteration for artifact reduction. Default: "none"</param>
            <param name="smoothness">Gray value tolerance for post-iteration. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InpaintingCt(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Perform an inpainting by coherence transport.</summary>
            <param name="image">Input image.</param>
            <param name="region">Inpainting region.</param>
            <param name="inpaintedImage">Output image.</param>
            <param name="epsilon">Radius of the pixel neighborhood. Default: 5.0</param>
            <param name="kappa">Sharpness parameter in percent. Default: 25.0</param>
            <param name="sigma">Pre-smoothing parameter. Default: 1.41</param>
            <param name="rho">Smoothing parameter for the direction estimation. Default: 4.0</param>
            <param name="channelCoefficients">Channel weights. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InpaintingMcf(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Perform an inpainting by smoothing of level lines.</summary>
            <param name="image">Input image.</param>
            <param name="region">Inpainting region.</param>
            <param name="inpaintedImage">Output image.</param>
            <param name="sigma">Smoothing for derivative operator. Default: 0.5</param>
            <param name="theta">Time step. Default: 0.5</param>
            <param name="iterations">Number of iterations. Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InpaintingCed(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Perform an inpainting by coherence enhancing diffusion.</summary>
            <param name="image">Input image.</param>
            <param name="region">Inpainting region.</param>
            <param name="inpaintedImage">Output image.</param>
            <param name="sigma">Smoothing for derivative operator. Default: 0.5</param>
            <param name="rho">Smoothing for diffusion coefficients. Default: 3.0</param>
            <param name="theta">Time step. Default: 0.5</param>
            <param name="iterations">Number of iterations. Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InpaintingAniso(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Perform an inpainting by anisotropic diffusion.</summary>
            <param name="image">Input image.</param>
            <param name="region">Inpainting region.</param>
            <param name="inpaintedImage">Output image.</param>
            <param name="mode">Type of edge sharpening algorithm. Default: "weickert"</param>
            <param name="contrast">Contrast parameter. Default: 5.0</param>
            <param name="theta">Step size. Default: 0.5</param>
            <param name="iterations">Number of iterations. Default: 10</param>
            <param name="rho">Smoothing coefficient for edge information. Default: 3.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HarmonicInterpolation(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Perform a harmonic interpolation on an image region.</summary>
            <param name="image">Input image.</param>
            <param name="region">Inpainting region.</param>
            <param name="inpaintedImage">Output image.</param>
            <param name="precision">Computational accuracy. Default: 0.001</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ExpandDomainGray(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Expand the domain of an image and set the gray values in the expanded domain.</summary>
            <param name="inputImage">Input image with domain to be expanded.</param>
            <param name="expandedImage">Output image with new gray values in the expanded domain.</param>
            <param name="expansionRange">Radius of the gray value expansion, measured in pixels. Default: 2</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TopographicSketch(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Compute the topographic primal sketch of an image.</summary>
            <param name="image">Image for which the topographic primal sketch is to be computed.</param>
            <param name="sketch">Label image containing the 11 classes.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LinearTransColor(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Compute an affine transformation of the color values of a multichannel image.</summary>
            <param name="image">Multichannel input image.</param>
            <param name="imageTrans">Multichannel output image.</param>
            <param name="transMat">Transformation matrix for the color values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenPrincipalCompTrans(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the transformation matrix of the principal component analysis of multichannel images.</summary>
            <param name="multichannelImage">Multichannel input image.</param>
            <param name="trans">Transformation matrix for the computation of the PCA.</param>
            <param name="transInv">Transformation matrix for the computation of the inverse PCA.</param>
            <param name="mean">Mean gray value of the channels.</param>
            <param name="cov">Covariance matrix of the channels.</param>
            <param name="infoPerComp">Information content of the transformed channels.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PrincipalComp(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple@)">
            <summary>Compute the principal components of multichannel images.</summary>
            <param name="multichannelImage">Multichannel input image.</param>
            <param name="PCAImage">Multichannel output image.</param>
            <param name="infoPerComp">Information content of each output channel.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FuzzyEntropy(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Determine the fuzzy entropy of regions.</summary>
            <param name="regions">Regions for which the fuzzy entropy is to be calculated.</param>
            <param name="image">Input image containing the fuzzy membership values.</param>
            <param name="apar">Start of the fuzzy function. Default: 0</param>
            <param name="cpar">End of the fuzzy function. Default: 255</param>
            <param name="entropy">Fuzzy entropy of a region.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FuzzyPerimeter(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the fuzzy perimeter of a region.</summary>
            <param name="regions">Regions for which the fuzzy perimeter is to be calculated.</param>
            <param name="image">Input image containing the fuzzy membership values.</param>
            <param name="apar">Start of the fuzzy function. Default: 0</param>
            <param name="cpar">End of the fuzzy function. Default: 255</param>
            <param name="perimeter">Fuzzy perimeter of a region.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayClosingShape(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Perform a grayvalue closing with a selected mask.</summary>
            <param name="image">Image for which the minimum gray values are to be calculated.</param>
            <param name="imageClosing">Image containing the minimum gray values.</param>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
            <param name="maskShape">Shape of the mask. Default: "octagon"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayOpeningShape(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Perform a gray value opening with a selected mask.</summary>
            <param name="image">Image for which the minimum gray values are to be calculated.</param>
            <param name="imageOpening">Image containing the minimum gray values.</param>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
            <param name="maskShape">Shape of the mask. Default: "octagon"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayErosionShape(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Determine the minimum gray value within a selected mask.</summary>
            <param name="image">Image for which the minimum gray values are to be calculated.</param>
            <param name="imageMin">Image containing the minimum gray values.</param>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
            <param name="maskShape">Shape of the mask. Default: "octagon"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayDilationShape(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Determine the maximum gray value within a selected mask.</summary>
            <param name="image">Image for which the maximum gray values are to be calculated.</param>
            <param name="imageMax">Image containing the maximum gray values.</param>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
            <param name="maskShape">Shape of the mask. Default: "octagon"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayRangeRect(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Determine the gray value range within a rectangle.</summary>
            <param name="image">Image for which the gray value range is to be calculated.</param>
            <param name="imageResult">Image containing the gray value range.</param>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayClosingRect(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Perform a gray value closing with a rectangular mask.</summary>
            <param name="image">Input image.</param>
            <param name="imageClosing">Gray-closed image.</param>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayOpeningRect(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Perform a gray value opening with a rectangular mask.</summary>
            <param name="image">Input image.</param>
            <param name="imageOpening">Gray-opened image.</param>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayErosionRect(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Determine the minimum gray value within a rectangle.</summary>
            <param name="image">Image for which the minimum gray values are to be calculated.</param>
            <param name="imageMin">Image containing the minimum gray values.</param>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayDilationRect(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Determine the maximum gray value within a rectangle.</summary>
            <param name="image">Image for which the maximum gray values are to be calculated.</param>
            <param name="imageMax">Image containing the maximum gray values.</param>
            <param name="maskHeight">Height of the filter mask. Default: 11</param>
            <param name="maskWidth">Width of the filter mask. Default: 11</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GraySkeleton(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Thinning of gray value images.</summary>
            <param name="image">Image to be thinned.</param>
            <param name="graySkeleton">Thinned image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LutTrans(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Transform an image with a gray-value look-up-table</summary>
            <param name="image">Image whose gray values are to be transformed.</param>
            <param name="imageResult">Transformed image.</param>
            <param name="lut">Table containing the transformation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ConvolImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Calculate the correlation between an image and an arbitrary filter mask</summary>
            <param name="image">Images for which the correlation will be calculated.</param>
            <param name="imageResult">Result of the correlation.</param>
            <param name="filterMask">Filter mask as file name or tuple. Default: "sobel"</param>
            <param name="margin">Border treatment. Default: "mirrored"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ConvertImageType(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Convert the type of an image.</summary>
            <param name="image">Image whose image type is to be changed.</param>
            <param name="imageConverted">Converted image.</param>
            <param name="newType">Desired image type (i.e., type of the gray values). Default: "byte"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RealToVectorField(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Convert two real-valued images into a vector field image.</summary>
            <param name="row">Vector component in the row direction.</param>
            <param name="col">Vector component in the column direction.</param>
            <param name="vectorField">Displacement vector field.</param>
            <param name="type">Semantic kind of the vector field. Default: "vector_field_relative"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.VectorFieldToReal(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@)">
            <summary>Convert a vector field image into two real-valued images.</summary>
            <param name="vectorField">Vector field.</param>
            <param name="row">Vector component in the row direction.</param>
            <param name="col">Vector component in the column direction.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RealToComplex(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Convert two real images into a complex image.</summary>
            <param name="imageReal">Real part.</param>
            <param name="imageImaginary">Imaginary part.</param>
            <param name="imageComplex">Complex image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ComplexToReal(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@)">
            <summary>Convert a complex image into two real images.</summary>
            <param name="imageComplex">Complex image.</param>
            <param name="imageReal">Real part.</param>
            <param name="imageImaginary">Imaginary part.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RegionToMean(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Paint regions with their average gray value.</summary>
            <param name="regions">Input regions.</param>
            <param name="image">original gray-value image.</param>
            <param name="imageMean">Result image with painted regions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayInside(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculate the lowest possible gray value on an arbitrary path to the image border for each point in the image.</summary>
            <param name="image">Image being processed.</param>
            <param name="imageDist">Result image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Symmetry(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Symmetry of gray values along a row.</summary>
            <param name="image">Input image.</param>
            <param name="imageSymmetry">Symmetry image.</param>
            <param name="maskSize">Extension of search area. Default: 40</param>
            <param name="direction">Angle of test direction. Default: 0.0</param>
            <param name="exponent">Exponent for weighting. Default: 0.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectGrayvaluesFromChannels(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Selection of gray values of a multi-channel image using an index image.</summary>
            <param name="multichannelImage">Multi-channel gray value image.</param>
            <param name="indexImage">Image, where pixel values are interpreted as channel index.</param>
            <param name="selected">Resulting image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DepthFromFocus(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Extract depth using mutiple focus levels.</summary>
            <param name="multiFocusImage">Multichannel gray image consisting of multiple focus levels.</param>
            <param name="depth">Depth image.</param>
            <param name="confidence">Confidence of depth estimation.</param>
            <param name="filter">Filter used to find sharp pixels. Default: "highpass"</param>
            <param name="selection">Method used to find sharp pixels. Default: "next_maximum"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SceneFlowCalib(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the calibrated scene flow between two stereo image pairs.</summary>
            <param name="imageRect1T1">Input image 1 at time @f$t_{1}$t_1.</param>
            <param name="imageRect2T1">Input image 2 at time @f$t_{1}$t_1.</param>
            <param name="imageRect1T2">Input image 1 at time @f$t_{2}$t_2.</param>
            <param name="imageRect2T2">Input image 2 at time @f$t_{2}$t_2.</param>
            <param name="disparity">Disparity between input images 1 and 2 at time @f$t_{1}$t_1.</param>
            <param name="smoothingFlow">Weight of the regularization term relative to the data term (derivatives of the optical flow). Default: 40.0</param>
            <param name="smoothingDisparity">Weight of the regularization term relative to the data term (derivatives of the disparity change). Default: 40.0</param>
            <param name="genParamName">Parameter name(s) for the algorithm. Default: "default_parameters"</param>
            <param name="genParamValue">Parameter value(s) for the algorithm. Default: "accurate"</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <param name="relPoseRect">Pose of the rectified camera 2 in relation to the rectified camera 1.</param>
            <param name="objectModel3D">Handle of the 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SceneFlowUncalib(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the uncalibrated scene flow between two stereo image pairs.</summary>
            <param name="imageRect1T1">Input image 1 at time @f$t_{1}$t_1.</param>
            <param name="imageRect2T1">Input image 2 at time @f$t_{1}$t_1.</param>
            <param name="imageRect1T2">Input image 1 at time @f$t_{2}$t_2.</param>
            <param name="imageRect2T2">Input image 2 at time @f$t_{2}$t_2.</param>
            <param name="disparity">Disparity between input images 1 and 2 at time @f$t_{1}$t_1.</param>
            <param name="opticalFlow">Estimated optical flow.</param>
            <param name="disparityChange">Estimated change in disparity.</param>
            <param name="smoothingFlow">Weight of the regularization term relative to the data term (derivatives of the optical flow). Default: 40.0</param>
            <param name="smoothingDisparity">Weight of the regularization term relative to the data term (derivatives of the disparity change). Default: 40.0</param>
            <param name="genParamName">Parameter name(s) for the algorithm. Default: "default_parameters"</param>
            <param name="genParamValue">Parameter value(s) for the algorithm. Default: "accurate"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.UnwarpImageVectorField(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Unwarp an image using a vector field.</summary>
            <param name="image">Input image.</param>
            <param name="vectorField">Input vector field.</param>
            <param name="imageUnwarped">Unwarped image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DerivateVectorField(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Convolve a vector field with derivatives of the Gaussian.</summary>
            <param name="vectorField">Input vector field.</param>
            <param name="result">Filtered result images.</param>
            <param name="sigma">Sigma of the Gaussian. Default: 1.0</param>
            <param name="component">Component to be calculated. Default: "mean_curvature"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.VectorFieldLength(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Compute the length of the vectors of a vector field.</summary>
            <param name="vectorField">Input vector field</param>
            <param name="length">Length of the vectors of the vector field.</param>
            <param name="mode">Mode for computing the length of the vectors. Default: "length"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OpticalFlowMg(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the optical flow between two images.</summary>
            <param name="imageT1">Input image 1.</param>
            <param name="imageT2">Input image 2.</param>
            <param name="vectorField">Optical flow.</param>
            <param name="algorithm">Algorithm for computing the optical flow. Default: "fdrig"</param>
            <param name="smoothingSigma">Standard deviation for initial Gaussian smoothing. Default: 0.8</param>
            <param name="integrationSigma">Standard deviation of the integration filter. Default: 1.0</param>
            <param name="flowSmoothness">Weight of the smoothing term relative to the data term. Default: 20.0</param>
            <param name="gradientConstancy">Weight of the gradient constancy relative to the gray value constancy. Default: 5.0</param>
            <param name="MGParamName">Parameter name(s) for the multigrid algorithm. Default: "default_parameters"</param>
            <param name="MGParamValue">Parameter value(s) for the multigrid algorithm. Default: "accurate"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ExhaustiveMatchMg(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Matching a template and an image in a resolution pyramid.</summary>
            <param name="image">Input image.</param>
            <param name="imageTemplate">The domain of this image will be matched with Image.</param>
            <param name="imageMatch">Result image and result region: values of the matching criterion within the determined "region of interest".</param>
            <param name="mode">Desired matching criterion. Default: "dfd"</param>
            <param name="level">Startlevel in the resolution pyramid (highest resolution: Level 0). Default: 1</param>
            <param name="threshold">Threshold to determine the "region of interest". Default: 30</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateTemplateRot(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Preparing a pattern for template matching with rotation.</summary>
            <param name="template">Input image whose domain will be processed for the pattern matching.</param>
            <param name="numLevel">Maximal number of pyramid levels. Default: 4</param>
            <param name="angleStart">Smallest Rotation of the pattern. Default: -0.39</param>
            <param name="angleExtend">Maximum positive Extension of AngleStart. Default: 0.79</param>
            <param name="angleStep">Step rate (angle precision) of matching. Default: 0.0982</param>
            <param name="optimize">Kind of optimizing. Default: "sort"</param>
            <param name="grayValues">Kind of grayvalues. Default: "original"</param>
            <param name="templateID">Template number.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateTemplate(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Preparing a pattern for template matching.</summary>
            <param name="template">Input image whose domain will be processed for the pattern matching.</param>
            <param name="firstError">Not yet in use. Default: 255</param>
            <param name="numLevel">Maximal number of pyramid levels. Default: 4</param>
            <param name="optimize">Kind of optimizing. Default: "sort"</param>
            <param name="grayValues">Kind of grayvalues. Default: "original"</param>
            <param name="templateID">Template number.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeTemplate(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a template.</summary>
            <param name="templateID">Handle of the template.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeTemplate(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized template.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="templateID">Template number.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteTemplate(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Writing a template to file.</summary>
            <param name="templateID">Template number.</param>
            <param name="fileName">file name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadTemplate(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Reading a template from file.</summary>
            <param name="fileName">file name.</param>
            <param name="templateID">Template number.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllTemplates">
            <summary>Deallocation of the memory of all templates.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearTemplate(HalconDotNet.HTuple)">
            <summary>Deallocation of the memory of a template.</summary>
            <param name="templateID">Template number.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetOffsetTemplate(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Gray value offset for template.</summary>
            <param name="templateID">Template number.</param>
            <param name="grayOffset">Offset of gray values. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetReferenceTemplate(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Define reference position for a matching template.</summary>
            <param name="templateID">Template number.</param>
            <param name="row">Reference position of template (row).</param>
            <param name="column">Reference position of template (column).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AdaptTemplate(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Adapting a template to the size of an image.</summary>
            <param name="image">Image which determines the size of the later matching.</param>
            <param name="templateID">Template number.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FastMatchMg(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Searching all good grayvalue matches in a pyramid.</summary>
            <param name="image">Input image inside of which the pattern has to be found.</param>
            <param name="matches">All points which have an error below a certain threshold.</param>
            <param name="templateID">Template number.</param>
            <param name="maxError">Maximal average difference of the grayvalues. Default: 30.0</param>
            <param name="numLevel">Number of levels in the pyramid. Default: 3</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BestMatchPreMg(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Searching the best grayvalue matches in a pre generated pyramid.</summary>
            <param name="imagePyramid">Image pyramid inside of which the pattern has to be found.</param>
            <param name="templateID">Template number.</param>
            <param name="maxError">Maximal average difference of the grayvalues. Default: 30.0</param>
            <param name="subPixel">Exactness in subpixels in case of 'true'. Default: "false"</param>
            <param name="numLevels">Number of the used resolution levels. Default: 3</param>
            <param name="whichLevels">Resolution level up to which the method "best match" is used. Default: "original"</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="error">Average divergence of the grayvalues in the best match.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BestMatchMg(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Searching the best grayvalue matches in a pyramid.</summary>
            <param name="image">Input image inside of which the pattern has to be found.</param>
            <param name="templateID">Template number.</param>
            <param name="maxError">Maximal average difference of the grayvalues. Default: 30.0</param>
            <param name="subPixel">Exactness in subpixels in case of 'true'. Default: "false"</param>
            <param name="numLevels">Number of the used resolution levels. Default: 4</param>
            <param name="whichLevels">Resolution level up to which the method "best match" is used. Default: 2</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="error">Average divergence of the grayvalues in the best match.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FastMatch(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Searching all good matches of a template and an image.</summary>
            <param name="image">Input image inside of which the pattern has to be found.</param>
            <param name="matches">All points whose error lies below a certain threshold.</param>
            <param name="templateID">Template number.</param>
            <param name="maxError">Maximal average difference of the grayvalues. Default: 20.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BestMatchRotMg(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Searching the best matching of a template and a pyramid with rotation.</summary>
            <param name="image">Input image inside of which the pattern has to be found.</param>
            <param name="templateID">Template number.</param>
            <param name="angleStart">Smallest Rotation of the pattern. Default: -0.39</param>
            <param name="angleExtend">Maximum positive Extension of AngleStart. Default: 0.79</param>
            <param name="maxError">Maximum average difference of the grayvalues. Default: 40.0</param>
            <param name="subPixel">Subpixel accuracy in case of 'true'. Default: "false"</param>
            <param name="numLevels">Number of the used resolution levels. Default: 3</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="angle">Rotation angle of pattern.</param>
            <param name="error">Average divergence of the grayvalues of the best match.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BestMatchRot(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Searching the best matching of a template and an image with rotation.</summary>
            <param name="image">Input image inside of which the pattern has to be found.</param>
            <param name="templateID">Template number.</param>
            <param name="angleStart">Smallest Rotation of the pattern. Default: -0.39</param>
            <param name="angleExtend">Maximum positive Extension of AngleStart. Default: 0.79</param>
            <param name="maxError">Maximum average difference of the grayvalues. Default: 30.0</param>
            <param name="subPixel">Subpixel accuracy in case of 'true'. Default: "false"</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="angle">Rotation angle of pattern.</param>
            <param name="error">Average divergence of the grayvalues of the best match.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BestMatch(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Searching the best matching of a template and an image.</summary>
            <param name="image">Input image inside of which the pattern has to be found.</param>
            <param name="templateID">Template number.</param>
            <param name="maxError">Maximum average difference of the grayvalues. Default: 20.0</param>
            <param name="subPixel">Subpixel accuracy in case of 'true'. Default: "false"</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="error">Average divergence of the grayvalues of the best match.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ExhaustiveMatch(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Matching of a template and an image.</summary>
            <param name="image">Input image.</param>
            <param name="regionOfInterest">Area to be searched in the input image.</param>
            <param name="imageTemplate">This area  will be "matched" by Image within the RegionOfInterest.</param>
            <param name="imageMatch">Result image: values of the matching criterion.</param>
            <param name="mode">Desired matching criterion. Default: "dfd"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CornerResponse(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Searching corners in images.</summary>
            <param name="image">Input image.</param>
            <param name="imageCorner">Result of the filtering.</param>
            <param name="size">Desired filtersize of the graymask. Default: 3</param>
            <param name="weight">Weighting. Default: 0.04</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenGaussPyramid(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Calculating a Gauss pyramid.</summary>
            <param name="image">Input image.</param>
            <param name="imagePyramid">Output images.</param>
            <param name="mode">Kind of filtermask. Default: "weighted"</param>
            <param name="scale">Factor for scaling down. Default: 0.5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Monotony(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculating the monotony operation.</summary>
            <param name="image">Input image.</param>
            <param name="imageMonotony">Result of the monotony operator.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BandpassImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Edge extraction using bandpass filters.</summary>
            <param name="image">Input images.</param>
            <param name="imageBandpass">Bandpass-filtered images.</param>
            <param name="filterType">Filter type: currently only 'lines' is supported. Default: "lines"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LinesColor(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Detect color lines and their width.</summary>
            <param name="image">Input image.</param>
            <param name="lines">Extracted lines.</param>
            <param name="sigma">Amount of Gaussian smoothing to be applied. Default: 1.5</param>
            <param name="low">Lower threshold for the hysteresis threshold operation. Default: 3</param>
            <param name="high">Upper threshold for the hysteresis threshold operation. Default: 8</param>
            <param name="extractWidth">Should the line width be extracted? Default: "true"</param>
            <param name="completeJunctions">Should junctions be added where they cannot be extracted? Default: "true"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LinesGauss(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Detect lines and their width.</summary>
            <param name="image">Input image.</param>
            <param name="lines">Extracted lines.</param>
            <param name="sigma">Amount of Gaussian smoothing to be applied. Default: 1.5</param>
            <param name="low">Lower threshold for the hysteresis threshold operation. Default: 3</param>
            <param name="high">Upper threshold for the hysteresis threshold operation. Default: 8</param>
            <param name="lightDark">Extract bright or dark lines. Default: "light"</param>
            <param name="extractWidth">Should the line width be extracted? Default: "true"</param>
            <param name="lineModel">Line model used to correct the line position and width. Default: "bar-shaped"</param>
            <param name="completeJunctions">Should junctions be added where they cannot be extracted? Default: "true"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LinesFacet(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Detection of lines using the facet model.</summary>
            <param name="image">Input image.</param>
            <param name="lines">Extracted lines.</param>
            <param name="maskSize">Size of the facet model mask. Default: 5</param>
            <param name="low">Lower threshold for the hysteresis threshold operation. Default: 3</param>
            <param name="high">Upper threshold for the hysteresis threshold operation. Default: 8</param>
            <param name="lightDark">Extract bright or dark lines. Default: "light"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenFilterMask(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Store a filter mask in the spatial domain as a real-image.</summary>
            <param name="imageFilter">Filter in the spatial domain.</param>
            <param name="filterMask">Filter mask as file name or tuple. Default: "gauss"</param>
            <param name="scale">Scaling factor. Default: 1.0</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenMeanFilter(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate a mean filter in the frequency domain.</summary>
            <param name="imageMean">Mean filter as image in the frequency domain.</param>
            <param name="maskShape">Shape of the filter mask in the spatial domain. Default: "ellipse"</param>
            <param name="diameter1">Diameter of the mean filter in the principal direction of the filter in the spatial domain. Default: 11.0</param>
            <param name="diameter2">Diameter of the mean filter perpendicular to the principal direction of the filter in the spatial domain. Default: 11.0</param>
            <param name="phi">Principal direction of the filter in the spatial domain. Default: 0.0</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenGaussFilter(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate a Gaussian filter in the frequency domain.</summary>
            <param name="imageGauss">Gaussian filter as image in the frequency domain.</param>
            <param name="sigma1">Standard deviation of the Gaussian in the principal direction of the filter in the spatial domain. Default: 1.0</param>
            <param name="sigma2">Standard deviation of the Gaussian perpendicular to the principal direction of the filter in the spatial domain. Default: 1.0</param>
            <param name="phi">Principal direction of the filter in the spatial domain. Default: 0.0</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenDerivativeFilter(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate a derivative filter in the frequency domain.</summary>
            <param name="imageDerivative">Derivative filter as image in the frequency domain.</param>
            <param name="derivative">Derivative to be computed. Default: "x"</param>
            <param name="exponent">Exponent used in the reverse transform. Default: 1</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenStdBandpass(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate a bandpass filter with Gaussian or sinusoidal shape.</summary>
            <param name="imageFilter">Bandpass filter as image in the frequency domain.</param>
            <param name="frequency">Distance of the filter's maximum from the DC term. Default: 0.1</param>
            <param name="sigma">Bandwidth of the filter (standard deviation). Default: 0.01</param>
            <param name="type">Filter type. Default: "sin"</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenSinBandpass(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate a bandpass filter with sinusoidal shape.</summary>
            <param name="imageFilter">Bandpass filter as image in the frequency domain.</param>
            <param name="frequency">Distance of the filter's maximum from the DC term. Default: 0.1</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenBandfilter(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate an ideal band filter.</summary>
            <param name="imageFilter">Band filter in the frequency domain.</param>
            <param name="minFrequency">Minimum frequency. Default: 0.1</param>
            <param name="maxFrequency">Maximum frequency. Default: 0.2</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenBandpass(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate an ideal bandpass filter.</summary>
            <param name="imageBandpass">Bandpass filter in the frequency domain.</param>
            <param name="minFrequency">Minimum frequency. Default: 0.1</param>
            <param name="maxFrequency">Maximum frequency. Default: 0.2</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenLowpass(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate an ideal lowpass filter.</summary>
            <param name="imageLowpass">Lowpass filter in the frequency domain.</param>
            <param name="frequency">Cutoff frequency. Default: 0.1</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenHighpass(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate an ideal highpass filter.</summary>
            <param name="imageHighpass">Highpass filter in the frequency domain.</param>
            <param name="frequency">Cutoff frequency. Default: 0.1</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PowerLn(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Return the power spectrum of a complex image.</summary>
            <param name="image">Input image in frequency domain.</param>
            <param name="imageResult">Power spectrum of the input image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PowerReal(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Return the power spectrum of a complex image.</summary>
            <param name="image">Input image in frequency domain.</param>
            <param name="imageResult">Power spectrum of the input image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PowerByte(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Return the power spectrum of a complex image.</summary>
            <param name="image">Input image in frequency domain.</param>
            <param name="powerByte">Power spectrum of the input image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PhaseDeg(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Return the phase of a complex image in degrees.</summary>
            <param name="imageComplex">Input image in frequency domain.</param>
            <param name="imagePhase">Phase of the image in degrees.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PhaseRad(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Return the phase of a complex image in radians.</summary>
            <param name="imageComplex">Input image in frequency domain.</param>
            <param name="imagePhase">Phase of the image in radians.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EnergyGabor(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculate the energy of a two-channel image.</summary>
            <param name="imageGabor">1st channel of input image (usually: Gabor image).</param>
            <param name="imageHilbert">2nd channel of input image (usually: Hilbert image).</param>
            <param name="energy">Image containing the local energy.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ConvolGabor(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@)">
            <summary>Convolve an image with a Gabor filter in the frequency domain.</summary>
            <param name="imageFFT">Input image.</param>
            <param name="gaborFilter">Gabor/Hilbert-Filter.</param>
            <param name="imageResultGabor">Result of the Gabor filter.</param>
            <param name="imageResultHilbert">Result of the Hilbert filter.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenGabor(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate a Gabor filter.</summary>
            <param name="imageFilter">Gabor and Hilbert filter.</param>
            <param name="angle">Angle range, inversely proportional to the range of orientations. Default: 1.4</param>
            <param name="frequency">Distance of the center of the filter to the DC term. Default: 0.4</param>
            <param name="bandwidth">Bandwidth range, inversely proportional to the range of frequencies being passed. Default: 1.0</param>
            <param name="orientation">Angle of the principal orientation. Default: 1.5</param>
            <param name="norm">Normalizing factor of the filter. Default: "none"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="width">Width of the image (filter). Default: 512</param>
            <param name="height">Height of the image (filter). Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PhaseCorrelationFft(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Compute the phase correlation of two images in the frequency domain.</summary>
            <param name="imageFFT1">Fourier-transformed input image 1.</param>
            <param name="imageFFT2">Fourier-transformed input image 2.</param>
            <param name="imagePhaseCorrelation">Phase correlation of the input images in the frequency domain.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CorrelationFft(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Compute the correlation of two images in the frequency domain.</summary>
            <param name="imageFFT1">Fourier-transformed input image 1.</param>
            <param name="imageFFT2">Fourier-transformed input image 2.</param>
            <param name="imageCorrelation">Correlation of the input images in the frequency domain.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ConvolFft(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Convolve an image with a filter in the frequency domain.</summary>
            <param name="imageFFT">Complex input image.</param>
            <param name="imageFilter">Filter in frequency domain.</param>
            <param name="imageConvol">Result of applying the filter.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeFftOptimizationData(HalconDotNet.HTuple)">
            <summary>Deserialize FFT speed optimization data.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeFftOptimizationData(HalconDotNet.HTuple@)">
            <summary>Serialize FFT speed optimization data.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadFftOptimizationData(HalconDotNet.HTuple)">
            <summary>Load FFT speed optimization data from a file.</summary>
            <param name="fileName">File name of the optimization data. Default: "fft_opt.dat"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteFftOptimizationData(HalconDotNet.HTuple)">
            <summary>Store FFT speed optimization data in a file.</summary>
            <param name="fileName">File name of the optimization data. Default: "fft_opt.dat"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OptimizeRftSpeed(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Optimize the runtime of the real-valued FFT.</summary>
            <param name="width">Width of the image for which the runtime should be optimized. Default: 512</param>
            <param name="height">Height of the image for which the runtime should be optimized. Default: 512</param>
            <param name="mode">Thoroughness of the search for the optimum runtime. Default: "standard"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OptimizeFftSpeed(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Optimize the runtime of the FFT.</summary>
            <param name="width">Width of the image for which the runtime should be optimized. Default: 512</param>
            <param name="height">Height of the image for which the runtime should be optimized. Default: 512</param>
            <param name="mode">Thoroughness of the search for the optimum runtime. Default: "standard"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RftGeneric(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the real-valued fast Fourier transform of an image.</summary>
            <param name="image">Input image.</param>
            <param name="imageFFT">Fourier-transformed image.</param>
            <param name="direction">Calculate forward or reverse transform. Default: "to_freq"</param>
            <param name="norm">Normalizing factor of the transform. Default: "sqrt"</param>
            <param name="resultType">Image type of the output image. Default: "complex"</param>
            <param name="width">Width of the image for which the runtime should be optimized. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FftImageInv(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Compute the inverse fast Fourier transform of an image.</summary>
            <param name="image">Input image.</param>
            <param name="imageFFTInv">Inverse-Fourier-transformed image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FftImage(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Compute the fast Fourier transform of an image.</summary>
            <param name="image">Input image.</param>
            <param name="imageFFT">Fourier-transformed image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FftGeneric(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Compute the fast Fourier transform of an image.</summary>
            <param name="image">Input image.</param>
            <param name="imageFFT">Fourier-transformed image.</param>
            <param name="direction">Calculate forward or reverse transform. Default: "to_freq"</param>
            <param name="exponent">Sign of the exponent. Default: -1</param>
            <param name="norm">Normalizing factor of the transform. Default: "sqrt"</param>
            <param name="mode">Location of the DC term in the frequency domain. Default: "dc_center"</param>
            <param name="resultType">Image type of the output image. Default: "complex"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ShockFilter(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Apply a shock filter to an image.</summary>
            <param name="image">Input image.</param>
            <param name="sharpenedImage">Output image.</param>
            <param name="theta">Time step. Default: 0.5</param>
            <param name="iterations">Number of iterations. Default: 10</param>
            <param name="mode">Type of edge detector. Default: "canny"</param>
            <param name="sigma">Smoothing of edge detector. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MeanCurvatureFlow(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Apply the mean curvature flow to an image.</summary>
            <param name="image">Input image.</param>
            <param name="imageMCF">Output image.</param>
            <param name="sigma">Smoothing parameter for derivative operator. Default: 0.5</param>
            <param name="theta">Time step. Default: 0.5</param>
            <param name="iterations">Number of iterations. Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CoherenceEnhancingDiff(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Perform a coherence enhancing diffusion of an image.</summary>
            <param name="image">Input image.</param>
            <param name="imageCED">Output image.</param>
            <param name="sigma">Smoothing for derivative operator. Default: 0.5</param>
            <param name="rho">Smoothing for diffusion coefficients. Default: 3.0</param>
            <param name="theta">Time step. Default: 0.5</param>
            <param name="iterations">Number of iterations. Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EquHistoImage(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Histogram linearisation of images</summary>
            <param name="image">Image to be enhanced.</param>
            <param name="imageEquHisto">Image with linearized gray values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Illuminate(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Illuminate image.</summary>
            <param name="image">Image to be enhanced.</param>
            <param name="imageIlluminate">"`Illuminated"' image.</param>
            <param name="maskWidth">Width of low pass mask. Default: 101</param>
            <param name="maskHeight">Height of low pass mask. Default: 101</param>
            <param name="factor">Scales the "`correction gray value"' added to the original gray values. Default: 0.7</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Emphasize(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Enhance contrast of the image.</summary>
            <param name="image">Image to be enhanced.</param>
            <param name="imageEmphasize">contrast enhanced image.</param>
            <param name="maskWidth">Width of low pass mask. Default: 7</param>
            <param name="maskHeight">Height of the low pass mask. Default: 7</param>
            <param name="factor">Intensity of contrast emphasis. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ScaleImageMax(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Maximum gray value spreading in the value range 0 to 255.</summary>
            <param name="image">Image to be scaled.</param>
            <param name="imageScaleMax">contrast enhanced image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RobinsonDir(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@)">
            <summary>Detect edges (amplitude and direction) using the Robinson operator.</summary>
            <param name="image">Input image.</param>
            <param name="imageEdgeAmp">Edge amplitude (gradient magnitude) image.</param>
            <param name="imageEdgeDir">Edge direction image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RobinsonAmp(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Detect edges (amplitude) using the Robinson operator.</summary>
            <param name="image">Input image.</param>
            <param name="imageEdgeAmp">Edge amplitude (gradient magnitude) image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.KirschDir(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@)">
            <summary>Detect edges (amplitude and direction) using the Kirsch operator.</summary>
            <param name="image">Input image.</param>
            <param name="imageEdgeAmp">Edge amplitude (gradient magnitude) image.</param>
            <param name="imageEdgeDir">Edge direction image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.KirschAmp(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Detect edges (amplitude) using the Kirsch operator.</summary>
            <param name="image">Input image.</param>
            <param name="imageEdgeAmp">Edge amplitude (gradient magnitude) image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FreiDir(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@)">
            <summary>Detect edges (amplitude and direction) using the Frei-Chen operator.</summary>
            <param name="image">Input image.</param>
            <param name="imageEdgeAmp">Edge amplitude (gradient magnitude) image.</param>
            <param name="imageEdgeDir">Edge direction image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FreiAmp(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Detect edges (amplitude) using the Frei-Chen operator.</summary>
            <param name="image">Input image.</param>
            <param name="imageEdgeAmp">Edge amplitude (gradient magnitude) image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PrewittDir(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@)">
            <summary>Detect edges (amplitude and direction) using the Prewitt operator.</summary>
            <param name="image">Input image.</param>
            <param name="imageEdgeAmp">Edge amplitude (gradient magnitude) image.</param>
            <param name="imageEdgeDir">Edge direction image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PrewittAmp(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Detect edges (amplitude) using the Prewitt operator.</summary>
            <param name="image">Input image.</param>
            <param name="imageEdgeAmp">Edge amplitude (gradient magnitude) image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SobelAmp(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Detect edges (amplitude) using the Sobel operator.</summary>
            <param name="image">Input image.</param>
            <param name="edgeAmplitude">Edge amplitude (gradient magnitude) image.</param>
            <param name="filterType">Filter type. Default: "sum_abs"</param>
            <param name="size">Size of filter mask. Default: 3</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SobelDir(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Detect edges (amplitude and direction) using the Sobel operator.</summary>
            <param name="image">Input image.</param>
            <param name="edgeAmplitude">Edge amplitude (gradient magnitude) image.</param>
            <param name="edgeDirection">Edge direction image.</param>
            <param name="filterType">Filter type. Default: "sum_abs"</param>
            <param name="size">Size of filter mask. Default: 3</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Roberts(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Detect edges using the Roberts filter.</summary>
            <param name="image">Input image.</param>
            <param name="imageRoberts">Roberts-filtered result images.</param>
            <param name="filterType">Filter type. Default: "gradient_sum"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Laplace(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Calculate the Laplace operator by using finite differences.</summary>
            <param name="image">Input image.</param>
            <param name="imageLaplace">Laplace-filtered result image.</param>
            <param name="resultType">Type of the result image, whereas for byte and uint2 the absolute value is used. Default: "absolute"</param>
            <param name="maskSize">Size of filter mask. Default: 3</param>
            <param name="filterMask">Filter mask used in the Laplace operator Default: "n_4"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HighpassImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Extract high frequency components from an image.</summary>
            <param name="image">Input image.</param>
            <param name="highpass">High-pass-filtered result image.</param>
            <param name="width">Width of the filter mask. Default: 9</param>
            <param name="height">Height of the filter mask. Default: 9</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InfoEdges(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Estimate the width of a filter in edges_image.</summary>
            <param name="filter">Name of the edge operator. Default: "lanser2"</param>
            <param name="mode">1D edge filter ('edge') or 1D smoothing filter ('smooth'). Default: "edge"</param>
            <param name="alpha">Filter parameter: small values result in strong smoothing, and thus less detail (opposite for 'canny'). Default: 0.5</param>
            <param name="size">Filter width in pixels.</param>
            <param name="coeffs">For Canny filters: Coefficients of the "positive" half of the 1D impulse response.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EdgesColorSubPix(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Extract subpixel precise color edges using Deriche, Shen, or Canny filters.</summary>
            <param name="image">Input image.</param>
            <param name="edges">Extracted edges.</param>
            <param name="filter">Edge operator to be applied. Default: "canny"</param>
            <param name="alpha">Filter parameter: small values result in strong smoothing, and thus less detail (opposite for 'canny'). Default: 1.0</param>
            <param name="low">Lower threshold for the hysteresis threshold operation. Default: 20</param>
            <param name="high">Upper threshold for the hysteresis threshold operation. Default: 40</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EdgesColor(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Extract color edges using Canny, Deriche, or Shen filters.</summary>
            <param name="image">Input image.</param>
            <param name="imaAmp">Edge amplitude (gradient magnitude) image.</param>
            <param name="imaDir">Edge direction image.</param>
            <param name="filter">Edge operator to be applied. Default: "canny"</param>
            <param name="alpha">Filter parameter: small values result in strong smoothing, and thus less detail (opposite for 'canny'). Default: 1.0</param>
            <param name="NMS">Non-maximum suppression ('none', if not desired). Default: "nms"</param>
            <param name="low">Lower threshold for the hysteresis threshold operation (negative if no thresholding is desired). Default: 20</param>
            <param name="high">Upper threshold for the hysteresis threshold operation (negative if no thresholding is desired). Default: 40</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EdgesSubPix(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Extract sub-pixel precise edges using Deriche, Lanser, Shen, or Canny filters.</summary>
            <param name="image">Input image.</param>
            <param name="edges">Extracted edges.</param>
            <param name="filter">Edge operator to be applied. Default: "canny"</param>
            <param name="alpha">Filter parameter: small values result in strong smoothing, and thus less detail (opposite for 'canny'). Default: 1.0</param>
            <param name="low">Lower threshold for the hysteresis threshold operation. Default: 20</param>
            <param name="high">Upper threshold for the hysteresis threshold operation. Default: 40</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EdgesImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Extract edges using Deriche, Lanser, Shen, or Canny filters.</summary>
            <param name="image">Input image.</param>
            <param name="imaAmp">Edge amplitude (gradient magnitude) image.</param>
            <param name="imaDir">Edge direction image.</param>
            <param name="filter">Edge operator to be applied. Default: "canny"</param>
            <param name="alpha">Filter parameter: small values result in strong smoothing, and thus less detail (opposite for 'canny'). Default: 1.0</param>
            <param name="NMS">Non-maximum suppression ('none', if not desired). Default: "nms"</param>
            <param name="low">Lower threshold for the hysteresis threshold operation (negative, if no thresholding is desired). Default: 20</param>
            <param name="high">Upper threshold for the hysteresis threshold operation (negative, if no thresholding is desired). Default: 40</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DerivateGauss(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Convolve an image with derivatives of the Gaussian.</summary>
            <param name="image">Input images.</param>
            <param name="derivGauss">Filtered result images.</param>
            <param name="sigma">Sigma of the Gaussian. Default: 1.0</param>
            <param name="component">Derivative or feature to be calculated. Default: "x"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LaplaceOfGauss(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>LoG-Operator (Laplace of Gaussian).</summary>
            <param name="image">Input image.</param>
            <param name="imageLaplace">Laplace filtered image.</param>
            <param name="sigma">Smoothing parameter of the Gaussian. Default: 2.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DiffOfGauss(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Approximate the LoG operator (Laplace of Gaussian).</summary>
            <param name="image">Input image</param>
            <param name="diffOfGauss">LoG image.</param>
            <param name="sigma">Smoothing parameter of the Laplace operator to approximate. Default: 3.0</param>
            <param name="sigFactor">Ratio of the standard deviations used (Marr recommends 1.6). Default: 1.6</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseEdgesLength(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Close edge gaps using the edge amplitude image.</summary>
            <param name="edges">Region containing one pixel thick edges.</param>
            <param name="gradient">Edge amplitude (gradient) image.</param>
            <param name="closedEdges">Region containing closed edges.</param>
            <param name="minAmplitude">Minimum edge amplitude. Default: 16</param>
            <param name="maxGapLength">Maximal number of points by which edges are extended. Default: 3</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseEdges(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Close edge gaps using the edge amplitude image.</summary>
            <param name="edges">Region containing one pixel thick edges.</param>
            <param name="edgeImage">Edge amplitude (gradient) image.</param>
            <param name="regionResult">Region containing closed edges.</param>
            <param name="minAmplitude">Minimum edge amplitude. Default: 16</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DetectEdgeSegments(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Detect straight edge segments.</summary>
            <param name="image">Input image.</param>
            <param name="sobelSize">Mask size of the Sobel operator. Default: 5</param>
            <param name="minAmplitude">Minimum edge strength. Default: 32</param>
            <param name="maxDistance">Maximum distance of the approximating line to its original edge. Default: 3</param>
            <param name="minLength">Minimum length of to resulting line segments. Default: 10</param>
            <param name="beginRow">Row coordinate of the line segments' start points.</param>
            <param name="beginCol">Column coordinate of the line segments' start points.</param>
            <param name="endRow">Row coordinate of the line segments' end points.</param>
            <param name="endCol">Column coordinate of the line segments' end points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllColorTransLuts">
            <summary>Delete all look-up-tables of the color space transformation.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearColorTransLut(HalconDotNet.HTuple)">
            <summary>Release the look-up-table needed for color space transformation.</summary>
            <param name="colorTransLUTHandle">Handle of the look-up-table handle for the color space transformation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ApplyColorTransLut(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Color space transformation using pre-generated look-up-table.</summary>
            <param name="image1">Input image (channel 2).</param>
            <param name="image2">Input image (channel 2).</param>
            <param name="image3">Input image (channel 3).</param>
            <param name="imageResult1">Color-transformed output image (channel 1).</param>
            <param name="imageResult2">Color-transformed output image (channel 2).</param>
            <param name="imageResult3">Color-transformed output image (channel 3).</param>
            <param name="colorTransLUTHandle">Handle of the look-up-table for the color space transformation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateColorTransLut(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Creates the look-up-table for transformation of an image from the RGB color space to an arbitrary color space.</summary>
            <param name="colorSpace">Color space of the output image. Default: "hsv"</param>
            <param name="transDirection">Direction of color space transformation. Default: "from_rgb"</param>
            <param name="numBits">Number of bits of the input image. Default: 8</param>
            <param name="colorTransLUTHandle">Handle of the look-up-table for color space transformation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CfaToRgb(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Convert a single-channel color filter array image into an RGB image.</summary>
            <param name="CFAImage">Input image.</param>
            <param name="RGBImage">Output image.</param>
            <param name="CFAType">Color filter array type. Default: "bayer_gb"</param>
            <param name="interpolation">Interpolation type. Default: "bilinear"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Rgb1ToGray(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Transform an RGB image into a gray scale image.</summary>
            <param name="RGBImage">Three-channel RBG image.</param>
            <param name="grayImage">Gray scale image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Rgb3ToGray(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Transform an RGB image to a gray scale image.</summary>
            <param name="imageRed">Input image (red channel).</param>
            <param name="imageGreen">Input image (green channel).</param>
            <param name="imageBlue">Input image (blue channel).</param>
            <param name="imageGray">Gray scale image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TransFromRgb(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Transform an image from the RGB color space to an arbitrary color space.</summary>
            <param name="imageRed">Input image (red channel).</param>
            <param name="imageGreen">Input image (green channel).</param>
            <param name="imageBlue">Input image (blue channel).</param>
            <param name="imageResult1">Color-transformed output image (channel 1).</param>
            <param name="imageResult2">Color-transformed output image (channel 1).</param>
            <param name="imageResult3">Color-transformed output image (channel 1).</param>
            <param name="colorSpace">Color space of the output image. Default: "hsv"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TransToRgb(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Transform an image from an arbitrary color space to the RGB color space.</summary>
            <param name="imageInput1">Input image (channel 1).</param>
            <param name="imageInput2">Input image (channel 2).</param>
            <param name="imageInput3">Input image (channel 3).</param>
            <param name="imageRed">Red channel.</param>
            <param name="imageGreen">Green channel.</param>
            <param name="imageBlue">Blue channel.</param>
            <param name="colorSpace">Color space of the input image. Default: "hsv"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BitMask(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Logical "AND" of each pixel using a bit mask.</summary>
            <param name="image">Input image(s).</param>
            <param name="imageMask">Result image(s) by combination with mask.</param>
            <param name="bitMask">Bit field Default: 128</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BitSlice(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Extract a bit from the pixels.</summary>
            <param name="image">Input image(s).</param>
            <param name="imageSlice">Result image(s) by extraction.</param>
            <param name="bit">Bit to be selected. Default: 8</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BitRshift(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Right shift of all pixels of the image.</summary>
            <param name="image">Input image(s).</param>
            <param name="imageRShift">Result image(s) by shift operation.</param>
            <param name="shift">shift value Default: 3</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BitLshift(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Left shift of all pixels of the image.</summary>
            <param name="image">Input image(s).</param>
            <param name="imageLShift">Result image(s) by shift operation.</param>
            <param name="shift">Shift value. Default: 3</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BitNot(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Complement all bits of the pixels.</summary>
            <param name="image">Input image(s).</param>
            <param name="imageNot">Result image(s) by complement operation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BitXor(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Bit-by-bit XOR of all pixels of the input images.</summary>
            <param name="image1">Input image(s) 1.</param>
            <param name="image2">Input image(s) 2.</param>
            <param name="imageXor">Result image(s) by XOR-operation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BitOr(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Bit-by-bit OR of all pixels of the input images.</summary>
            <param name="image1">Input image(s) 1.</param>
            <param name="image2">Input image(s) 2.</param>
            <param name="imageOr">Result image(s) by OR-operation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.BitAnd(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Bit-by-bit AND of all pixels of the input images.</summary>
            <param name="image1">Input image(s) 1.</param>
            <param name="image2">Input image(s) 2.</param>
            <param name="imageAnd">Result image(s) by AND-operation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GammaImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Perform a gamma encoding or decoding of an image.</summary>
            <param name="image">Input image.</param>
            <param name="gammaImage">Output image.</param>
            <param name="gamma">Gamma coefficient of the exponential part of the transformation. Default: 0.416666666667</param>
            <param name="offset">Offset of the exponential part of the transformation. Default: 0.055</param>
            <param name="threshold">Gray value for which the transformation switches from linear to exponential. Default: 0.0031308</param>
            <param name="maxGray">Maximum gray value of the input image type. Default: 255.0</param>
            <param name="encode">If 'true', perform a gamma encoding, otherwise a gamma decoding. Default: "true"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PowImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Raise an image to a power.</summary>
            <param name="image">Input image.</param>
            <param name="powImage">Output image.</param>
            <param name="exponent">Power to which the gray values are raised. Default: 2</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ExpImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Calculate the exponentiation of an image.</summary>
            <param name="image">Input image.</param>
            <param name="expImage">Output image.</param>
            <param name="baseVal">Base of the exponentiation. Default: "e"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LogImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Calculate the logarithm of an image.</summary>
            <param name="image">Input image.</param>
            <param name="logImage">Output image.</param>
            <param name="baseVal">Base of the logarithm. Default: "e"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Atan2Image(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculate the arctangent of two images.</summary>
            <param name="imageY">Input image 1.</param>
            <param name="imageX">Input image 2.</param>
            <param name="arctanImage">Output image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AtanImage(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculate the arctangent of an image.</summary>
            <param name="image">Input image.</param>
            <param name="arctanImage">Output image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AcosImage(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculate the arccosine of an image.</summary>
            <param name="image">Input image.</param>
            <param name="arccosImage">Output image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AsinImage(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculate the arcsine of an image.</summary>
            <param name="image">Input image.</param>
            <param name="arcsinImage">Output image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TanImage(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculate the tangent of an image.</summary>
            <param name="image">Input image.</param>
            <param name="tanImage">Output image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CosImage(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculate the cosine of an image.</summary>
            <param name="image">Input image.</param>
            <param name="cosImage">Output image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SinImage(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculate the sine of an image.</summary>
            <param name="image">Input image.</param>
            <param name="sinImage">Output image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AbsDiffImage(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Calculate the absolute difference of two images.</summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="imageAbsDiff">Absolute value of the difference of the input images.</param>
            <param name="mult">Scale factor. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SqrtImage(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculate the square root of an image.</summary>
            <param name="image">Input image</param>
            <param name="sqrtImage">Output image</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SubImage(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Subtract two images.</summary>
            <param name="imageMinuend">Minuend(s).</param>
            <param name="imageSubtrahend">Subtrahend(s).</param>
            <param name="imageSub">Result image(s) by the subtraction.</param>
            <param name="mult">Correction factor. Default: 1.0</param>
            <param name="add">Correction value. Default: 128.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ScaleImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Scale the gray values of an image.</summary>
            <param name="image">Image(s) whose gray values are to be scaled.</param>
            <param name="imageScaled">Result image(s) by the scale.</param>
            <param name="mult">Scale factor. Default: 0.01</param>
            <param name="add">Offset. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DivImage(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Divide two images.</summary>
            <param name="image1">Image(s) 1.</param>
            <param name="image2">Image(s) 2.</param>
            <param name="imageResult">Result image(s) by the division.</param>
            <param name="mult">Factor for gray range adaption. Default: 255</param>
            <param name="add">Value for gray range adaption. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MultImage(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Multiply two images.</summary>
            <param name="image1">Image(s) 1.</param>
            <param name="image2">Image(s) 2.</param>
            <param name="imageResult">Result image(s) by the product.</param>
            <param name="mult">Factor for gray range adaption. Default: 0.005</param>
            <param name="add">Value for gray range adaption. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddImage(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add two images.</summary>
            <param name="image1">Image(s) 1.</param>
            <param name="image2">Image(s) 2.</param>
            <param name="imageResult">Result image(s) by the addition.</param>
            <param name="mult">Factor for gray value adaption. Default: 0.5</param>
            <param name="add">Value for gray value range adaption. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AbsImage(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculate the absolute value (modulus) of an image.</summary>
            <param name="image">Image(s) for which the absolute gray values are to be calculated.</param>
            <param name="imageAbs">Result image(s).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MinImage(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculate the minimum of two images pixel by pixel.</summary>
            <param name="image1">Image(s) 1.</param>
            <param name="image2">Image(s) 2.</param>
            <param name="imageMin">Result image(s) by the minimization.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MaxImage(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculate the maximum of two images pixel by pixel.</summary>
            <param name="image1">Image(s) 1.</param>
            <param name="image2">Image(s) 2.</param>
            <param name="imageMax">Result image(s) by the maximization.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InvertImage(HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Invert an image.</summary>
            <param name="image">Input image(s).</param>
            <param name="imageInvert">Image(s) with inverted gray values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AdjustMosaicImages(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Apply an automatic color correction to panorama images.</summary>
            <param name="images">Input images.</param>
            <param name="correctedImages">Output images.</param>
            <param name="from">List of source images.</param>
            <param name="to">List of destination images.</param>
            <param name="referenceImage">Reference image.</param>
            <param name="homMatrices2D">Projective matrices.</param>
            <param name="estimationMethod">Estimation algorithm for the correction. Default: "standard"</param>
            <param name="estimateParameters">Parameters to be estimated. Default: ["mult_gray"]</param>
            <param name="OECFModel">Model of OECF to be used. Default: ["laguerre"]</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenCubeMapMosaic(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create 6 cube map images of a spherical mosaic.</summary>
            <param name="images">Input images.</param>
            <param name="front">Front cube map.</param>
            <param name="rear">Rear cube map.</param>
            <param name="left">Left cube map.</param>
            <param name="right">Right cube map.</param>
            <param name="top">Top cube map.</param>
            <param name="bottom">Bottom cube map.</param>
            <param name="cameraMatrices">(Array of) 3x3 projective camera matrices that determine the internal camera parameters.</param>
            <param name="rotationMatrices">Array of 3x3 transformation matrices that determine rotation of the camera in the respective image.</param>
            <param name="cubeMapDimension">Width and height of the resulting cube maps. Default: 1000</param>
            <param name="stackingOrder">Mode of adding the images to the mosaic image. Default: "voronoi"</param>
            <param name="interpolation">Mode of image interpolation. Default: "bilinear"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenSphericalMosaic(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create a spherical mosaic image.</summary>
            <param name="images">Input images.</param>
            <param name="mosaicImage">Output image.</param>
            <param name="cameraMatrices">(Array of) 3x3 projective camera matrices that determine the internal camera parameters.</param>
            <param name="rotationMatrices">Array of 3x3 transformation matrices that determine rotation of the camera in the respective image.</param>
            <param name="latMin">Minimum latitude of points in the spherical mosaic image. Default: -90</param>
            <param name="latMax">Maximum latitude of points in the spherical mosaic image. Default: 90</param>
            <param name="longMin">Minimum longitude of points in the spherical mosaic image. Default: -180</param>
            <param name="longMax">Maximum longitude of points in the spherical mosaic image. Default: 180</param>
            <param name="latLongStep">Latitude and longitude angle step width. Default: 0.1</param>
            <param name="stackingOrder">Mode of adding the images to the mosaic image. Default: "voronoi"</param>
            <param name="interpolation">Mode of interpolation when creating the mosaic image. Default: "bilinear"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenBundleAdjustedMosaic(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Combine multiple images into a mosaic image.</summary>
            <param name="images">Input images.</param>
            <param name="mosaicImage">Output image.</param>
            <param name="homMatrices2D">Array of 3x3 projective transformation matrices.</param>
            <param name="stackingOrder">Stacking order of the images in the mosaic. Default: "default"</param>
            <param name="transformDomain">Should the domains of the input images also be transformed? Default: "false"</param>
            <param name="transMat2D">3x3 projective transformation matrix that describes the translation that was necessary to transform all images completely into the output image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenProjectiveMosaic(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Combine multiple images into a mosaic image.</summary>
            <param name="images">Input images.</param>
            <param name="mosaicImage">Output image.</param>
            <param name="startImage">Index of the central input image.</param>
            <param name="mappingSource">Indices of the source images of the transformations.</param>
            <param name="mappingDest">Indices of the target images of the transformations.</param>
            <param name="homMatrices2D">Array of 3x3 projective transformation matrices.</param>
            <param name="stackingOrder">Stacking order of the images in the mosaic. Default: "default"</param>
            <param name="transformDomain">Should the domains of the input images also be transformed? Default: "false"</param>
            <param name="mosaicMatrices2D">Array of 3x3 projective transformation matrices that determine the position of the images in the mosaic.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProjectiveTransImageSize(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Apply a projective transformation to an image and specify the output image size.</summary>
            <param name="image">Input image.</param>
            <param name="transImage">Output image.</param>
            <param name="homMat2D">Homogeneous projective transformation matrix.</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "bilinear"</param>
            <param name="width">Output image width.</param>
            <param name="height">Output image height.</param>
            <param name="transformDomain">Should the domain of the input image also be transformed? Default: "false"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProjectiveTransImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Apply a projective transformation to an image.</summary>
            <param name="image">Input image.</param>
            <param name="transImage">Output image.</param>
            <param name="homMat2D">Homogeneous projective transformation matrix.</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "bilinear"</param>
            <param name="adaptImageSize">Adapt the size of the output image automatically? Default: "false"</param>
            <param name="transformDomain">Should the domain of the input image also be transformed? Default: "false"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AffineTransImageSize(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Apply an arbitrary affine 2D transformation to an image and specify the output image size.</summary>
            <param name="image">Input image.</param>
            <param name="imageAffinTrans">Transformed image.</param>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="interpolation">Type of interpolation. Default: "constant"</param>
            <param name="width">Width of the output image. Default: 640</param>
            <param name="height">Height of the output image. Default: 480</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AffineTransImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Apply an arbitrary affine 2D transformation to images.</summary>
            <param name="image">Input image.</param>
            <param name="imageAffinTrans">Transformed image.</param>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="interpolation">Type of interpolation. Default: "constant"</param>
            <param name="adaptImageSize">Adaption of size of result image. Default: "false"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ZoomImageFactor(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Zoom an image by a given factor.</summary>
            <param name="image">Input image.</param>
            <param name="imageZoomed">Scaled image.</param>
            <param name="scaleWidth">Scale factor for the width of the image. Default: 0.5</param>
            <param name="scaleHeight">Scale factor for the height of the image. Default: 0.5</param>
            <param name="interpolation">Type of interpolation. Default: "constant"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ZoomImageSize(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Zoom an image to a given size.</summary>
            <param name="image">Input image.</param>
            <param name="imageZoom">Scaled image.</param>
            <param name="width">Width of the resulting image. Default: 512</param>
            <param name="height">Height of the resulting image. Default: 512</param>
            <param name="interpolation">Type of interpolation. Default: "constant"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MirrorImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Mirror an image.</summary>
            <param name="image">Input image.</param>
            <param name="imageMirror">Reflected image.</param>
            <param name="mode">Axis of reflection. Default: "row"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RotateImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Rotate an image about its center.</summary>
            <param name="image">Input image.</param>
            <param name="imageRotate">Rotated image.</param>
            <param name="phi">Rotation angle. Default: 90</param>
            <param name="interpolation">Type of interpolation. Default: "constant"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PolarTransImageInv(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Transform an image in polar coordinates back to cartesian coordinates</summary>
            <param name="polarImage">Input image.</param>
            <param name="XYTransImage">Output image.</param>
            <param name="row">Row coordinate of the center of the arc. Default: 256</param>
            <param name="column">Column coordinate of the center of the arc. Default: 256</param>
            <param name="angleStart">Angle of the ray to map the first column of the input image to. Default: 0.0</param>
            <param name="angleEnd">Angle of the ray to map the last column of the input image to. Default: 6.2831853</param>
            <param name="radiusStart">Radius of the circle to map the first row of the input image to. Default: 0</param>
            <param name="radiusEnd">Radius of the circle to map the last row of the input image to. Default: 100</param>
            <param name="width">Width of the output image. Default: 512</param>
            <param name="height">Height of the output image. Default: 512</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "nearest_neighbor"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PolarTransImageExt(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Transform an annular arc in an image to polar coordinates.</summary>
            <param name="image">Input image.</param>
            <param name="polarTransImage">Output image.</param>
            <param name="row">Row coordinate of the center of the arc. Default: 256</param>
            <param name="column">Column coordinate of the center of the arc. Default: 256</param>
            <param name="angleStart">Angle of the ray to be mapped to the first column of the output image. Default: 0.0</param>
            <param name="angleEnd">Angle of the ray to be mapped to the last column of the output image. Default: 6.2831853</param>
            <param name="radiusStart">Radius of the circle to be mapped to the first row of the output image. Default: 0</param>
            <param name="radiusEnd">Radius of the circle to be mapped to the last row of the output image. Default: 100</param>
            <param name="width">Width of the output image. Default: 512</param>
            <param name="height">Height of the output image. Default: 512</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "nearest_neighbor"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PolarTransImage(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Transform an image to polar coordinates</summary>
            <param name="imageXY">Input image in cartesian coordinates.</param>
            <param name="imagePolar">Result image in polar coordinates.</param>
            <param name="row">Row coordinate of the center of the coordinate system. Default: 100</param>
            <param name="column">Column coordinate of the center of the coordinate system. Default: 100</param>
            <param name="width">Width of the result image. Default: 314</param>
            <param name="height">Height of the result image. Default: 200</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.VectorFieldToHomMat2d(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Approximate an affine map from a displacement vector field.</summary>
            <param name="vectorField">Input image.</param>
            <param name="homMat2D">Output transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeXld(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Deserialize a serialized XLD object.</summary>
            <param name="XLD">XLD object.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeXld(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Serialize an XLD object.</summary>
            <param name="XLD">XLD object.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadPolygonXldDxf(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read XLD polygons from a DXF file.</summary>
            <param name="polygons">Read XLD polygons.</param>
            <param name="fileName">Name of the DXF file.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the DXF input. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the DXF input. Default: []</param>
            <param name="dxfStatus">Status information.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WritePolygonXldDxf(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Write XLD polygons to a file in DXF format.</summary>
            <param name="polygons">XLD polygons to be written.</param>
            <param name="fileName">Name of the DXF file.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadContourXldDxf(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read XLD contours from a DXF file.</summary>
            <param name="contours">Read XLD contours.</param>
            <param name="fileName">Name of the DXF file.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the DXF input. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the DXF input. Default: []</param>
            <param name="dxfStatus">Status information.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteContourXldDxf(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Write XLD contours to a file in DXF format.</summary>
            <param name="contours">XLD contours to be written.</param>
            <param name="fileName">Name of the DXF file.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CopyFile(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Copy a file to a new location.</summary>
            <param name="sourceFile">File to be copied.</param>
            <param name="destinationFile">Target location.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetCurrentDir(HalconDotNet.HTuple)">
            <summary>Set the current working directory.</summary>
            <param name="dirName">Name of current working directory to be set.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetCurrentDir(HalconDotNet.HTuple@)">
            <summary>Get the current working directory.</summary>
            <param name="dirName">Name of current working directory.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RemoveDir(HalconDotNet.HTuple)">
            <summary>Delete an empty directory.</summary>
            <param name="dirName">Name of directory to be deleted.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MakeDir(HalconDotNet.HTuple)">
            <summary>Make a directory.</summary>
            <param name="dirName">Name of directory to be created.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ListFiles(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>List all files in a directory.</summary>
            <param name="directory">Name of directory to be listed.</param>
            <param name="options">Processing options. Default: "files"</param>
            <param name="files">Found files (and directories).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeleteFile(HalconDotNet.HTuple)">
            <summary>Delete a file.</summary>
            <param name="fileName">File to be deleted.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FileExists(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Check whether file exists.</summary>
            <param name="fileName">Name of file to be checked. Default: "/bin/cc"</param>
            <param name="fileExists">boolean number.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadObject(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Read an iconic object.</summary>
            <param name="objectVal">Iconic object.</param>
            <param name="fileName">Name of file.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteObject(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Write an iconic object.</summary>
            <param name="objectVal">Iconic object.</param>
            <param name="fileName">Name of file.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeObject(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Deserialize a serialized iconic object.</summary>
            <param name="objectVal">Iconic object.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeObject(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Serialize an iconic object.</summary>
            <param name="objectVal">Iconic object.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeImage(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Deserialize a serialized image object.</summary>
            <param name="image">Image object.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeImage(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Serialize an image object.</summary>
            <param name="image">Image object.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeRegion(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Deserialize a serialized region.</summary>
            <param name="region">Region.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeRegion(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Serialize a region.</summary>
            <param name="region">Region.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteRegion(HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Write regions to a file.</summary>
            <param name="region">Region of the images which are returned.</param>
            <param name="fileName">Name of region file. Default: "region.hobj"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteImage(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write images in graphic formats.</summary>
            <param name="image">Input images.</param>
            <param name="format">Graphic format. Default: "tiff"</param>
            <param name="fillColor">Fill gray value for pixels not belonging to the image domain (region). Default: 0</param>
            <param name="fileName">Name of image file.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadSequence(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Read images.</summary>
            <param name="image">Image read.</param>
            <param name="headerSize">Number of bytes for file header. Default: 0</param>
            <param name="sourceWidth">Number of image columns of the filed image. Default: 512</param>
            <param name="sourceHeight">Number of image lines of the filed image. Default: 512</param>
            <param name="startRow">Starting point of image area (line). Default: 0</param>
            <param name="startColumn">Starting point of image area (column). Default: 0</param>
            <param name="destWidth">Number of image columns of output image. Default: 512</param>
            <param name="destHeight">Number of image lines of output image. Default: 512</param>
            <param name="pixelType">Type of pixel values. Default: "byte"</param>
            <param name="bitOrder">Sequence of bits within one byte. Default: "MSBFirst"</param>
            <param name="byteOrder">Sequence of bytes within one 'short' unit. Default: "MSBFirst"</param>
            <param name="pad">Data units within one image line (alignment). Default: "byte"</param>
            <param name="index">Number of images in the file. Default: 1</param>
            <param name="fileName">Name of input file.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadRegion(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Read binary images or HALCON regions.</summary>
            <param name="region">Read region.</param>
            <param name="fileName">Name of the region to be read.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadImage(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Read an image with different file formats.</summary>
            <param name="image">Read image.</param>
            <param name="fileName">Name of the image to be read. Default: "fabrik"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OpenFile(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Open a file in ASCII or a binary format.</summary>
            <param name="fileName">Name of file to be opened. Default: "standard"</param>
            <param name="fileType">Type of file. Default: "output"</param>
            <param name="fileHandle">File handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FwriteString(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write values in a file.</summary>
            <param name="fileHandle">File handle.</param>
            <param name="stringVal">Values to be put out on the file. Default: "hallo"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FreadLine(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Read a line from a file.</summary>
            <param name="fileHandle">File handle.</param>
            <param name="outLine">Read line.</param>
            <param name="isEOF">Reached end of file.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FreadString(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Read strings from a file.</summary>
            <param name="fileHandle">File handle.</param>
            <param name="outString">Read character sequence.</param>
            <param name="isEOF">Reached end of file.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FreadChar(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a character from a file.</summary>
            <param name="fileHandle">File handle.</param>
            <param name="charVal">Read character or control string ('eof').</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FnewLine(HalconDotNet.HTuple)">
            <summary>Create a line feed.</summary>
            <param name="fileHandle">File handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseFile(HalconDotNet.HTuple)">
            <summary>Closing a text file.</summary>
            <param name="fileHandle">File handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseAllFiles">
            <summary>Close all open files.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TestClosedXld(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Test whether contours or polygons are closed.</summary>
            <param name="XLD">Contours or polygons to be tested.</param>
            <param name="isClosed">Tuple with boolean numbers.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetGrayvalContourXld(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return gray values of an image at the positions of an XLD contour.</summary>
            <param name="image">Image whose gray values are to be accessed.</param>
            <param name="contour">Input XLD contour with the coordinates of the positions.</param>
            <param name="interpolation">Interpolation method. Default: "nearest_neighbor"</param>
            <param name="grayval">Gray values of the selected image coordinates.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MomentsAnyPointsXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Arbitrary geometric moments of contours or polygons treated as point clouds.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="mode">Computation mode. Default: "unnormalized"</param>
            <param name="area">Area enclosed by the contour or polygon.</param>
            <param name="centerRow">Row coordinate of the centroid.</param>
            <param name="centerCol">Column coordinate of the centroid.</param>
            <param name="p">First index of the desired moments M[P,Q]@f$M_{p,q}$. Default: 1</param>
            <param name="q">Second index of the desired moments M[P,Q]@f$M_{p,q}$. Default: 1</param>
            <param name="m">The computed moments.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EccentricityPointsXld(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Anisometry of contours or polygons treated as point clouds.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="anisometry">Anisometry of the contours or polygons.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EllipticAxisPointsXld(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Parameters of the equivalent ellipse of contours or polygons treated as point clouds.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="ra">Major radius.</param>
            <param name="rb">Minor radius.</param>
            <param name="phi">Angle between the major axis and the column axis (radians).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OrientationPointsXld(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Orientation of contours or polygons treated as point clouds.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="phi">Orientation of the contours or polygons (radians).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MomentsPointsXld(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Geometric moments M20@f$M_{20}$, M02@f$M_{02}$, and M11@f$M_{11}$ of contours or polygons treated as point clouds.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="m11">Mixed second order moment.</param>
            <param name="m20">Second order moment along the row axis.</param>
            <param name="m02">Second order moment along the column axis.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AreaCenterPointsXld(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Area and center of gravity (centroid) of contours and polygons treated as point clouds.</summary>
            <param name="XLD">Point clouds to be examined in form of contours or polygons.</param>
            <param name="area">Area of the point cloud.</param>
            <param name="row">Row coordinate of the centroid.</param>
            <param name="column">Column coordinate of the centroid.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TestSelfIntersectionXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test XLD contours or polygons for self intersection.</summary>
            <param name="XLD">Input contours or polygons.</param>
            <param name="closeXLD">Should the input contours or polygons be closed first? Default: "true"</param>
            <param name="doesIntersect">1 for contours or polygons with self intersection and 0 otherwise.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectXldPoint(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Choose all contours or polygons containing a given point.</summary>
            <param name="XLDs">Contours or polygons to be examined.</param>
            <param name="destXLDs">All contours or polygons containing the test point.</param>
            <param name="row">Line coordinate of the test point. Default: 100.0</param>
            <param name="column">Column coordinate of the test point. Default: 100.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TestXldPoint(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test whether one or more contours or polygons enclose the given point(s).</summary>
            <param name="XLD">Contours or polygons to be tested.</param>
            <param name="row">Row coordinates of the points to be tested.</param>
            <param name="column">Column coordinates of the points to be tested.</param>
            <param name="isInside">Tuple with boolean numbers.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectShapeXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Select contours or polygons using shape features.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="selectedXLD">Contours or polygons fulfilling the condition(s).</param>
            <param name="features">Shape features to be checked. Default: "area"</param>
            <param name="operation">Operation type between the individual features. Default: "and"</param>
            <param name="min">Lower limits of the features or 'min'. Default: 150.0</param>
            <param name="max">Upper limits of the features or 'max'. Default: 99999.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OrientationXld(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Orientation of contours or polygons.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="phi">Orientation of the contours or polygons (radians).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EccentricityXld(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Shape features derived from the ellipse parameters of contours or polygons.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="anisometry">Anisometry of the contours or polygons.</param>
            <param name="bulkiness">Bulkiness of the contours or polygons.</param>
            <param name="structureFactor">Structure factor of the contours or polygons.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CompactnessXld(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Shape factor for the compactness of contours or polygons.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="compactness">Compactness of the input contours or polygons.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DiameterXld(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Maximum distance between two contour or polygon points.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="row1">Row coordinate of the first extreme point of the contours or polygons.</param>
            <param name="column1">Column coordinate of the first extreme point of the contours or polygons.</param>
            <param name="row2">Row coordinate of the second extreme point of the contour or polygons.</param>
            <param name="column2">Column coordinate of the second extreme point of the contours or polygons.</param>
            <param name="diameter">Distance of the two extreme points of the contours or polygons.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ConvexityXld(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Shape factor for the convexity of contours or polygons.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="convexity">Convexity of the input contours or polygons.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CircularityXld(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Shape factor for the circularity (similarity to a circle) of contours or polygons.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="circularity">Roundness of the input contours or polygons.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EllipticAxisXld(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Parameters of the equivalent ellipse of contours or polygons.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="ra">Major radius.</param>
            <param name="rb">Minor radius.</param>
            <param name="phi">Angle between the major axis and the x axis (radians).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SmallestRectangle2Xld(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Smallest enclosing rectangle with arbitrary orientation of contours or polygons.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="row">Row coordinate of the center point of the enclosing rectangle.</param>
            <param name="column">Column coordinate of the center point of the enclosing rectangle.</param>
            <param name="phi">Orientation of the enclosing rectangle (arc measure)</param>
            <param name="length1">First radius (half length) of the enclosing rectangle.</param>
            <param name="length2">Second radius (half width) of the enclosing rectangle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SmallestRectangle1Xld(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Enclosing rectangle parallel to the coordinate axes of contours or polygons.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="row1">Row coordinate of upper left corner point of the enclosing rectangle.</param>
            <param name="column1">Column coordinate of upper left corner point of the enclosing rectangle.</param>
            <param name="row2">Row coordinate of lower right corner point of the enclosing rectangle.</param>
            <param name="column2">Column coordinate of lower right corner point of the enclosing rectangle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SmallestCircleXld(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Smallest enclosing circle of contours or polygons.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="row">Row coordinate of the center of the enclosing circle.</param>
            <param name="column">Column coordinate of the center of the enclosing circle.</param>
            <param name="radius">Radius of the enclosing circle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ShapeTransXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Transform the shape of contours or polygons.</summary>
            <param name="XLD">Contours or polygons to be transformed.</param>
            <param name="XLDTrans">Transformed contours respectively polygons.</param>
            <param name="type">Type of transformation. Default: "convex"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LengthXld(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Length of contours or polygons.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="length">Length of the contour or polygon.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MomentsAnyXld(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Arbitrary geometric moments of contours or polygons.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="mode">Computation mode. Default: "unnormalized"</param>
            <param name="pointOrder">Point order along the boundary. Default: "positive"</param>
            <param name="area">Area enclosed by the contour or polygon.</param>
            <param name="centerRow">Row coordinate of the centroid.</param>
            <param name="centerCol">Column coordinate of the centroid.</param>
            <param name="p">First index of the desired moments M[P,Q]@f$M_{p,q}$. Default: 1</param>
            <param name="q">Second index of the desired moments M[P,Q]@f$M_{p,q}$. Default: 1</param>
            <param name="m">The computed moments.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MomentsXld(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Geometric moments M20@f$M_{20}$, M02@f$M_{02}$, and M11@f$M_{11}$ of contours or polygons.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="m11">Mixed second order moment.</param>
            <param name="m20">Second order moment along the row axis.</param>
            <param name="m02">Second order moment along the column axis.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AreaCenterXld(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Area and center of gravity (centroid) of contours and polygons.</summary>
            <param name="XLD">Contours or polygons to be examined.</param>
            <param name="area">Area enclosed by the contour or polygon.</param>
            <param name="row">Row coordinate of the centroid.</param>
            <param name="column">Column coordinate of the centroid.</param>
            <param name="pointOrder">point order along the boundary ('positive'/'negative').</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MomentsRegionCentralInvar(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Geometric moments of regions.</summary>
            <param name="regions">Regions to be examined.</param>
            <param name="PSI1">Moment of 2nd order.</param>
            <param name="PSI2">Moment of 2nd order.</param>
            <param name="PSI3">Moment of 2nd order.</param>
            <param name="PSI4">Moment of 2nd order.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MomentsRegionCentral(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Geometric moments of regions.</summary>
            <param name="regions">Regions to be examined.</param>
            <param name="i1">Moment of 2nd order.</param>
            <param name="i2">Moment of 2nd order.</param>
            <param name="i3">Moment of 2nd order.</param>
            <param name="i4">Moment of 3rd order.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MomentsRegion3rdInvar(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Geometric moments of regions.</summary>
            <param name="regions">Regions to be examined.</param>
            <param name="m21">Moment of 3rd order (line-dependent).</param>
            <param name="m12">Moment of 3rd order (column-dependent).</param>
            <param name="m03">Moment of 3rd order (column-dependent).</param>
            <param name="m30">Moment of 3rd order (line-dependent).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MomentsRegion3rd(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Geometric moments of regions.</summary>
            <param name="regions">Regions to be examined.</param>
            <param name="m21">Moment of 3rd order (line-dependent).</param>
            <param name="m12">Moment of 3rd order (column-dependent).</param>
            <param name="m03">Moment of 3rd order (column-dependent).</param>
            <param name="m30">Moment of 3rd order (line-dependent).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SmallestRectangle2(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Smallest surrounding rectangle with any orientation.</summary>
            <param name="regions">Regions to be examined.</param>
            <param name="row">Line index of the center.</param>
            <param name="column">Column index of the center.</param>
            <param name="phi">Orientation of the surrounding rectangle (arc measure)</param>
            <param name="length1">First radius (half length) of the surrounding rectangle.</param>
            <param name="length2">Second radius (half width) of the surrounding rectangle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SmallestRectangle1(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Surrounding rectangle parallel to the coordinate axes.</summary>
            <param name="regions">Regions to be examined.</param>
            <param name="row1">Line index of upper left corner point.</param>
            <param name="column1">Column index of upper left corner point.</param>
            <param name="row2">Line index of lower right corner point.</param>
            <param name="column2">Column index of lower right corner point.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SmallestCircle(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Smallest surrounding circle of a region.</summary>
            <param name="regions">Regions to be examined.</param>
            <param name="row">Line index of the center.</param>
            <param name="column">Column index of the center.</param>
            <param name="radius">Radius of the surrounding circle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectShapeProto(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Choose regions having a certain relation to each other.</summary>
            <param name="regions">Regions to be examined.</param>
            <param name="pattern">Region compared to Regions.</param>
            <param name="selectedRegions">Regions fulfilling the condition.</param>
            <param name="feature">Shape features to be checked. Default: "covers"</param>
            <param name="min">Lower border of feature. Default: 50.0</param>
            <param name="max">Upper border of the feature. Default: 100.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RegionFeatures(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate shape features of regions.</summary>
            <param name="regions">Regions to be examined.</param>
            <param name="features">Shape features to be calculated. Default: "area"</param>
            <param name="value">The calculated features.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectShape(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Choose regions with the aid of shape features.</summary>
            <param name="regions">Regions to be examined.</param>
            <param name="selectedRegions">Regions fulfilling the condition.</param>
            <param name="features">Shape features to be checked. Default: "area"</param>
            <param name="operation">Linkage type of the individual features. Default: "and"</param>
            <param name="min">Lower limits of the features or 'min'. Default: 150.0</param>
            <param name="max">Upper limits of the features or 'max'. Default: 99999.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RunlengthFeatures(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Characteristic values for runlength coding of regions.</summary>
            <param name="regions">Regions to be examined.</param>
            <param name="numRuns">Number of runs.</param>
            <param name="KFactor">Storing factor in relation to a square.</param>
            <param name="LFactor">Mean number of runs per line.</param>
            <param name="meanLength">Mean length of runs.</param>
            <param name="bytes">Number of bytes necessary for coding the region.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindNeighbors(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Search direct neighbors.</summary>
            <param name="regions1">Starting regions.</param>
            <param name="regions2">Comparative regions.</param>
            <param name="maxDistance">Maximal distance of regions. Default: 1</param>
            <param name="regionIndex1">Indices of the found regions from Regions1.</param>
            <param name="regionIndex2">Indices of the found regions from Regions2.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MomentsRegion2ndRelInvar(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Geometric moments of regions.</summary>
            <param name="regions">Regions to be examined.</param>
            <param name="PHI1">Moment of 2nd order.</param>
            <param name="PHI2">Moment of 2nd order.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MomentsRegion2ndInvar(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Geometric moments of regions.</summary>
            <param name="regions">Regions to be examined.</param>
            <param name="m11">Product of inertia of the axes through the center parallel to the coordinate axes.</param>
            <param name="m20">Moment of 2nd order (line-dependent).</param>
            <param name="m02">Moment of 2nd order (column-dependent).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MomentsRegion2nd(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the geometric moments of regions.</summary>
            <param name="regions">Input regions.</param>
            <param name="m11">Product of inertia of the axes through the center parallel to the coordinate axes.</param>
            <param name="m20">Moment of 2nd order (row-dependent).</param>
            <param name="m02">Moment of 2nd order (column-dependent).</param>
            <param name="ia">Length of the major axis of the input region.</param>
            <param name="ib">Length of the minor axis of the input region.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistanceRrMin(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Minimum distance between the contour pixels of two regions each.</summary>
            <param name="regions1">Regions to be examined.</param>
            <param name="regions2">Regions to be examined.</param>
            <param name="minDistance">Minimum distance between contours of the regions.</param>
            <param name="row1">Line index on contour in Regions1.</param>
            <param name="column1">Column index on contour in Regions1.</param>
            <param name="row2">Line index on contour in Regions2.</param>
            <param name="column2">Column index on contour in Regions2.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DistanceRrMinDil(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Minimum distance between two regions with the help of dilation.</summary>
            <param name="regions1">Regions to be examined.</param>
            <param name="regions2">Regions to be examined.</param>
            <param name="minDistance">Minimum distances of the regions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DiameterRegion(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Maximal distance between two boundary points of a region.</summary>
            <param name="regions">Regions to be examined.</param>
            <param name="row1">Row index of the first extreme point.</param>
            <param name="column1">Column index of the first extreme point.</param>
            <param name="row2">Row index of the second extreme point.</param>
            <param name="column2">Column index of the second extreme point.</param>
            <param name="diameter">Distance of the two extreme points.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TestRegionPoint(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Test if the region contains a given point.</summary>
            <param name="regions">Region(s) to be examined.</param>
            <param name="row">Row index of the test pixel(s). Default: 100</param>
            <param name="column">Column index of the test pixel(s). Default: 100</param>
            <param name="isInside">Boolean result value.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetRegionIndex(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Index of all regions containing a given pixel.</summary>
            <param name="regions">Regions to be examined.</param>
            <param name="row">Line index of the test pixel. Default: 100</param>
            <param name="column">Column index of the test pixel. Default: 100</param>
            <param name="index">Index of the regions containing the test pixel.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectRegionPoint(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Choose all regions containing a given pixel.</summary>
            <param name="regions">Regions to be examined.</param>
            <param name="destRegions">All regions containing the test pixel.</param>
            <param name="row">Line index of the test pixel. Default: 100</param>
            <param name="column">Column index of the test pixel. Default: 100</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectShapeStd(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Select regions of a given shape.</summary>
            <param name="regions">Input regions to be selected.</param>
            <param name="selectedRegions">Regions with desired shape.</param>
            <param name="shape">Shape features to be checked. Default: "max_area"</param>
            <param name="percent">Similarity measure. Default: 70.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HammingDistanceNorm(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Hamming distance between two regions using normalization.</summary>
            <param name="regions1">Regions to be examined.</param>
            <param name="regions2">Comparative regions.</param>
            <param name="norm">Type of normalization. Default: "center"</param>
            <param name="distance">Hamming distance of two regions.</param>
            <param name="similarity">Similarity of two regions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HammingDistance(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Hamming distance between two regions.</summary>
            <param name="regions1">Regions to be examined.</param>
            <param name="regions2">Comparative regions.</param>
            <param name="distance">Hamming distance of two regions.</param>
            <param name="similarity">Similarity of two regions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Eccentricity(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Shape features derived from the ellipse parameters.</summary>
            <param name="regions">Region(s) to be examined.</param>
            <param name="anisometry">Shape feature (in case of a circle = 1.0).</param>
            <param name="bulkiness">Calculated shape feature.</param>
            <param name="structureFactor">Calculated shape feature.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EulerNumber(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Calculate the Euler number.</summary>
            <param name="regions">Region(s) to be examined.</param>
            <param name="eulerNumber">Calculated Euler number.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OrientationRegion(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Orientation of a region.</summary>
            <param name="regions">Region(s) to be examined.</param>
            <param name="phi">Orientation of region (arc measure).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EllipticAxis(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the parameters of the equivalent ellipse.</summary>
            <param name="regions">Input regions.</param>
            <param name="ra">Main radius (normalized to the area).</param>
            <param name="rb">Secondary radius (normalized to the area).</param>
            <param name="phi">Angle between main radius and x-axis in radians.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectRegionSpatial(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Pose relation of regions.</summary>
            <param name="regions1">Starting regions</param>
            <param name="regions2">Comparative regions</param>
            <param name="direction">Desired neighboring relation. Default: "left"</param>
            <param name="regionIndex1">Indices in the input tuples (Regions1 or ParRef{Regions2}), respectively.</param>
            <param name="regionIndex2">Indices in the input tuples (Regions1 or ParRef{Regions2}), respectively.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SpatialRelation(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Pose relation of regions with regard to </summary>
            <param name="regions1">Starting regions.</param>
            <param name="regions2">Comparative regions.</param>
            <param name="percent">Percentage of the area of the comparative region which must be located left/right or  Default: 50</param>
            <param name="regionIndex1">Indices of the regions in the tuple of the input regions which fulfill the pose relation.</param>
            <param name="regionIndex2">Indices of the regions in the tuple of the input regions which fulfill the pose relation.</param>
            <param name="relation1">Horizontal pose relation in which RegionIndex2[n] stands with RegionIndex1[n].</param>
            <param name="relation2">Vertical pose relation in which RegionIndex2[n] stands with RegionIndex1[n].</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Convexity(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Shape factor for the convexity of a region.</summary>
            <param name="regions">Region(s) to be examined.</param>
            <param name="convexity">Convexity of the input region(s).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Contlength(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Contour length of a region.</summary>
            <param name="regions">Region(s) to be examined.</param>
            <param name="contLength">Contour length of the input region(s).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ConnectAndHoles(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Number of connection components and holes</summary>
            <param name="regions">Region(s) to be examined.</param>
            <param name="numConnected">Number of connection components of a region.</param>
            <param name="numHoles">Number of holes of a region.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Rectangularity(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Shape factor for the rectangularity of a region.</summary>
            <param name="regions">Region(s) to be examined.</param>
            <param name="rectangularity">Rectangularity of the input region(s).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Compactness(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Shape factor for the compactness of a region.</summary>
            <param name="regions">Region(s) to be examined.</param>
            <param name="compactness">Compactness of the input region(s).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Circularity(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Shape factor for the circularity (similarity to a circle) of a region.</summary>
            <param name="regions">Region(s) to be examined.</param>
            <param name="circularity">Circularity of the input region(s).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AreaHoles(HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Compute the area of holes of regions.</summary>
            <param name="regions">Region(s) to be examined.</param>
            <param name="area">Area(s) of holes of the region(s).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AreaCenter(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Area and center of regions.</summary>
            <param name="regions">Region(s) to be examined.</param>
            <param name="area">Area of the region.</param>
            <param name="row">Line index of the center.</param>
            <param name="column">Column index of the center.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RunlengthDistribution(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Distribution of runs needed for runlength encoding of a region.</summary>
            <param name="region">Region to be examined.</param>
            <param name="foreground">Length distribution of the region (foreground).</param>
            <param name="background">Length distribution of the background.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Roundness(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Shape factors from contour.</summary>
            <param name="regions">Region(s) to be examined.</param>
            <param name="distance">Mean distance from the center.</param>
            <param name="sigma">Standard deviation of Distance.</param>
            <param name="roundness">Shape factor for roundness.</param>
            <param name="sides">Number of polygon sides.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InnerRectangle1(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Largest inner rectangle of a region.</summary>
            <param name="regions">Region to be examined.</param>
            <param name="row1">Row coordinate of the upper left corner point.</param>
            <param name="column1">Column coordinate of the upper left corner point.</param>
            <param name="row2">Row coordinate of the lower right corner point.</param>
            <param name="column2">Column coordinate of the lower right corner point.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InnerCircle(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Largest inner circle of a region.</summary>
            <param name="regions">Regions to be examined.</param>
            <param name="row">Line index of the center.</param>
            <param name="column">Column index of the center.</param>
            <param name="radius">Radius of the inner circle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectLinesLongest(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Select the longest input lines.</summary>
            <param name="rowBeginIn">Row coordinates of the starting points of the input lines.</param>
            <param name="colBeginIn">Column coordinates of the starting points of the input lines.</param>
            <param name="rowEndIn">Row coordinates of the ending points of the input lines.</param>
            <param name="colEndIn">Column coordinates  of the ending points of the input lines.</param>
            <param name="num">(Maximum) desired number of output lines. Default: 10</param>
            <param name="rowBeginOut">Row coordinates of the starting points of the output lines.</param>
            <param name="colBeginOut">Column coordinates of the starting points of the output lines.</param>
            <param name="rowEndOut">Row coordinates of the ending points of the output lines.</param>
            <param name="colEndOut">Column coordinates of the ending points of the output lines.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PartitionLines(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Partition lines according to various criteria.</summary>
            <param name="rowBeginIn">Row coordinates of the starting points of the input lines.</param>
            <param name="colBeginIn">Column coordinates of the starting points of the input lines.</param>
            <param name="rowEndIn">Row coordinates of the ending points of the input lines.</param>
            <param name="colEndIn">Column coordinates  of the ending points of the input lines.</param>
            <param name="feature">Features to be used for selection.</param>
            <param name="operation">Desired combination of the features.</param>
            <param name="min">Lower limits of the features or 'min'. Default: "min"</param>
            <param name="max">Upper limits of the features or 'max'. Default: "max"</param>
            <param name="rowBeginOut">Row coordinates of the starting points of the lines fulfilling the conditions.</param>
            <param name="colBeginOut">Column coordinates of the starting points of the lines fulfilling the conditions.</param>
            <param name="rowEndOut">Row coordinates of the ending points of the lines fulfilling the conditions.</param>
            <param name="colEndOut">Column coordinates of the ending points of the lines fulfilling the conditions.</param>
            <param name="failRowBOut">Row coordinates of the starting points of the lines not fulfilling the conditions.</param>
            <param name="failColBOut">Column coordinates of the starting points of the lines not fulfilling the conditions.</param>
            <param name="failRowEOut">Row coordinates of the ending points of the lines not fulfilling the conditions.</param>
            <param name="failColEOut">Column coordinates of the ending points of the lines not fulfilling the conditions.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectLines(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Select lines according to various criteria.</summary>
            <param name="rowBeginIn">Row coordinates of the starting points of the input lines.</param>
            <param name="colBeginIn">Column coordinates of the starting points of the input lines.</param>
            <param name="rowEndIn">Row coordinates of the ending points of the input lines.</param>
            <param name="colEndIn">Column coordinates  of the ending points of the input lines.</param>
            <param name="feature">Features to be used for selection. Default: "length"</param>
            <param name="operation">Desired combination of the features. Default: "and"</param>
            <param name="min">Lower limits of the features or 'min'. Default: "min"</param>
            <param name="max">Upper limits of the features or 'max'. Default: "max"</param>
            <param name="rowBeginOut">Row coordinates of the starting points of the output lines.</param>
            <param name="colBeginOut">Column coordinates of the starting points of the output lines.</param>
            <param name="rowEndOut">Row coordinates of the ending points of the output lines.</param>
            <param name="colEndOut">Column coordinates of the ending points of the output lines.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LinePosition(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the center of gravity, length, and orientation of a line.</summary>
            <param name="rowBegin">Row coordinates of the starting points of the input lines.</param>
            <param name="colBegin">Column coordinates of the starting points of the input lines.</param>
            <param name="rowEnd">Row coordinates of the ending points of the input lines.</param>
            <param name="colEnd">Column coordinates  of the ending points of the input lines.</param>
            <param name="rowCenter">Row coordinates of the centers of gravity of the input lines.</param>
            <param name="colCenter">Column coordinates of the centers of gravity of the input lines.</param>
            <param name="length">Euclidean length of the input lines.</param>
            <param name="phi">Orientation of the input lines.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LineOrientation(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the orientation of lines.</summary>
            <param name="rowBegin">Row coordinates of the starting points of the input lines.</param>
            <param name="colBegin">Column coordinates of the starting points of the input lines.</param>
            <param name="rowEnd">Row coordinates of the ending points of the input lines.</param>
            <param name="colEnd">Column coordinates  of the ending points of the input lines.</param>
            <param name="phi">Orientation of the input lines.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ApproxChainSimple(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Approximate a contour by arcs and lines.</summary>
            <param name="row">Row of the contour. Default: 32</param>
            <param name="column">Column of the contour. Default: 32</param>
            <param name="arcCenterRow">Row of the center of an arc.</param>
            <param name="arcCenterCol">Column of the center of an arc.</param>
            <param name="arcAngle">Angle of an arc.</param>
            <param name="arcBeginRow">Row of the starting point of an arc.</param>
            <param name="arcBeginCol">Column of the starting point of an arc.</param>
            <param name="lineBeginRow">Row of the starting point of a line segment.</param>
            <param name="lineBeginCol">Column of the starting point of a line segment.</param>
            <param name="lineEndRow">Row of the ending point of a line segment.</param>
            <param name="lineEndCol">Column of the ending point of a line segment.</param>
            <param name="order">Sequence of line (value 0) and arc segments (value 1).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ApproxChain(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Approximate a contour by arcs and lines.</summary>
            <param name="row">Row of the contour. Default: 32</param>
            <param name="column">Column of the contour. Default: 32</param>
            <param name="minWidthCoord">Minimum width of Gauss operator for coordinate smoothing ($ greater than $ 0.4). Default: 0.5</param>
            <param name="maxWidthCoord">Maximum width of Gauss operator for coordinate smoothing ($ greater than $ 0.4). Default: 2.4</param>
            <param name="threshStart">Minimum threshold value of the curvature for accepting a corner (relative to the largest curvature present). Default: 0.3</param>
            <param name="threshEnd">Maximum threshold value of the curvature for accepting a corner (relative to the largest curvature present). Default: 0.9</param>
            <param name="threshStep">Step width for threshold increase. Default: 0.2</param>
            <param name="minWidthSmooth">Minimum width of Gauss operator for smoothing the curvature function ($ greater than $ 0.4). Default: 0.5</param>
            <param name="maxWidthSmooth">Maximum width of Gauss operator for smoothing the curvature function. Default: 2.4</param>
            <param name="minWidthCurve">Minimum width of curve area for curvature determination ($ greater than $ 0.4). Default: 2</param>
            <param name="maxWidthCurve">Maximum width of curve area for curvature determination. Default: 12</param>
            <param name="weight1">Weighting factor for approximation precision. Default: 1.0</param>
            <param name="weight2">Weighting factor for large segments. Default: 1.0</param>
            <param name="weight3">Weighting factor for small segments. Default: 1.0</param>
            <param name="arcCenterRow">Row of the center of an arc.</param>
            <param name="arcCenterCol">Column of the center of an arc.</param>
            <param name="arcAngle">Angle of an arc.</param>
            <param name="arcBeginRow">Row of the starting point of an arc.</param>
            <param name="arcBeginCol">Column of the starting point of an arc.</param>
            <param name="lineBeginRow">Row of the starting point of a line segment.</param>
            <param name="lineBeginCol">Column of the starting point of a line segment.</param>
            <param name="lineEndRow">Row of the ending point of a line segment.</param>
            <param name="lineEndCol">Column of the ending point of a line segment.</param>
            <param name="order">Sequence of line (value 0) and arc segments (value 1).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FitSurfaceFirstOrder(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate gray value moments and approximation by a first order surface (plane).</summary>
            <param name="regions">Regions to be checked.</param>
            <param name="image">Corresponding gray values.</param>
            <param name="algorithm">Algorithm for the fitting. Default: "regression"</param>
            <param name="iterations">Maximum number of iterations (unused for 'regression'). Default: 5</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers. Default: 2.0</param>
            <param name="alpha">Parameter Alpha of the approximating surface.</param>
            <param name="beta">Parameter Beta of the approximating surface.</param>
            <param name="gamma">Parameter Gamma of the approximating surface.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FitSurfaceSecondOrder(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate gray value moments and approximation by a second order surface.</summary>
            <param name="regions">Regions to be checked.</param>
            <param name="image">Corresponding gray values.</param>
            <param name="algorithm">Algorithm for the fitting. Default: "regression"</param>
            <param name="iterations">Maximum number of iterations (unused for 'regression'). Default: 5</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers. Default: 2.0</param>
            <param name="alpha">Parameter Alpha of the approximating surface.</param>
            <param name="beta">Parameter Beta of the approximating surface.</param>
            <param name="gamma">Parameter Gamma of the approximating surface.</param>
            <param name="delta">Parameter Delta of the approximating surface.</param>
            <param name="epsilon">Parameter Epsilon of the approximating surface.</param>
            <param name="zeta">Parameter Zeta of the approximating surface.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenImageSurfaceSecondOrder(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create a curved gray surface with second order polynomial.</summary>
            <param name="imageSurface">Created image with new image matrix.</param>
            <param name="type">Pixel type. Default: "byte"</param>
            <param name="alpha">Second order coefficient in vertical direction. Default: 1.0</param>
            <param name="beta">Second order coefficient in horizontal direction. Default: 1.0</param>
            <param name="gamma">Mixed second order coefficient. Default: 1.0</param>
            <param name="delta">First order coefficient in vertical direction. Default: 1.0</param>
            <param name="epsilon">First order coefficient in horizontal direction. Default: 1.0</param>
            <param name="zeta">Zero order coefficient. Default: 1.0</param>
            <param name="row">Row coordinate of the reference point of the surface. Default: 256.0</param>
            <param name="column">Column coordinate of the reference point of the surface. Default: 256.0</param>
            <param name="width">Width of image. Default: 512</param>
            <param name="height">Height of image. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenImageSurfaceFirstOrder(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create a tilted gray surface with first order polynomial.</summary>
            <param name="imageSurface">Created image with new image matrix.</param>
            <param name="type">Pixel type. Default: "byte"</param>
            <param name="alpha">First order coefficient in vertical direction. Default: 1.0</param>
            <param name="beta">First order coefficient in horizontal direction. Default: 1.0</param>
            <param name="gamma">Zero order coefficient. Default: 1.0</param>
            <param name="row">Row coordinate of the reference point of the surface. Default: 256.0</param>
            <param name="column">Column coordinate of the reference point of the surface. Default: 256.0</param>
            <param name="width">Width of image. Default: 512</param>
            <param name="height">Height of image. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ShapeHistoPoint(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Determine a histogram of features along all threshold values.</summary>
            <param name="region">Region in which the features are to be examined.</param>
            <param name="image">Gray value image.</param>
            <param name="feature">Feature to be examined. Default: "convexity"</param>
            <param name="row">Row of the pixel which the region must contain. Default: 256</param>
            <param name="column">Column of the pixel which the region must contain. Default: 256</param>
            <param name="absoluteHisto">Absolute distribution of the feature.</param>
            <param name="relativeHisto">Relative distribution of the feature.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ShapeHistoAll(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Determine a histogram of features along all threshold values.</summary>
            <param name="region">Region in which the features are to be examined.</param>
            <param name="image">Gray value image.</param>
            <param name="feature">Feature to be examined. Default: "connected_components"</param>
            <param name="absoluteHisto">Absolute distribution of the feature.</param>
            <param name="relativeHisto">Relative distribution of the feature.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayFeatures(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculates gray value features for a set of regions.</summary>
            <param name="regions">Regions to be examined.</param>
            <param name="image">Gray value image.</param>
            <param name="features">Names of the features. Default: "mean"</param>
            <param name="value">Value sof the features.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectGray(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Select regions based on gray value features.</summary>
            <param name="regions">Regions to be examined.</param>
            <param name="image">Gray value image.</param>
            <param name="selectedRegions">Regions having features within the limits.</param>
            <param name="features">Names of the features. Default: "mean"</param>
            <param name="operation">Logical connection of features. Default: "and"</param>
            <param name="min">Lower limit(s) of features. Default: 128.0</param>
            <param name="max">Upper limit(s) of features. Default: 255.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MinMaxGray(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Determine the minimum and maximum gray values within regions.</summary>
            <param name="regions">Regions, the features of which are to be calculated.</param>
            <param name="image">Gray value image.</param>
            <param name="percent">Percentage below (above) the absolute maximum (minimum). Default: 0</param>
            <param name="min">"Minimum" gray value.</param>
            <param name="max">"Maximum" gray value.</param>
            <param name="range">Difference between Max and Min.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Intensity(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the mean and deviation of gray values.</summary>
            <param name="regions">Regions in which the features are calculated.</param>
            <param name="image">Gray value image.</param>
            <param name="mean">Mean gray value of a region.</param>
            <param name="deviation">Deviation of gray values within a region.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayHistoRange(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the gray value distribution of a single channel image within a certain gray value range.</summary>
            <param name="regions">Region in which the histogram is to be calculated.</param>
            <param name="image">Input image.</param>
            <param name="min">Minimum gray value. Default: 0</param>
            <param name="max">Maximum gray value. Default: 255</param>
            <param name="numBins">Number of bins. Default: 256</param>
            <param name="histo">Histogram to be calculated.</param>
            <param name="binSize">Bin size.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Histo2dim(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Calculate the histogram of two-channel gray value images.</summary>
            <param name="regions">Region in which the histogram is to be calculated.</param>
            <param name="imageCol">Channel 1.</param>
            <param name="imageRow">Channel 2.</param>
            <param name="histo2Dim">Histogram to be calculated.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayHistoAbs(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the gray value distribution.</summary>
            <param name="regions">Region in which the histogram is to be calculated.</param>
            <param name="image">Image the gray value distribution of which is to be calculated.</param>
            <param name="quantization">Quantization of the gray values. Default: 1.0</param>
            <param name="absoluteHisto">Absolute frequencies of the gray values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayHisto(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the gray value distribution.</summary>
            <param name="regions">Region in which the histogram is to be calculated.</param>
            <param name="image">Image the gray value distribution of which is to be calculated.</param>
            <param name="absoluteHisto">Absolute frequencies of the gray values.</param>
            <param name="relativeHisto">Frequencies, normalized to the area of the region.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EntropyGray(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Determine the entropy and anisotropy of images.</summary>
            <param name="regions">Regions where the features are to be determined.</param>
            <param name="image">Gray value image.</param>
            <param name="entropy">Information content (entropy) of the gray values.</param>
            <param name="anisotropy">Measure of the symmetry of gray value distribution.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CoocFeatureMatrix(HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate gray value features from a co-occurrence matrix.</summary>
            <param name="coocMatrix">Co-occurrence matrix.</param>
            <param name="energy">Homogeneity of the gray values.</param>
            <param name="correlation">Correlation of gray values.</param>
            <param name="homogeneity">Local homogeneity of gray values.</param>
            <param name="contrast">Gray value contrast.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CoocFeatureImage(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate a co-occurrence matrix and derive gray value features thereof.</summary>
            <param name="regions">Region to be examined.</param>
            <param name="image">Corresponding gray values.</param>
            <param name="ldGray">Number of gray values to be distinguished (2^LdGray@f$2^{LdGray}$). Default: 6</param>
            <param name="direction">Direction in which the matrix is to be calculated. Default: 0</param>
            <param name="energy">Gray value energy.</param>
            <param name="correlation">Correlation of gray values.</param>
            <param name="homogeneity">Local homogeneity of gray values.</param>
            <param name="contrast">Gray value contrast.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenCoocMatrix(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Calculate the co-occurrence matrix of a region in an image.</summary>
            <param name="regions">Region to be checked.</param>
            <param name="image">Image providing the gray values.</param>
            <param name="matrix">Co-occurrence matrix (matrices).</param>
            <param name="ldGray">Number of gray values to be distinguished (2^LdGray@f$2^{LdGray}$). Default: 6</param>
            <param name="direction">Direction of neighbor relation. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MomentsGrayPlane(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate gray value moments and approximation by a plane.</summary>
            <param name="regions">Regions to be checked.</param>
            <param name="image">Corresponding gray values.</param>
            <param name="MRow">Mixed moments along a line.</param>
            <param name="MCol">Mixed moments along a column.</param>
            <param name="alpha">Parameter Alpha of the approximating plane.</param>
            <param name="beta">Parameter Beta of the approximating plane.</param>
            <param name="mean">Mean gray value.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PlaneDeviation(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple@)">
            <summary>Calculate the deviation of the gray values from the approximating image plane.</summary>
            <param name="regions">Regions, of which the plane deviation is to be calculated.</param>
            <param name="image">Gray value image.</param>
            <param name="deviation">Deviation of the gray values within a region.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EllipticAxisGray(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the orientation and major axes of a region in a gray value image.</summary>
            <param name="regions">Region(s) to be examined.</param>
            <param name="image">Gray value image.</param>
            <param name="ra">Major axis of the region.</param>
            <param name="rb">Minor axis of the region.</param>
            <param name="phi">Angle enclosed by the major axis and the x-axis.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AreaCenterGray(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the area and center of gravity of a region in a gray value image.</summary>
            <param name="regions">Region(s) to be examined.</param>
            <param name="image">Gray value image.</param>
            <param name="area">Gray value volume of the region.</param>
            <param name="row">Row coordinate of the gray value center of gravity.</param>
            <param name="column">Column coordinate of the gray value center of gravity.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrayProjections(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate horizontal and vertical gray-value projections.</summary>
            <param name="region">Region to be processed.</param>
            <param name="image">Grayvalues for projections.</param>
            <param name="mode">Method to compute the projections. Default: "simple"</param>
            <param name="horProjection">Horizontal projection.</param>
            <param name="vertProjection">Vertical projection.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDataCode2dObjects(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Access iconic objects that were created during the search for 2D data code symbols.</summary>
            <param name="dataCodeObjects">Objects that are created as intermediate results during the detection or evaluation of 2D data codes.</param>
            <param name="dataCodeHandle">Handle of the 2D data code model.</param>
            <param name="candidateHandle">Handle of the 2D data code candidate or name of a group of candidates for which the iconic data is requested. Default: "all_candidates"</param>
            <param name="objectName">Name of the iconic object to return. Default: "candidate_xld"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDataCode2dResults(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the alphanumerical results that were accumulated during the search for 2D data code symbols.</summary>
            <param name="dataCodeHandle">Handle of the 2D data code model.</param>
            <param name="candidateHandle">Handle of the 2D data code candidate or name of a group of candidates for which the data is required. Default: "all_candidates"</param>
            <param name="resultNames">Names of the results of the 2D data code to return. Default: "status"</param>
            <param name="resultValues">List with the results.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindDataCode2d(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Detect and read 2D data code symbols in an image or train the 2D data code model.</summary>
            <param name="image">Input image.</param>
            <param name="symbolXLDs">XLD contours that surround the successfully decoded data code symbols.</param>
            <param name="dataCodeHandle">Handle of the 2D data code model.</param>
            <param name="genParamNames">Names of (optional) parameters for controlling the behavior of the operator. Default: []</param>
            <param name="genParamValues">Values of the optional generic parameters. Default: []</param>
            <param name="resultHandles">Handles of all successfully decoded 2D data code symbols.</param>
            <param name="decodedDataStrings">Decoded data strings of all detected 2D data code symbols in the image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetDataCode2dParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set selected parameters of the 2D data code model.</summary>
            <param name="dataCodeHandle">Handle of the 2D data code model.</param>
            <param name="genParamNames">Names of the generic parameters that shall be adjusted for the 2D data code. Default: "polarity"</param>
            <param name="genParamValues">Values of the generic parameters that are adjusted for the 2D data code. Default: "light_on_dark"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetDataCode2dParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get one or several parameters that describe the 2D data code model.</summary>
            <param name="dataCodeHandle">Handle of the 2D data code model.</param>
            <param name="genParamNames">Names of the generic parameters that are to be queried for the 2D data code model. Default: "contrast_min"</param>
            <param name="genParamValues">Values of the generic parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryDataCode2dParams(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get for a given 2D data code model the names of the generic parameters or objects that can be used in the other 2D data code operators.</summary>
            <param name="dataCodeHandle">Handle of the 2D data code model.</param>
            <param name="queryName">Name of the parameter group. Default: "get_result_params"</param>
            <param name="genParamNames">List containing the names of the supported generic parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeDataCode2dModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized 2D data code model.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="dataCodeHandle">Handle of the 2D data code model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeDataCode2dModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a 2D data code model.</summary>
            <param name="dataCodeHandle">Handle of the 2D data code model.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadDataCode2dModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a 2D data code model from a file and create a new model.</summary>
            <param name="fileName">Name of the 2D data code model file. Default: "data_code_model.dcm"</param>
            <param name="dataCodeHandle">Handle of the created 2D data code model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteDataCode2dModel(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Writes a 2D data code model into a file.</summary>
            <param name="dataCodeHandle">Handle of the 2D data code model.</param>
            <param name="fileName">Name of the 2D data code model file. Default: "data_code_model.dcm"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllDataCode2dModels">
            <summary>Delete all 2D data code models and free the allocated memory.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearDataCode2dModel(HalconDotNet.HTuple)">
            <summary>Delete a 2D data code model and free the allocated memory.</summary>
            <param name="dataCodeHandle">Handle of the 2D data code model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateDataCode2dModel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a model of a 2D data code class.</summary>
            <param name="symbolType">Type of the 2D data code. Default: "Data Matrix ECC 200"</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the 2D data code model. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the 2D data code model. Default: []</param>
            <param name="dataCodeHandle">Handle for using and accessing the 2D data code model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeClassTrainData(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize serialized training data for classifiers.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="classTrainDataHandle">Handle of the training data.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeClassTrainData(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize training data for classifiers.</summary>
            <param name="classTrainDataHandle">Handle of the training data.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadClassTrainData(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read the training data for classifiers from a file.</summary>
            <param name="fileName">File name of the training data.</param>
            <param name="classTrainDataHandle">Handle of the training data.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteClassTrainData(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Save the training data for classifiers in a file.</summary>
            <param name="classTrainDataHandle">Handle of the training data.</param>
            <param name="fileName">Name of the file in which the training data will be written.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectSubFeatureClassTrainData(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Select certain features from training data to create  training data containing less features.</summary>
            <param name="classTrainDataHandle">Handle of the training data.</param>
            <param name="subFeatureIndices">Indices or names to select the subfeatures or columns.</param>
            <param name="selectedClassTrainDataHandle">Handle of the reduced training data.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetFeatureLengthsClassTrainData(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Define subfeatures in training data.</summary>
            <param name="classTrainDataHandle">Handle of the training data that should be  partitioned into subfeatures.</param>
            <param name="subFeatureLength">Length of the subfeatures.</param>
            <param name="names">Names of the subfeatures.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetClassTrainDataGmm(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the training data of a Gaussian Mixture Model (GMM).</summary>
            <param name="GMMHandle">Handle of a GMM that contains training data.</param>
            <param name="classTrainDataHandle">Handle of the training data of the classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddClassTrainDataGmm(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add training data to a Gaussian Mixture Model (GMM).</summary>
            <param name="GMMHandle">Handle of a GMM which receives the training data.</param>
            <param name="classTrainDataHandle">Handle of training data for a classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetClassTrainDataMlp(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the training data of a multilayer perceptron (MLP).</summary>
            <param name="MLPHandle">Handle of a MLP that contains training data.</param>
            <param name="classTrainDataHandle">Handle of the training data of the classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddClassTrainDataMlp(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add training data to a multilayer perceptron (MLP).</summary>
            <param name="MLPHandle">MLP handle which receives the training data.</param>
            <param name="classTrainDataHandle">Training data for a classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetClassTrainDataKnn(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the training data of a k-nearest neighbors (k-NN) classifier.</summary>
            <param name="KNNHandle">Handle of the k-NN classifier  that contains training data.</param>
            <param name="classTrainDataHandle">Handle of the training data of the classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddClassTrainDataKnn(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add training data to a k-nearest neighbors (k-NN) classifier.</summary>
            <param name="KNNHandle">Handle of a k-NN which receives the  training data.</param>
            <param name="classTrainDataHandle">Training data for a classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetClassTrainDataSvm(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the training data of a support vector machine (SVM).</summary>
            <param name="SVMHandle">Handle of a SVM that contains training data.</param>
            <param name="classTrainDataHandle">Handle of the training data of the classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddClassTrainDataSvm(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add training data to a support vector machine (SVM).</summary>
            <param name="SVMHandle">Handle of a SVM which receives the training data.</param>
            <param name="classTrainDataHandle">Training data for a classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSampleNumClassTrainData(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the number of training samples stored in the training data.</summary>
            <param name="classTrainDataHandle">Handle of training data.</param>
            <param name="numSamples">Number of stored training samples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSampleClassTrainData(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return a training sample from training data.</summary>
            <param name="classTrainDataHandle">Handle of training data for a classifier.</param>
            <param name="indexSample">Number of stored training sample.</param>
            <param name="features">Feature vector of the training sample.</param>
            <param name="classID">Class of the training sample.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllClassTrainData">
            <summary>Clear all training data for classifiers.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearClassTrainData(HalconDotNet.HTuple)">
            <summary>Clears training data for classifiers.</summary>
            <param name="classTrainDataHandle">Handle of training data for a classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddSampleClassTrainData(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add a training sample to training data.</summary>
            <param name="classTrainDataHandle">Handle of the training data.</param>
            <param name="order">The order of the feature vector. Default: "row"</param>
            <param name="features">Feature vector of the training sample.</param>
            <param name="classID">Class of the training sample.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateClassTrainData(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a handle for training data for classifiers.</summary>
            <param name="numDim">Number of dimensions of the feature vector. Default: 10</param>
            <param name="classTrainDataHandle">Handle of the training data.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectFeatureSetMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Selects an optimal combination of features to classify the provided data.</summary>
            <param name="classTrainDataHandle">Handle of the training data.</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="MLPHandle">A trained MLP classifier using only the selected  features.</param>
            <param name="selectedFeatureIndices">The selected feature set, contains  indices referring.</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectFeatureSetSvm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Selects an optimal combination of features to classify the provided data.</summary>
            <param name="classTrainDataHandle">Handle of the training data.</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="SVMHandle">A trained SVM classifier using only the selected  features.</param>
            <param name="selectedFeatureIndices">The selected feature set, contains  indices.</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectFeatureSetGmm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Selects an optimal combination from a set of features to classify the  provided data.</summary>
            <param name="classTrainDataHandle">Handle of the training data.</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure  the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure  the classifier. Default: []</param>
            <param name="GMMHandle">A trained GMM classifier using only the selected  features.</param>
            <param name="selectedFeatureIndices">The selected feature set, contains indices or names.</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SelectFeatureSetKnn(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Selects an optimal subset from a set of features to solve a certain  classification problem.</summary>
            <param name="classTrainDataHandle">Handle of the training data.</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="KNNHandle">A trained k-NN classifier using only the selected  features.</param>
            <param name="selectedFeatureIndices">The selected feature set, contains  indices or names.</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllClassKnn">
            <summary>Clear all k-NN classifiers.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearClassKnn(HalconDotNet.HTuple)">
            <summary>Clear a k-NN classifier.</summary>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSampleNumClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the number of training samples stored in the training data of a k-nearest neighbors (k-NN) classifier.</summary>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
            <param name="numSamples">Number of stored training samples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSampleClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return a training sample from the training data of a k-nearest neighbors  (k-NN) classifier.</summary>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
            <param name="indexSample">Index of the training sample.</param>
            <param name="features">Feature vector of the training sample.</param>
            <param name="classID">Class of the training sample.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized k-NN classifier.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a k-NN classifier.</summary>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read the k-NN classifier from a file.</summary>
            <param name="fileName">File name of the classifier.</param>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Save the k-NN classifier in a file.</summary>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
            <param name="fileName">Name of the file in which the classifier will be written.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetParamsClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get parameters of a k-NN classification.</summary>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
            <param name="genParamNames">Names of the parameters that can be read from the k-NN classifier. Default: ["method","k"]</param>
            <param name="genParamValues">Values of the selected parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetParamsClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set parameters for k-NN classification.</summary>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the k-NN classifier. Default: ["method","k","max_num_classes"]</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the k-NN classifier. Default: ["classes_distance",5,1]</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClassifyClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Search for the next neighbors for a given feature vector.</summary>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
            <param name="features">Features that should be classified.</param>
            <param name="result">The classification result, either class IDs or sample  indices.</param>
            <param name="rating">A rating for the results. This value contains either a  distance, a frequency or a weighted frequency.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TrainClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Creates the search trees for a k-NN classifier.</summary>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the k-NN classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the k-NN classifier creation. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddSampleClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add a sample to a  k-nearest neighbors (k-NN) classifier.</summary>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
            <param name="features">List of features to add.</param>
            <param name="classID">Class IDs of the features.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a k-nearest neighbors (k-NN) classifier.</summary>
            <param name="numDim">Number of dimensions of the feature. Default: 10</param>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllClassLut">
            <summary>Clear all look-up table classifiers.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearClassLut(HalconDotNet.HTuple)">
            <summary>Clear a look-up table classifier.</summary>
            <param name="classLUTHandle">Handle of the LUT classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateClassLutKnn(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a look-up table using a k-nearest neighbors classifier (k-NN) to classify byte images.</summary>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="classLUTHandle">Handle of the LUT classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateClassLutGmm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a look-up table using a gaussian mixture model to classify byte images.</summary>
            <param name="GMMHandle">GMM handle.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="classLUTHandle">Handle of the LUT classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateClassLutSvm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a look-up table using a Support-Vector-Machine to classify byte images.</summary>
            <param name="SVMHandle">SVM handle.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="classLUTHandle">Handle of the LUT classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateClassLutMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a look-up table using a multi-layer perceptron to classify byte images.</summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="classLUTHandle">Handle of the LUT classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllClassGmm">
            <summary>Clear all Gaussian Mixture Models.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearClassGmm(HalconDotNet.HTuple)">
            <summary>Clear a Gaussian Mixture Model.</summary>
            <param name="GMMHandle">GMM handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearSamplesClassGmm(HalconDotNet.HTuple)">
            <summary>Clear the training data of a Gaussian Mixture Model.</summary>
            <param name="GMMHandle">GMM handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeClassGmm(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized Gaussian Mixture Model.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="GMMHandle">GMM handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeClassGmm(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a Gaussian Mixture Model (GMM).</summary>
            <param name="GMMHandle">GMM handle.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadClassGmm(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a Gaussian Mixture Model from a file.</summary>
            <param name="fileName">File name.</param>
            <param name="GMMHandle">GMM handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteClassGmm(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a Gaussian Mixture Model to a file.</summary>
            <param name="GMMHandle">GMM handle.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadSamplesClassGmm(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Read the training data of a Gaussian Mixture Model from a file.</summary>
            <param name="GMMHandle">GMM handle.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteSamplesClassGmm(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write the training data of a Gaussian Mixture Model to a file.</summary>
            <param name="GMMHandle">GMM handle.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClassifyClassGmm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the class of a feature vector by a Gaussian Mixture Model.</summary>
            <param name="GMMHandle">GMM handle.</param>
            <param name="features">Feature vector.</param>
            <param name="num">Number of best classes to determine. Default: 1</param>
            <param name="classID">Result of classifying the feature vector with the GMM.</param>
            <param name="classProb">A-posteriori probability of the classes.</param>
            <param name="density">Probability density of the feature vector.</param>
            <param name="KSigmaProb">Normalized k-sigma-probability for the feature vector.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EvaluateClassGmm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Evaluate a feature vector by a Gaussian Mixture Model.</summary>
            <param name="GMMHandle">GMM handle.</param>
            <param name="features">Feature vector.</param>
            <param name="classProb">A-posteriori probability of the classes.</param>
            <param name="density">Probability density of the feature vector.</param>
            <param name="KSigmaProb">Normalized k-sigma-probability for the feature vector.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TrainClassGmm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Train a Gaussian Mixture Model.</summary>
            <param name="GMMHandle">GMM handle.</param>
            <param name="maxIter">Maximum number of iterations of the expectation maximization algorithm Default: 100</param>
            <param name="threshold">Threshold for relative change of the error for the expectation maximization algorithm to terminate. Default: 0.001</param>
            <param name="classPriors">Mode to determine the a-priori probabilities of the classes Default: "training"</param>
            <param name="regularize">Regularization value for preventing covariance matrix singularity. Default: 0.0001</param>
            <param name="centers">Number of found centers per class</param>
            <param name="iter">Number of executed iterations per class</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetPrepInfoClassGmm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the information content of the preprocessed feature vectors of a GMM.</summary>
            <param name="GMMHandle">GMM handle.</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "principal_components"</param>
            <param name="informationCont">Relative information content of the transformed feature vectors.</param>
            <param name="cumInformationCont">Cumulative information content of the transformed feature vectors.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSampleNumClassGmm(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the number of training samples stored in the training data of a Gaussian Mixture Model (GMM).</summary>
            <param name="GMMHandle">GMM handle.</param>
            <param name="numSamples">Number of stored training samples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSampleClassGmm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return a training sample from the training data of a Gaussian Mixture Models (GMM).</summary>
            <param name="GMMHandle">GMM handle.</param>
            <param name="numSample">Index of the stored training sample.</param>
            <param name="features">Feature vector of the training sample.</param>
            <param name="classID">Class of the training sample.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddSampleClassGmm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add a training sample to the training data of a Gaussian Mixture Model.</summary>
            <param name="GMMHandle">GMM handle.</param>
            <param name="features">Feature vector of the training sample to be stored.</param>
            <param name="classID">Class of the training sample to be stored.</param>
            <param name="randomize">Standard deviation of the Gaussian noise added to the training data. Default: 0.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetParamsClassGmm(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the parameters of a Gaussian Mixture Model.</summary>
            <param name="GMMHandle">GMM handle.</param>
            <param name="numDim">Number of dimensions of the feature space.</param>
            <param name="numClasses">Number of classes of the GMM.</param>
            <param name="minCenters">Minimum number of centers per GMM class.</param>
            <param name="maxCenters">Maximum number of centers per GMM class.</param>
            <param name="covarType">Type of the covariance matrices.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateClassGmm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a Gaussian Mixture Model for classification</summary>
            <param name="numDim">Number of dimensions of the feature space. Default: 3</param>
            <param name="numClasses">Number of classes of the GMM. Default: 5</param>
            <param name="numCenters">Number of centers per class. Default: 1</param>
            <param name="covarType">Type of the covariance matrices. Default: "spherical"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "normalization"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
            <param name="randSeed">Seed value of the random number generator that is used to initialize the GMM with random values. Default: 42</param>
            <param name="GMMHandle">GMM handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllClassSvm">
            <summary>Clear all support vector machines.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearClassSvm(HalconDotNet.HTuple)">
            <summary>Clear a support vector machine.</summary>
            <param name="SVMHandle">SVM handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearSamplesClassSvm(HalconDotNet.HTuple)">
            <summary>Clear the training data of a support vector machine.</summary>
            <param name="SVMHandle">SVM handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized support vector machine (SVM).</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="SVMHandle">SVM handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a support vector machine (SVM).</summary>
            <param name="SVMHandle">SVM handle.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a support vector machine from a file.</summary>
            <param name="fileName">File name.</param>
            <param name="SVMHandle">SVM handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a support vector machine to a file.</summary>
            <param name="SVMHandle">SVM handle.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadSamplesClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Read the training data of a support vector machine from a file.</summary>
            <param name="SVMHandle">SVM handle.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteSamplesClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write the training data of a support vector machine to a file.</summary>
            <param name="SVMHandle">SVM handle.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EvaluateClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Evaluate a feature vector by a support vector machine.</summary>
            <param name="SVMHandle">SVM handle.</param>
            <param name="features">Feature vector.</param>
            <param name="result">Result of evaluating the feature vector with the SVM.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClassifyClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Classify a feature vector by a support vector machine.</summary>
            <param name="SVMHandle">SVM handle.</param>
            <param name="features">Feature vector.</param>
            <param name="num">Number of best classes to determine. Default: 1</param>
            <param name="classVal">Result of classifying the feature vector with the SVM.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReduceClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Approximate a trained support vector machine by a reduced support vector machine for faster classification.</summary>
            <param name="SVMHandle">Original SVM handle.</param>
            <param name="method">Type of postprocessing to reduce number of SV. Default: "bottom_up"</param>
            <param name="minRemainingSV">Minimum number of remaining SVs. Default: 2</param>
            <param name="maxError">Maximum allowed error of reduction. Default: 0.001</param>
            <param name="SVMHandleReduced">SVMHandle of reduced SVM.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TrainClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Train a support vector machine.</summary>
            <param name="SVMHandle">SVM handle.</param>
            <param name="epsilon">Stop parameter for training. Default: 0.001</param>
            <param name="trainMode">Mode of training. For normal operation: 'default'. If SVs already included in the SVM should be used for training: 'add_sv_to_train_set'. For alpha seeding: the respective SVM handle. Default: "default"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetPrepInfoClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the information content of the preprocessed feature vectors of a support vector machine</summary>
            <param name="SVMHandle">SVM handle.</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "principal_components"</param>
            <param name="informationCont">Relative information content of the transformed feature vectors.</param>
            <param name="cumInformationCont">Cumulative information content of the transformed feature vectors.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSupportVectorNumClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the number of support vectors of a support vector machine.</summary>
            <param name="SVMHandle">SVM handle.</param>
            <param name="numSupportVectors">Total number of support vectors.</param>
            <param name="numSVPerSVM">Number of SV of each sub-SVM.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSupportVectorClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the index of a support vector from a trained support vector machine.</summary>
            <param name="SVMHandle">SVM handle.</param>
            <param name="indexSupportVector">Number of stored support vectors.</param>
            <param name="index">Index of the support vector in the training set.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSampleNumClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the number of training samples stored in the training data of a support vector machine.</summary>
            <param name="SVMHandle">SVM handle.</param>
            <param name="numSamples">Number of stored training samples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSampleClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return a training sample from the training data of a support vector machine.</summary>
            <param name="SVMHandle">SVM handle.</param>
            <param name="indexSample">Number of the stored training sample.</param>
            <param name="features">Feature vector of the training sample.</param>
            <param name="target">Target vector of the training sample.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddSampleClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add a training sample to the training data of a support vector machine.</summary>
            <param name="SVMHandle">SVM handle.</param>
            <param name="features">Feature vector of the training sample to be stored.</param>
            <param name="classVal">Class of the training sample to be stored.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetParamsClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the parameters of a support vector machine.</summary>
            <param name="SVMHandle">SVM handle.</param>
            <param name="numFeatures">Number of input variables (features) of the SVM.</param>
            <param name="kernelType">The kernel type.</param>
            <param name="kernelParam">Additional parameter for the kernel.</param>
            <param name="nu">Regularization constant of the SVM.</param>
            <param name="numClasses">Number of classes of the test data.</param>
            <param name="mode">The mode of the SVM.</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors.</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization').</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateClassSvm(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a support vector machine for pattern classification.</summary>
            <param name="numFeatures">Number of input variables (features) of the SVM. Default: 10</param>
            <param name="kernelType">The kernel type. Default: "rbf"</param>
            <param name="kernelParam">Additional parameter for the kernel function. In case of RBF kernel the value for gamma@f$  Default: 0.02</param>
            <param name="nu">Regularisation constant of the SVM. Default: 0.05</param>
            <param name="numClasses">Number of classes. Default: 5</param>
            <param name="mode">The mode of the SVM. Default: "one-versus-one"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "normalization"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
            <param name="SVMHandle">SVM handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllClassMlp">
            <summary>Clear all multilayer perceptrons.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearClassMlp(HalconDotNet.HTuple)">
            <summary>Clear a multilayer perceptron.</summary>
            <param name="MLPHandle">MLP handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearSamplesClassMlp(HalconDotNet.HTuple)">
            <summary>Clear the training data of a multilayer perceptron.</summary>
            <param name="MLPHandle">MLP handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized multilayer perceptron.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="MLPHandle">MLP handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a multilayer perceptron (MLP).</summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a multilayer perceptron from a file.</summary>
            <param name="fileName">File name.</param>
            <param name="MLPHandle">MLP handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a multilayer perceptron to a file.</summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadSamplesClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Read the training data of a multilayer perceptron from a file.</summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteSamplesClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write the training data of a multilayer perceptron to a file.</summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClassifyClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the class of a feature vector by a multilayer perceptron.</summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="features">Feature vector.</param>
            <param name="num">Number of best classes to determine. Default: 1</param>
            <param name="classVal">Result of classifying the feature vector with the MLP.</param>
            <param name="confidence">Confidence(s) of the class(es) of the feature vector.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EvaluateClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calculate the evaluation of a feature vector by a multilayer perceptron.</summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="features">Feature vector.</param>
            <param name="result">Result of evaluating the feature vector with the MLP.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TrainClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Train a multilayer perceptron.</summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="maxIterations">Maximum number of iterations of the optimization algorithm. Default: 200</param>
            <param name="weightTolerance">Threshold for the difference of the weights of the MLP between two iterations of the optimization algorithm. Default: 1.0</param>
            <param name="errorTolerance">Threshold for the difference of the mean error of the MLP on the training data between two iterations of the optimization algorithm. Default: 0.01</param>
            <param name="error">Mean error of the MLP on the training data.</param>
            <param name="errorLog">Mean error of the MLP on the training data as a function of the number of iterations of the optimization algorithm.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetPrepInfoClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the information content of the preprocessed feature vectors of a multilayer perceptron.</summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "principal_components"</param>
            <param name="informationCont">Relative information content of the transformed feature vectors.</param>
            <param name="cumInformationCont">Cumulative information content of the transformed feature vectors.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSampleNumClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the number of training samples stored in the training data of a multilayer perceptron.</summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="numSamples">Number of stored training samples.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetSampleClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return a training sample from the training data of a multilayer perceptron.</summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="indexSample">Number of stored training sample.</param>
            <param name="features">Feature vector of the training sample.</param>
            <param name="target">Target vector of the training sample.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetRejectionParamsClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the parameters of a rejection class.</summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="genParamName">Names of the generic parameters to return. Default: "sampling_strategy"</param>
            <param name="genParamValue">Values of the generic parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetRejectionParamsClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the parameters of a rejection class.</summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="genParamName">Names of the generic parameters. Default: "sampling_strategy"</param>
            <param name="genParamValue">Values of the generic parameters. Default: "hyperbox_around_all_classes"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.AddSampleClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Add a training sample to the training data of a multilayer perceptron.</summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="features">Feature vector of the training sample to be stored.</param>
            <param name="target">Class or target vector of the training sample to be stored.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetRegularizationParamsClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Return the regularization parameters of a multilayer perceptron.</summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="genParamName">Name of the regularization parameter to return. Default: "weight_prior"</param>
            <param name="genParamValue">Value of the regularization parameter.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetRegularizationParamsClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set the regularization parameters of a multilayer perceptron.</summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="genParamName">Name of the regularization parameter to set. Default: "weight_prior"</param>
            <param name="genParamValue">Value of the regularization parameter. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetParamsClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the parameters of a multilayer perceptron.</summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="numInput">Number of input variables (features) of the MLP.</param>
            <param name="numHidden">Number of hidden units of the MLP.</param>
            <param name="numOutput">Number of output variables (classes) of the MLP.</param>
            <param name="outputFunction">Type of the activation function in the output layer of the MLP.</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors.</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a multilayer perceptron for classification or regression.</summary>
            <param name="numInput">Number of input variables (features) of the MLP. Default: 20</param>
            <param name="numHidden">Number of hidden units of the MLP. Default: 10</param>
            <param name="numOutput">Number of output variables (classes) of the MLP. Default: 5</param>
            <param name="outputFunction">Type of the activation function in the output layer of the MLP. Default: "softmax"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "normalization"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
            <param name="randSeed">Seed value of the random number generator that is used to initialize the MLP with random values. Default: 42</param>
            <param name="MLPHandle">MLP handle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeClassBox(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Deserialize a serialized classifier.</summary>
            <param name="classifHandle">Handle of the classifier.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeClassBox(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a classifier.</summary>
            <param name="classifHandle">Handle of the classifier.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteClassBox(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Save a classifier in a file.</summary>
            <param name="classifHandle">Handle of the classifier.</param>
            <param name="fileName">Name of the file which contains the written data.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetClassBoxParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set system parameters for classification.</summary>
            <param name="classifHandle">Handle of the classifier.</param>
            <param name="flag">Name of the wanted parameter. Default: "split_error"</param>
            <param name="value">Value of the parameter. Default: 0.1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadSampset(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a training data set from a file.</summary>
            <param name="fileName">Filename of the data set to train. Default: "sampset1"</param>
            <param name="sampKey">Identification of the data set to train.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadClassBox(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Read a classifier from a file.</summary>
            <param name="classifHandle">Handle of the classifier.</param>
            <param name="fileName">Filename of the classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LearnSampsetBox(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Train the classifier with one data set.</summary>
            <param name="classifHandle">Handle of the classifier.</param>
            <param name="sampKey">Number of the data set to train.</param>
            <param name="outfile">Name of the protocol file. Default: "training_prot"</param>
            <param name="NSamples">Number of arrays of attributes to learn. Default: 500</param>
            <param name="stopError">Classification error for termination. Default: 0.05</param>
            <param name="errorN">Error during the assignment. Default: 100</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.LearnClassBox(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Train the classifier.</summary>
            <param name="classifHandle">Handle of the classifier.</param>
            <param name="features">Array of attributes to learn. Default: [1.0,1.5,2.0]</param>
            <param name="classVal">Class to which the array has to be assigned. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetClassBoxParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get information about the current parameter.</summary>
            <param name="classifHandle">Handle of the classifier.</param>
            <param name="flag">Name of the system parameter. Default: "split_error"</param>
            <param name="value">Value of the system parameter.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearSampset(HalconDotNet.HTuple)">
            <summary>Free memory of a data set.</summary>
            <param name="sampKey">Number of the data set.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseClassBox(HalconDotNet.HTuple)">
            <summary>Destroy the classifier.</summary>
            <param name="classifHandle">Handle of the classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateClassBox(HalconDotNet.HTuple@)">
            <summary>Create a new classifier.</summary>
            <param name="classifHandle">Handle of the classifier.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DescriptClassBox(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Describe the classes of a box classifier.</summary>
            <param name="classifHandle">Handle of the classifier.</param>
            <param name="dimensions">Highest dimension for output. Default: 3</param>
            <param name="classIdx">Indices of the classes.</param>
            <param name="boxIdx">Indices of the boxes.</param>
            <param name="boxLowerBound">Lower bounds of the boxes (for each dimension).</param>
            <param name="boxHigherBound">Higher bounds of the boxes (for each dimension).</param>
            <param name="boxNumSamplesTrain">Number of training samples that were used to define this box (for each dimension).</param>
            <param name="boxNumSamplesWrong">Number of training samples that were assigned incorrectly to the box.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.TestSampsetBox(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Classify a set of arrays.</summary>
            <param name="classifHandle">Handle of the classifier.</param>
            <param name="sampKey">Key of the test data.</param>
            <param name="error">Error during the assignment.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EnquireRejectClassBox(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Classify a tuple of attributes with rejection class.</summary>
            <param name="classifHandle">Handle of the classifier.</param>
            <param name="featureList">Array of attributes which has to be classified. Default: 1.0</param>
            <param name="classVal">Number of the class, to which the array of attributes had been assigned or -1 for the rejection class.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.EnquireClassBox(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Classify a tuple of attributes.</summary>
            <param name="classifHandle">Handle of the classifier.</param>
            <param name="featureList">Array of attributes which has to be classified. Default: 1.0</param>
            <param name="classVal">Number of the class to which the array of attributes had been assigned.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseAllClassBox">
            <summary>Destroy all classifiers.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ConvertMapType(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Convert image maps into other map types.</summary>
            <param name="map">Input map.</param>
            <param name="mapConverted">Converted map.</param>
            <param name="newType">Type of MapConverted. Default: "coord_map_sub_pix"</param>
            <param name="imageWidth">Width of images to be mapped. Default: "map_width"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.VectorToPose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute an absolute pose out of point correspondences between world and image coordinates.</summary>
            <param name="worldX">X-Component of world coordinates.</param>
            <param name="worldY">Y-Component of world coordinates.</param>
            <param name="worldZ">Z-Component of world coordinates.</param>
            <param name="imageRow">Row-Component of image coordinates.</param>
            <param name="imageColumn">Column-Component of image coordinates.</param>
            <param name="cameraParam">The inner camera parameters from camera calibration.</param>
            <param name="method">Kind of algorithm Default: "iterative"</param>
            <param name="qualityType">Type of pose quality to be returned in Quality. Default: "error"</param>
            <param name="pose">Pose.</param>
            <param name="quality">Pose quality.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProjHomMat2dToPose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute a pose out of a homography describing the relation between world and image coordinates.</summary>
            <param name="homography">The homography from world- to image coordinates.</param>
            <param name="cameraMatrix">The camera calibration matrix K.</param>
            <param name="method">Type of pose computation. Default: "decomposition"</param>
            <param name="pose">Pose of the 2D object.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RadialDistortionSelfCalibration(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Calibrate the radial distortion.</summary>
            <param name="contours">Contours that are available for the calibration.</param>
            <param name="selectedContours">Contours that were used for the calibration</param>
            <param name="width">Width of the images from which the contours were extracted. Default: 640</param>
            <param name="height">Height of the images from which the contours were extracted. Default: 480</param>
            <param name="inlierThreshold">Threshold for the classification of outliers. Default: 0.05</param>
            <param name="randSeed">Seed value for the random number generator. Default: 42</param>
            <param name="distortionModel">Determines the distortion model. Default: "division"</param>
            <param name="distortionCenter">Determines how the distortion center will be estimated. Default: "variable"</param>
            <param name="principalPointVar">Controls the deviation of the distortion center from the image center; larger values allow larger deviations from the image center; 0 switches the penalty term off. Default: 0.0</param>
            <param name="cameraParam">Internal camera parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CamParToCamMat(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute a camera matrix from internal camera parameters.</summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="cameraMatrix">3x3 projective camera matrix that corresponds to CameraParam.</param>
            <param name="imageWidth">Width of the images that correspond to CameraMatrix.</param>
            <param name="imageHeight">Height of the images that correspond to CameraMatrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CamMatToCamPar(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the internal camera parameters from a camera matrix.</summary>
            <param name="cameraMatrix">3x3 projective camera matrix that determines the internal camera parameters.</param>
            <param name="kappa">Kappa.</param>
            <param name="imageWidth">Width of the images that correspond to CameraMatrix.</param>
            <param name="imageHeight">Height of the images that correspond to CameraMatrix.</param>
            <param name="cameraParam">Internal camera parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.StationaryCameraSelfCalibration(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Perform a self-calibration of a stationary projective camera.</summary>
            <param name="numImages">Number of different images that are used for the calibration.</param>
            <param name="imageWidth">Width of the images from which the points were extracted.</param>
            <param name="imageHeight">Height of the images from which the points were extracted.</param>
            <param name="referenceImage">Index of the reference image.</param>
            <param name="mappingSource">Indices of the source images of the transformations.</param>
            <param name="mappingDest">Indices of the target images of the transformations.</param>
            <param name="homMatrices2D">Array of 3x3 projective transformation matrices.</param>
            <param name="rows1">Row coordinates of corresponding points in the respective source images.</param>
            <param name="cols1">Column coordinates of corresponding points in the respective source images.</param>
            <param name="rows2">Row coordinates of corresponding points in the respective destination images.</param>
            <param name="cols2">Column coordinates of corresponding points in the respective destination images.</param>
            <param name="numCorrespondences">Number of point correspondences in the respective image pair.</param>
            <param name="estimationMethod">Estimation algorithm for the calibration. Default: "gold_standard"</param>
            <param name="cameraModel">Camera model to be used. Default: ["focus","principal_point"]</param>
            <param name="fixedCameraParams">Are the camera parameters identical for all images? Default: "true"</param>
            <param name="cameraMatrices">(Array of) 3x3 projective camera matrices that determine the internal camera parameters.</param>
            <param name="kappa">Radial distortion of the camera.</param>
            <param name="rotationMatrices">Array of 3x3 transformation matrices that determine rotation of the camera in the respective image.</param>
            <param name="x">X-Component of the direction vector of each point if EstimationMethod $=$ 'gold_standard' is used.</param>
            <param name="y">Y-Component of the direction vector of each point if EstimationMethod $=$ 'gold_standard' is used.</param>
            <param name="z">Z-Component of the direction vector of each point if EstimationMethod $=$ 'gold_standard' is used.</param>
            <param name="error">Average error per reconstructed point if EstimationMethod $=$ 'gold_standard' is used.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetRectanglePose(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Determine the 3D pose of a rectangle from its perspective 2D projection</summary>
            <param name="contour">Contour(s) to be examined.</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="width">Width of the rectangle in meters.</param>
            <param name="height">Height of the rectangle in meters.</param>
            <param name="weightingMode">Weighting mode for the optimization phase. Default: "nonweighted"</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers (typical: 1.0 for 'huber' and 3.0 for 'tukey'). Default: 2.0</param>
            <param name="pose">3D pose of the rectangle.</param>
            <param name="covPose">Covariances of the pose values.</param>
            <param name="error">Root-mean-square value of the final residual error.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetCirclePose(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Determine the 3D pose of a circle from its perspective 2D projection. </summary>
            <param name="contour">Contours to be examined.</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="radius">Radius of the circle in object space.</param>
            <param name="outputType">Type of output parameters. Default: "pose"</param>
            <param name="pose1">3D pose of the first circle.</param>
            <param name="pose2">3D pose of the second circle.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RadiometricSelfCalibration(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Perform a radiometric self-calibration of a camera.</summary>
            <param name="images">Input images.</param>
            <param name="exposureRatios">Ratio of the exposure energies of successive image pairs. Default: 0.5</param>
            <param name="features">Features that are used to compute the inverse response function of the camera. Default: "2d_histogram"</param>
            <param name="functionType">Type of the inverse response function of the camera. Default: "discrete"</param>
            <param name="smoothness">Smoothness of the inverse response function of the camera. Default: 1.0</param>
            <param name="polynomialDegree">Degree of the polynomial if FunctionType = 'polynomial'. Default: 5</param>
            <param name="inverseResponse">Inverse response function of the camera.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.MapImage(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@)">
            <summary>Apply a general transformation to an image.</summary>
            <param name="image">Image to be mapped.</param>
            <param name="map">Image containing the mapping data.</param>
            <param name="imageMapped">Mapped image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenRadialDistortionMap(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate a projection map that describes the mapping of images corresponding to a changing radial distortion.</summary>
            <param name="map">Image containing the mapping data.</param>
            <param name="camParamIn">Old camera parameters.</param>
            <param name="camParamOut">New camera parameters.</param>
            <param name="mapType">Type of the mapping. Default: "bilinear"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenImageToWorldPlaneMap(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate a projection map that describes the mapping between the image plane and a the plane z=0 of a world coordinate system.</summary>
            <param name="map">Image containing the mapping data.</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="worldPose">3D pose of the world coordinate system in camera coordinates.</param>
            <param name="widthIn">Width of the images to be transformed.</param>
            <param name="heightIn">Height of the images to be transformed.</param>
            <param name="widthMapped">Width of the resulting mapped images in pixels.</param>
            <param name="heightMapped">Height of the resulting mapped images in pixels.</param>
            <param name="scale">Scale or unit. Default: "m"</param>
            <param name="mapType">Type of the mapping. Default: "bilinear"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ImageToWorldPlane(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Rectify an image by transforming it into the plane z=0 of a world  coordinate system.</summary>
            <param name="image">Input image.</param>
            <param name="imageWorld">Transformed image.</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="worldPose">3D pose of the world coordinate system in camera coordinates.</param>
            <param name="width">Width of the resulting image in pixels.</param>
            <param name="height">Height of the resulting image in pixels.</param>
            <param name="scale">Scale or unit Default: "m"</param>
            <param name="interpolation">Type of interpolation. Default: "bilinear"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ContourToWorldPlaneXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Transform an XLD contour into the plane z=0 of a world coordinate system.</summary>
            <param name="contours">Input XLD contours to be transformed in image coordinates.</param>
            <param name="contoursTrans">Transformed XLD contours in world coordinates.</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="worldPose">3D pose of the world coordinate system in camera coordinates.</param>
            <param name="scale">Scale or dimension Default: "m"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ImagePointsToWorldPlane(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Transform image points into the plane z=0 of a world coordinate system.</summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="worldPose">3D pose of the world coordinate system in camera coordinates.</param>
            <param name="rows">Row coordinates of the points to be transformed. Default: 100.0</param>
            <param name="cols">Column coordinates of the points to be transformed. Default: 100.0</param>
            <param name="scale">Scale or dimension Default: "m"</param>
            <param name="x">X coordinates of the points in the world coordinate system.</param>
            <param name="y">Y coordinates of the points in the world coordinate system.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetOriginPose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Translate the origin of a 3D pose.</summary>
            <param name="poseIn">original 3D pose.</param>
            <param name="DX">translation of the origin in x-direction. Default: 0</param>
            <param name="DY">translation of the origin in y-direction. Default: 0</param>
            <param name="DZ">translation of the origin in z-direction. Default: 0</param>
            <param name="poseNewOrigin">new 3D pose after applying the translation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HandEyeCalibration(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Perform a hand-eye calibration.</summary>
            <param name="x">Linear list containing all the x coordinates of the calibration points (in the order of the images).</param>
            <param name="y">Linear list containing all the y coordinates of the calibration points (in the order of the images).</param>
            <param name="z">Linear list containing all the z coordinates of the calibration points (in the order of the images).</param>
            <param name="row">Linear list containing all row coordinates of the calibration points (in the order of the images).</param>
            <param name="col">Linear list containing all the column coordinates of the calibration points (in the order of the images).</param>
            <param name="numPoints">Number of the calibration points for each image.</param>
            <param name="robotPoses">Known 3D pose of the robot for each image (moving camera: robot base in robot tool coordinates; stationary camera: robot tool in robot base coordinates).</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="method">Method of hand-eye calibration. Default: "nonlinear"</param>
            <param name="qualityType">Type of quality assessment. Default: "error_pose"</param>
            <param name="cameraPose">Computed relative camera pose: 3D pose of the robot tool (moving camera) or robot base (stationary camera), respectively, in camera coordinates.</param>
            <param name="calibrationPose">Computed 3D pose of the calibration points in robot base coordinates (moving camera) or in robot tool coordinates (stationary camera), respectively.</param>
            <param name="quality">Quality assessment of the result.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetPoseType(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get the representation type of a 3D pose.</summary>
            <param name="pose">3D pose.</param>
            <param name="orderOfTransform">Order of rotation and translation.</param>
            <param name="orderOfRotation">Meaning of the rotation values.</param>
            <param name="viewOfTransform">View of transformation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ConvertPoseType(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Change the representation type of a 3D pose.</summary>
            <param name="poseIn">Original 3D pose.</param>
            <param name="orderOfTransform">Order of rotation and translation. Default: "Rp+T"</param>
            <param name="orderOfRotation">Meaning of the rotation values. Default: "gba"</param>
            <param name="viewOfTransform">View of transformation. Default: "point"</param>
            <param name="poseOut">3D transformation.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreatePose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a 3D pose.</summary>
            <param name="transX">Translation along the x-axis (in [m]). Default: 0.1</param>
            <param name="transY">Translation along the y-axis (in [m]). Default: 0.1</param>
            <param name="transZ">Translation along the z-axis (in [m]). Default: 0.1</param>
            <param name="rotX">Rotation around x-axis or x component of the Rodriguez vector (in [°] or without unit). Default: 90.0</param>
            <param name="rotY">Rotation around y-axis or y component of the Rodriguez vector (in [°] or without unit). Default: 90.0</param>
            <param name="rotZ">Rotation around z-axis or z component of the Rodriguez vector (in [°] or without unit). Default: 90.0</param>
            <param name="orderOfTransform">Order of rotation and translation. Default: "Rp+T"</param>
            <param name="orderOfRotation">Meaning of the rotation values. Default: "gba"</param>
            <param name="viewOfTransform">View of transformation. Default: "point"</param>
            <param name="pose">3D pose.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ChangeRadialDistortionContoursXld(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Change the radial distortion of contours.</summary>
            <param name="contours">Original contours.</param>
            <param name="contoursRectified">Resulting contours with modified radial distortion.</param>
            <param name="camParamIn">Internal camera parameter for Contours.</param>
            <param name="camParamOut">Internal camera parameter for ContoursRectified.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ChangeRadialDistortionPoints(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Change the radial distortion of pixel coordinates.</summary>
            <param name="row">Original row component of pixel coordinates.</param>
            <param name="col">Original column component of pixel coordinates.</param>
            <param name="camParamIn">The inner camera parameters of the camera used to create the input pixel coordinates.</param>
            <param name="camParamOut">The inner camera parameters of a camera.</param>
            <param name="rowChanged">Row component of pixel coordinates after changing the radial distortion.</param>
            <param name="colChanged">Column component of pixel coordinates after changing the radial distortion.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ChangeRadialDistortionImage(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Change the radial distortion of an image.</summary>
            <param name="image">Original image.</param>
            <param name="region">Region of interest in ImageRectified.</param>
            <param name="imageRectified">Resulting image with modified radial distortion.</param>
            <param name="camParamIn">Internal camera parameter for Image.</param>
            <param name="camParamOut">Internal camera parameter for Image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ChangeRadialDistortionCamPar(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Determine new camera parameters in accordance to the specified radial distortion.</summary>
            <param name="mode">Mode Default: "adaptive"</param>
            <param name="camParamIn">Internal camera parameters (original).</param>
            <param name="distortionCoeffs">Desired radial distortions. Default: 0.0</param>
            <param name="camParamOut">Internal camera parameters (modified).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GenCaltab(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate a calibration plate description file and a corresponding PostScript file for a calibration plate with rectangularly arranged marks.</summary>
            <param name="XNum">Number of marks in x direction. Default: 7</param>
            <param name="YNum">Number of marks in y direction. Default: 7</param>
            <param name="markDist">Distance of the marks in meters. Default: 0.0125</param>
            <param name="diameterRatio">Ratio of the mark diameter to the mark distance. Default: 0.5</param>
            <param name="calPlateDescr">File name of the calibration plate description. Default: "caltab.descr"</param>
            <param name="calPlatePSFile">File name of the PostScript file. Default: "caltab.ps"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateCaltab(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate a calibration plate description file and a corresponding PostScript file for a calibration plate with hexagonally arranged marks.</summary>
            <param name="numRows">Number of rows. Default: 27</param>
            <param name="marksPerRow">Number of marks per row. Default: 31</param>
            <param name="diameter">Diameter of the marks. Default: 0.00258065</param>
            <param name="finderRow">Row indices of the finder patterns. Default: [13,6,6,20,20]</param>
            <param name="finderColumn">Column indices of the finder patterns. Default: [15,6,24,6,24]</param>
            <param name="polarity">Polarity of the marks Default: "light_on_dark"</param>
            <param name="calPlateDescr">File name of the calibration plate description. Default: "calplate.cpd"</param>
            <param name="calPlatePSFile">File name of the PostScript file. Default: "calplate.ps"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CaltabPoints(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Read the mark center points from the calibration plate description file.</summary>
            <param name="calPlateDescr">File name of the calibration plate description. Default: "calplate.cpd"</param>
            <param name="x">X coordinates of the mark center points in the coordinate system of the calibration plate.</param>
            <param name="y">Y coordinates of the mark center points in the coordinate system of the calibration plate.</param>
            <param name="z">Z coordinates of the mark center points in the coordinate system of the calibration plate.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetLineOfSight(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the line of sight corresponding to a point in the image.</summary>
            <param name="row">Row coordinate of the pixel.</param>
            <param name="column">Column coordinate of the pixel.</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="PX">X coordinate of the first point on the line of sight in the camera coordinate system</param>
            <param name="PY">Y coordinate of the first point on the line of sight in the camera coordinate system</param>
            <param name="PZ">Z coordinate of the first point on the line of sight in the camera coordinate system</param>
            <param name="QX">X coordinate of the second point on the line of sight in the camera coordinate system</param>
            <param name="QY">Y coordinate of the second point on the line of sight in the camera coordinate system</param>
            <param name="QZ">Z coordinate of the second point on the line of sight in the camera coordinate system</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProjectHomPointHomMat3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Project a homogeneous 3D point using a 3x4 projection matrix.</summary>
            <param name="homMat3D">3x4 projection matrix.</param>
            <param name="px">Input point (x coordinate).</param>
            <param name="py">Input point (y coordinate).</param>
            <param name="pz">Input point (z coordinate).</param>
            <param name="pw">Input point (w coordinate).</param>
            <param name="qx">Output point (x coordinate).</param>
            <param name="qy">Output point (y coordinate).</param>
            <param name="qw">Output point (w coordinate).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ProjectPointHomMat3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Project a 3D point using a 3x4 projection matrix.</summary>
            <param name="homMat3D">3x4 projection matrix.</param>
            <param name="px">Input point (x coordinate).</param>
            <param name="py">Input point (y coordinate).</param>
            <param name="pz">Input point (z coordinate).</param>
            <param name="qx">Output point (x coordinate).</param>
            <param name="qy">Output point (y coordinate).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Project3dPoint(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Project 3D points into (sub-)pixel image coordinates.</summary>
            <param name="x">X coordinates of the 3D points to be projected in the camera coordinate system.</param>
            <param name="y">Y coordinates of the 3D points to be projected in the camera coordinate system.</param>
            <param name="z">Z coordinates of the 3D points to be projected in the camera coordinate system.</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="row">Row coordinates of the projected points (in pixels).</param>
            <param name="column">Column coordinates of the projected points (in pixels).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CamParPoseToHomMat3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Convert internal camera parameters and a 3D pose into a 3x4 projection matrix.</summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="pose">3D pose.</param>
            <param name="homMat3D">3x4 projection matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.HomMat3dToPose(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Convert a homogeneous transformation matrix into a 3D pose.</summary>
            <param name="homMat3D">Homogeneous transformation matrix.</param>
            <param name="pose">Equivalent 3D pose.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.PoseToHomMat3d(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Convert a 3D pose into a homogeneous transformation matrix.</summary>
            <param name="pose">3D pose.</param>
            <param name="homMat3D">Equivalent homogeneous transformation matrix.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeCamPar(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize the serialized internal camera parameters.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="cameraParam">Internal camera parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeCamPar(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize the internal camera parameters.</summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializePose(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized pose.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="pose">3D pose.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializePose(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a pose.</summary>
            <param name="pose">3D pose.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadPose(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a 3D pose from a text file.</summary>
            <param name="poseFile">File name of the external camera parameters. Default: "campose.dat"</param>
            <param name="pose">3D pose.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WritePose(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a 3D pose to a text file.</summary>
            <param name="pose">3D pose.</param>
            <param name="poseFile">File name of the external camera parameters. Default: "campose.dat"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadCamPar(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read the internal camera parameters from a text file.</summary>
            <param name="camParFile">File name of internal camera parameters. Default: "campar.dat"</param>
            <param name="cameraParam">Internal camera parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteCamPar(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write the internal camera parameters to a text file.</summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="camParFile">File name of internal camera parameters. Default: "campar.dat"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SimCaltab(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Simulate an image with calibration plate.</summary>
            <param name="simImage">Simulated calibration image.</param>
            <param name="calPlateDescr">File name of the calibration plate description. Default: "calplate.cpd"</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="calPlatePose">External camera parameters (3D pose of the calibration plate in camera coordinates).</param>
            <param name="grayBackground">Gray value of image background. Default: 128</param>
            <param name="grayPlate">Gray value of calibration plate. Default: 224</param>
            <param name="grayMarks">Gray value of calibration marks. Default: 80</param>
            <param name="scaleFac">Scaling factor to reduce oversampling. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DispCaltab(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Project and visualize the 3D model of the calibration plate in the image.</summary>
            <param name="windowHandle">Window in which the calibration plate should be visualized.</param>
            <param name="calPlateDescr">File name of the calibration plate description. Default: "calplate.cpd"</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="calPlatePose">External camera parameters (3D pose of the calibration plate in camera coordinates).</param>
            <param name="scaleFac">Scaling factor for the visualization. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CameraCalibration(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Determine all camera parameters by a simultaneous minimization process.</summary>
            <param name="NX">Ordered tuple with all x coordinates of the calibration marks (in meters).</param>
            <param name="NY">Ordered tuple with all y coordinates of the calibration marks (in meters).</param>
            <param name="NZ">Ordered tuple with all z coordinates of the calibration marks (in meters).</param>
            <param name="NRow">Ordered tuple with all row coordinates of the extracted calibration marks (in pixels).</param>
            <param name="NCol">Ordered tuple with all column coordinates of the extracted calibration marks (in pixels).</param>
            <param name="startCamParam">Initial values for the internal camera parameters.</param>
            <param name="NStartPose">Ordered tuple with all initial values for the external camera parameters.</param>
            <param name="estimateParams">Camera parameters to be estimated. Default: "all"</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="NFinalPose">Ordered tuple with all external camera parameters.</param>
            <param name="errors">Average error distance in pixels.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindMarksAndPose(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Extract rectangularly arranged 2D calibration marks from the image and calculate initial values for the external camera parameters.</summary>
            <param name="image">Input image.</param>
            <param name="calPlateRegion">Region of the calibration plate.</param>
            <param name="calPlateDescr">File name of the calibration plate description. Default: "caltab.descr"</param>
            <param name="startCamParam">Initial values for the internal camera parameters.</param>
            <param name="startThresh">Initial threshold value for contour detection. Default: 128</param>
            <param name="deltaThresh">Loop value for successive reduction of StartThresh. Default: 10</param>
            <param name="minThresh">Minimum threshold for contour detection. Default: 18</param>
            <param name="alpha">Filter parameter for contour detection, see edges_image. Default: 0.9</param>
            <param name="minContLength">Minimum length of the contours of the marks. Default: 15.0</param>
            <param name="maxDiamMarks">Maximum expected diameter of the marks. Default: 100.0</param>
            <param name="RCoord">Tuple with row coordinates of the detected marks.</param>
            <param name="CCoord">Tuple with column coordinates of the detected marks.</param>
            <param name="startPose">Estimation for the external camera parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindCaltab(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Segment the region of a standard calibration plate with rectangularly arranged marks in the image.</summary>
            <param name="image">Input image.</param>
            <param name="calPlate">Output region.</param>
            <param name="calPlateDescr">File name of the calibration plate description. Default: "caltab.descr"</param>
            <param name="sizeGauss">Filter size of the Gaussian. Default: 3</param>
            <param name="markThresh">Threshold value for mark extraction. Default: 112</param>
            <param name="minDiamMarks">Expected minimal diameter of the marks on the calibration plate. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllCameraSetupModels">
            <summary>Free the memory of all camera setup models.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearCameraSetupModel(HalconDotNet.HTuple)">
            <summary>Free the memory of a calibration setup model.</summary>
            <param name="cameraSetupModelID">Handle of the camera setup model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeCameraSetupModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a camera setup model.</summary>
            <param name="cameraSetupModelID">Handle to the camera setup model.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeCameraSetupModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized camera setup model.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="cameraSetupModelID">Handle to the camera setup model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteCameraSetupModel(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Store a camera setup model into a file.</summary>
            <param name="cameraSetupModelID">Handle to the camera setup model.</param>
            <param name="fileName">The file name of the model to be saved.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadCameraSetupModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Restore a camera setup model from a file.</summary>
            <param name="fileName">The path and file name of the model file.</param>
            <param name="cameraSetupModelID">Handle to the camera setup model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetCameraSetupParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get generic camera setup model parameters.</summary>
            <param name="cameraSetupModelID">Handle to the camera setup model.</param>
            <param name="cameraIdx">Index of the camera in the setup. Default: 0</param>
            <param name="paramName">Names of the generic parameters to be queried.</param>
            <param name="paramValue">Values of the generic parameters to be queried.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetCameraSetupParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set generic camera setup model parameters.</summary>
            <param name="cameraSetupModelID">Handle to the camera setup model.</param>
            <param name="cameraIdx">Unique index of the camera in the setup. Default: 0</param>
            <param name="paramName">Names of the generic parameters to be set.</param>
            <param name="paramValue">Values of the generic parameters to be set.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetCameraSetupCamParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Define type, parameters, and relative pose of a camera in a camera setup model.</summary>
            <param name="cameraSetupModelID">Handle to the camera setup model.</param>
            <param name="cameraIdx">Index of the camera in the setup.</param>
            <param name="cameraType">Type of the camera. Default: "area_scan_division"</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="cameraPose">Pose of the camera relative to the setup's coordinate system.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateCameraSetupModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a model for a setup of calibrated cameras.</summary>
            <param name="numCameras">Number of cameras in the setup. Default: 2</param>
            <param name="cameraSetupModelID">Handle to the camera setup model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllCalibData">
            <summary>Free the memory of all calibration data models.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearCalibData(HalconDotNet.HTuple)">
            <summary>Free the memory of a calibration data model.</summary>
            <param name="calibDataID">Handle of a calibration data model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeCalibData(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a serialized calibration data model.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="calibDataID">Handle of a calibration data model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeCalibData(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a calibration data model.</summary>
            <param name="calibDataID">Handle of a calibration data model.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadCalibData(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Restore a calibration data model from a file.</summary>
            <param name="fileName">The path and file name of the model file.</param>
            <param name="calibDataID">Handle of a calibration data model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteCalibData(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Store a calibration data model into a file.</summary>
            <param name="calibDataID">Handle of a calibration data model.</param>
            <param name="fileName">The file name of the model to be saved.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CalibrateHandEye(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Perform a hand-eye calibration.</summary>
            <param name="calibDataID">Handle of a calibration data model.</param>
            <param name="errors">Average residual error of the optimization.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CalibrateCameras(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Determine all camera parameters by a simultaneous minimization process.</summary>
            <param name="calibDataID">Handle of a calibration data model.</param>
            <param name="error">Back projection root mean square error (RMSE) of the optimization.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RemoveCalibData(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Remove a data set from a calibration data model.</summary>
            <param name="calibDataID">Handle of a calibration data model.</param>
            <param name="itemType">Type of the calibration data item. Default: "tool"</param>
            <param name="itemIdx">Index of the affected item. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetCalibData(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set data in a calibration data model.</summary>
            <param name="calibDataID">Handle of a calibration data model.</param>
            <param name="itemType">Type of calibration data item. Default: "model"</param>
            <param name="itemIdx">Index of the affected item (depending on the selected ItemType). Default: "general"</param>
            <param name="dataName">Parameter(s) to set. Default: "reference_camera"</param>
            <param name="dataValue">New value(s). Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindCalibObject(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Find the HALCON calibration plate and set the extracted points and contours in a calibration data model.</summary>
            <param name="image">Input image.</param>
            <param name="calibDataID">Handle of a calibration data model.</param>
            <param name="cameraIdx">Index of the observing camera. Default: 0</param>
            <param name="calibObjIdx">Index of the calibration object. Default: 0</param>
            <param name="calibObjPoseIdx">Index of the observed calibration object. Default: 0</param>
            <param name="genParamName">Names of the generic parameters to be set. Default: []</param>
            <param name="genParamValue">Values of the generic parameters to be set. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RemoveCalibDataObserv(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Remove observation data from a calibration data model.</summary>
            <param name="calibDataID">Handle of a calibration data model.</param>
            <param name="cameraIdx">Index of the observing camera. Default: 0</param>
            <param name="calibObjIdx">Index of the observed calibration object. Default: 0</param>
            <param name="calibObjPoseIdx">Index of the observed calibration object pose. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetCalibDataObservContours(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Get contour-based observation data from a calibration data model.</summary>
            <param name="contours">Contour-based result(s).</param>
            <param name="calibDataID">Handle of a calibration data model.</param>
            <param name="contourName">Name of contour objects to be returned. Default: "marks"</param>
            <param name="cameraIdx">Index of the observing camera. Default: 0</param>
            <param name="calibObjIdx">Index of the observed calibration object. Default: 0</param>
            <param name="calibObjPoseIdx">Index of the observed calibration object pose. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetCalibDataObservPose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get observed calibration object poses from a calibration data model.</summary>
            <param name="calibDataID">Handle of a calibration data model.</param>
            <param name="cameraIdx">Index of the observing camera. Default: 0</param>
            <param name="calibObjIdx">Index of the observed calibration object. Default: 0</param>
            <param name="calibObjPoseIdx">Index of the observed calibration object pose. Default: 0</param>
            <param name="objInCameraPose">Stored observed calibration object pose relative to the observing camera.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetCalibDataObservPose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set observed calibration object poses in a calibration data model.</summary>
            <param name="calibDataID">Handle of a calibration data model.</param>
            <param name="cameraIdx">Index of the observing camera. Default: 0</param>
            <param name="calibObjIdx">Index of the calibration object. Default: 0</param>
            <param name="calibObjPoseIdx">Index of the observed calibration object. Default: 0</param>
            <param name="objInCameraPose">Pose of the observed calibration object relative to the observing camera.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetCalibDataObservPoints(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get point-based observation data from a calibration data model.</summary>
            <param name="calibDataID">Handle of a calibration data model.</param>
            <param name="cameraIdx">Index of the observing camera. Default: 0</param>
            <param name="calibObjIdx">Index of the observed calibration object. Default: 0</param>
            <param name="calibObjPoseIdx">Index of the observed calibration object pose. Default: 0</param>
            <param name="row">Row coordinates of the detected points.</param>
            <param name="column">Column coordinates of the detected points.</param>
            <param name="index">Correspondence of the detected points to the points of the observed calibration object.</param>
            <param name="pose">Roughly estimated pose of the observed calibration object relative to the observing camera.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetCalibDataObservPoints(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set point-based observation data in a calibration data model.</summary>
            <param name="calibDataID">Handle of a calibration data model.</param>
            <param name="cameraIdx">Index of the observing camera. Default: 0</param>
            <param name="calibObjIdx">Index of the calibration object. Default: 0</param>
            <param name="calibObjPoseIdx">Index of the observed calibration object. Default: 0</param>
            <param name="row">Row coordinates of the extracted points.</param>
            <param name="column">Column coordinates of the extracted points.</param>
            <param name="index">Correspondence of the extracted points to the calibration marks of the observed calibration object. Default: "all"</param>
            <param name="pose">Roughly estimated pose of the observed calibration object relative to the observing camera.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryCalibDataObservIndices(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Query information about the relations between cameras, calibration objects, and calibration object poses.</summary>
            <param name="calibDataID">Handle of a calibration data model.</param>
            <param name="itemType">Kind of referred object. Default: "camera"</param>
            <param name="itemIdx">Camera index or calibration object index (depending on the selected ItemType). Default: 0</param>
            <param name="index1">List of calibration object indices or list of  camera indices (depending on ItemType).</param>
            <param name="index2">Calibration object numbers.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetCalibData(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query data stored or computed in a calibration data model.</summary>
            <param name="calibDataID">Handle of a calibration data model.</param>
            <param name="itemType">Type of calibration data item. Default: "camera"</param>
            <param name="itemIdx">Index of the affected item (depending on the selected ItemType). Default: 0</param>
            <param name="dataName">The name of the inspected data. Default: "params"</param>
            <param name="dataValue">Requested data.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetCalibDataCalibObject(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Define a calibration object in a calibration model.</summary>
            <param name="calibDataID">Handle of a calibration data model.</param>
            <param name="calibObjIdx">Calibration object index. Default: 0</param>
            <param name="calibObjDescr">3D point coordinates or a description file name.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetCalibDataCamParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set type and initial parameters of a camera in a calibration data model.</summary>
            <param name="calibDataID">Handle of a calibration data model.</param>
            <param name="cameraIdx">Camera index. Default: 0</param>
            <param name="cameraType">Type of the camera. Default: "area_scan_division"</param>
            <param name="cameraParam">Initial camera internal parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateCalibData(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a HALCON calibration data model.</summary>
            <param name="calibSetup">Type of the calibration setup. Default: "calibration_object"</param>
            <param name="numCameras">Number of cameras in the calibration setup. Default: 1</param>
            <param name="numCalibObjects">Number of calibration objects. Default: 1</param>
            <param name="calibDataID">Handle of the created calibration data model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetBeadInspectionParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the value of a parameter in a specific bead inspection model.</summary>
            <param name="beadInspectionModel">Handle of the bead inspection model.</param>
            <param name="paramName">Name of the model parameter that is queried. Default: "target_thickness"</param>
            <param name="paramValue">Value of the queried model parameter.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetBeadInspectionParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set parameters of the bead inspection model.</summary>
            <param name="beadInspectionModel">Handle of the bead inspection model.</param>
            <param name="paramName">Name of the model parameter that shall be adjusted for the specified bead inspection model. Default: "target_thickness"</param>
            <param name="paramValue">Value of the model parameter that shall be adjusted for the specified bead inspection model. Default: 40</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ApplyBeadInspectionModel(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Inspect beads in an image, as defined by the bead inspection model.</summary>
            <param name="image">Image to apply bead inspection on.</param>
            <param name="leftContour">The detected left contour of the beads.</param>
            <param name="rightContour">The detected right contour of the beads.</param>
            <param name="errorSegment">Detected error segments</param>
            <param name="beadInspectionModel">Handle of the bead inspection model to be used.</param>
            <param name="errorType">Types of detected errors.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearBeadInspectionModel(HalconDotNet.HTuple)">
            <summary>Delete the bead inspection model and free the allocated memory.</summary>
            <param name="beadInspectionModel">Handle of the bead inspection model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateBeadInspectionModel(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a model to inspect beads or adhesive in images.</summary>
            <param name="beadContour">XLD contour specifying the expected bead's shape and  position.</param>
            <param name="targetThickness">Optimal bead thickness. Default: 50</param>
            <param name="thicknessTolerance">Tolerance of bead's thickness with respect to  TargetThickness. Default: 15</param>
            <param name="positionTolerance">Tolerance of the bead's center position. Default: 15</param>
            <param name="polarity">The bead's polarity. Default: "light"</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the bead inspection model. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the bead inspection model. Default: []</param>
            <param name="beadInspectionModel">Handle for using and accessing the bead inspection  model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DeserializeBarCodeModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Deserialize a bar code model.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <param name="barCodeHandle">Handle of the bar code model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SerializeBarCodeModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Serialize a bar code model.</summary>
            <param name="barCodeHandle">Handle of the bar code model.</param>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadBarCodeModel(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Read a bar code model from a file and create a new model.</summary>
            <param name="fileName">Name of the bar code model file. Default: "bar_code_model.bcm"</param>
            <param name="barCodeHandle">Handle of the bar code model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteBarCodeModel(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write a bar code model to a file.</summary>
            <param name="barCodeHandle">Handle of the bar code model.</param>
            <param name="fileName">Name of the bar code model file. Default: "bar_code_model.bcm"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetBarCodeObject(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Access iconic objects that were created during the search or decoding of bar code symbols.</summary>
            <param name="barCodeObjects">Objects that are created as intermediate results during the detection or evaluation of bar codes.</param>
            <param name="barCodeHandle">Handle of the bar code model.</param>
            <param name="candidateHandle">Indicating the bar code results respectively candidates for which the data is required. Default: "all"</param>
            <param name="objectName">Name of the iconic object to return. Default: "candidate_regions"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetBarCodeResult(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the alphanumerical results that were accumulated during the decoding of bar code symbols.</summary>
            <param name="barCodeHandle">Handle of the bar code model.</param>
            <param name="candidateHandle">Indicating the bar code results respectively candidates for which the data is required. Default: "all"</param>
            <param name="resultName">Names of the resulting data to return. Default: "decoded_types"</param>
            <param name="barCodeResults">List with the results.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.DecodeBarCodeRectangle2(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Decode bar code symbols within a rectangle.</summary>
            <param name="image">Input image.</param>
            <param name="barCodeHandle">Handle of the bar code model.</param>
            <param name="codeType">Type of the searched bar code. Default: "EAN-13"</param>
            <param name="row">Row index of the center. Default: 50.0</param>
            <param name="column">Column index of the center. Default: 100.0</param>
            <param name="phi">Orientation of rectangle in radians. Default: 0.0</param>
            <param name="length1">Half of the length of the rectangle along the reading direction of the bar code. Default: 200.0</param>
            <param name="length2">Half of the length of the rectangle perpendicular to the reading direction of the bar code. Default: 100.0</param>
            <param name="decodedDataStrings">Data strings of all successfully decoded bar codes.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.FindBarCode(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Detect and read bar code symbols in an image.</summary>
            <param name="image">Input image.</param>
            <param name="symbolRegions">Regions of the successfully decoded bar code symbols.</param>
            <param name="barCodeHandle">Handle of the bar code model.</param>
            <param name="codeType">Type of the searched bar code. Default: "auto"</param>
            <param name="decodedDataStrings">Data strings of all successfully decoded bar codes.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryBarCodeParams(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get the names of the parameters that can be used in set_bar_code* and get_bar_code* operators for a given bar code model</summary>
            <param name="barCodeHandle">Handle of the bar code model.</param>
            <param name="properties">Properties of the parameters. Default: "trained_general"</param>
            <param name="genParamNames">Names of the generic parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetBarCodeParamSpecific(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get parameters that are used by the bar code reader when processing a specific bar code type. </summary>
            <param name="barCodeHandle">Handle of the bar code model.</param>
            <param name="codeTypes">Names of the bar code types for which parameters should be queried. Default: "EAN-13"</param>
            <param name="genParamNames">Names of the generic parameters that are to be queried for the bar code model. Default: "check_char"</param>
            <param name="genParamValues">Values of the generic parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetBarCodeParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Get one or several parameters that describe the bar code model.</summary>
            <param name="barCodeHandle">Handle of the bar code model.</param>
            <param name="genParamNames">Names of the generic parameters that are to be queried for the bar code model. Default: "element_size_min"</param>
            <param name="genParamValues">Values of the generic parameters.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetBarCodeParamSpecific(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set selected parameters of the bar code model for selected bar code types</summary>
            <param name="barCodeHandle">Handle of the bar code model.</param>
            <param name="codeTypes">Names of the bar code types for which parameters should be set. Default: "EAN-13"</param>
            <param name="genParamNames">Names of the generic parameters that shall be adjusted for finding and decoding bar codes. Default: "check_char"</param>
            <param name="genParamValues">Values of the generic parameters that are adjusted for finding and decoding bar codes. Default: "absent"</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetBarCodeParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set selected parameters of the bar code model.</summary>
            <param name="barCodeHandle">Handle of the bar code model.</param>
            <param name="genParamNames">Names of the generic parameters that shall be adjusted for finding and decoding bar codes. Default: "element_size_min"</param>
            <param name="genParamValues">Values of the generic parameters that are adjusted for finding and decoding bar codes. Default: 8</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearAllBarCodeModels">
            <summary>Delete all bar code models and free the allocated memory</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ClearBarCodeModel(HalconDotNet.HTuple)">
            <summary>Delete a bar code model and free the allocated memory</summary>
            <param name="barCodeHandle">Handle of the bar code model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateBarCodeModel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a model of a bar code reader.</summary>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the bar code model. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the bar code model. Default: []</param>
            <param name="barCodeHandle">Handle for using and accessing the bar code model.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Decode2dBarCode(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Decode 2D bar code data.</summary>
            <param name="barCodeDescr">Description of the bar code class.</param>
            <param name="barCodeDimension">Tuple with the dimension of the examined symbol. In the case of ECC 200: width, height, symbol code.</param>
            <param name="barCodeData">Tuple with the data values of the examined symbol.</param>
            <param name="symbolCharacters">Data and error codewords of the symbol.</param>
            <param name="corrSymbolData">Corrected data codewords of the symbol.</param>
            <param name="decodedData">Decoded data characters as numbers.</param>
            <param name="decodingError">Number of errors during the decoding process.</param>
            <param name="structuredAppend">If the symbol belongs to a group ("structured append"): position in the group, total symbol number, group ("file") id.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Get2dBarCodePos(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Extract the data values of the elements (in ECC 200: "modules") inside a bar code region ("Data Matrix symbol") and their positions in the image.</summary>
            <param name="barCodeRegion">Region that might contain a bar code.</param>
            <param name="image">Corresponding image.</param>
            <param name="barCodeDescr">Description of the 2D bar code class.</param>
            <param name="codeRegDescr">Additional parameters describing the bar code region. They can be used for extracting the data.</param>
            <param name="genParamNames">List of names of (optional) generic control parameters. Default: []</param>
            <param name="genParamValues">List of values of the generic parameters. Default: []</param>
            <param name="barCodeDimension">Tuple with the dimension of the extracted symbol. In the case of ECC 200: data field width, height, symbol index.</param>
            <param name="barCodeData">Tuple with the data values of the extracted symbol. value $ greater than $ 0: logical 1, value $ less than $ 0: logical 0, value = 0: module could not be classified.</param>
            <param name="dataElementRow">Tuple with the row positions of the data elements of the extracted symbol in the image.</param>
            <param name="dataElementCol">Tuple with the column positions of the data elements of the extracted symbol in the image.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Get2dBarCode(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Extract the values of the data elements (in ECC 200: "modules") inside a bar code region ("Data Matrix symbol").</summary>
            <param name="barCodeRegion">Region that might contain a 2D bar code.</param>
            <param name="image">Corresponding image.</param>
            <param name="barCodeDescr">Description of the bar code class.</param>
            <param name="codeRegDescr">Additional parameters describing the bar code region. They can be used for extracting the data</param>
            <param name="genParamNames">List of names of (optional) generic control parameters. Default: []</param>
            <param name="genParamValues">List of values of the generic parameters. Default: []</param>
            <param name="barCodeDimension">Tuple with the dimension of the extracted symbol. In the case of ECC 200: data field width, height, symbol index.</param>
            <param name="barCodeData">Tuple with the data values of the extracted symbol. value $ greater than $ 0: logical 1, value $ less than $ 0: logical 0, value = 0: module could not be classified.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Find2dBarCode(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Find regions that might contain a 2D bar code.</summary>
            <param name="image">Image of one or more bar codes.</param>
            <param name="codeRegion">Regions that might contain a bar code.</param>
            <param name="barCodeDescr">Description of a 2D bar code class to look for.</param>
            <param name="genParamNames">List of names of (optional) generic parameters controlling the image processing. Default: []</param>
            <param name="genParamValues">List of values of generic parameters controlling the image processing. Default: []</param>
            <param name="codeRegDescr">Additional parameters describing the bar code regions. They can be used for extracting the data (see decode_2d_bar_code).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Gen2dBarCodeDescr(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Generate a generic description of a 2D bar code class.</summary>
            <param name="codeType">Type of the 2D bar code. Default: "Data Matrix ECC 200"</param>
            <param name="genParamNames">List of names of generic parameters describing the 2D bar code class. Default: []</param>
            <param name="genParamValues">List of values of the generic parameters describing the 2D bar code class. Default: []</param>
            <param name="barCodeDescr">Description of the 2D bar code class.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Discrete1dBarCode(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Generate a discrete bar code from the elements widths.</summary>
            <param name="elements">List of elements widths of the bar code.</param>
            <param name="barCodeDescr">Description of a bar code class.</param>
            <param name="discreteBarCode">Widths of elements as multiple of modules.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Decode1dBarCode(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Decoding of a sequence of elements of a bar code.</summary>
            <param name="barCodeElements">Widths of the elements of the bar code.</param>
            <param name="barCodeDescr">Description of a bar code class.</param>
            <param name="characters">Decoded characters in standard interpretation.</param>
            <param name="reference">Decoded characters as numbers.</param>
            <param name="isCorrect">Information whether the bar code is correct.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Get1dBarCodeScanline(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Extract the widths of the elements inside a bar code region.</summary>
            <param name="barCodeRegion">Region of bar code.</param>
            <param name="barCodeDescr">Description of a bar code class.</param>
            <param name="genericName">Names of optional parameters. Default: []</param>
            <param name="genericValue">Values of optional parameters. Default: []</param>
            <param name="orientation">Orientation of bar code.</param>
            <param name="stopIfFound">Leave operator as soon as the bar code has been decoded?. Default: "false"</param>
            <param name="barCodeElements">Widths of elements.</param>
            <param name="scanlineNumPoints">Number of points belonging to that scanline.</param>
            <param name="scanlineDecoded">Information whether the bar code could be decoded with that scanline.</param>
            <param name="scanlinePointsRow">Row - coordinates of the points of the scanline.</param>
            <param name="scanlinePointsColumn">Column - coordinates of the points of the scanline.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Get1dBarCode(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Extract the widths of the elements inside a bar code region.</summary>
            <param name="barCodeRegion">Region of bar code.</param>
            <param name="barCodeDescr">Description of a bar code class.</param>
            <param name="genericName">Names of optional parameters. Default: []</param>
            <param name="genericValue">Values of optional parameters. Default: []</param>
            <param name="orientation">Orientation of bar code.</param>
            <param name="barCodeElements">Widths of elements.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Find1dBarCodeRegion(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Look for multiple bar code regions in an image.</summary>
            <param name="image">Image with bar codes inside.</param>
            <param name="codeRegion">Regions of bar codes.</param>
            <param name="barCodeDescr">Description of a bar code class.</param>
            <param name="genericName">Names of optional parameters. Default: []</param>
            <param name="genericValue">Values of optional parameters. Default: []</param>
            <param name="orientation">Orientation of bar code.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Find1dBarCodeScanline(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Look for one bar code in an image.</summary>
            <param name="image">Image with bar code inside.</param>
            <param name="codeRegion">Region of bar code.</param>
            <param name="barCodeDescr">Description of a bar code class.</param>
            <param name="genericName">Names of optional control parameters. Default: []</param>
            <param name="genericValue">Values of optional control parameters. Default: []</param>
            <param name="stopIfFound">Leave operator as soon as the bar code has been decoded?. Default: "false"</param>
            <param name="barcodeFound">Information whether the bar code was found.</param>
            <param name="barCodeElements">Widths of elements.</param>
            <param name="orientation">Orientation of bar code.</param>
            <param name="scanlineNumPoints">Number of points belonging to that scanline.</param>
            <param name="scanlineDecoded">Information whether the bar code could be decoded with that scanline.</param>
            <param name="scanlinePointsRow">Row - coordinates of the points of the scanline.</param>
            <param name="scanlinePointsColumn">Column - coordinates of the points of the scanline.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Find1dBarCode(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Look for one bar code in an image.</summary>
            <param name="image">Image with bar code inside.</param>
            <param name="codeRegion">Region of bar code.</param>
            <param name="barCodeDescr">Description of a bar code class.</param>
            <param name="genericName">Names of optional control parameters. Default: []</param>
            <param name="genericValue">Values of optional control parameters. Default: []</param>
            <param name="barcodeFound">Information whether the bar code was found.</param>
            <param name="barCodeElements">Widths of elements.</param>
            <param name="orientation">Orientation of bar code.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Gen1dBarCodeDescr(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Generate a description of a 1D bar code.</summary>
            <param name="codeName">Name of bar code. Default: "EAN 13"</param>
            <param name="minCharacters">Minimum  number of characters (if not fixed). Default: 6</param>
            <param name="maxCharacters">Maximum  number of characters (if not fixed). Default: 10</param>
            <param name="barCodeDescr">Description of a bar code class.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.Gen1dBarCodeDescrGen(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Generate a generic description of a 1D bar code.</summary>
            <param name="minCodeLength">Minimum length of the code in modules (including start and stop elements). Default: 30</param>
            <param name="maxCodeLength">Maximum length of the code in modules (including start and stop elements). Default: 30</param>
            <param name="elementSizes">Number of different element sizes. Default: 2</param>
            <param name="startElement">List of elements of the start sequence. The width of an element is given as the number of modules. Gaps are given as negative values. Default: [1,-1]</param>
            <param name="stopElement">List of elements of the stop sequence. The width of an element is given as the number of modules. Gaps are given as negative values. Default: [1,-1]</param>
            <param name="maxSizeRatio">Maximum ratio length to height. Default: 2.5</param>
            <param name="discreteCode">Discrete code (ignore white elements). Default: "false"</param>
            <param name="barCodeDescr">Description of a bar code class.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseBgEsti(HalconDotNet.HTuple)">
            <summary>Delete the background estimation data set.</summary>
            <param name="bgEstiHandle">ID of the BgEsti data set.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GiveBgEsti(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Return the estimated background image.</summary>
            <param name="backgroundImage">Estimated background image of the current data set.</param>
            <param name="bgEstiHandle">ID of the BgEsti data set.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.UpdateBgEsti(HalconDotNet.HObject,HalconDotNet.HObject,HalconDotNet.HTuple)">
            <summary>Change the estimated background image.</summary>
            <param name="presentImage">Current image.</param>
            <param name="upDateRegion">Region describing areas to change.</param>
            <param name="bgEstiHandle">ID of the BgEsti data set.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.RunBgEsti(HalconDotNet.HObject,HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Estimate the background and return the foreground region.</summary>
            <param name="presentImage">Current image.</param>
            <param name="foregroundRegion">Region of the detected foreground.</param>
            <param name="bgEstiHandle">ID of the BgEsti data set.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetBgEstiParams(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Return the parameters of the data set.</summary>
            <param name="bgEstiHandle">ID of the BgEsti data set.</param>
            <param name="syspar1">1. system matrix parameter.</param>
            <param name="syspar2">2. system matrix parameter.</param>
            <param name="gainMode">Gain type.</param>
            <param name="gain1">Kalman gain / foreground adaptation time.</param>
            <param name="gain2">Kalman gain / background adaptation time.</param>
            <param name="adaptMode">Threshold adaptation.</param>
            <param name="minDiff">Foreground / background threshold.</param>
            <param name="statNum">Number of statistic data sets.</param>
            <param name="confidenceC">Confidence constant.</param>
            <param name="timeC">Constant for decay time.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetBgEstiParams(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Change the parameters of the data set.</summary>
            <param name="bgEstiHandle">ID of the BgEsti data set.</param>
            <param name="syspar1">1. system matrix parameter. Default: 0.7</param>
            <param name="syspar2">2. system matrix parameter. Default: 0.7</param>
            <param name="gainMode">Gain type. Default: "fixed"</param>
            <param name="gain1">Kalman gain / foreground adaptation time. Default: 0.002</param>
            <param name="gain2">Kalman gain / background adaptation time. Default: 0.02</param>
            <param name="adaptMode">Threshold adaptation. Default: "on"</param>
            <param name="minDiff">Foreground/background threshold. Default: 7.0</param>
            <param name="statNum">Number of statistic data sets. Default: 10</param>
            <param name="confidenceC">Confidence constant. Default: 3.25</param>
            <param name="timeC">Constant for decay time. Default: 15.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CreateBgEsti(HalconDotNet.HObject,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Generate and initialize a data set for the background estimation.</summary>
            <param name="initializeImage">initialization image.</param>
            <param name="syspar1">1. system matrix parameter. Default: 0.7</param>
            <param name="syspar2">2. system matrix parameter. Default: 0.7</param>
            <param name="gainMode">Gain type. Default: "fixed"</param>
            <param name="gain1">Kalman gain / foreground adaptation time. Default: 0.002</param>
            <param name="gain2">Kalman gain / background adaptation time. Default: 0.02</param>
            <param name="adaptMode">Threshold adaptation. Default: "on"</param>
            <param name="minDiff">Foreground/background threshold. Default: 7.0</param>
            <param name="statNum">Number of statistic data sets. Default: 10</param>
            <param name="confidenceC">Confidence constant. Default: 3.25</param>
            <param name="timeC">Constant for decay time. Default: 15.0</param>
            <param name="bgEstiHandle">ID of the BgEsti data set.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseAllBgEsti">
            <summary>Delete all background estimation data sets.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ControlIoChannel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Perform an action on I/O channels.</summary>
            <param name="IOChannelHandle">Handles of the opened I/O channels.</param>
            <param name="paramAction">Name of the action to perform.</param>
            <param name="paramArgument">List of arguments for the action. Default: []</param>
            <param name="paramValue">List of values returned by the action.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.WriteIoChannel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Write a value to the specified I/O channels.</summary>
            <param name="IOChannelHandle">Handles of the opened I/O channels.</param>
            <param name="value">Write values.</param>
            <param name="status">Status of written values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ReadIoChannel(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Read a value from the specified I/O channels.</summary>
            <param name="IOChannelHandle">Handles of the opened I/O channels.</param>
            <param name="value">Read value.</param>
            <param name="status">Status of read value.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetIoChannelParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set specific parameters of I/O channels.</summary>
            <param name="IOChannelHandle">Handles of the opened I/O channels.</param>
            <param name="paramName">Parameter names. Default: []</param>
            <param name="paramValue">Parameter values to set. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetIoChannelParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query specific parameters of I/O channels.</summary>
            <param name="IOChannelHandle">Handles of the opened I/O channels.</param>
            <param name="paramName">Parameter names. Default: ""</param>
            <param name="paramValue">Parameter values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseIoChannel(HalconDotNet.HTuple)">
            <summary>Close I/O channels.</summary>
            <param name="IOChannelHandle">Handles of the opened I/O channels.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OpenIoChannel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Open and configure I/O channels.</summary>
            <param name="IODeviceHandle">Handle of the opened I/O device.</param>
            <param name="IOChannelName">HALCON I/O channel names of the specified device.</param>
            <param name="genParamName">Parameter names. Default: []</param>
            <param name="genParamValue">Parameter values. Default: []</param>
            <param name="IOChannelHandle">Handles of the opened I/O channel.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryIoDevice(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query information about channels of the specified I/O device. </summary>
            <param name="IODeviceHandle">Handle of the opened I/O device.</param>
            <param name="IOChannelName">Channel names to query.</param>
            <param name="query">Name of the query. Default: "param_name"</param>
            <param name="result">List of values (according to Query).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ControlIoDevice(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Perform an action on the I/O device.</summary>
            <param name="IODeviceHandle">Handle of the opened I/O device.</param>
            <param name="action">Name of the action to perform.</param>
            <param name="argument">List of arguments for the action. Default: []</param>
            <param name="result">List of result values returned by the action.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetIoDeviceParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Configure a specific I/O device instance.</summary>
            <param name="IODeviceHandle">Handle of the opened I/O device.</param>
            <param name="paramName">Parameter names. Default: []</param>
            <param name="paramValue">Parameter values to set. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetIoDeviceParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query settings of an I/O device instance. </summary>
            <param name="IODeviceHandle">Handle of the opened I/O device.</param>
            <param name="paramName">Parameter names. Default: ""</param>
            <param name="paramValue">Parameter values.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseIoDevice(HalconDotNet.HTuple)">
            <summary>Close the specified I/O device. </summary>
            <param name="IODeviceHandle">Handle of the opened I/O device.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OpenIoDevice(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Open and configure an I/O device. </summary>
            <param name="IOInterfaceName">HALCON I/O interface name. Default: []</param>
            <param name="IODeviceName">I/O device name. Default: []</param>
            <param name="genParamName">Dynamic parameter names. Default: []</param>
            <param name="genParamValue">Dynamic parameter values. Default: []</param>
            <param name="IODeviceHandle">Handle of the opened I/O device.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.ControlIoInterface(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Perform an action on the I/O interface.</summary>
            <param name="IOInterfaceName">HALCON I/O interface name. Default: []</param>
            <param name="action">Name of the action to perform.</param>
            <param name="argument">List of arguments for the action. Default: []</param>
            <param name="result">List of results returned by the action.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.QueryIoInterface(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query information about the specified I/O device interface.</summary>
            <param name="IOInterfaceName">HALCON I/O interface name. Default: []</param>
            <param name="query">Parameter name of the query. Default: []</param>
            <param name="result">List of result values (according to Query).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetFramegrabberParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query specific parameters of an image acquisition device.</summary>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
            <param name="param">Parameter of interest. Default: "revision"</param>
            <param name="value">Parameter value.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetFramegrabberParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set specific parameters of an image acquistion device.</summary>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
            <param name="param">Parameter name.</param>
            <param name="value">Parameter value to be set.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetFramegrabberCallback(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Query callback function of an image acquisition device.</summary>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
            <param name="callbackType">Callback type. Default: "transfer_end"</param>
            <param name="callbackFunction">Pointer to the callback function.</param>
            <param name="userContext">Pointer to user-specific context data.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetFramegrabberCallback(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Register a callback function for an image acquisition device.</summary>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
            <param name="callbackType">Callback type. Default: "transfer_end"</param>
            <param name="callbackFunction">Pointer to the callback function to be set.</param>
            <param name="userContext">Pointer to user-specific context data.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrabDataAsync(HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Asynchronous grab of images and preprocessed image data from the specified image acquisition device.</summary>
            <param name="image">Grabbed image data.</param>
            <param name="region">Pre-processed image regions.</param>
            <param name="contours">Pre-processed XLD contours.</param>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
            <param name="maxDelay">Maximum tolerated delay between the start of the asynchronous grab and the delivery of the image [ms]. Default: -1.0</param>
            <param name="data">Pre-processed control data.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrabData(HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Synchronous grab of images and preprocessed image data from the specified image acquisition device.</summary>
            <param name="image">Grabbed image data.</param>
            <param name="region">Preprocessed image regions.</param>
            <param name="contours">Preprocessed XLD contours.</param>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
            <param name="data">Preprocessed control data.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrabImageAsync(HalconDotNet.HObject@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Asynchronous grab of an image from the specified image acquisition device.</summary>
            <param name="image">Grabbed image.</param>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
            <param name="maxDelay">Maximum tolerated delay between the start of the asynchronous grab and the delivery of the image [ms]. Default: -1.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrabImageStart(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Start an asynchronous grab from the specified image acquisition device.</summary>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
            <param name="maxDelay">This parameter is obsolete and has no effect. Default: -1.0</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GrabImage(HalconDotNet.HObject@,HalconDotNet.HTuple)">
            <summary>Synchronous grab of an image from the specified image acquisition device.</summary>
            <param name="image">Grabbed image.</param>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.InfoFramegrabber(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Query information about the specified image acquisition interface.</summary>
            <param name="name">HALCON image acquisition interface name, i.e., name of the corresponding DLL (Windows) or shared library (Linux/OS X). Default: "File"</param>
            <param name="query">Name of the chosen query. Default: "info_boards"</param>
            <param name="information">Textual information (according to Query).</param>
            <param name="valueList">List of values (according to Query).</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseAllFramegrabbers">
            <summary>Close all image acquisition devices.</summary>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.CloseFramegrabber(HalconDotNet.HTuple)">
            <summary>Close specified image acquisition device.</summary>
            <param name="acqHandle">Handle of the image acquisition device to be closed.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.OpenFramegrabber(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Open and configure an image acquisition device.</summary>
            <param name="name">HALCON image acquisition interface name, i.e., name of the corresponding DLL (Windows) or shared library (Linux/OS X). Default: "File"</param>
            <param name="horizontalResolution">Desired horizontal resolution of image acquisition interface (absolute value or 1 for full resolution, 2 for half resolution, or 4 for quarter resolution). Default: 1</param>
            <param name="verticalResolution">Desired vertical resolution of image acquisition interface (absolute value or 1 for full resolution, 2 for half resolution, or 4 for quarter resolution). Default: 1</param>
            <param name="imageWidth">Width of desired image part (absolute value or 0 for HorizontalResolution - 2*StartColumn). Default: 0</param>
            <param name="imageHeight">Height of desired image part (absolute value or 0 for VerticalResolution - 2*StartRow). Default: 0</param>
            <param name="startRow">Line number of upper left corner of desired image part (or border height if ImageHeight = 0). Default: 0</param>
            <param name="startColumn">Column number of upper left corner of desired image part (or border width if ImageWidth = 0). Default: 0</param>
            <param name="field">Desired half image or full image. Default: "default"</param>
            <param name="bitsPerChannel">Number of transferred bits per pixel and image channel (-1: device-specific default value). Default: -1</param>
            <param name="colorSpace">Output color format of the grabbed images, typically 'gray' or 'raw' for single-channel or 'rgb' or 'yuv' for three-channel images ('default': device-specific default value). Default: "default"</param>
            <param name="generic">Generic parameter with device-specific meaning. Default: -1</param>
            <param name="externalTrigger">External triggering. Default: "default"</param>
            <param name="cameraType">Type of used camera ('default': device-specific default value). Default: "default"</param>
            <param name="device">Device the image acquisition device is connected to ('default': device-specific default value). Default: "default"</param>
            <param name="port">Port the image acquisition device is connected to (-1: device-specific default value). Default: -1</param>
            <param name="lineIn">Camera input line of multiplexer (-1: device-specific default value). Default: -1</param>
            <param name="acqHandle">Handle of the opened image acquisition device.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.GetFramegrabberLut(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Query look-up table of the image acquisition device.</summary>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
            <param name="imageRed">Red level of the LUT entries.</param>
            <param name="imageGreen">Green level of the LUT entries.</param>
            <param name="imageBlue">Blue level of the LUT entries.</param>
        </member>
        <member name="M:HalconDotNet.HOperatorSet.SetFramegrabberLut(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set look-up table of the image acquisition device.</summary>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
            <param name="imageRed">Red level of the LUT entries.</param>
            <param name="imageGreen">Green level of the LUT entries.</param>
            <param name="imageBlue">Blue level of the LUT entries.</param>
        </member>
        <member name="T:HalconDotNet.HCondition">
            <summary>Represents an instance of a condition synchronization object.</summary>
        </member>
        <member name="M:HalconDotNet.HCondition.#ctor(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a condition variable synchronization object.
              Modified instance represents: Condition synchronization object.
            </summary>
            <param name="attribName">Mutex attribute. Default: ""</param>
            <param name="attribValue">Mutex attribute value. Default: ""</param>
        </member>
        <member name="M:HalconDotNet.HCondition.#ctor(System.String,System.String)">
            <summary>
              Create a condition variable synchronization object.
              Modified instance represents: Condition synchronization object.
            </summary>
            <param name="attribName">Mutex attribute. Default: ""</param>
            <param name="attribValue">Mutex attribute value. Default: ""</param>
        </member>
        <member name="M:HalconDotNet.HCondition.BroadcastCondition">
            <summary>
              Signal a condition synchronization object.
              Instance represents: Condition synchronization object.
            </summary>
        </member>
        <member name="M:HalconDotNet.HCondition.SignalCondition">
            <summary>
              Signal a condition synchronization object.
              Instance represents: Condition synchronization object.
            </summary>
        </member>
        <member name="M:HalconDotNet.HCondition.TimedWaitCondition(HalconDotNet.HMutex,System.Int32)">
            <summary>
              Bounded wait on the signal of a condition synchronization object.
              Instance represents: Condition synchronization object.
            </summary>
            <param name="mutexHandle">Mutex synchronization object.</param>
            <param name="timeout">Timeout in micro seconds.</param>
        </member>
        <member name="M:HalconDotNet.HCondition.WaitCondition(HalconDotNet.HMutex)">
            <summary>
              wait on the signal of a condition synchronization object.
              Instance represents: Condition synchronization object.
            </summary>
            <param name="mutexHandle">Mutex synchronization object.</param>
        </member>
        <member name="M:HalconDotNet.HCondition.CreateCondition(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a condition variable synchronization object.
              Modified instance represents: Condition synchronization object.
            </summary>
            <param name="attribName">Mutex attribute. Default: ""</param>
            <param name="attribValue">Mutex attribute value. Default: ""</param>
        </member>
        <member name="M:HalconDotNet.HCondition.CreateCondition(System.String,System.String)">
            <summary>
              Create a condition variable synchronization object.
              Modified instance represents: Condition synchronization object.
            </summary>
            <param name="attribName">Mutex attribute. Default: ""</param>
            <param name="attribValue">Mutex attribute value. Default: ""</param>
        </member>
        <member name="T:HalconDotNet.HSystem">
            <summary>Class grouping system information and manipulation related functionality.</summary>
        </member>
        <member name="M:HalconDotNet.HSystem.WaitSeconds(System.Double)">
            <summary>Delaying the execution of the program.</summary>
            <param name="seconds">Number of seconds by which the execution of the program will be delayed. Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HSystem.SystemCall(System.String)">
            <summary>Execute a system command.</summary>
            <param name="command">Command to be called by the system. Default: "ls"</param>
        </member>
        <member name="M:HalconDotNet.HSystem.SetSystem(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Set HALCON system parameters.</summary>
            <param name="systemParameter">Name of the system parameter to be changed. Default: "init_new_image"</param>
            <param name="value">New value of the system parameter. Default: "true"</param>
        </member>
        <member name="M:HalconDotNet.HSystem.SetSystem(System.String,System.String)">
            <summary>Set HALCON system parameters.</summary>
            <param name="systemParameter">Name of the system parameter to be changed. Default: "init_new_image"</param>
            <param name="value">New value of the system parameter. Default: "true"</param>
        </member>
        <member name="M:HalconDotNet.HSystem.SetCheck(HalconDotNet.HTuple)">
            <summary>Activating and deactivating of HALCON control modes.</summary>
            <param name="check">Desired control mode. Default: "default"</param>
        </member>
        <member name="M:HalconDotNet.HSystem.SetCheck(System.String)">
            <summary>Activating and deactivating of HALCON control modes.</summary>
            <param name="check">Desired control mode. Default: "default"</param>
        </member>
        <member name="M:HalconDotNet.HSystem.ResetObjDb(System.Int32,System.Int32,System.Int32)">
            <summary>Initialization of the HALCON system.</summary>
            <param name="defaultImageWidth">Default image width (in pixels). Default: 128</param>
            <param name="defaultImageHeight">Default image height (in pixels). Default: 128</param>
            <param name="defaultChannels">Usual number of channels. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HSystem.GetSystem(HalconDotNet.HTuple)">
            <summary>Get current value of HALCON system parameters.</summary>
            <param name="query">Desired system parameter. Default: "init_new_image"</param>
            <returns>Current value of the system parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HSystem.GetSystem(System.String)">
            <summary>Get current value of HALCON system parameters.</summary>
            <param name="query">Desired system parameter. Default: "init_new_image"</param>
            <returns>Current value of the system parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HSystem.GetCheck">
            <summary>State of the HALCON control modes.</summary>
            <returns>Tuplet of the currently activated control modes.</returns>
        </member>
        <member name="M:HalconDotNet.HSystem.GetErrorText(System.Int32)">
            <summary>Inquiry after the error text of a HALCON error number.</summary>
            <param name="errorCode">HALCON error code.</param>
            <returns>Corresponding error message.</returns>
        </member>
        <member name="M:HalconDotNet.HSystem.CountSeconds">
            <summary>Passed Time.</summary>
            <returns>Processtime since the program start.</returns>
        </member>
        <member name="M:HalconDotNet.HSystem.CountRelation(System.String)">
            <summary>Number of entries in the HALCON database.</summary>
            <param name="relationName">Relation of interest of the HALCON database. Default: "object"</param>
            <returns>Number of tuples in the relation.</returns>
        </member>
        <member name="M:HalconDotNet.HSystem.GetExtendedErrorInfo(System.Int32@,System.String@)">
            <summary>Returns the extended error information for the calling thread's last HALCON error.</summary>
            <param name="errorCode">Extended error code.</param>
            <param name="errorMessage">Extended error message.</param>
            <returns>Operator that set the error code.</returns>
        </member>
        <member name="M:HalconDotNet.HSystem.GetModules(System.Int32@)">
            <summary>Query of used modules and the module key.</summary>
            <param name="moduleKey">Key for licence manager.</param>
            <returns>Names of used modules.</returns>
        </member>
        <member name="M:HalconDotNet.HSystem.QuerySpy(HalconDotNet.HTuple@)">
            <summary>Inquiring for possible settings of the HALCON debugging tool.</summary>
            <param name="values">Corresponding state of the control modes.</param>
            <returns>Available control modes (see also set_spy).</returns>
        </member>
        <member name="M:HalconDotNet.HSystem.SetSpy(System.String,HalconDotNet.HTuple)">
            <summary>Control of the HALCON Debugging Tools.</summary>
            <param name="classVal">Control mode Default: "mode"</param>
            <param name="value">State of the control mode to be set. Default: "on"</param>
        </member>
        <member name="M:HalconDotNet.HSystem.SetSpy(System.String,System.String)">
            <summary>Control of the HALCON Debugging Tools.</summary>
            <param name="classVal">Control mode Default: "mode"</param>
            <param name="value">State of the control mode to be set. Default: "on"</param>
        </member>
        <member name="M:HalconDotNet.HSystem.GetSpy(System.String)">
            <summary>Current configuration of the HALCON debugging-tool.</summary>
            <param name="classVal">Control mode Default: "mode"</param>
            <returns>State of the control mode.</returns>
        </member>
        <member name="M:HalconDotNet.HSystem.LoadParKnowledge(System.String)">
            <summary>Load knowledge about automatic parallelization from file.</summary>
            <param name="fileName">Name of parallelization knowledge file. Default: ""</param>
        </member>
        <member name="M:HalconDotNet.HSystem.StoreParKnowledge(System.String)">
            <summary>Store knowledge about automatic parallelization in file.</summary>
            <param name="fileName">Name of parallelization knowledge file. Default: ""</param>
        </member>
        <member name="M:HalconDotNet.HSystem.CheckParHwPotential(System.Int32)">
            <summary>Check hardware regarding its potential for parallel processing.</summary>
            <param name="allInpPars">Check every input parameter? Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HSystem.SetAopInfo(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple)">
            <summary>Set AOP information for operators.</summary>
            <param name="operatorName">Operator to set information to Default: ""</param>
            <param name="indexName">Further specific index Default: ""</param>
            <param name="indexValue">Further specific address Default: ""</param>
            <param name="infoName">Scope of information Default: "max_threads"</param>
            <param name="infoValue">AOP information value</param>
        </member>
        <member name="M:HalconDotNet.HSystem.SetAopInfo(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>Set AOP information for operators.</summary>
            <param name="operatorName">Operator to set information to Default: ""</param>
            <param name="indexName">Further specific index Default: ""</param>
            <param name="indexValue">Further specific address Default: ""</param>
            <param name="infoName">Scope of information Default: "max_threads"</param>
            <param name="infoValue">AOP information value</param>
        </member>
        <member name="M:HalconDotNet.HSystem.GetAopInfo(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>Return AOP information for operators. </summary>
            <param name="operatorName">Operator to get information for</param>
            <param name="indexName">Further index stages Default: ["iconic_type","parameter:0"]</param>
            <param name="indexValue">Further index values Default: ["byte",""]</param>
            <param name="infoName">Scope of information Default: "max_threads"</param>
            <returns>Value of information</returns>
        </member>
        <member name="M:HalconDotNet.HSystem.GetAopInfo(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>Return AOP information for operators. </summary>
            <param name="operatorName">Operator to get information for</param>
            <param name="indexName">Further index stages Default: ["iconic_type","parameter:0"]</param>
            <param name="indexValue">Further index values Default: ["byte",""]</param>
            <param name="infoName">Scope of information Default: "max_threads"</param>
            <returns>Value of information</returns>
        </member>
        <member name="M:HalconDotNet.HSystem.QueryAopInfo(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query indexing struxture of AOP information for operators. </summary>
            <param name="operatorName">Operator to get information for Default: ""</param>
            <param name="indexName">Further specific index Default: ""</param>
            <param name="indexValue">Further specific address Default: ""</param>
            <param name="value">Values of next index stage</param>
            <returns>Name of next index stage</returns>
        </member>
        <member name="M:HalconDotNet.HSystem.QueryAopInfo(System.String,System.String,System.String,HalconDotNet.HTuple@)">
            <summary>Query indexing struxture of AOP information for operators. </summary>
            <param name="operatorName">Operator to get information for Default: ""</param>
            <param name="indexName">Further specific index Default: ""</param>
            <param name="indexValue">Further specific address Default: ""</param>
            <param name="value">Values of next index stage</param>
            <returns>Name of next index stage</returns>
        </member>
        <member name="M:HalconDotNet.HSystem.OptimizeAop(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Check hardware regarding its potential for automatic operator parallelization.</summary>
            <param name="operatorName">Operators to check Default: ""</param>
            <param name="iconicType">Iconic object types to check Default: ""</param>
            <param name="fileName">Knowledge file name Default: ""</param>
            <param name="paramName">Parameter name Default: "none"</param>
            <param name="paramValue">Parameter value Default: "none"</param>
        </member>
        <member name="M:HalconDotNet.HSystem.OptimizeAop(System.String,System.String,System.String,System.String,System.String)">
            <summary>Check hardware regarding its potential for automatic operator parallelization.</summary>
            <param name="operatorName">Operators to check Default: ""</param>
            <param name="iconicType">Iconic object types to check Default: ""</param>
            <param name="fileName">Knowledge file name Default: ""</param>
            <param name="paramName">Parameter name Default: "none"</param>
            <param name="paramValue">Parameter value Default: "none"</param>
        </member>
        <member name="M:HalconDotNet.HSystem.WriteAopKnowledge(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Write knowledge about hardware dependent behavior of automatic operator parallelization to file.</summary>
            <param name="fileName">Name of knowledge file Default: ""</param>
            <param name="paramName">Parameter name Default: "none"</param>
            <param name="paramValue">Parameter value Default: "none"</param>
        </member>
        <member name="M:HalconDotNet.HSystem.WriteAopKnowledge(System.String,System.String,System.String)">
            <summary>Write knowledge about hardware dependent behavior of automatic operator parallelization to file.</summary>
            <param name="fileName">Name of knowledge file Default: ""</param>
            <param name="paramName">Parameter name Default: "none"</param>
            <param name="paramValue">Parameter value Default: "none"</param>
        </member>
        <member name="M:HalconDotNet.HSystem.ReadAopKnowledge(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Load knowledge about hardware dependent behavior of automatic operator parallelization.</summary>
            <param name="fileName">Name of knowledge file Default: ""</param>
            <param name="paramName">Parameter name Default: "none"</param>
            <param name="paramValue">Parameter value Default: "none"</param>
            <param name="operatorNames">Updated Operators</param>
            <returns>Knowledge attributes</returns>
        </member>
        <member name="M:HalconDotNet.HSystem.ReadAopKnowledge(System.String,System.String,System.String,System.String@)">
            <summary>Load knowledge about hardware dependent behavior of automatic operator parallelization.</summary>
            <param name="fileName">Name of knowledge file Default: ""</param>
            <param name="paramName">Parameter name Default: "none"</param>
            <param name="paramValue">Parameter value Default: "none"</param>
            <param name="operatorNames">Updated Operators</param>
            <returns>Knowledge attributes</returns>
        </member>
        <member name="M:HalconDotNet.HSystem.SetWindowType(System.String)">
            <summary>Specify a window type.</summary>
            <param name="windowType">Name of the window type which has to be set. Default: "X-Window"</param>
        </member>
        <member name="M:HalconDotNet.HSystem.GetWindowAttr(System.String)">
            <summary>Get window characteristics.</summary>
            <param name="attributeName">Name of the attribute that should be returned.</param>
            <returns>Attribute value.</returns>
        </member>
        <member name="M:HalconDotNet.HSystem.SetWindowAttr(System.String,HalconDotNet.HTuple)">
            <summary>Set window characteristics.</summary>
            <param name="attributeName">Name of the attribute that should be modified.</param>
            <param name="attributeValue">Value of the attribute that should be set.</param>
        </member>
        <member name="M:HalconDotNet.HSystem.SetWindowAttr(System.String,System.String)">
            <summary>Set window characteristics.</summary>
            <param name="attributeName">Name of the attribute that should be modified.</param>
            <param name="attributeValue">Value of the attribute that should be set.</param>
        </member>
        <member name="M:HalconDotNet.HSystem.QueryWindowType">
            <summary>Query all available window types.</summary>
            <returns>Names of available window types.</returns>
        </member>
        <member name="T:HalconDotNet.HDescriptorModel">
            <summary>Represents an instance of a descriptor model.</summary>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.#ctor(System.String)">
            <summary>
              Read a descriptor model from a file.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.#ctor(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HPose,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32)">
            <summary>
              Create a descriptor model for calibrated perspective matching.
              Modified instance represents: The handle to the descriptor model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="camParam">The parameters of the internal orientation of the camera.</param>
            <param name="referencePose">The reference pose of the object in the reference image.</param>
            <param name="detectorType">The type of the detector. Default: "lepetit"</param>
            <param name="detectorParamName">The detector's parameter names. Default: []</param>
            <param name="detectorParamValue">Values of the detector's parameters. Default: []</param>
            <param name="descriptorParamName">The descriptor's parameter names. Default: []</param>
            <param name="descriptorParamValue">Values of the descriptor's parameters. Default: []</param>
            <param name="seed">The seed for the random number generator. Default: 42</param>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.#ctor(HalconDotNet.HImage,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32)">
            <summary>
              Prepare a descriptor model for interest point matching.
              Modified instance represents: The handle to the descriptor model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="detectorType">The type of the detector. Default: "lepetit"</param>
            <param name="detectorParamName">The detector's parameter names. Default: []</param>
            <param name="detectorParamValue">Values of the detector's parameters. Default: []</param>
            <param name="descriptorParamName">The descriptor's parameter names. Default: []</param>
            <param name="descriptorParamValue">Values of the descriptor's parameters. Default: []</param>
            <param name="seed">The seed for the random number generator. Default: 42</param>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.DeserializeDescriptorModel(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a descriptor model.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.SerializeDescriptorModel">
            <summary>
              Serialize a descriptor model.
              Instance represents: Handle of a model to be saved.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.ReadDescriptorModel(System.String)">
            <summary>
              Read a descriptor model from a file.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.WriteDescriptorModel(System.String)">
            <summary>
              Write a descriptor model to a file.
              Instance represents: Handle of a model to be saved.
            </summary>
            <param name="fileName">The path and filename of the model to be saved.</param>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.FindCalibDescriptorModel(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a calibrated descriptor model in an image and return their 3D pose.
              Instance represents: The handle to the descriptor model.
            </summary>
            <param name="image">Input image where the model should be found.</param>
            <param name="detectorParamName">The detector's parameter names. Default: []</param>
            <param name="detectorParamValue">Values of the detector's parameters. Default: []</param>
            <param name="descriptorParamName">The descriptor's parameter names. Default: []</param>
            <param name="descriptorParamValue">Values of the descriptor's parameters. Default: []</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.2</param>
            <param name="numMatches">Maximal number of found instances. Default: 1</param>
            <param name="camParam">Camera parameter (inner orientation) obtained from camera calibration.</param>
            <param name="scoreType">Score type to be evaluated in Score. Default: "num_points"</param>
            <param name="score">Score of the found instances according to the ScoreType input.</param>
            <returns>3D pose of the object.</returns>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.FindCalibDescriptorModel(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Int32,HalconDotNet.HTuple,System.String,System.Double@)">
            <summary>
              Find the best matches of a calibrated descriptor model in an image and return their 3D pose.
              Instance represents: The handle to the descriptor model.
            </summary>
            <param name="image">Input image where the model should be found.</param>
            <param name="detectorParamName">The detector's parameter names. Default: []</param>
            <param name="detectorParamValue">Values of the detector's parameters. Default: []</param>
            <param name="descriptorParamName">The descriptor's parameter names. Default: []</param>
            <param name="descriptorParamValue">Values of the descriptor's parameters. Default: []</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.2</param>
            <param name="numMatches">Maximal number of found instances. Default: 1</param>
            <param name="camParam">Camera parameter (inner orientation) obtained from camera calibration.</param>
            <param name="scoreType">Score type to be evaluated in Score. Default: "num_points"</param>
            <param name="score">Score of the found instances according to the ScoreType input.</param>
            <returns>3D pose of the object.</returns>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.FindUncalibDescriptorModel(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a descriptor model in an image.
              Instance represents: The handle to the descriptor model.
            </summary>
            <param name="image">Input image where the model should be found.</param>
            <param name="detectorParamName">The detector's parameter names. Default: []</param>
            <param name="detectorParamValue">Values of the detector's parameters. Default: []</param>
            <param name="descriptorParamName">The descriptor's parameter names. Default: []</param>
            <param name="descriptorParamValue">Values of the descriptor's parameters. Default: []</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.2</param>
            <param name="numMatches">Maximal number of found instances. Default: 1</param>
            <param name="scoreType">Score type to be evaluated in Score. Default: "num_points"</param>
            <param name="score">Score of the found instances according to the ScoreType input.</param>
            <returns>Homography between model and found instance.</returns>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.FindUncalibDescriptorModel(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Int32,System.String,System.Double@)">
            <summary>
              Find the best matches of a descriptor model in an image.
              Instance represents: The handle to the descriptor model.
            </summary>
            <param name="image">Input image where the model should be found.</param>
            <param name="detectorParamName">The detector's parameter names. Default: []</param>
            <param name="detectorParamValue">Values of the detector's parameters. Default: []</param>
            <param name="descriptorParamName">The descriptor's parameter names. Default: []</param>
            <param name="descriptorParamValue">Values of the descriptor's parameters. Default: []</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.2</param>
            <param name="numMatches">Maximal number of found instances. Default: 1</param>
            <param name="scoreType">Score type to be evaluated in Score. Default: "num_points"</param>
            <param name="score">Score of the found instances according to the ScoreType input.</param>
            <returns>Homography between model and found instance.</returns>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.GetDescriptorModelPoints(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Query the interest points of the descriptor model or the last processed search image.
              Instance represents: The handle to the descriptor model.
            </summary>
            <param name="set">Set of interest points. Default: "model"</param>
            <param name="subset">Subset of interest points. Default: "all"</param>
            <param name="row">Row coordinates of interest points.</param>
            <param name="column">Column coordinates of interest points.</param>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.GetDescriptorModelPoints(System.String,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Query the interest points of the descriptor model or the last processed search image.
              Instance represents: The handle to the descriptor model.
            </summary>
            <param name="set">Set of interest points. Default: "model"</param>
            <param name="subset">Subset of interest points. Default: "all"</param>
            <param name="row">Row coordinates of interest points.</param>
            <param name="column">Column coordinates of interest points.</param>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.GetDescriptorModelParams(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Return the parameters of a descriptor model.
              Instance represents: The object handle to the descriptor model.
            </summary>
            <param name="detectorParamName">The detectors parameter names.</param>
            <param name="detectorParamValue">Values of the detectors parameters.</param>
            <param name="descriptorParamName">The descriptors parameter names.</param>
            <param name="descriptorParamValue">Values of the descriptors parameters.</param>
            <returns>The type of the detector.</returns>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.CreateCalibDescriptorModel(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HPose,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32)">
            <summary>
              Create a descriptor model for calibrated perspective matching.
              Modified instance represents: The handle to the descriptor model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="camParam">The parameters of the internal orientation of the camera.</param>
            <param name="referencePose">The reference pose of the object in the reference image.</param>
            <param name="detectorType">The type of the detector. Default: "lepetit"</param>
            <param name="detectorParamName">The detector's parameter names. Default: []</param>
            <param name="detectorParamValue">Values of the detector's parameters. Default: []</param>
            <param name="descriptorParamName">The descriptor's parameter names. Default: []</param>
            <param name="descriptorParamValue">Values of the descriptor's parameters. Default: []</param>
            <param name="seed">The seed for the random number generator. Default: 42</param>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.CreateUncalibDescriptorModel(HalconDotNet.HImage,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32)">
            <summary>
              Prepare a descriptor model for interest point matching.
              Modified instance represents: The handle to the descriptor model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="detectorType">The type of the detector. Default: "lepetit"</param>
            <param name="detectorParamName">The detector's parameter names. Default: []</param>
            <param name="detectorParamValue">Values of the detector's parameters. Default: []</param>
            <param name="descriptorParamName">The descriptor's parameter names. Default: []</param>
            <param name="descriptorParamValue">Values of the descriptor's parameters. Default: []</param>
            <param name="seed">The seed for the random number generator. Default: 42</param>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.GetDescriptorModelResults(HalconDotNet.HTuple,System.String)">
            <summary>
              Query alphanumerical results that were accumulated during descriptor-based matching.
              Instance represents: Handle of a descriptor model.
            </summary>
            <param name="objectID">Handle of the object for which the results are queried. Default: "all"</param>
            <param name="resultNames">Name of the results to be queried. Default: "num_points"</param>
            <returns>Returned results.</returns>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.GetDescriptorModelResults(System.Int32,System.String)">
            <summary>
              Query alphanumerical results that were accumulated during descriptor-based matching.
              Instance represents: Handle of a descriptor model.
            </summary>
            <param name="objectID">Handle of the object for which the results are queried. Default: "all"</param>
            <param name="resultNames">Name of the results to be queried. Default: "num_points"</param>
            <returns>Returned results.</returns>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.GetDescriptorModelOrigin(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Return the origin of a descriptor model.
              Instance represents: Handle of a descriptor model.
            </summary>
            <param name="row">Position of origin in row direction.</param>
            <param name="column">Position of origin in column direction.</param>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.GetDescriptorModelOrigin(System.Double@,System.Double@)">
            <summary>
              Return the origin of a descriptor model.
              Instance represents: Handle of a descriptor model.
            </summary>
            <param name="row">Position of origin in row direction.</param>
            <param name="column">Position of origin in column direction.</param>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.SetDescriptorModelOrigin(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Sets the origin of a descriptor model.
              Instance represents: Handle of a descriptor model.
            </summary>
            <param name="row">Translation of origin in row direction. Default: 0</param>
            <param name="column">Translation of origin in column direction. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HDescriptorModel.SetDescriptorModelOrigin(System.Double,System.Double)">
            <summary>
              Sets the origin of a descriptor model.
              Instance represents: Handle of a descriptor model.
            </summary>
            <param name="row">Translation of origin in row direction. Default: 0</param>
            <param name="column">Translation of origin in column direction. Default: 0</param>
        </member>
        <member name="T:HalconDotNet.HStereoModel">
            <summary>Represents an instance of a stereo model.</summary>
        </member>
        <member name="M:HalconDotNet.HStereoModel.#ctor(HalconDotNet.HCameraSetupModel,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a HALCON stereo model.
              Modified instance represents: Handle of the stereo model.
            </summary>
            <param name="cameraSetupModelID">Handle to the camera setup model.</param>
            <param name="method">Reconstruction method. Default: "surface_pairwise"</param>
            <param name="genParamName">Name of the model parameter to be set. Default: []</param>
            <param name="genParamValue">Value of the model parameter to be set. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HStereoModel.#ctor(HalconDotNet.HCameraSetupModel,System.String,System.String,HalconDotNet.HTuple)">
            <summary>
              Create a HALCON stereo model.
              Modified instance represents: Handle of the stereo model.
            </summary>
            <param name="cameraSetupModelID">Handle to the camera setup model.</param>
            <param name="method">Reconstruction method. Default: "surface_pairwise"</param>
            <param name="genParamName">Name of the model parameter to be set. Default: []</param>
            <param name="genParamValue">Value of the model parameter to be set. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HStereoModel.ReconstructPointsStereo(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Reconstruct 3D points from calibrated multi-view stereo images.
              Instance represents: Handle of the stereo model.
            </summary>
            <param name="row">Row coordinates of the detected points.</param>
            <param name="column">Column coordinates of the detected points.</param>
            <param name="covIP">Covariance matrices of the detected points. Default: []</param>
            <param name="cameraIdx">Indices of the observing cameras.</param>
            <param name="pointIdx">Indices of the observed world points.</param>
            <param name="x">X coordinates of the reconstructed 3D points.</param>
            <param name="y">Y coordinates of the reconstructed 3D points.</param>
            <param name="z">Z coordinates of the reconstructed 3D points.</param>
            <param name="covWP">Covariance matrices of the reconstructed 3D points.</param>
            <param name="pointIdxOut">Indices of the reconstructed 3D points.</param>
        </member>
        <member name="M:HalconDotNet.HStereoModel.ReconstructPointsStereo(System.Double,System.Double,HalconDotNet.HTuple,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32@)">
            <summary>
              Reconstruct 3D points from calibrated multi-view stereo images.
              Instance represents: Handle of the stereo model.
            </summary>
            <param name="row">Row coordinates of the detected points.</param>
            <param name="column">Column coordinates of the detected points.</param>
            <param name="covIP">Covariance matrices of the detected points. Default: []</param>
            <param name="cameraIdx">Indices of the observing cameras.</param>
            <param name="pointIdx">Indices of the observed world points.</param>
            <param name="x">X coordinates of the reconstructed 3D points.</param>
            <param name="y">Y coordinates of the reconstructed 3D points.</param>
            <param name="z">Z coordinates of the reconstructed 3D points.</param>
            <param name="covWP">Covariance matrices of the reconstructed 3D points.</param>
            <param name="pointIdxOut">Indices of the reconstructed 3D points.</param>
        </member>
        <member name="M:HalconDotNet.HStereoModel.ReconstructSurfaceStereo(HalconDotNet.HImage)">
            <summary>
              Reconstruct surface from calibrated multi-view stereo images.
              Instance represents: Handle of the stereo model.
            </summary>
            <param name="images">An image array acquired by the camera setup associated to the stereo model.</param>
            <returns>Handle to the resulting surface.</returns>
        </member>
        <member name="M:HalconDotNet.HStereoModel.GetStereoModelObject(HalconDotNet.HTuple,System.String)">
            <summary>
              Get intermediate iconic results of a stereo reconstruction.
              Instance represents: Handle of the stereo model.
            </summary>
            <param name="pairIndex">Camera indices of the pair ([From, To]).</param>
            <param name="objectName">Name of the iconic result to be returned.</param>
            <returns>Iconic result.</returns>
        </member>
        <member name="M:HalconDotNet.HStereoModel.GetStereoModelObject(System.Int32,System.String)">
            <summary>
              Get intermediate iconic results of a stereo reconstruction.
              Instance represents: Handle of the stereo model.
            </summary>
            <param name="pairIndex">Camera indices of the pair ([From, To]).</param>
            <param name="objectName">Name of the iconic result to be returned.</param>
            <returns>Iconic result.</returns>
        </member>
        <member name="M:HalconDotNet.HStereoModel.GetStereoModelImagePairs(HalconDotNet.HTuple@)">
            <summary>
              Return the list of image pairs set in a stereo model.
              Instance represents: Handle of the stereo model.
            </summary>
            <param name="to">Camera indices for the to cameras in the image pairs.</param>
            <returns>Camera indices for the from cameras in the image pairs.</returns>
        </member>
        <member name="M:HalconDotNet.HStereoModel.SetStereoModelImagePairs(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Specify image pairs to be used for surface stereo reconstruction.
              Instance represents: Handle of the stereo model.
            </summary>
            <param name="from">Camera indices for the from cameras in the image pairs.</param>
            <param name="to">Camera indices for the to cameras in the  image pairs.</param>
        </member>
        <member name="M:HalconDotNet.HStereoModel.GetStereoModelParam(HalconDotNet.HTuple)">
            <summary>
              Get stereo model parameters.
              Instance represents: Handle of the stereo model.
            </summary>
            <param name="paramName">Names of the parameters to be set.</param>
            <returns>Values of the parameters to be set.</returns>
        </member>
        <member name="M:HalconDotNet.HStereoModel.GetStereoModelParam(System.String)">
            <summary>
              Get stereo model parameters.
              Instance represents: Handle of the stereo model.
            </summary>
            <param name="paramName">Names of the parameters to be set.</param>
            <returns>Values of the parameters to be set.</returns>
        </member>
        <member name="M:HalconDotNet.HStereoModel.SetStereoModelParam(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set stereo model parameters.
              Instance represents: Handle of the stereo model.
            </summary>
            <param name="paramName">Names of the parameters to be set.</param>
            <param name="paramValue">Values of the parameters to be set.</param>
        </member>
        <member name="M:HalconDotNet.HStereoModel.SetStereoModelParam(System.String,HalconDotNet.HTuple)">
            <summary>
              Set stereo model parameters.
              Instance represents: Handle of the stereo model.
            </summary>
            <param name="paramName">Names of the parameters to be set.</param>
            <param name="paramValue">Values of the parameters to be set.</param>
        </member>
        <member name="M:HalconDotNet.HStereoModel.CreateStereoModel(HalconDotNet.HCameraSetupModel,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a HALCON stereo model.
              Modified instance represents: Handle of the stereo model.
            </summary>
            <param name="cameraSetupModelID">Handle to the camera setup model.</param>
            <param name="method">Reconstruction method. Default: "surface_pairwise"</param>
            <param name="genParamName">Name of the model parameter to be set. Default: []</param>
            <param name="genParamValue">Value of the model parameter to be set. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HStereoModel.CreateStereoModel(HalconDotNet.HCameraSetupModel,System.String,System.String,HalconDotNet.HTuple)">
            <summary>
              Create a HALCON stereo model.
              Modified instance represents: Handle of the stereo model.
            </summary>
            <param name="cameraSetupModelID">Handle to the camera setup model.</param>
            <param name="method">Reconstruction method. Default: "surface_pairwise"</param>
            <param name="genParamName">Name of the model parameter to be set. Default: []</param>
            <param name="genParamValue">Value of the model parameter to be set. Default: []</param>
        </member>
        <member name="T:HalconDotNet.HComputeDevice">
            <summary>Class representing a compute device handle.</summary>
        </member>
        <member name="M:HalconDotNet.HComputeDevice.#ctor(System.Int32)">
            <summary>
              Open a compute device.
              Modified instance represents: Compute device handle.
            </summary>
            <param name="deviceIdentifier">Compute device Identifier.</param>
        </member>
        <member name="M:HalconDotNet.HComputeDevice.GetComputeDeviceParam(System.String)">
            <summary>
              Query compute device parameters.
              Instance represents: Compute device handle.
            </summary>
            <param name="paramName">Name of the parameter to query. Default: "buffer_cache_capacity"</param>
            <returns>Value of the parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HComputeDevice.SetComputeDeviceParam(System.String,HalconDotNet.HTuple)">
            <summary>
              Set parameters of an compute device.
              Instance represents: Compute device handle.
            </summary>
            <param name="paramName">Name of the parameter to set. Default: "buffer_cache_capacity"</param>
            <param name="paramValue">New parameter value.</param>
        </member>
        <member name="M:HalconDotNet.HComputeDevice.SetComputeDeviceParam(System.String,System.String)">
            <summary>
              Set parameters of an compute device.
              Instance represents: Compute device handle.
            </summary>
            <param name="paramName">Name of the parameter to set. Default: "buffer_cache_capacity"</param>
            <param name="paramValue">New parameter value.</param>
        </member>
        <member name="M:HalconDotNet.HComputeDevice.ReleaseAllComputeDevices">
            <summary>Close all compute devices.</summary>
        </member>
        <member name="M:HalconDotNet.HComputeDevice.ReleaseComputeDevice">
            <summary>
              Close a compute_device.
              Instance represents: Compute device handle.
            </summary>
        </member>
        <member name="M:HalconDotNet.HComputeDevice.DeactivateAllComputeDevices">
            <summary>Deactivate all compute devices.</summary>
        </member>
        <member name="M:HalconDotNet.HComputeDevice.ActivateComputeDevice">
            <summary>
              Activate a compute device.
              Instance represents: Compute device handle.
            </summary>
        </member>
        <member name="M:HalconDotNet.HComputeDevice.InitComputeDevice(HalconDotNet.HTuple)">
            <summary>
              Initialize a compute device.
              Instance represents: Compute device handle.
            </summary>
            <param name="operators">List of operators to prepare. Default: "all"</param>
        </member>
        <member name="M:HalconDotNet.HComputeDevice.OpenComputeDevice(System.Int32)">
            <summary>
              Open a compute device.
              Modified instance represents: Compute device handle.
            </summary>
            <param name="deviceIdentifier">Compute device Identifier.</param>
        </member>
        <member name="M:HalconDotNet.HComputeDevice.GetComputeDeviceInfo(System.Int32,System.String)">
            <summary>Get information on a compute device.</summary>
            <param name="deviceIdentifier">Compute device handle.</param>
            <param name="infoName">Name of Information to query. Default: "name"</param>
            <returns>Returned information.</returns>
        </member>
        <member name="M:HalconDotNet.HComputeDevice.QueryAvailableComputeDevices">
            <summary>Get the list of available compute devices.</summary>
            <returns>List of available compute devices.</returns>
        </member>
        <member name="T:HalconDotNet.HPose">
            <summary>Represents a rigid 3D transformation with 7 parameters (3 for the rotation, 3 for the translation, 1 for the representation type).</summary>
        </member>
        <member name="M:HalconDotNet.HPose.#ctor">
            <summary>Create an uninitialized instance.</summary>
        </member>
        <member name="M:HalconDotNet.HPose.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.String)">
            <summary>
              Create a 3D pose.
              Modified instance represents: 3D pose.
            </summary>
            <param name="transX">Translation along the x-axis (in [m]). Default: 0.1</param>
            <param name="transY">Translation along the y-axis (in [m]). Default: 0.1</param>
            <param name="transZ">Translation along the z-axis (in [m]). Default: 0.1</param>
            <param name="rotX">Rotation around x-axis or x component of the Rodriguez vector (in [°] or without unit). Default: 90.0</param>
            <param name="rotY">Rotation around y-axis or y component of the Rodriguez vector (in [°] or without unit). Default: 90.0</param>
            <param name="rotZ">Rotation around z-axis or z component of the Rodriguez vector (in [°] or without unit). Default: 90.0</param>
            <param name="orderOfTransform">Order of rotation and translation. Default: "Rp+T"</param>
            <param name="orderOfRotation">Meaning of the rotation values. Default: "gba"</param>
            <param name="viewOfTransform">View of transformation. Default: "point"</param>
        </member>
        <member name="M:HalconDotNet.HPose.op_Implicit(HalconDotNet.HPose)~HalconDotNet.HHomMat3D">
            <summary>Convert to matrix</summary>
        </member>
        <member name="M:HalconDotNet.HPose.PoseAverage(HalconDotNet.HPose[],HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Compute the average of a set of poses.</summary>
            <param name="poses">Set of poses of which the average if computed.</param>
            <param name="weights">Empty tuple, or one weight per pose. Default: []</param>
            <param name="mode">Averaging mode. Default: "iterative"</param>
            <param name="sigmaT">Weight of the translation. Default: "auto"</param>
            <param name="sigmaR">Weight of the rotation. Default: "auto"</param>
            <param name="quality">Deviation of the mean from the input poses.</param>
            <returns>Weighted mean of the poses.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.PoseAverage(HalconDotNet.HPose[],HalconDotNet.HTuple,System.String,System.Double,System.Double,HalconDotNet.HTuple@)">
            <summary>Compute the average of a set of poses.</summary>
            <param name="poses">Set of poses of which the average if computed.</param>
            <param name="weights">Empty tuple, or one weight per pose. Default: []</param>
            <param name="mode">Averaging mode. Default: "iterative"</param>
            <param name="sigmaT">Weight of the translation. Default: "auto"</param>
            <param name="sigmaR">Weight of the rotation. Default: "auto"</param>
            <param name="quality">Deviation of the mean from the input poses.</param>
            <returns>Weighted mean of the poses.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.PoseInvert(HalconDotNet.HPose[])">
            <summary>Invert each pose in a tuple of 3D poses.</summary>
            <param name="pose">Tuple of 3D poses.</param>
            <returns>Tuple of inverted 3D poses.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.PoseInvert">
            <summary>
              Invert each pose in a tuple of 3D poses.
              Instance represents: Tuple of 3D poses.
            </summary>
            <returns>Tuple of inverted 3D poses.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.PoseCompose(HalconDotNet.HPose[],HalconDotNet.HPose[])">
            <summary>Combine 3D poses given in two tuples.</summary>
            <param name="poseLeft">Tuple containing the left poses.</param>
            <param name="poseRight">Tuple containing the right poses.</param>
            <returns>Tuple containing the returned poses.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.PoseCompose(HalconDotNet.HPose)">
            <summary>
              Combine 3D poses given in two tuples.
              Instance represents: Tuple containing the left poses.
            </summary>
            <param name="poseRight">Tuple containing the right poses.</param>
            <returns>Tuple containing the returned poses.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.BinocularDistanceMs(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Compute the distance values for a rectified stereo image pair using multi-scanline optimization.
              Instance represents: Point transformation from the rectified camera 2 to the rectified camera 1.
            </summary>
            <param name="imageRect1">Rectified image of camera 1.</param>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="score">Score of the calculated disparity.</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <param name="minDisparity">Minimum of the expected disparities. Default: -30</param>
            <param name="maxDisparity">Maximum of the expected disparities. Default: 30</param>
            <param name="surfaceSmoothing">Smoothing of surfaces. Default: 50</param>
            <param name="edgeSmoothing">Smoothing of edges. Default: 50</param>
            <param name="genParamName">Parameter name(s) for the multi-scanline algorithm. Default: []</param>
            <param name="genParamValue">Parameter value(s) for the multi-scanline algorithm. Default: []</param>
            <returns>Distance image.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.BinocularDistanceMs(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
              Compute the distance values for a rectified stereo image pair using multi-scanline optimization.
              Instance represents: Point transformation from the rectified camera 2 to the rectified camera 1.
            </summary>
            <param name="imageRect1">Rectified image of camera 1.</param>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="score">Score of the calculated disparity.</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <param name="minDisparity">Minimum of the expected disparities. Default: -30</param>
            <param name="maxDisparity">Maximum of the expected disparities. Default: 30</param>
            <param name="surfaceSmoothing">Smoothing of surfaces. Default: 50</param>
            <param name="edgeSmoothing">Smoothing of edges. Default: 50</param>
            <param name="genParamName">Parameter name(s) for the multi-scanline algorithm. Default: []</param>
            <param name="genParamValue">Parameter value(s) for the multi-scanline algorithm. Default: []</param>
            <returns>Distance image.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.BinocularDistanceMg(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Double,System.Double,System.Double,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Compute the distance values for a rectified stereo image pair using multigrid methods.
              Instance represents: Point transformation from the rectified camera 2 to the rectified camera 1.
            </summary>
            <param name="imageRect1">Rectified image of camera 1.</param>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="score">Score of the calculated disparity if CalculateScore is set to 'true'.</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <param name="grayConstancy">Weight of the gray value constancy in the data term. Default: 1.0</param>
            <param name="gradientConstancy">Weight of the gradient constancy in the data term. Default: 30.0</param>
            <param name="smoothness">Weight of the smoothness term in relation to the data term. Default: 5.0</param>
            <param name="initialGuess">Initial guess of the disparity. Default: 0.0</param>
            <param name="calculateScore">Should the quality measure be returned in Score? Default: "false"</param>
            <param name="MGParamName">Parameter name(s) for the multigrid algorithm. Default: "default_parameters"</param>
            <param name="MGParamValue">Parameter value(s) for the multigrid algorithm. Default: "fast_accurate"</param>
            <returns>Distance image.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.BinocularDistanceMg(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.String)">
            <summary>
              Compute the distance values for a rectified stereo image pair using multigrid methods.
              Instance represents: Point transformation from the rectified camera 2 to the rectified camera 1.
            </summary>
            <param name="imageRect1">Rectified image of camera 1.</param>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="score">Score of the calculated disparity if CalculateScore is set to 'true'.</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <param name="grayConstancy">Weight of the gray value constancy in the data term. Default: 1.0</param>
            <param name="gradientConstancy">Weight of the gradient constancy in the data term. Default: 30.0</param>
            <param name="smoothness">Weight of the smoothness term in relation to the data term. Default: 5.0</param>
            <param name="initialGuess">Initial guess of the disparity. Default: 0.0</param>
            <param name="calculateScore">Should the quality measure be returned in Score? Default: "false"</param>
            <param name="MGParamName">Parameter name(s) for the multigrid algorithm. Default: "default_parameters"</param>
            <param name="MGParamValue">Parameter value(s) for the multigrid algorithm. Default: "fast_accurate"</param>
            <returns>Distance image.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.RelPoseToFundamentalMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Compute the fundamental matrix from the relative orientation of two cameras.
              Instance represents: Relative orientation of the cameras (3D pose).
            </summary>
            <param name="covRelPose">6x6 covariance matrix of relative pose. Default: []</param>
            <param name="camPar1">Parameters of the 1. camera.</param>
            <param name="camPar2">Parameters of the 2. camera.</param>
            <param name="covFMat">9x9 covariance matrix of the fundamental matrix.</param>
            <returns>Computed fundamental matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.VectorToRelPose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the relative orientation between two cameras given image point correspondences and known camera parameters and reconstruct 3D space points.
              Modified instance represents: Computed relative orientation of the cameras (3D pose).
            </summary>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="covRR1">Row coordinate variance of the points in image 1. Default: []</param>
            <param name="covRC1">Covariance of the points in image 1. Default: []</param>
            <param name="covCC1">Column coordinate variance of the points in image 1. Default: []</param>
            <param name="covRR2">Row coordinate variance of the points in image 2. Default: []</param>
            <param name="covRC2">Covariance of the points in image 2. Default: []</param>
            <param name="covCC2">Column coordinate variance of the points in image 2. Default: []</param>
            <param name="camPar1">Camera parameters of the 1st camera.</param>
            <param name="camPar2">Camera parameters of the 2nd camera.</param>
            <param name="method">Algorithm for the computation of the relative pose and for special pose types. Default: "normalized_dlt"</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="x">X coordinates of the reconstructed 3D points.</param>
            <param name="y">Y coordinates of the reconstructed 3D points.</param>
            <param name="z">Z coordinates of the reconstructed 3D points.</param>
            <param name="covXYZ">Covariance matrices of the  reconstructed 3D points.</param>
            <returns>6x6 covariance matrix of the relative camera orientation.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.VectorToRelPose(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the relative orientation between two cameras given image point correspondences and known camera parameters and reconstruct 3D space points.
              Modified instance represents: Computed relative orientation of the cameras (3D pose).
            </summary>
            <param name="rows1">Input points in image 1 (row coordinate).</param>
            <param name="cols1">Input points in image 1 (column coordinate).</param>
            <param name="rows2">Input points in image 2 (row coordinate).</param>
            <param name="cols2">Input points in image 2 (column coordinate).</param>
            <param name="covRR1">Row coordinate variance of the points in image 1. Default: []</param>
            <param name="covRC1">Covariance of the points in image 1. Default: []</param>
            <param name="covCC1">Column coordinate variance of the points in image 1. Default: []</param>
            <param name="covRR2">Row coordinate variance of the points in image 2. Default: []</param>
            <param name="covRC2">Covariance of the points in image 2. Default: []</param>
            <param name="covCC2">Column coordinate variance of the points in image 2. Default: []</param>
            <param name="camPar1">Camera parameters of the 1st camera.</param>
            <param name="camPar2">Camera parameters of the 2nd camera.</param>
            <param name="method">Algorithm for the computation of the relative pose and for special pose types. Default: "normalized_dlt"</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="x">X coordinates of the reconstructed 3D points.</param>
            <param name="y">Y coordinates of the reconstructed 3D points.</param>
            <param name="z">Z coordinates of the reconstructed 3D points.</param>
            <param name="covXYZ">Covariance matrices of the  reconstructed 3D points.</param>
            <returns>6x6 covariance matrix of the relative camera orientation.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.MatchRelPoseRansac(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the relative orientation between two cameras by automatically finding correspondences between image points.
              Modified instance represents: Computed relative orientation of the cameras (3D pose).
            </summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="camPar1">Parameters of the 1st camera.</param>
            <param name="camPar2">Parameters of the 2nd camera.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate shift of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative orientation of the right image with respect to the left image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Algorithm for the computation of the relative pose and for special pose types. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>6x6 covariance matrix of the relative orientation.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.MatchRelPoseRansac(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.String,System.Double,System.Int32,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the relative orientation between two cameras by automatically finding correspondences between image points.
              Modified instance represents: Computed relative orientation of the cameras (3D pose).
            </summary>
            <param name="image1">Input image 1.</param>
            <param name="image2">Input image 2.</param>
            <param name="rows1">Row coordinates of characteristic points in image 1.</param>
            <param name="cols1">Column coordinates of characteristic points in image 1.</param>
            <param name="rows2">Row coordinates of characteristic points in image 2.</param>
            <param name="cols2">Column coordinates of characteristic points in image 2.</param>
            <param name="camPar1">Parameters of the 1st camera.</param>
            <param name="camPar2">Parameters of the 2nd camera.</param>
            <param name="grayMatchMethod">Gray value comparison metric. Default: "ssd"</param>
            <param name="maskSize">Size of gray value masks. Default: 10</param>
            <param name="rowMove">Average row coordinate shift of corresponding points. Default: 0</param>
            <param name="colMove">Average column coordinate shift of corresponding points. Default: 0</param>
            <param name="rowTolerance">Half height of matching search window. Default: 200</param>
            <param name="colTolerance">Half width of matching search window. Default: 200</param>
            <param name="rotation">Estimate of the relative orientation of the right image with respect to the left image. Default: 0.0</param>
            <param name="matchThreshold">Threshold for gray value matching. Default: 10</param>
            <param name="estimationMethod">Algorithm for the computation of the relative pose and for special pose types. Default: "normalized_dlt"</param>
            <param name="distanceThreshold">Maximal deviation of a point from its epipolar line. Default: 1</param>
            <param name="randSeed">Seed for the random number generator. Default: 0</param>
            <param name="error">Root-Mean-Square of the epipolar distance error.</param>
            <param name="points1">Indices of matched input points in image 1.</param>
            <param name="points2">Indices of matched input points in image 2.</param>
            <returns>6x6 covariance matrix of the relative orientation.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.BinocularDistance(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,HalconDotNet.HTuple,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Compute the distance values for a rectified stereo image pair using correlation techniques.
              Instance represents: Point transformation from the rectified camera 2 to the rectified camera 1.
            </summary>
            <param name="imageRect1">Rectified image of camera 1.</param>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="score">Evaluation of a distance value.</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <param name="method">Matching function. Default: "ncc"</param>
            <param name="maskWidth">Width of the correlation window. Default: 11</param>
            <param name="maskHeight">Height of the correlation window. Default: 11</param>
            <param name="textureThresh">Variance threshold of textured image regions. Default: 0.0</param>
            <param name="minDisparity">Minimum of the expected disparities. Default: 0</param>
            <param name="maxDisparity">Maximum of the expected disparities. Default: 30</param>
            <param name="numLevels">Number of pyramid levels. Default: 1</param>
            <param name="scoreThresh">Threshold of the correlation function. Default: 0.0</param>
            <param name="filter">Downstream filters. Default: "none"</param>
            <param name="subDistance">Distance interpolation. Default: "none"</param>
            <returns>Distance image.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.BinocularDistance(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Int32,System.Double,System.String,System.String)">
            <summary>
              Compute the distance values for a rectified stereo image pair using correlation techniques.
              Instance represents: Point transformation from the rectified camera 2 to the rectified camera 1.
            </summary>
            <param name="imageRect1">Rectified image of camera 1.</param>
            <param name="imageRect2">Rectified image of camera 2.</param>
            <param name="score">Evaluation of a distance value.</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <param name="method">Matching function. Default: "ncc"</param>
            <param name="maskWidth">Width of the correlation window. Default: 11</param>
            <param name="maskHeight">Height of the correlation window. Default: 11</param>
            <param name="textureThresh">Variance threshold of textured image regions. Default: 0.0</param>
            <param name="minDisparity">Minimum of the expected disparities. Default: 0</param>
            <param name="maxDisparity">Maximum of the expected disparities. Default: 30</param>
            <param name="numLevels">Number of pyramid levels. Default: 1</param>
            <param name="scoreThresh">Threshold of the correlation function. Default: 0.0</param>
            <param name="filter">Downstream filters. Default: "none"</param>
            <param name="subDistance">Distance interpolation. Default: "none"</param>
            <returns>Distance image.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.DisparityImageToXyz(HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HImage@,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Transform a disparity image into 3D points in a rectified stereo system.
              Instance represents: Pose of the rectified camera 2 in relation to the rectified camera 1.
            </summary>
            <param name="disparity">Disparity image.</param>
            <param name="y">Y coordinates of the points in the rectified camera system 1.</param>
            <param name="z">Z coordinates of the points in the rectified camera system 1.</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <returns>X coordinates of the points in the rectified camera system 1.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.DisparityToPoint3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Transform an image point and its disparity into a 3D point in a rectified stereo system.
              Instance represents: Pose of the rectified camera 2 in relation to the rectified camera 1.
            </summary>
            <param name="camParamRect1">Rectified internal camera parameters of the projective camera 1.</param>
            <param name="camParamRect2">Rectified internal camera parameters of the projective camera 2.</param>
            <param name="row1">Row coordinate of a point in the rectified image 1.</param>
            <param name="col1">Column coordinate of a point in the rectified image 1.</param>
            <param name="disparity">Disparity of the images of the world point.</param>
            <param name="x">X coordinate of the 3D point.</param>
            <param name="y">Y coordinate of the 3D point.</param>
            <param name="z">Z coordinate of the 3D point.</param>
        </member>
        <member name="M:HalconDotNet.HPose.DisparityToPoint3d(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
              Transform an image point and its disparity into a 3D point in a rectified stereo system.
              Instance represents: Pose of the rectified camera 2 in relation to the rectified camera 1.
            </summary>
            <param name="camParamRect1">Rectified internal camera parameters of the projective camera 1.</param>
            <param name="camParamRect2">Rectified internal camera parameters of the projective camera 2.</param>
            <param name="row1">Row coordinate of a point in the rectified image 1.</param>
            <param name="col1">Column coordinate of a point in the rectified image 1.</param>
            <param name="disparity">Disparity of the images of the world point.</param>
            <param name="x">X coordinate of the 3D point.</param>
            <param name="y">Y coordinate of the 3D point.</param>
            <param name="z">Z coordinate of the 3D point.</param>
        </member>
        <member name="M:HalconDotNet.HPose.DisparityToDistance(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Transform a disparity value into a distance value in a rectified binocular stereo system.
              Instance represents: Point transformation from the rectified camera 2 to the rectified camera 1.
            </summary>
            <param name="camParamRect1">Rectified internal camera parameters of the projective camera 1.</param>
            <param name="camParamRect2">Rectified internal camera parameters of the projective camera 2.</param>
            <param name="disparity">Disparity between the images of the world point.</param>
            <returns>Distance of a world point to the rectified camera system.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.DisparityToDistance(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double)">
            <summary>
              Transform a disparity value into a distance value in a rectified binocular stereo system.
              Instance represents: Point transformation from the rectified camera 2 to the rectified camera 1.
            </summary>
            <param name="camParamRect1">Rectified internal camera parameters of the projective camera 1.</param>
            <param name="camParamRect2">Rectified internal camera parameters of the projective camera 2.</param>
            <param name="disparity">Disparity between the images of the world point.</param>
            <returns>Distance of a world point to the rectified camera system.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.DistanceToDisparity(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Transfrom a distance value into a disparity in a rectified stereo system.
              Instance represents: Point transformation from the rectified camera 2 to the rectified camera 1.
            </summary>
            <param name="camParamRect1">rectified internal camera parameters of the projective camera 1.</param>
            <param name="camParamRect2">rectified internal camera parameters of the projective camera 2.</param>
            <param name="distance">Distance of a world point to camera 1.</param>
            <returns>Disparity between the images of the point.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.DistanceToDisparity(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double)">
            <summary>
              Transfrom a distance value into a disparity in a rectified stereo system.
              Instance represents: Point transformation from the rectified camera 2 to the rectified camera 1.
            </summary>
            <param name="camParamRect1">rectified internal camera parameters of the projective camera 1.</param>
            <param name="camParamRect2">rectified internal camera parameters of the projective camera 2.</param>
            <param name="distance">Distance of a world point to camera 1.</param>
            <returns>Disparity between the images of the point.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.GenBinocularRectificationMap(HalconDotNet.HImage@,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.String,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HPose@,HalconDotNet.HPose@,HalconDotNet.HPose@)">
            <summary>
              Generate transformation maps that describe the mapping of the images of a binocular camera pair to a common rectified image plane.
              Instance represents: Point transformation from camera 2 to camera 1.
            </summary>
            <param name="map2">Image containing the mapping data of camera 2.</param>
            <param name="camParam1">Internal parameters of the projective camera 1.</param>
            <param name="camParam2">Internal parameters of the projective camera 2.</param>
            <param name="subSampling">Factor of sub sampling. Default: 1.0</param>
            <param name="method">Type of rectification. Default: "geometric"</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
            <param name="camParamRect1">Rectified internal parameters of the projective camera 1.</param>
            <param name="camParamRect2">Rectified internal parameters of the projective camera 2.</param>
            <param name="camPoseRect1">Point transformation from the rectified camera 1 to 			the original camera 1.</param>
            <param name="camPoseRect2">Point transformation from the rectified camera 1 to 			the original camera 1.</param>
            <param name="relPoseRect">Point transformation from the rectified camera 2 to 			the rectified camera 1.</param>
            <returns>Image containing the mapping data of camera 1.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.BinocularCalibration(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HPose[],HalconDotNet.HPose[],HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HPose[]@,HalconDotNet.HPose[]@,HalconDotNet.HPose@,HalconDotNet.HTuple@)">
            <summary>Determine all camera parameters of a binocular stereo system.</summary>
            <param name="NX">Ordered Tuple with all X-coordinates of the calibration marks (in meters).</param>
            <param name="NY">Ordered Tuple with all Y-coordinates of the calibration marks (in meters).</param>
            <param name="NZ">Ordered Tuple with all Z-coordinates of the calibration marks (in meters).</param>
            <param name="NRow1">Ordered Tuple with all row-coordinates of the extracted calibration marks of camera 1 (in pixels).</param>
            <param name="NCol1">Ordered Tuple with all column-coordinates of the extracted calibration marks of camera 1 (in pixels).</param>
            <param name="NRow2">Ordered Tuple with all row-coordinates of the extracted calibration marks of camera 2 (in pixels).</param>
            <param name="NCol2">Ordered Tuple with all column-coordinates of the extracted calibration marks of camera 2 (in pixels).</param>
            <param name="startCamParam1">Initial values for the internal projective parameters of the projective camera 1.</param>
            <param name="startCamParam2">Initial values for the internal projective parameters of the projective camera 2.</param>
            <param name="NStartPose1">Ordered tuple with all initial values for the poses of the calibration model in relation to camera 1.</param>
            <param name="NStartPose2">Ordered tuple with all initial values for the poses of the calibration model in relation to camera 2.</param>
            <param name="estimateParams">Camera parameters to be estimated. Default: "all"</param>
            <param name="camParam2">Internal parameters of the projective camera 2.</param>
            <param name="NFinalPose1">Ordered tuple with all poses of the calibration model in relation to camera 1.</param>
            <param name="NFinalPose2">Ordered tuple with all poses of the calibration model in relation to camera 2.</param>
            <param name="relPose">Pose of camera 2 in relation to camera 1.</param>
            <param name="errors">Average error distances in pixels.</param>
            <returns>Internal Parameters of the projective camera 1.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.BinocularCalibration(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HPose,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HPose@,HalconDotNet.HPose@,HalconDotNet.HPose@,System.Double@)">
            <summary>
              Determine all camera parameters of a binocular stereo system.
              Instance represents: Ordered tuple with all initial values for the poses of the calibration model in relation to camera 1.
            </summary>
            <param name="NX">Ordered Tuple with all X-coordinates of the calibration marks (in meters).</param>
            <param name="NY">Ordered Tuple with all Y-coordinates of the calibration marks (in meters).</param>
            <param name="NZ">Ordered Tuple with all Z-coordinates of the calibration marks (in meters).</param>
            <param name="NRow1">Ordered Tuple with all row-coordinates of the extracted calibration marks of camera 1 (in pixels).</param>
            <param name="NCol1">Ordered Tuple with all column-coordinates of the extracted calibration marks of camera 1 (in pixels).</param>
            <param name="NRow2">Ordered Tuple with all row-coordinates of the extracted calibration marks of camera 2 (in pixels).</param>
            <param name="NCol2">Ordered Tuple with all column-coordinates of the extracted calibration marks of camera 2 (in pixels).</param>
            <param name="startCamParam1">Initial values for the internal projective parameters of the projective camera 1.</param>
            <param name="startCamParam2">Initial values for the internal projective parameters of the projective camera 2.</param>
            <param name="NStartPose2">Ordered tuple with all initial values for the poses of the calibration model in relation to camera 2.</param>
            <param name="estimateParams">Camera parameters to be estimated. Default: "all"</param>
            <param name="camParam2">Internal parameters of the projective camera 2.</param>
            <param name="NFinalPose1">Ordered tuple with all poses of the calibration model in relation to camera 1.</param>
            <param name="NFinalPose2">Ordered tuple with all poses of the calibration model in relation to camera 2.</param>
            <param name="relPose">Pose of camera 2 in relation to camera 1.</param>
            <param name="errors">Average error distances in pixels.</param>
            <returns>Internal Parameters of the projective camera 1.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.CreateCamPoseLookAtPoint(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create a 3D camera pose from camera center and viewing direction.</summary>
            <param name="camPosX">X coordinate of the optical center of the camera.</param>
            <param name="camPosY">Y coordinate of the optical center of the camera.</param>
            <param name="camPosZ">Z coordinate of the optical center of the camera.</param>
            <param name="lookAtX">X coordinate of the 3D point to which the camera is directed.</param>
            <param name="lookAtY">Y coordinate of the 3D point to which the camera is directed.</param>
            <param name="lookAtZ">Z coordinate of the 3D point to which the camera is directed.</param>
            <param name="refPlaneNormal">Normal vector of the reference plane (points up). Default: "-y"</param>
            <param name="camRoll">Camera roll angle. Default: 0</param>
            <returns>3D camera pose.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.CreateCamPoseLookAtPoint(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,HalconDotNet.HTuple,System.Double)">
            <summary>
              Create a 3D camera pose from camera center and viewing direction.
              Modified instance represents: 3D camera pose.
            </summary>
            <param name="camPosX">X coordinate of the optical center of the camera.</param>
            <param name="camPosY">Y coordinate of the optical center of the camera.</param>
            <param name="camPosZ">Z coordinate of the optical center of the camera.</param>
            <param name="lookAtX">X coordinate of the 3D point to which the camera is directed.</param>
            <param name="lookAtY">Y coordinate of the 3D point to which the camera is directed.</param>
            <param name="lookAtZ">Z coordinate of the 3D point to which the camera is directed.</param>
            <param name="refPlaneNormal">Normal vector of the reference plane (points up). Default: "-y"</param>
            <param name="camRoll">Camera roll angle. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HPose.TransPoseShapeModel3d(HalconDotNet.HShapeModel3D,System.String)">
            <summary>
              Transform a pose that refers to the coordinate system of a 3D object model to a pose that refers to the reference coordinate system of a 3D shape model and vice versa.
              Instance represents: Pose to be transformed in the source system.
            </summary>
            <param name="shapeModel3DID">Handle of the 3D shape model.</param>
            <param name="transformation">Direction of the transformation. Default: "ref_to_model"</param>
            <returns>Transformed 3D pose in the target system.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.GenImageToWorldPlaneMap(HalconDotNet.HTuple,System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,System.String)">
            <summary>
              Generate a projection map that describes the mapping between the image plane and a the plane z=0 of a world coordinate system.
              Instance represents: 3D pose of the world coordinate system in camera coordinates.
            </summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="widthIn">Width of the images to be transformed.</param>
            <param name="heightIn">Height of the images to be transformed.</param>
            <param name="widthMapped">Width of the resulting mapped images in pixels.</param>
            <param name="heightMapped">Height of the resulting mapped images in pixels.</param>
            <param name="scale">Scale or unit. Default: "m"</param>
            <param name="mapType">Type of the mapping. Default: "bilinear"</param>
            <returns>Image containing the mapping data.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.GenImageToWorldPlaneMap(HalconDotNet.HTuple,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
              Generate a projection map that describes the mapping between the image plane and a the plane z=0 of a world coordinate system.
              Instance represents: 3D pose of the world coordinate system in camera coordinates.
            </summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="widthIn">Width of the images to be transformed.</param>
            <param name="heightIn">Height of the images to be transformed.</param>
            <param name="widthMapped">Width of the resulting mapped images in pixels.</param>
            <param name="heightMapped">Height of the resulting mapped images in pixels.</param>
            <param name="scale">Scale or unit. Default: "m"</param>
            <param name="mapType">Type of the mapping. Default: "bilinear"</param>
            <returns>Image containing the mapping data.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.ContourToWorldPlaneXld(HalconDotNet.HXLDCont,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Transform an XLD contour into the plane z=0 of a world coordinate system.
              Instance represents: 3D pose of the world coordinate system in camera coordinates.
            </summary>
            <param name="contours">Input XLD contours to be transformed in image coordinates.</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="scale">Scale or dimension Default: "m"</param>
            <returns>Transformed XLD contours in world coordinates.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.ContourToWorldPlaneXld(HalconDotNet.HXLDCont,HalconDotNet.HTuple,System.String)">
            <summary>
              Transform an XLD contour into the plane z=0 of a world coordinate system.
              Instance represents: 3D pose of the world coordinate system in camera coordinates.
            </summary>
            <param name="contours">Input XLD contours to be transformed in image coordinates.</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="scale">Scale or dimension Default: "m"</param>
            <returns>Transformed XLD contours in world coordinates.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.SetOriginPose(System.Double,System.Double,System.Double)">
            <summary>
              Translate the origin of a 3D pose.
              Instance represents: original 3D pose.
            </summary>
            <param name="DX">translation of the origin in x-direction. Default: 0</param>
            <param name="DY">translation of the origin in y-direction. Default: 0</param>
            <param name="DZ">translation of the origin in z-direction. Default: 0</param>
            <returns>new 3D pose after applying the translation.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.HandEyeCalibration(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HPose[],HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HPose@,HalconDotNet.HTuple@)">
            <summary>Perform a hand-eye calibration.</summary>
            <param name="x">Linear list containing all the x coordinates of the calibration points (in the order of the images).</param>
            <param name="y">Linear list containing all the y coordinates of the calibration points (in the order of the images).</param>
            <param name="z">Linear list containing all the z coordinates of the calibration points (in the order of the images).</param>
            <param name="row">Linear list containing all row coordinates of the calibration points (in the order of the images).</param>
            <param name="col">Linear list containing all the column coordinates of the calibration points (in the order of the images).</param>
            <param name="numPoints">Number of the calibration points for each image.</param>
            <param name="robotPoses">Known 3D pose of the robot for each image (moving camera: robot base in robot tool coordinates; stationary camera: robot tool in robot base coordinates).</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="method">Method of hand-eye calibration. Default: "nonlinear"</param>
            <param name="qualityType">Type of quality assessment. Default: "error_pose"</param>
            <param name="calibrationPose">Computed 3D pose of the calibration points in robot base coordinates (moving camera) or in robot tool coordinates (stationary camera), respectively.</param>
            <param name="quality">Quality assessment of the result.</param>
            <returns>Computed relative camera pose: 3D pose of the robot tool (moving camera) or robot base (stationary camera), respectively, in camera coordinates.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.HandEyeCalibration(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HPose[],HalconDotNet.HTuple,System.String,System.String,HalconDotNet.HPose@,System.Double@)">
            <summary>Perform a hand-eye calibration.</summary>
            <param name="x">Linear list containing all the x coordinates of the calibration points (in the order of the images).</param>
            <param name="y">Linear list containing all the y coordinates of the calibration points (in the order of the images).</param>
            <param name="z">Linear list containing all the z coordinates of the calibration points (in the order of the images).</param>
            <param name="row">Linear list containing all row coordinates of the calibration points (in the order of the images).</param>
            <param name="col">Linear list containing all the column coordinates of the calibration points (in the order of the images).</param>
            <param name="numPoints">Number of the calibration points for each image.</param>
            <param name="robotPoses">Known 3D pose of the robot for each image (moving camera: robot base in robot tool coordinates; stationary camera: robot tool in robot base coordinates).</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="method">Method of hand-eye calibration. Default: "nonlinear"</param>
            <param name="qualityType">Type of quality assessment. Default: "error_pose"</param>
            <param name="calibrationPose">Computed 3D pose of the calibration points in robot base coordinates (moving camera) or in robot tool coordinates (stationary camera), respectively.</param>
            <param name="quality">Quality assessment of the result.</param>
            <returns>Computed relative camera pose: 3D pose of the robot tool (moving camera) or robot base (stationary camera), respectively, in camera coordinates.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.GetPoseType(System.String@,System.String@)">
            <summary>
              Get the representation type of a 3D pose.
              Instance represents: 3D pose.
            </summary>
            <param name="orderOfRotation">Meaning of the rotation values.</param>
            <param name="viewOfTransform">View of transformation.</param>
            <returns>Order of rotation and translation.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.ConvertPoseType(System.String,System.String,System.String)">
            <summary>
              Change the representation type of a 3D pose.
              Instance represents: Original 3D pose.
            </summary>
            <param name="orderOfTransform">Order of rotation and translation. Default: "Rp+T"</param>
            <param name="orderOfRotation">Meaning of the rotation values. Default: "gba"</param>
            <param name="viewOfTransform">View of transformation. Default: "point"</param>
            <returns>3D transformation.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.CreatePose(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.String)">
            <summary>
              Create a 3D pose.
              Modified instance represents: 3D pose.
            </summary>
            <param name="transX">Translation along the x-axis (in [m]). Default: 0.1</param>
            <param name="transY">Translation along the y-axis (in [m]). Default: 0.1</param>
            <param name="transZ">Translation along the z-axis (in [m]). Default: 0.1</param>
            <param name="rotX">Rotation around x-axis or x component of the Rodriguez vector (in [°] or without unit). Default: 90.0</param>
            <param name="rotY">Rotation around y-axis or y component of the Rodriguez vector (in [°] or without unit). Default: 90.0</param>
            <param name="rotZ">Rotation around z-axis or z component of the Rodriguez vector (in [°] or without unit). Default: 90.0</param>
            <param name="orderOfTransform">Order of rotation and translation. Default: "Rp+T"</param>
            <param name="orderOfRotation">Meaning of the rotation values. Default: "gba"</param>
            <param name="viewOfTransform">View of transformation. Default: "point"</param>
        </member>
        <member name="M:HalconDotNet.HPose.CamParPoseToHomMat3d(HalconDotNet.HTuple)">
            <summary>
              Convert internal camera parameters and a 3D pose into a 3x4 projection matrix.
              Instance represents: 3D pose.
            </summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <returns>3x4 projection matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.PoseToHomMat3d">
            <summary>
              Convert a 3D pose into a homogeneous transformation matrix.
              Instance represents: 3D pose.
            </summary>
            <returns>Equivalent homogeneous transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.DeserializePose(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized pose.
              Modified instance represents: 3D pose.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HPose.SerializePose">
            <summary>
              Serialize a pose.
              Instance represents: 3D pose.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.ReadPose(System.String)">
            <summary>
              Read a 3D pose from a text file.
              Modified instance represents: 3D pose.
            </summary>
            <param name="poseFile">File name of the external camera parameters. Default: "campose.dat"</param>
        </member>
        <member name="M:HalconDotNet.HPose.WritePose(System.String)">
            <summary>
              Write a 3D pose to a text file.
              Instance represents: 3D pose.
            </summary>
            <param name="poseFile">File name of the external camera parameters. Default: "campose.dat"</param>
        </member>
        <member name="M:HalconDotNet.HPose.CameraCalibration(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HPose[],HalconDotNet.HTuple,HalconDotNet.HPose[]@,HalconDotNet.HTuple@)">
            <summary>Determine all camera parameters by a simultaneous minimization process.</summary>
            <param name="NX">Ordered tuple with all x coordinates of the calibration marks (in meters).</param>
            <param name="NY">Ordered tuple with all y coordinates of the calibration marks (in meters).</param>
            <param name="NZ">Ordered tuple with all z coordinates of the calibration marks (in meters).</param>
            <param name="NRow">Ordered tuple with all row coordinates of the extracted calibration marks (in pixels).</param>
            <param name="NCol">Ordered tuple with all column coordinates of the extracted calibration marks (in pixels).</param>
            <param name="startCamParam">Initial values for the internal camera parameters.</param>
            <param name="NStartPose">Ordered tuple with all initial values for the external camera parameters.</param>
            <param name="estimateParams">Camera parameters to be estimated. Default: "all"</param>
            <param name="NFinalPose">Ordered tuple with all external camera parameters.</param>
            <param name="errors">Average error distance in pixels.</param>
            <returns>Internal camera parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HPose.CameraCalibration(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HPose@,System.Double@)">
            <summary>
              Determine all camera parameters by a simultaneous minimization process.
              Instance represents: Ordered tuple with all initial values for the external camera parameters.
            </summary>
            <param name="NX">Ordered tuple with all x coordinates of the calibration marks (in meters).</param>
            <param name="NY">Ordered tuple with all y coordinates of the calibration marks (in meters).</param>
            <param name="NZ">Ordered tuple with all z coordinates of the calibration marks (in meters).</param>
            <param name="NRow">Ordered tuple with all row coordinates of the extracted calibration marks (in pixels).</param>
            <param name="NCol">Ordered tuple with all column coordinates of the extracted calibration marks (in pixels).</param>
            <param name="startCamParam">Initial values for the internal camera parameters.</param>
            <param name="estimateParams">Camera parameters to be estimated. Default: "all"</param>
            <param name="NFinalPose">Ordered tuple with all external camera parameters.</param>
            <param name="errors">Average error distance in pixels.</param>
            <returns>Internal camera parameters.</returns>
        </member>
        <member name="T:HalconDotNet.HOCV">
            <summary>Represents an instance of a tool for optical character verification.</summary>
        </member>
        <member name="M:HalconDotNet.HOCV.#ctor(System.String)">
            <summary>
              Reading an OCV tool from file.
              Modified instance represents: Handle of read OCV tool.
            </summary>
            <param name="fileName">Name of the file which has to be read. Default: "test_ocv"</param>
        </member>
        <member name="M:HalconDotNet.HOCV.#ctor(HalconDotNet.HTuple)">
            <summary>
              Create a new OCV tool based on gray value projections.
              Modified instance represents: Handle of the created OCV tool.
            </summary>
            <param name="patternNames">List of names for patterns to be trained. Default: "a"</param>
        </member>
        <member name="M:HalconDotNet.HOCV.DoOcvSimple(HalconDotNet.HImage,HalconDotNet.HTuple,System.String,System.String,System.String,System.String,System.Double)">
            <summary>
              Verification of a pattern using an OCV tool.
              Instance represents: Handle of the OCV tool.
            </summary>
            <param name="pattern">Characters to be verified.</param>
            <param name="patternName">Name of the character. Default: "a"</param>
            <param name="adaptPos">Adaption to vertical and horizontal translation. Default: "true"</param>
            <param name="adaptSize">Adaption to vertical and horizontal scaling of the size. Default: "true"</param>
            <param name="adaptAngle">Adaption to changes of the orientation (not implemented). Default: "false"</param>
            <param name="adaptGray">Adaption to additive and scaling gray value changes. Default: "true"</param>
            <param name="threshold">Minimum difference between objects. Default: 10</param>
            <returns>Evaluation of the character.</returns>
        </member>
        <member name="M:HalconDotNet.HOCV.DoOcvSimple(HalconDotNet.HImage,System.String,System.String,System.String,System.String,System.String,System.Double)">
            <summary>
              Verification of a pattern using an OCV tool.
              Instance represents: Handle of the OCV tool.
            </summary>
            <param name="pattern">Characters to be verified.</param>
            <param name="patternName">Name of the character. Default: "a"</param>
            <param name="adaptPos">Adaption to vertical and horizontal translation. Default: "true"</param>
            <param name="adaptSize">Adaption to vertical and horizontal scaling of the size. Default: "true"</param>
            <param name="adaptAngle">Adaption to changes of the orientation (not implemented). Default: "false"</param>
            <param name="adaptGray">Adaption to additive and scaling gray value changes. Default: "true"</param>
            <param name="threshold">Minimum difference between objects. Default: 10</param>
            <returns>Evaluation of the character.</returns>
        </member>
        <member name="M:HalconDotNet.HOCV.TraindOcvProj(HalconDotNet.HImage,HalconDotNet.HTuple,System.String)">
            <summary>
              Training of an OCV tool.
              Instance represents: Handle of the OCV tool to be trained.
            </summary>
            <param name="pattern">Pattern to be trained.</param>
            <param name="name">Name(s) of the object(s) to analyse. Default: "a"</param>
            <param name="mode">Mode for training (only one mode implemented). Default: "single"</param>
        </member>
        <member name="M:HalconDotNet.HOCV.TraindOcvProj(HalconDotNet.HImage,System.String,System.String)">
            <summary>
              Training of an OCV tool.
              Instance represents: Handle of the OCV tool to be trained.
            </summary>
            <param name="pattern">Pattern to be trained.</param>
            <param name="name">Name(s) of the object(s) to analyse. Default: "a"</param>
            <param name="mode">Mode for training (only one mode implemented). Default: "single"</param>
        </member>
        <member name="M:HalconDotNet.HOCV.DeserializeOcv(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized OCV tool.
              Modified instance represents: Handle of the OCV tool.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOCV.SerializeOcv">
            <summary>
              Serialize an OCV tool.
              Instance represents: Handle of the OCV tool.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HOCV.ReadOcv(System.String)">
            <summary>
              Reading an OCV tool from file.
              Modified instance represents: Handle of read OCV tool.
            </summary>
            <param name="fileName">Name of the file which has to be read. Default: "test_ocv"</param>
        </member>
        <member name="M:HalconDotNet.HOCV.WriteOcv(System.String)">
            <summary>
              Saving an OCV tool to file.
              Instance represents: Handle of the OCV tool to be written.
            </summary>
            <param name="fileName">Name of the file where the tool has to be saved. Default: "test_ocv"</param>
        </member>
        <member name="M:HalconDotNet.HOCV.CreateOcvProj(HalconDotNet.HTuple)">
            <summary>
              Create a new OCV tool based on gray value projections.
              Modified instance represents: Handle of the created OCV tool.
            </summary>
            <param name="patternNames">List of names for patterns to be trained. Default: "a"</param>
        </member>
        <member name="M:HalconDotNet.HOCV.CreateOcvProj(System.String)">
            <summary>
              Create a new OCV tool based on gray value projections.
              Modified instance represents: Handle of the created OCV tool.
            </summary>
            <param name="patternNames">List of names for patterns to be trained. Default: "a"</param>
        </member>
        <member name="T:HalconDotNet.HMatrix">
            <summary>Represents an instance of a matrix.</summary>
        </member>
        <member name="M:HalconDotNet.HMatrix.#ctor(System.String)">
            <summary>
              Read a matrix from a file.
              Modified instance represents: Matrix handle.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.#ctor(System.Int32,System.Int32,HalconDotNet.HTuple)">
            <summary>
              Create a matrix.
              Modified instance represents: Matrix handle.
            </summary>
            <param name="rows">Number of rows of the matrix. Default: 3</param>
            <param name="columns">Number of columns of the matrix. Default: 3</param>
            <param name="value">Values for initializing the elements of the matrix. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
              Create a matrix.
              Modified instance represents: Matrix handle.
            </summary>
            <param name="rows">Number of rows of the matrix. Default: 3</param>
            <param name="columns">Number of columns of the matrix. Default: 3</param>
            <param name="value">Values for initializing the elements of the matrix. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.op_UnaryNegation(HalconDotNet.HMatrix)">
            <summary>Negate the matrix</summary>
        </member>
        <member name="M:HalconDotNet.HMatrix.op_Addition(HalconDotNet.HMatrix,HalconDotNet.HMatrix)">
            <summary>Add two matrices</summary>
        </member>
        <member name="M:HalconDotNet.HMatrix.op_Subtraction(HalconDotNet.HMatrix,HalconDotNet.HMatrix)">
            <summary>Subtract two matrices</summary>
        </member>
        <member name="M:HalconDotNet.HMatrix.op_Multiply(HalconDotNet.HMatrix,HalconDotNet.HMatrix)">
            <summary>Multiplies two matrices</summary>
        </member>
        <member name="M:HalconDotNet.HMatrix.op_Multiply(System.Double,HalconDotNet.HMatrix)">
            <summary>Scale a matrix</summary>
        </member>
        <member name="M:HalconDotNet.HMatrix.op_Multiply(HalconDotNet.HMatrix,System.Double)">
            <summary>Scale a matrix</summary>
        </member>
        <member name="M:HalconDotNet.HMatrix.op_Division(HalconDotNet.HMatrix,HalconDotNet.HMatrix)">
            <summary>Solve linear system matrix2 * x = matrix1</summary>
        </member>
        <member name="M:HalconDotNet.HMatrix.op_Implicit(HalconDotNet.HMatrix)~HalconDotNet.HTuple">
            <summary>Get all matrix elements</summary>
        </member>
        <member name="M:HalconDotNet.HMatrix.DeserializeMatrix(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized matrix.
              Modified instance represents: Matrix handle.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.SerializeMatrix">
            <summary>
              Serialize a matrix.
              Instance represents: Matrix handle.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.ReadMatrix(System.String)">
            <summary>
              Read a matrix from a file.
              Modified instance represents: Matrix handle.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.WriteMatrix(System.String,System.String)">
            <summary>
              Write a matrix to a file.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="fileFormat">Format of the file. Default: "binary"</param>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.OrthogonalDecomposeMatrix(System.String,System.String,System.String,HalconDotNet.HMatrix@)">
            <summary>
              Perform an orthogonal decomposition of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="decompositionType">Method of decomposition. Default: "qr"</param>
            <param name="outputMatricesType">Type of output matrices. Default: "full"</param>
            <param name="computeOrthogonal">Computation of the orthogonal matrix. Default: "true"</param>
            <param name="matrixTriangularID">Matrix handle with the triangular part of the decomposed input matrix.</param>
            <returns>Matrix handle with the orthogonal part of the decomposed input matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.DecomposeMatrix(System.String,HalconDotNet.HMatrix@)">
            <summary>
              Decompose a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="matrixType">Type of the input matrix. Default: "general"</param>
            <param name="matrix2ID">Matrix handle with the output matrix 2.</param>
            <returns>Matrix handle with the output matrix 1.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.SvdMatrix(System.String,System.String,HalconDotNet.HMatrix@,HalconDotNet.HMatrix@)">
            <summary>
              Compute the singular value decomposition of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="SVDType">Type of computation. Default: "full"</param>
            <param name="computeSingularVectors">Computation of singular values. Default: "both"</param>
            <param name="matrixSID">Matrix handle with singular values.</param>
            <param name="matrixVID">Matrix handle with the right singular vectors.</param>
            <returns>Matrix handle with the left singular vectors.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.GeneralizedEigenvaluesGeneralMatrix(HalconDotNet.HMatrix,System.String,HalconDotNet.HMatrix@,HalconDotNet.HMatrix@,HalconDotNet.HMatrix@,HalconDotNet.HMatrix@)">
            <summary>
              Compute the generalized eigenvalues and optionally the generalized eigenvectors of general matrices.
              Instance represents: Matrix handle of the input matrix A.
            </summary>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
            <param name="computeEigenvectors">Computation of the eigenvectors. Default: "none"</param>
            <param name="eigenvaluesRealID">Matrix handle with the real parts of the eigenvalues.</param>
            <param name="eigenvaluesImagID">Matrix handle with the imaginary parts of the eigenvalues.</param>
            <param name="eigenvectorsRealID">Matrix handle with the real parts of the eigenvectors.</param>
            <param name="eigenvectorsImagID">Matrix handle with the imaginary parts of the eigenvectors.</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.GeneralizedEigenvaluesSymmetricMatrix(HalconDotNet.HMatrix,System.String,HalconDotNet.HMatrix@)">
            <summary>
              Compute the generalized eigenvalues and optionally generalized eigenvectors of symmetric input matrices.
              Instance represents: Matrix handle of the symmetric input matrix A.
            </summary>
            <param name="matrixBID">Matrix handle of the symmetric positive definite input matrix B.</param>
            <param name="computeEigenvectors">Computation of the eigenvectors. Default: "false"</param>
            <param name="eigenvectorsID">Matrix handle with the eigenvectors.</param>
            <returns>Matrix handle with the eigenvalues.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.EigenvaluesGeneralMatrix(System.String,HalconDotNet.HMatrix@,HalconDotNet.HMatrix@,HalconDotNet.HMatrix@,HalconDotNet.HMatrix@)">
            <summary>
              Compute the eigenvalues and optionally the eigenvectors of a general matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="computeEigenvectors">Computation of the eigenvectors. Default: "none"</param>
            <param name="eigenvaluesRealID">Matrix handle with the real parts of the eigenvalues.</param>
            <param name="eigenvaluesImagID">Matrix handle with the imaginary parts of the eigenvalues.</param>
            <param name="eigenvectorsRealID">Matrix handle with the real parts of the eigenvectors.</param>
            <param name="eigenvectorsImagID">Matrix handle with the imaginary parts of the eigenvectors.</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.EigenvaluesSymmetricMatrix(System.String,HalconDotNet.HMatrix@)">
            <summary>
              Compute the eigenvalues and optionally eigenvectors of a symmetric matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="computeEigenvectors">Computation of the eigenvectors. Default: "false"</param>
            <param name="eigenvectorsID">Matrix handle with the eigenvectors.</param>
            <returns>Matrix handle with the eigenvalues.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.SolveMatrix(System.String,System.Double,HalconDotNet.HMatrix)">
            <summary>
              Compute the solution of a system of equations.
              Instance represents: Matrix handle of the input matrix of the left hand side.
            </summary>
            <param name="matrixLHSType">The type of the input matrix of the left hand side. Default: "general"</param>
            <param name="epsilon">Type of solving and limitation to set singular values to be 0. Default: 0.0</param>
            <param name="matrixRHSID">Matrix handle of the input matrix of right hand side.</param>
            <returns>New matrix handle with the solution.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.DeterminantMatrix(System.String)">
            <summary>
              Compute the determinant of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="matrixType">The type of the input matrix. Default: "general"</param>
            <returns>Determinant of the input matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.InvertMatrixMod(System.String,System.Double)">
            <summary>
              Invert a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="matrixType">The type of the input matrix. Default: "general"</param>
            <param name="epsilon">Type of inversion. Default: 0.0</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.InvertMatrix(System.String,System.Double)">
            <summary>
              Invert a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="matrixType">The type of the input matrix. Default: "general"</param>
            <param name="epsilon">Type of inversion. Default: 0.0</param>
            <returns>Matrix handle with the inverse matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.TransposeMatrixMod">
            <summary>
              Transpose a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
        </member>
        <member name="M:HalconDotNet.HMatrix.TransposeMatrix">
            <summary>
              Transpose a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <returns>Matrix handle with the transpose of the input matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.MaxMatrix(System.String)">
            <summary>
              Returns the elementwise maximum of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="maxType">Type of maximum determination. Default: "columns"</param>
            <returns>Matrix handle with the maximum values of the input matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.MinMatrix(System.String)">
            <summary>
              Returns the elementwise minimum of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="minType">Type of minimum determination. Default: "columns"</param>
            <returns>Matrix handle with the minimum values of the input matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.PowMatrixMod(System.String,HalconDotNet.HTuple)">
            <summary>
              Compute the power functions of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="matrixType">The type of the input matrix. Default: "general"</param>
            <param name="power">The power. Default: 2.0</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.PowMatrixMod(System.String,System.Double)">
            <summary>
              Compute the power functions of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="matrixType">The type of the input matrix. Default: "general"</param>
            <param name="power">The power. Default: 2.0</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.PowMatrix(System.String,HalconDotNet.HTuple)">
            <summary>
              Compute the power functions of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="matrixType">The type of the input matrix. Default: "general"</param>
            <param name="power">The power. Default: 2.0</param>
            <returns>Matrix handle with the raised powered matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.PowMatrix(System.String,System.Double)">
            <summary>
              Compute the power functions of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="matrixType">The type of the input matrix. Default: "general"</param>
            <param name="power">The power. Default: 2.0</param>
            <returns>Matrix handle with the raised powered matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.PowElementMatrixMod(HalconDotNet.HMatrix)">
            <summary>
              Compute the power functions of the elements of a matrix.
              Instance represents: Matrix handle of the input matrix of the base.
            </summary>
            <param name="matrixExpID">Matrix handle of the input matrix with exponents.</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.PowElementMatrix(HalconDotNet.HMatrix)">
            <summary>
              Compute the power functions of the elements of a matrix.
              Instance represents: Matrix handle of the input matrix of the base.
            </summary>
            <param name="matrixExpID">Matrix handle of the input matrix with exponents.</param>
            <returns>Matrix handle with the raised power of the input matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.PowScalarElementMatrixMod(HalconDotNet.HTuple)">
            <summary>
              Compute the power functions of the elements of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="power">The power. Default: 2.0</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.PowScalarElementMatrixMod(System.Double)">
            <summary>
              Compute the power functions of the elements of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="power">The power. Default: 2.0</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.PowScalarElementMatrix(HalconDotNet.HTuple)">
            <summary>
              Compute the power functions of the elements of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="power">The power. Default: 2.0</param>
            <returns>Matrix handle with the raised power of the input matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.PowScalarElementMatrix(System.Double)">
            <summary>
              Compute the power functions of the elements of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="power">The power. Default: 2.0</param>
            <returns>Matrix handle with the raised power of the input matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.SqrtMatrixMod">
            <summary>
              Compute the square root values of the elements of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
        </member>
        <member name="M:HalconDotNet.HMatrix.SqrtMatrix">
            <summary>
              Compute the square root values of the elements of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <returns>Matrix handle with the square root values of the input matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.AbsMatrixMod">
            <summary>
              Compute the absolute values of the elements of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
        </member>
        <member name="M:HalconDotNet.HMatrix.AbsMatrix">
            <summary>
              Compute the absolute values of the elements of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <returns>Matrix handle with the absolute values of the input matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.NormMatrix(System.String)">
            <summary>
              Norm of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="normType">Type of norm. Default: "2-norm"</param>
            <returns>Norm of the input matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.MeanMatrix(System.String)">
            <summary>
              Returns the elementwise mean of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="meanType">Type of mean determination. Default: "columns"</param>
            <returns>Matrix handle with the mean values of the input matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.SumMatrix(System.String)">
            <summary>
              Returns the elementwise sum of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="sumType">Type of summation. Default: "columns"</param>
            <returns>Matrix handle with the sum of the input matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.DivElementMatrixMod(HalconDotNet.HMatrix)">
            <summary>
              Divide matrices element-by-element.
              Instance represents: Matrix handle of the input matrix A.
            </summary>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.DivElementMatrix(HalconDotNet.HMatrix)">
            <summary>
              Divide matrices element-by-element.
              Instance represents: Matrix handle of the input matrix A.
            </summary>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
            <returns>Matrix handle with the divided values of input matrices.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.MultElementMatrixMod(HalconDotNet.HMatrix)">
            <summary>
              Multiply matrices element-by-element.
              Instance represents: Matrix handle of the input matrix A.
            </summary>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.MultElementMatrix(HalconDotNet.HMatrix)">
            <summary>
              Multiply matrices element-by-element.
              Instance represents: Matrix handle of the input matrix A.
            </summary>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
            <returns>Matrix handle with the multiplied values of the input matrices.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.ScaleMatrixMod(HalconDotNet.HTuple)">
            <summary>
              Scale a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="factor">Scale factor. Default: 2.0</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.ScaleMatrixMod(System.Double)">
            <summary>
              Scale a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="factor">Scale factor. Default: 2.0</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.ScaleMatrix(HalconDotNet.HTuple)">
            <summary>
              Scale a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="factor">Scale factor. Default: 2.0</param>
            <returns>Matrix handle with the scaled elements.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.ScaleMatrix(System.Double)">
            <summary>
              Scale a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="factor">Scale factor. Default: 2.0</param>
            <returns>Matrix handle with the scaled elements.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.SubMatrixMod(HalconDotNet.HMatrix)">
            <summary>
              Subtract two matrices.
              Instance represents: Matrix handle of the input matrix A.
            </summary>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.SubMatrix(HalconDotNet.HMatrix)">
            <summary>
              Subtract two matrices.
              Instance represents: Matrix handle of the input matrix A.
            </summary>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
            <returns>Matrix handle with the difference of the input matrices.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.AddMatrixMod(HalconDotNet.HMatrix)">
            <summary>
              Add two matrices.
              Instance represents: Matrix handle of the input matrix A.
            </summary>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.AddMatrix(HalconDotNet.HMatrix)">
            <summary>
              Add two matrices.
              Instance represents: Matrix handle of the input matrix A.
            </summary>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
            <returns>Matrix handle with the sum of the input matrices.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.MultMatrixMod(HalconDotNet.HMatrix,System.String)">
            <summary>
              Multiply two matrices.
              Instance represents: Matrix handle of the input matrix A.
            </summary>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
            <param name="multType">Type of the input matrices. Default: "AB"</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.MultMatrix(HalconDotNet.HMatrix,System.String)">
            <summary>
              Multiply two matrices.
              Instance represents: Matrix handle of the input matrix A.
            </summary>
            <param name="matrixBID">Matrix handle of the input matrix B.</param>
            <param name="multType">Type of the input matrices. Default: "AB"</param>
            <returns>Matrix handle of the multiplied matrices.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.GetSizeMatrix(System.Int32@,System.Int32@)">
            <summary>
              Get the size of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="rows">Number of rows of the matrix.</param>
            <param name="columns">Number of columns of the matrix.</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.RepeatMatrix(System.Int32,System.Int32)">
            <summary>
              Repeat a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="rows">Number of copies of input matrix in row direction. Default: 2</param>
            <param name="columns">Number of copies of input matrix in column direction. Default: 2</param>
            <returns>Matrix handle of the repeated copied matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.CopyMatrix">
            <summary>
              Copy a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <returns>Matrix handle of the copied matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.SetDiagonalMatrix(HalconDotNet.HMatrix,System.Int32)">
            <summary>
              Set the diagonal elements of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="vectorID">Matrix handle containing the diagonal elements to be set.</param>
            <param name="diagonal">Position of the diagonal. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.GetDiagonalMatrix(System.Int32)">
            <summary>
              Get the diagonal elements of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="diagonal">Number of the desired diagonal. Default: 0</param>
            <returns>Matrix handle containing the diagonal elements.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.SetSubMatrix(HalconDotNet.HMatrix,System.Int32,System.Int32)">
            <summary>
              Set a sub-matrix of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="matrixSubID">Matrix handle of the input sub-matrix.</param>
            <param name="row">Upper row position of the sub-matrix in the matrix. Default: 0</param>
            <param name="column">Left column position of the sub-matrix in the matrix. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.GetSubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Get a sub-matrix of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="row">Upper row position of the sub-matrix in the input matrix. Default: 0</param>
            <param name="column">Left column position of the sub-matrix in the input matrix. Default: 0</param>
            <param name="rowsSub">Number of rows of the sub-matrix. Default: 1</param>
            <param name="columnsSub">Number of columns of the sub-matrix. Default: 1</param>
            <returns>Matrix handle of the sub-matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.SetFullMatrix(HalconDotNet.HTuple)">
            <summary>
              Set all values of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="values">Values to be set.</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.SetFullMatrix(System.Double)">
            <summary>
              Set all values of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="values">Values to be set.</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.GetFullMatrix">
            <summary>
              Return all values of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <returns>Values of the matrix elements.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.SetValueMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set one or more elements of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="row">Row numbers of the matrix elements to be modified. Default: 0</param>
            <param name="column">Column numbers of the matrix elements to be modified. Default: 0</param>
            <param name="value">Values to be set in the indicated matrix elements. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.SetValueMatrix(System.Int32,System.Int32,System.Double)">
            <summary>
              Set one or more elements of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="row">Row numbers of the matrix elements to be modified. Default: 0</param>
            <param name="column">Column numbers of the matrix elements to be modified. Default: 0</param>
            <param name="value">Values to be set in the indicated matrix elements. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.GetValueMatrix(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Return one ore more elements of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="row">Row numbers of matrix elements to be returned. Default: 0</param>
            <param name="column">Column numbers of matrix elements to be returned. Default: 0</param>
            <returns>Values of indicated matrix elements.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.GetValueMatrix(System.Int32,System.Int32)">
            <summary>
              Return one ore more elements of a matrix.
              Instance represents: Matrix handle of the input matrix.
            </summary>
            <param name="row">Row numbers of matrix elements to be returned. Default: 0</param>
            <param name="column">Column numbers of matrix elements to be returned. Default: 0</param>
            <returns>Values of indicated matrix elements.</returns>
        </member>
        <member name="M:HalconDotNet.HMatrix.CreateMatrix(System.Int32,System.Int32,HalconDotNet.HTuple)">
            <summary>
              Create a matrix.
              Modified instance represents: Matrix handle.
            </summary>
            <param name="rows">Number of rows of the matrix. Default: 3</param>
            <param name="columns">Number of columns of the matrix. Default: 3</param>
            <param name="value">Values for initializing the elements of the matrix. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HMatrix.CreateMatrix(System.Int32,System.Int32,System.Double)">
            <summary>
              Create a matrix.
              Modified instance represents: Matrix handle.
            </summary>
            <param name="rows">Number of rows of the matrix. Default: 3</param>
            <param name="columns">Number of columns of the matrix. Default: 3</param>
            <param name="value">Values for initializing the elements of the matrix. Default: 0</param>
        </member>
        <member name="P:HalconDotNet.HMatrix.Item(System.Int32,System.Int32)">
            <summary>Get all matrix elements</summary>
        </member>
        <member name="P:HalconDotNet.HMatrix.NumRows">
            <summary>Get the number of rows</summary>
        </member>
        <member name="P:HalconDotNet.HMatrix.NumColumns">
            <summary>Get the number of columns</summary>
        </member>
        <member name="T:HalconDotNet.HCameraSetupModel">
            <summary>Represents an instance of a camera setup model.</summary>
        </member>
        <member name="M:HalconDotNet.HCameraSetupModel.#ctor(System.String)">
            <summary>
              Restore a camera setup model from a file.
              Modified instance represents: Handle to the camera setup model.
            </summary>
            <param name="fileName">The path and file name of the model file.</param>
        </member>
        <member name="M:HalconDotNet.HCameraSetupModel.#ctor(System.Int32)">
            <summary>
              Create a model for a setup of calibrated cameras.
              Modified instance represents: Handle to the camera setup model.
            </summary>
            <param name="numCameras">Number of cameras in the setup. Default: 2</param>
        </member>
        <member name="M:HalconDotNet.HCameraSetupModel.CreateStereoModel(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a HALCON stereo model.
              Instance represents: Handle to the camera setup model.
            </summary>
            <param name="method">Reconstruction method. Default: "surface_pairwise"</param>
            <param name="genParamName">Name of the model parameter to be set. Default: []</param>
            <param name="genParamValue">Value of the model parameter to be set. Default: []</param>
            <returns>Handle of the stereo model.</returns>
        </member>
        <member name="M:HalconDotNet.HCameraSetupModel.CreateStereoModel(System.String,System.String,HalconDotNet.HTuple)">
            <summary>
              Create a HALCON stereo model.
              Instance represents: Handle to the camera setup model.
            </summary>
            <param name="method">Reconstruction method. Default: "surface_pairwise"</param>
            <param name="genParamName">Name of the model parameter to be set. Default: []</param>
            <param name="genParamValue">Value of the model parameter to be set. Default: []</param>
            <returns>Handle of the stereo model.</returns>
        </member>
        <member name="M:HalconDotNet.HCameraSetupModel.SerializeCameraSetupModel">
            <summary>
              Serialize a camera setup model.
              Instance represents: Handle to the camera setup model.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HCameraSetupModel.DeserializeCameraSetupModel(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized camera setup model.
              Modified instance represents: Handle to the camera setup model.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HCameraSetupModel.WriteCameraSetupModel(System.String)">
            <summary>
              Store a camera setup model into a file.
              Instance represents: Handle to the camera setup model.
            </summary>
            <param name="fileName">The file name of the model to be saved.</param>
        </member>
        <member name="M:HalconDotNet.HCameraSetupModel.ReadCameraSetupModel(System.String)">
            <summary>
              Restore a camera setup model from a file.
              Modified instance represents: Handle to the camera setup model.
            </summary>
            <param name="fileName">The path and file name of the model file.</param>
        </member>
        <member name="M:HalconDotNet.HCameraSetupModel.GetCameraSetupParam(HalconDotNet.HTuple,System.String)">
            <summary>
              Get generic camera setup model parameters.
              Instance represents: Handle to the camera setup model.
            </summary>
            <param name="cameraIdx">Index of the camera in the setup. Default: 0</param>
            <param name="paramName">Names of the generic parameters to be queried.</param>
            <returns>Values of the generic parameters to be queried.</returns>
        </member>
        <member name="M:HalconDotNet.HCameraSetupModel.GetCameraSetupParam(System.Int32,System.String)">
            <summary>
              Get generic camera setup model parameters.
              Instance represents: Handle to the camera setup model.
            </summary>
            <param name="cameraIdx">Index of the camera in the setup. Default: 0</param>
            <param name="paramName">Names of the generic parameters to be queried.</param>
            <returns>Values of the generic parameters to be queried.</returns>
        </member>
        <member name="M:HalconDotNet.HCameraSetupModel.SetCameraSetupParam(HalconDotNet.HTuple,System.String,HalconDotNet.HTuple)">
            <summary>
              Set generic camera setup model parameters.
              Instance represents: Handle to the camera setup model.
            </summary>
            <param name="cameraIdx">Unique index of the camera in the setup. Default: 0</param>
            <param name="paramName">Names of the generic parameters to be set.</param>
            <param name="paramValue">Values of the generic parameters to be set.</param>
        </member>
        <member name="M:HalconDotNet.HCameraSetupModel.SetCameraSetupParam(System.Int32,System.String,System.Double)">
            <summary>
              Set generic camera setup model parameters.
              Instance represents: Handle to the camera setup model.
            </summary>
            <param name="cameraIdx">Unique index of the camera in the setup. Default: 0</param>
            <param name="paramName">Names of the generic parameters to be set.</param>
            <param name="paramValue">Values of the generic parameters to be set.</param>
        </member>
        <member name="M:HalconDotNet.HCameraSetupModel.SetCameraSetupCamParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Define type, parameters, and relative pose of a camera in a camera setup model.
              Instance represents: Handle to the camera setup model.
            </summary>
            <param name="cameraIdx">Index of the camera in the setup.</param>
            <param name="cameraType">Type of the camera. Default: "area_scan_division"</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="cameraPose">Pose of the camera relative to the setup's coordinate system.</param>
        </member>
        <member name="M:HalconDotNet.HCameraSetupModel.CreateCameraSetupModel(System.Int32)">
            <summary>
              Create a model for a setup of calibrated cameras.
              Modified instance represents: Handle to the camera setup model.
            </summary>
            <param name="numCameras">Number of cameras in the setup. Default: 2</param>
        </member>
        <member name="T:HalconDotNet.HClassTrainData">
            <summary>Represents an instance of a training data management class.</summary>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.#ctor(System.String)">
            <summary>
              Read the training data for classifiers from a file.
              Modified instance represents: Handle of the training data.
            </summary>
            <param name="fileName">File name of the training data.</param>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.#ctor(System.Int32)">
            <summary>
              Create a handle for training data for classifiers.
              Modified instance represents: Handle of the training data.
            </summary>
            <param name="numDim">Number of dimensions of the feature vector. Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.DeserializeClassTrainData(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize serialized training data for classifiers.
              Modified instance represents: Handle of the training data.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.SerializeClassTrainData">
            <summary>
              Serialize training data for classifiers.
              Instance represents: Handle of the training data.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.ReadClassTrainData(System.String)">
            <summary>
              Read the training data for classifiers from a file.
              Modified instance represents: Handle of the training data.
            </summary>
            <param name="fileName">File name of the training data.</param>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.WriteClassTrainData(System.String)">
            <summary>
              Save the training data for classifiers in a file.
              Instance represents: Handle of the training data.
            </summary>
            <param name="fileName">Name of the file in which the training data will be written.</param>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.SelectSubFeatureClassTrainData(HalconDotNet.HTuple)">
            <summary>
              Select certain features from training data to create  training data containing less features.
              Instance represents: Handle of the training data.
            </summary>
            <param name="subFeatureIndices">Indices or names to select the subfeatures or columns.</param>
            <returns>Handle of the reduced training data.</returns>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.SetFeatureLengthsClassTrainData(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Define subfeatures in training data.
              Instance represents: Handle of the training data that should be  partitioned into subfeatures.
            </summary>
            <param name="subFeatureLength">Length of the subfeatures.</param>
            <param name="names">Names of the subfeatures.</param>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.GetClassTrainDataGmm(HalconDotNet.HClassGmm)">
            <summary>
              Get the training data of a Gaussian Mixture Model (GMM).
              Modified instance represents: Handle of the training data of the classifier.
            </summary>
            <param name="GMMHandle">Handle of a GMM that contains training data.</param>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.AddClassTrainDataGmm(HalconDotNet.HClassGmm)">
            <summary>
              Add training data to a Gaussian Mixture Model (GMM).
              Instance represents: Handle of training data for a classifier.
            </summary>
            <param name="GMMHandle">Handle of a GMM which receives the training data.</param>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.GetClassTrainDataMlp(HalconDotNet.HClassMlp)">
            <summary>
              Get the training data of a multilayer perceptron (MLP).
              Modified instance represents: Handle of the training data of the classifier.
            </summary>
            <param name="MLPHandle">Handle of a MLP that contains training data.</param>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.AddClassTrainDataMlp(HalconDotNet.HClassMlp)">
            <summary>
              Add training data to a multilayer perceptron (MLP).
              Instance represents: Training data for a classifier.
            </summary>
            <param name="MLPHandle">MLP handle which receives the training data.</param>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.GetClassTrainDataKnn(HalconDotNet.HClassKnn)">
            <summary>
              Get the training data of a k-nearest neighbors (k-NN) classifier.
              Modified instance represents: Handle of the training data of the classifier.
            </summary>
            <param name="KNNHandle">Handle of the k-NN classifier  that contains training data.</param>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.AddClassTrainDataKnn(HalconDotNet.HClassKnn)">
            <summary>
              Add training data to a k-nearest neighbors (k-NN) classifier.
              Instance represents: Training data for a classifier.
            </summary>
            <param name="KNNHandle">Handle of a k-NN which receives the  training data.</param>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.GetClassTrainDataSvm(HalconDotNet.HClassSvm)">
            <summary>
              Get the training data of a support vector machine (SVM).
              Modified instance represents: Handle of the training data of the classifier.
            </summary>
            <param name="SVMHandle">Handle of a SVM that contains training data.</param>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.AddClassTrainDataSvm(HalconDotNet.HClassSvm)">
            <summary>
              Add training data to a support vector machine (SVM).
              Instance represents: Training data for a classifier.
            </summary>
            <param name="SVMHandle">Handle of a SVM which receives the training data.</param>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.GetSampleNumClassTrainData">
            <summary>
              Return the number of training samples stored in the training data.
              Instance represents: Handle of training data.
            </summary>
            <returns>Number of stored training samples.</returns>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.GetSampleClassTrainData(System.Int32,System.Int32@)">
            <summary>
              Return a training sample from training data.
              Instance represents: Handle of training data for a classifier.
            </summary>
            <param name="indexSample">Number of stored training sample.</param>
            <param name="classID">Class of the training sample.</param>
            <returns>Feature vector of the training sample.</returns>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.ClearAllClassTrainData">
            <summary>Clear all training data for classifiers.</summary>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.AddSampleClassTrainData(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a training sample to training data.
              Instance represents: Handle of the training data.
            </summary>
            <param name="order">The order of the feature vector. Default: "row"</param>
            <param name="features">Feature vector of the training sample.</param>
            <param name="classID">Class of the training sample.</param>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.CreateClassTrainData(System.Int32)">
            <summary>
              Create a handle for training data for classifiers.
              Modified instance represents: Handle of the training data.
            </summary>
            <param name="numDim">Number of dimensions of the feature vector. Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.SelectFeatureSetMlp(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal combination of features to classify the provided data.
              Instance represents: Handle of the training data.
            </summary>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="selectedFeatureIndices">The selected feature set, contains  indices referring.</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
            <returns>A trained MLP classifier using only the selected  features.</returns>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.SelectFeatureSetMlp(System.String,System.String,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal combination of features to classify the provided data.
              Instance represents: Handle of the training data.
            </summary>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="selectedFeatureIndices">The selected feature set, contains  indices referring.</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
            <returns>A trained MLP classifier using only the selected  features.</returns>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.SelectFeatureSetSvm(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal combination of features to classify the provided data.
              Instance represents: Handle of the training data.
            </summary>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="selectedFeatureIndices">The selected feature set, contains  indices.</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
            <returns>A trained SVM classifier using only the selected  features.</returns>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.SelectFeatureSetSvm(System.String,System.String,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal combination of features to classify the provided data.
              Instance represents: Handle of the training data.
            </summary>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="selectedFeatureIndices">The selected feature set, contains  indices.</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
            <returns>A trained SVM classifier using only the selected  features.</returns>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.SelectFeatureSetGmm(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal combination from a set of features to classify the  provided data.
              Instance represents: Handle of the training data.
            </summary>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure  the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure  the classifier. Default: []</param>
            <param name="selectedFeatureIndices">The selected feature set, contains indices or names.</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
            <returns>A trained GMM classifier using only the selected  features.</returns>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.SelectFeatureSetGmm(System.String,System.String,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal combination from a set of features to classify the  provided data.
              Instance represents: Handle of the training data.
            </summary>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure  the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure  the classifier. Default: []</param>
            <param name="selectedFeatureIndices">The selected feature set, contains indices or names.</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
            <returns>A trained GMM classifier using only the selected  features.</returns>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.SelectFeatureSetKnn(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal subset from a set of features to solve a certain  classification problem.
              Instance represents: Handle of the training data.
            </summary>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="selectedFeatureIndices">The selected feature set, contains  indices or names.</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
            <returns>A trained k-NN classifier using only the selected  features.</returns>
        </member>
        <member name="M:HalconDotNet.HClassTrainData.SelectFeatureSetKnn(System.String,System.String,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal subset from a set of features to solve a certain  classification problem.
              Instance represents: Handle of the training data.
            </summary>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="selectedFeatureIndices">The selected feature set, contains  indices or names.</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
            <returns>A trained k-NN classifier using only the selected  features.</returns>
        </member>
        <member name="T:HalconDotNet.HComponentModel">
            <summary>Represents an instance of a model for the component-based matching.</summary>
        </member>
        <member name="M:HalconDotNet.HComponentModel.#ctor(System.String)">
            <summary>
              Read a component model from a file.
              Modified instance represents: Handle of the component model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HComponentModel.#ctor(HalconDotNet.HImage,HalconDotNet.HRegion,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Prepare a component model for matching based on explicitly specified components and relations.
              Modified instance represents: Handle of the component model.
            </summary>
            <param name="modelImage">Input image from which the shape models of the model components should be created.</param>
            <param name="componentRegions">Input regions from which the shape models of the model components should be created.</param>
            <param name="variationRow">Variation of the model components in row direction.</param>
            <param name="variationColumn">Variation of the model components in column direction.</param>
            <param name="variationAngle">Angle variation of the model components.</param>
            <param name="angleStart">Smallest rotation of the component model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation of the component model. Default: 0.79</param>
            <param name="contrastLowComp">Lower hysteresis threshold for the contrast of the components in the model image. Default: "auto"</param>
            <param name="contrastHighComp">Upper hysteresis threshold for the contrast of the components in the model image. Default: "auto"</param>
            <param name="minSizeComp">Minimum size of the contour regions in the model. Default: "auto"</param>
            <param name="minContrastComp">Minimum contrast of the components in the search images. Default: "auto"</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found. Default: 0.5</param>
            <param name="numLevelsComp">Maximum number of pyramid levels for the components. Default: "auto"</param>
            <param name="angleStepComp">Step length of the angles (resolution) for the components. Default: "auto"</param>
            <param name="optimizationComp">Kind of optimization for the components. Default: "auto"</param>
            <param name="metricComp">Match metric used for the components. Default: "use_polarity"</param>
            <param name="pregenerationComp">Complete pregeneration of the shape models for the components if equal to 'true'. Default: "false"</param>
            <param name="rootRanking">Ranking of the model components expressing the suitability to act as the root component.</param>
        </member>
        <member name="M:HalconDotNet.HComponentModel.#ctor(HalconDotNet.HImage,HalconDotNet.HRegion,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Double,System.String,System.String,System.String,System.Int32@)">
            <summary>
              Prepare a component model for matching based on explicitly specified components and relations.
              Modified instance represents: Handle of the component model.
            </summary>
            <param name="modelImage">Input image from which the shape models of the model components should be created.</param>
            <param name="componentRegions">Input regions from which the shape models of the model components should be created.</param>
            <param name="variationRow">Variation of the model components in row direction.</param>
            <param name="variationColumn">Variation of the model components in column direction.</param>
            <param name="variationAngle">Angle variation of the model components.</param>
            <param name="angleStart">Smallest rotation of the component model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation of the component model. Default: 0.79</param>
            <param name="contrastLowComp">Lower hysteresis threshold for the contrast of the components in the model image. Default: "auto"</param>
            <param name="contrastHighComp">Upper hysteresis threshold for the contrast of the components in the model image. Default: "auto"</param>
            <param name="minSizeComp">Minimum size of the contour regions in the model. Default: "auto"</param>
            <param name="minContrastComp">Minimum contrast of the components in the search images. Default: "auto"</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found. Default: 0.5</param>
            <param name="numLevelsComp">Maximum number of pyramid levels for the components. Default: "auto"</param>
            <param name="angleStepComp">Step length of the angles (resolution) for the components. Default: "auto"</param>
            <param name="optimizationComp">Kind of optimization for the components. Default: "auto"</param>
            <param name="metricComp">Match metric used for the components. Default: "use_polarity"</param>
            <param name="pregenerationComp">Complete pregeneration of the shape models for the components if equal to 'true'. Default: "false"</param>
            <param name="rootRanking">Ranking of the model components expressing the suitability to act as the root component.</param>
        </member>
        <member name="M:HalconDotNet.HComponentModel.#ctor(HalconDotNet.HComponentTraining,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Prepare a component model for matching based on trained components.
              Modified instance represents: Handle of the component model.
            </summary>
            <param name="componentTrainingID">Handle of the training result.</param>
            <param name="angleStart">Smallest rotation of the component model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation of the component model. Default: 0.79</param>
            <param name="minContrastComp">Minimum contrast of the components in the search images. Default: "auto"</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found. Default: 0.5</param>
            <param name="numLevelsComp">Maximum number of pyramid levels for the components. Default: "auto"</param>
            <param name="angleStepComp">Step length of the angles (resolution) for the components. Default: "auto"</param>
            <param name="optimizationComp">Kind of optimization for the components. Default: "auto"</param>
            <param name="metricComp">Match metric used for the components. Default: "use_polarity"</param>
            <param name="pregenerationComp">Complete pregeneration of the shape models for the components if equal to 'true'. Default: "false"</param>
            <param name="rootRanking">Ranking of the model components expressing the suitability to act as the root component.</param>
        </member>
        <member name="M:HalconDotNet.HComponentModel.#ctor(HalconDotNet.HComponentTraining,System.Double,System.Double,System.Int32,System.Double,System.Int32,System.Double,System.String,System.String,System.String,System.Int32@)">
            <summary>
              Prepare a component model for matching based on trained components.
              Modified instance represents: Handle of the component model.
            </summary>
            <param name="componentTrainingID">Handle of the training result.</param>
            <param name="angleStart">Smallest rotation of the component model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation of the component model. Default: 0.79</param>
            <param name="minContrastComp">Minimum contrast of the components in the search images. Default: "auto"</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found. Default: 0.5</param>
            <param name="numLevelsComp">Maximum number of pyramid levels for the components. Default: "auto"</param>
            <param name="angleStepComp">Step length of the angles (resolution) for the components. Default: "auto"</param>
            <param name="optimizationComp">Kind of optimization for the components. Default: "auto"</param>
            <param name="metricComp">Match metric used for the components. Default: "use_polarity"</param>
            <param name="pregenerationComp">Complete pregeneration of the shape models for the components if equal to 'true'. Default: "false"</param>
            <param name="rootRanking">Ranking of the model components expressing the suitability to act as the root component.</param>
        </member>
        <member name="M:HalconDotNet.HComponentModel.GetFoundComponentModel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Return the components of a found instance of a component model.
              Instance represents: Handle of the component model.
            </summary>
            <param name="modelStart">Start index of each found instance of the component model in the tuples describing the component matches.</param>
            <param name="modelEnd">End index of each found instance of the component model to the tuples describing the component matches.</param>
            <param name="rowComp">Row coordinate of the found component matches.</param>
            <param name="columnComp">Column coordinate of the found component matches.</param>
            <param name="angleComp">Rotation angle of the found component matches.</param>
            <param name="scoreComp">Score of the found component matches.</param>
            <param name="modelComp">Index of the found components.</param>
            <param name="modelMatch">Index of the found instance of the component model to be returned.</param>
            <param name="markOrientation">Mark the orientation of the components. Default: "false"</param>
            <param name="rowCompInst">Row coordinate of all components of the selected model instance.</param>
            <param name="columnCompInst">Column coordinate of all components of the selected model instance.</param>
            <param name="angleCompInst">Rotation angle of all components of the selected model instance.</param>
            <param name="scoreCompInst">Score of all components of the selected model instance.</param>
            <returns>Found components of the selected component model instance.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentModel.GetFoundComponentModel(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.String,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Return the components of a found instance of a component model.
              Instance represents: Handle of the component model.
            </summary>
            <param name="modelStart">Start index of each found instance of the component model in the tuples describing the component matches.</param>
            <param name="modelEnd">End index of each found instance of the component model to the tuples describing the component matches.</param>
            <param name="rowComp">Row coordinate of the found component matches.</param>
            <param name="columnComp">Column coordinate of the found component matches.</param>
            <param name="angleComp">Rotation angle of the found component matches.</param>
            <param name="scoreComp">Score of the found component matches.</param>
            <param name="modelComp">Index of the found components.</param>
            <param name="modelMatch">Index of the found instance of the component model to be returned.</param>
            <param name="markOrientation">Mark the orientation of the components. Default: "false"</param>
            <param name="rowCompInst">Row coordinate of all components of the selected model instance.</param>
            <param name="columnCompInst">Column coordinate of all components of the selected model instance.</param>
            <param name="angleCompInst">Rotation angle of all components of the selected model instance.</param>
            <param name="scoreCompInst">Score of all components of the selected model instance.</param>
            <returns>Found components of the selected component model instance.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentModel.FindComponentModel(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Int32,System.Double,System.String,System.String,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a component model in an image.
              Instance represents: Handle of the component model.
            </summary>
            <param name="image">Input image in which the component model should be found.</param>
            <param name="rootComponent">Index of the root component.</param>
            <param name="angleStartRoot">Smallest rotation of the root component Default: -0.39</param>
            <param name="angleExtentRoot">Extent of the rotation of the root component. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the component model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the component model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the component models to be found. Default: 0.5</param>
            <param name="ifRootNotFound">Behavior if the root component is missing. Default: "stop_search"</param>
            <param name="ifComponentNotFound">Behavior if a component is missing. Default: "prune_branch"</param>
            <param name="posePrediction">Pose prediction of components that are not found. Default: "none"</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found. Default: 0.5</param>
            <param name="subPixelComp">Subpixel accuracy of the component poses if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevelsComp">Number of pyramid levels for the components used in the matching (and lowest pyramid level to use if $|NumLevelsComp| = 2n$). Default: 0</param>
            <param name="greedinessComp">"Greediness" of the search heuristic for the components (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="modelEnd">End index of each found instance of the component model in the tuples describing the component matches.</param>
            <param name="score">Score of the found instances of the component model.</param>
            <param name="rowComp">Row coordinate of the found component matches.</param>
            <param name="columnComp">Column coordinate of the found component matches.</param>
            <param name="angleComp">Rotation angle of the found component matches.</param>
            <param name="scoreComp">Score of the found component matches.</param>
            <param name="modelComp">Index of the found components.</param>
            <returns>Start index of each found instance of the component model in the tuples describing the component matches.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentModel.FindComponentModel(HalconDotNet.HImage,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,System.String,System.String,System.Double,System.String,System.Int32,System.Double,System.Int32@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32@)">
            <summary>
              Find the best matches of a component model in an image.
              Instance represents: Handle of the component model.
            </summary>
            <param name="image">Input image in which the component model should be found.</param>
            <param name="rootComponent">Index of the root component.</param>
            <param name="angleStartRoot">Smallest rotation of the root component Default: -0.39</param>
            <param name="angleExtentRoot">Extent of the rotation of the root component. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the component model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the component model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the component models to be found. Default: 0.5</param>
            <param name="ifRootNotFound">Behavior if the root component is missing. Default: "stop_search"</param>
            <param name="ifComponentNotFound">Behavior if a component is missing. Default: "prune_branch"</param>
            <param name="posePrediction">Pose prediction of components that are not found. Default: "none"</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found. Default: 0.5</param>
            <param name="subPixelComp">Subpixel accuracy of the component poses if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevelsComp">Number of pyramid levels for the components used in the matching (and lowest pyramid level to use if $|NumLevelsComp| = 2n$). Default: 0</param>
            <param name="greedinessComp">"Greediness" of the search heuristic for the components (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="modelEnd">End index of each found instance of the component model in the tuples describing the component matches.</param>
            <param name="score">Score of the found instances of the component model.</param>
            <param name="rowComp">Row coordinate of the found component matches.</param>
            <param name="columnComp">Column coordinate of the found component matches.</param>
            <param name="angleComp">Rotation angle of the found component matches.</param>
            <param name="scoreComp">Score of the found component matches.</param>
            <param name="modelComp">Index of the found components.</param>
            <returns>Start index of each found instance of the component model in the tuples describing the component matches.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentModel.GetComponentModelTree(HalconDotNet.HRegion@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Return the search tree of a component model.
              Instance represents: Handle of the component model.
            </summary>
            <param name="relations">Relations of components that are connected in the search tree.</param>
            <param name="rootComponent">Index of the root component.</param>
            <param name="image">Image for which the tree is to be returned. Default: "model_image"</param>
            <param name="startNode">Component index of the start node of an arc in the search tree.</param>
            <param name="endNode">Component index of the end node of an arc in the search tree.</param>
            <param name="row">Row coordinate of the center of the rectangle representing the relation.</param>
            <param name="column">Column index of the center of the rectangle representing the relation.</param>
            <param name="phi">Orientation of the rectangle representing the relation (radians).</param>
            <param name="length1">First radius (half length) of the rectangle representing the relation.</param>
            <param name="length2">Second radius (half width) of the rectangle representing the relation.</param>
            <param name="angleStart">Smallest relative orientation angle.</param>
            <param name="angleExtent">Extent of the relative orientation angle.</param>
            <returns>Search tree.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentModel.GetComponentModelTree(HalconDotNet.HRegion@,System.Int32,System.String,System.Int32@,System.Int32@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Return the search tree of a component model.
              Instance represents: Handle of the component model.
            </summary>
            <param name="relations">Relations of components that are connected in the search tree.</param>
            <param name="rootComponent">Index of the root component.</param>
            <param name="image">Image for which the tree is to be returned. Default: "model_image"</param>
            <param name="startNode">Component index of the start node of an arc in the search tree.</param>
            <param name="endNode">Component index of the end node of an arc in the search tree.</param>
            <param name="row">Row coordinate of the center of the rectangle representing the relation.</param>
            <param name="column">Column index of the center of the rectangle representing the relation.</param>
            <param name="phi">Orientation of the rectangle representing the relation (radians).</param>
            <param name="length1">First radius (half length) of the rectangle representing the relation.</param>
            <param name="length2">Second radius (half width) of the rectangle representing the relation.</param>
            <param name="angleStart">Smallest relative orientation angle.</param>
            <param name="angleExtent">Extent of the relative orientation angle.</param>
            <returns>Search tree.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentModel.GetComponentModelParams(HalconDotNet.HTuple@,HalconDotNet.HShapeModel[]@)">
            <summary>
              Return the parameters of a component model.
              Instance represents: Handle of the component model.
            </summary>
            <param name="rootRanking">Ranking of the model components expressing their suitability to act as root component.</param>
            <param name="shapeModelIDs">Handles of the shape models of the individual model components.</param>
            <returns>Minimum score of the instances of the components to be found.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentModel.GetComponentModelParams(System.Int32@,HalconDotNet.HShapeModel@)">
            <summary>
              Return the parameters of a component model.
              Instance represents: Handle of the component model.
            </summary>
            <param name="rootRanking">Ranking of the model components expressing their suitability to act as root component.</param>
            <param name="shapeModelIDs">Handles of the shape models of the individual model components.</param>
            <returns>Minimum score of the instances of the components to be found.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentModel.DeserializeComponentModel(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized component model.
              Modified instance represents: Handle of the component model.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HComponentModel.SerializeComponentModel">
            <summary>
              Serialize a component model.
              Instance represents: Handle of the component model.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentModel.ReadComponentModel(System.String)">
            <summary>
              Read a component model from a file.
              Modified instance represents: Handle of the component model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HComponentModel.WriteComponentModel(System.String)">
            <summary>
              Write a component model to a file.
              Instance represents: Handle of the component model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HComponentModel.CreateComponentModel(HalconDotNet.HImage,HalconDotNet.HRegion,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a component model for matching based on explicitly specified components and relations.
              Modified instance represents: Handle of the component model.
            </summary>
            <param name="modelImage">Input image from which the shape models of the model components should be created.</param>
            <param name="componentRegions">Input regions from which the shape models of the model components should be created.</param>
            <param name="variationRow">Variation of the model components in row direction.</param>
            <param name="variationColumn">Variation of the model components in column direction.</param>
            <param name="variationAngle">Angle variation of the model components.</param>
            <param name="angleStart">Smallest rotation of the component model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation of the component model. Default: 0.79</param>
            <param name="contrastLowComp">Lower hysteresis threshold for the contrast of the components in the model image. Default: "auto"</param>
            <param name="contrastHighComp">Upper hysteresis threshold for the contrast of the components in the model image. Default: "auto"</param>
            <param name="minSizeComp">Minimum size of the contour regions in the model. Default: "auto"</param>
            <param name="minContrastComp">Minimum contrast of the components in the search images. Default: "auto"</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found. Default: 0.5</param>
            <param name="numLevelsComp">Maximum number of pyramid levels for the components. Default: "auto"</param>
            <param name="angleStepComp">Step length of the angles (resolution) for the components. Default: "auto"</param>
            <param name="optimizationComp">Kind of optimization for the components. Default: "auto"</param>
            <param name="metricComp">Match metric used for the components. Default: "use_polarity"</param>
            <param name="pregenerationComp">Complete pregeneration of the shape models for the components if equal to 'true'. Default: "false"</param>
            <returns>Ranking of the model components expressing the suitability to act as the root component.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentModel.CreateComponentModel(HalconDotNet.HImage,HalconDotNet.HRegion,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Double,System.String,System.String,System.String)">
            <summary>
              Prepare a component model for matching based on explicitly specified components and relations.
              Modified instance represents: Handle of the component model.
            </summary>
            <param name="modelImage">Input image from which the shape models of the model components should be created.</param>
            <param name="componentRegions">Input regions from which the shape models of the model components should be created.</param>
            <param name="variationRow">Variation of the model components in row direction.</param>
            <param name="variationColumn">Variation of the model components in column direction.</param>
            <param name="variationAngle">Angle variation of the model components.</param>
            <param name="angleStart">Smallest rotation of the component model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation of the component model. Default: 0.79</param>
            <param name="contrastLowComp">Lower hysteresis threshold for the contrast of the components in the model image. Default: "auto"</param>
            <param name="contrastHighComp">Upper hysteresis threshold for the contrast of the components in the model image. Default: "auto"</param>
            <param name="minSizeComp">Minimum size of the contour regions in the model. Default: "auto"</param>
            <param name="minContrastComp">Minimum contrast of the components in the search images. Default: "auto"</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found. Default: 0.5</param>
            <param name="numLevelsComp">Maximum number of pyramid levels for the components. Default: "auto"</param>
            <param name="angleStepComp">Step length of the angles (resolution) for the components. Default: "auto"</param>
            <param name="optimizationComp">Kind of optimization for the components. Default: "auto"</param>
            <param name="metricComp">Match metric used for the components. Default: "use_polarity"</param>
            <param name="pregenerationComp">Complete pregeneration of the shape models for the components if equal to 'true'. Default: "false"</param>
            <returns>Ranking of the model components expressing the suitability to act as the root component.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentModel.CreateTrainedComponentModel(HalconDotNet.HComponentTraining,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a component model for matching based on trained components.
              Modified instance represents: Handle of the component model.
            </summary>
            <param name="componentTrainingID">Handle of the training result.</param>
            <param name="angleStart">Smallest rotation of the component model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation of the component model. Default: 0.79</param>
            <param name="minContrastComp">Minimum contrast of the components in the search images. Default: "auto"</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found. Default: 0.5</param>
            <param name="numLevelsComp">Maximum number of pyramid levels for the components. Default: "auto"</param>
            <param name="angleStepComp">Step length of the angles (resolution) for the components. Default: "auto"</param>
            <param name="optimizationComp">Kind of optimization for the components. Default: "auto"</param>
            <param name="metricComp">Match metric used for the components. Default: "use_polarity"</param>
            <param name="pregenerationComp">Complete pregeneration of the shape models for the components if equal to 'true'. Default: "false"</param>
            <returns>Ranking of the model components expressing the suitability to act as the root component.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentModel.CreateTrainedComponentModel(HalconDotNet.HComponentTraining,System.Double,System.Double,System.Int32,System.Double,System.Int32,System.Double,System.String,System.String,System.String)">
            <summary>
              Prepare a component model for matching based on trained components.
              Modified instance represents: Handle of the component model.
            </summary>
            <param name="componentTrainingID">Handle of the training result.</param>
            <param name="angleStart">Smallest rotation of the component model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation of the component model. Default: 0.79</param>
            <param name="minContrastComp">Minimum contrast of the components in the search images. Default: "auto"</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found. Default: 0.5</param>
            <param name="numLevelsComp">Maximum number of pyramid levels for the components. Default: "auto"</param>
            <param name="angleStepComp">Step length of the angles (resolution) for the components. Default: "auto"</param>
            <param name="optimizationComp">Kind of optimization for the components. Default: "auto"</param>
            <param name="metricComp">Match metric used for the components. Default: "use_polarity"</param>
            <param name="pregenerationComp">Complete pregeneration of the shape models for the components if equal to 'true'. Default: "false"</param>
            <returns>Ranking of the model components expressing the suitability to act as the root component.</returns>
        </member>
        <member name="T:HalconDotNet.HNCCModel">
            <summary>Represents an instance of an NCC model for matching.</summary>
        </member>
        <member name="M:HalconDotNet.HNCCModel.#ctor(System.String)">
            <summary>
              Read an NCC model from a file.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HNCCModel.#ctor(HalconDotNet.HImage,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.String)">
            <summary>
              Prepare an NCC model for matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
        </member>
        <member name="M:HalconDotNet.HNCCModel.#ctor(HalconDotNet.HImage,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary>
              Prepare an NCC model for matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
        </member>
        <member name="M:HalconDotNet.HNCCModel.DeserializeNccModel(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize an NCC model.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HNCCModel.SerializeNccModel">
            <summary>
              Serialize an NCC model.
              Instance represents: Handle of the model.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HNCCModel.ReadNccModel(System.String)">
            <summary>
              Read an NCC model from a file.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HNCCModel.WriteNccModel(System.String)">
            <summary>
              Write an NCC model to a file.
              Instance represents: Handle of the model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HNCCModel.DetermineNccModelParams(HalconDotNet.HImage,HalconDotNet.HTuple,System.Double,System.Double,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Determine the parameters of an NCC model.</summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="parameters">Parameters to be determined automatically. Default: "all"</param>
            <param name="parameterValue">Value of the automatically determined parameter.</param>
            <returns>Name of the automatically determined parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HNCCModel.DetermineNccModelParams(HalconDotNet.HImage,System.Int32,System.Double,System.Double,System.String,System.String,HalconDotNet.HTuple@)">
            <summary>Determine the parameters of an NCC model.</summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="parameters">Parameters to be determined automatically. Default: "all"</param>
            <param name="parameterValue">Value of the automatically determined parameter.</param>
            <returns>Name of the automatically determined parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HNCCModel.GetNccModelParams(System.Double@,System.Double@,System.Double@,System.String@)">
            <summary>
              Return the parameters of an NCC model.
              Instance represents: Handle of the model.
            </summary>
            <param name="angleStart">Smallest rotation of the pattern.</param>
            <param name="angleExtent">Extent of the rotation angles.</param>
            <param name="angleStep">Step length of the angles (resolution).</param>
            <param name="metric">Match metric.</param>
            <returns>Number of pyramid levels.</returns>
        </member>
        <member name="M:HalconDotNet.HNCCModel.GetNccModelOrigin(System.Double@,System.Double@)">
            <summary>
              Return the origin (reference point) of an NCC model.
              Instance represents: Handle of the model.
            </summary>
            <param name="row">Row coordinate of the origin of the NCC model.</param>
            <param name="column">Column coordinate of the origin of the NCC model.</param>
        </member>
        <member name="M:HalconDotNet.HNCCModel.SetNccModelOrigin(System.Double,System.Double)">
            <summary>
              Set the origin (reference point) of an NCC model.
              Instance represents: Handle of the model.
            </summary>
            <param name="row">Row coordinate of the origin of the NCC model.</param>
            <param name="column">Column coordinate of the origin of the NCC model.</param>
        </member>
        <member name="M:HalconDotNet.HNCCModel.FindNccModel(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of an NCC model in an image.
              Instance represents: Handle of the model.
            </summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.8</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy. Default: "true"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HNCCModel.FindNccModel(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of an NCC model in an image.
              Instance represents: Handle of the model.
            </summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.8</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy. Default: "true"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HNCCModel.SetNccModelParam(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set selected parameters of the NCC model.
              Instance represents: Handle of the model.
            </summary>
            <param name="genParamNames">Parameter names.</param>
            <param name="genParamValues">Parameter values.</param>
        </member>
        <member name="M:HalconDotNet.HNCCModel.CreateNccModel(HalconDotNet.HImage,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.String)">
            <summary>
              Prepare an NCC model for matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
        </member>
        <member name="M:HalconDotNet.HNCCModel.CreateNccModel(HalconDotNet.HImage,System.Int32,System.Double,System.Double,System.Double,System.String)">
            <summary>
              Prepare an NCC model for matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
        </member>
        <member name="T:HalconDotNet.HComponentTraining">
            <summary>Represents an instance of a training result for the component-based matching.</summary>
        </member>
        <member name="M:HalconDotNet.HComponentTraining.#ctor(HalconDotNet.HImage,HalconDotNet.HRegion,HalconDotNet.HImage,HalconDotNet.HRegion@,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.String,System.Double,System.Double)">
            <summary>
              Train components and relations for the component-based matching.
              Modified instance represents: Handle of the training result.
            </summary>
            <param name="modelImage">Input image from which the shape models of the initial components should be created.</param>
            <param name="initialComponents">Contour regions or enclosing regions of the initial components.</param>
            <param name="trainingImages">Training images that are used for training the model components.</param>
            <param name="modelComponents">Contour regions of rigid model components.</param>
            <param name="contrastLow">Lower hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="contrastHigh">Upper hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="minSize">Minimum size of connected contour regions. Default: "auto"</param>
            <param name="minScore">Minimum score of the instances of the initial components to be found. Default: 0.5</param>
            <param name="searchRowTol">Search tolerance in row direction. Default: -1</param>
            <param name="searchColumnTol">Search tolerance in column direction. Default: -1</param>
            <param name="searchAngleTol">Angle search tolerance. Default: -1</param>
            <param name="trainingEmphasis">Decision whether the training emphasis should lie on a fast computation or on a high robustness. Default: "speed"</param>
            <param name="ambiguityCriterion">Criterion for solving ambiguous matches of the initial components in the training images. Default: "rigidity"</param>
            <param name="maxContourOverlap">Maximum contour overlap of the found initial components in a training image. Default: 0.2</param>
            <param name="clusterThreshold">Threshold for clustering the initial components. Default: 0.5</param>
        </member>
        <member name="M:HalconDotNet.HComponentTraining.#ctor(HalconDotNet.HImage,HalconDotNet.HRegion,HalconDotNet.HImage,HalconDotNet.HRegion@,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Double,System.String,System.String,System.Double,System.Double)">
            <summary>
              Train components and relations for the component-based matching.
              Modified instance represents: Handle of the training result.
            </summary>
            <param name="modelImage">Input image from which the shape models of the initial components should be created.</param>
            <param name="initialComponents">Contour regions or enclosing regions of the initial components.</param>
            <param name="trainingImages">Training images that are used for training the model components.</param>
            <param name="modelComponents">Contour regions of rigid model components.</param>
            <param name="contrastLow">Lower hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="contrastHigh">Upper hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="minSize">Minimum size of connected contour regions. Default: "auto"</param>
            <param name="minScore">Minimum score of the instances of the initial components to be found. Default: 0.5</param>
            <param name="searchRowTol">Search tolerance in row direction. Default: -1</param>
            <param name="searchColumnTol">Search tolerance in column direction. Default: -1</param>
            <param name="searchAngleTol">Angle search tolerance. Default: -1</param>
            <param name="trainingEmphasis">Decision whether the training emphasis should lie on a fast computation or on a high robustness. Default: "speed"</param>
            <param name="ambiguityCriterion">Criterion for solving ambiguous matches of the initial components in the training images. Default: "rigidity"</param>
            <param name="maxContourOverlap">Maximum contour overlap of the found initial components in a training image. Default: 0.2</param>
            <param name="clusterThreshold">Threshold for clustering the initial components. Default: 0.5</param>
        </member>
        <member name="M:HalconDotNet.HComponentTraining.CreateTrainedComponentModel(System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Prepare a component model for matching based on trained components.
              Instance represents: Handle of the training result.
            </summary>
            <param name="angleStart">Smallest rotation of the component model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation of the component model. Default: 0.79</param>
            <param name="minContrastComp">Minimum contrast of the components in the search images. Default: "auto"</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found. Default: 0.5</param>
            <param name="numLevelsComp">Maximum number of pyramid levels for the components. Default: "auto"</param>
            <param name="angleStepComp">Step length of the angles (resolution) for the components. Default: "auto"</param>
            <param name="optimizationComp">Kind of optimization for the components. Default: "auto"</param>
            <param name="metricComp">Match metric used for the components. Default: "use_polarity"</param>
            <param name="pregenerationComp">Complete pregeneration of the shape models for the components if equal to 'true'. Default: "false"</param>
            <param name="rootRanking">Ranking of the model components expressing the suitability to act as the root component.</param>
            <returns>Handle of the component model.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentTraining.CreateTrainedComponentModel(System.Double,System.Double,System.Int32,System.Double,System.Int32,System.Double,System.String,System.String,System.String,System.Int32@)">
            <summary>
              Prepare a component model for matching based on trained components.
              Instance represents: Handle of the training result.
            </summary>
            <param name="angleStart">Smallest rotation of the component model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation of the component model. Default: 0.79</param>
            <param name="minContrastComp">Minimum contrast of the components in the search images. Default: "auto"</param>
            <param name="minScoreComp">Minimum score of the instances of the components to be found. Default: 0.5</param>
            <param name="numLevelsComp">Maximum number of pyramid levels for the components. Default: "auto"</param>
            <param name="angleStepComp">Step length of the angles (resolution) for the components. Default: "auto"</param>
            <param name="optimizationComp">Kind of optimization for the components. Default: "auto"</param>
            <param name="metricComp">Match metric used for the components. Default: "use_polarity"</param>
            <param name="pregenerationComp">Complete pregeneration of the shape models for the components if equal to 'true'. Default: "false"</param>
            <param name="rootRanking">Ranking of the model components expressing the suitability to act as the root component.</param>
            <returns>Handle of the component model.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentTraining.GetComponentRelations(System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Return the relations between the model components that are contained in a training result.
              Instance represents: Handle of the training result.
            </summary>
            <param name="referenceComponent">Index of reference component.</param>
            <param name="image">Image for which the component relations are to be returned. Default: "model_image"</param>
            <param name="row">Row coordinate of the center of the rectangle representing the relation.</param>
            <param name="column">Column index of the center of the rectangle representing the relation.</param>
            <param name="phi">Orientation of the rectangle representing the relation (radians).</param>
            <param name="length1">First radius (half length) of the rectangle representing the relation.</param>
            <param name="length2">Second radius (half width) of the rectangle representing the relation.</param>
            <param name="angleStart">Smallest relative orientation angle.</param>
            <param name="angleExtent">Extent of the relative orientation angles.</param>
            <returns>Region representation of the relations.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentTraining.GetComponentRelations(System.Int32,System.String,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Return the relations between the model components that are contained in a training result.
              Instance represents: Handle of the training result.
            </summary>
            <param name="referenceComponent">Index of reference component.</param>
            <param name="image">Image for which the component relations are to be returned. Default: "model_image"</param>
            <param name="row">Row coordinate of the center of the rectangle representing the relation.</param>
            <param name="column">Column index of the center of the rectangle representing the relation.</param>
            <param name="phi">Orientation of the rectangle representing the relation (radians).</param>
            <param name="length1">First radius (half length) of the rectangle representing the relation.</param>
            <param name="length2">Second radius (half width) of the rectangle representing the relation.</param>
            <param name="angleStart">Smallest relative orientation angle.</param>
            <param name="angleExtent">Extent of the relative orientation angles.</param>
            <returns>Region representation of the relations.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentTraining.GetTrainingComponents(HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Return the initial or model components in a certain image.
              Instance represents: Handle of the training result.
            </summary>
            <param name="components">Type of returned components or index of an initial component. Default: "model_components"</param>
            <param name="image">Image for which the components are to be returned. Default: "model_image"</param>
            <param name="markOrientation">Mark the orientation of the components. Default: "false"</param>
            <param name="row">Row coordinate of the found instances of all initial components or model components.</param>
            <param name="column">Column coordinate of the found instances of all initial components or model components.</param>
            <param name="angle">Rotation angle of the found instances of all components.</param>
            <param name="score">Score of the found instances of all components.</param>
            <returns>Contour regions of the initial components or of the model components.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentTraining.GetTrainingComponents(System.String,System.String,System.String,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Return the initial or model components in a certain image.
              Instance represents: Handle of the training result.
            </summary>
            <param name="components">Type of returned components or index of an initial component. Default: "model_components"</param>
            <param name="image">Image for which the components are to be returned. Default: "model_image"</param>
            <param name="markOrientation">Mark the orientation of the components. Default: "false"</param>
            <param name="row">Row coordinate of the found instances of all initial components or model components.</param>
            <param name="column">Column coordinate of the found instances of all initial components or model components.</param>
            <param name="angle">Rotation angle of the found instances of all components.</param>
            <param name="score">Score of the found instances of all components.</param>
            <returns>Contour regions of the initial components or of the model components.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentTraining.ModifyComponentRelations(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Modify the relations within a training result.
              Instance represents: Handle of the training result.
            </summary>
            <param name="referenceComponent">Model component(s) relative to which the movement(s) should be modified. Default: "all"</param>
            <param name="toleranceComponent">Model component(s) of which the relative movement(s) should be modified. Default: "all"</param>
            <param name="positionTolerance">Change of the position relation in pixels.</param>
            <param name="angleTolerance">Change of the orientation relation in radians.</param>
        </member>
        <member name="M:HalconDotNet.HComponentTraining.ModifyComponentRelations(System.String,System.String,System.Double,System.Double)">
            <summary>
              Modify the relations within a training result.
              Instance represents: Handle of the training result.
            </summary>
            <param name="referenceComponent">Model component(s) relative to which the movement(s) should be modified. Default: "all"</param>
            <param name="toleranceComponent">Model component(s) of which the relative movement(s) should be modified. Default: "all"</param>
            <param name="positionTolerance">Change of the position relation in pixels.</param>
            <param name="angleTolerance">Change of the orientation relation in radians.</param>
        </member>
        <member name="M:HalconDotNet.HComponentTraining.DeserializeTrainingComponents(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a component training result.
              Modified instance represents: Handle of the training result.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HComponentTraining.SerializeTrainingComponents">
            <summary>
              Serialize a component training result.
              Instance represents: Handle of the training result.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentTraining.ReadTrainingComponents(System.String)">
            <summary>
              Read a component training result from a file.
              Modified instance represents: Handle of the training result.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HComponentTraining.WriteTrainingComponents(System.String)">
            <summary>
              Write a component training result to a file.
              Instance represents: Handle of the training result.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HComponentTraining.ClusterModelComponents(HalconDotNet.HImage,System.String,System.Double,System.Double)">
            <summary>
              Adopt new parameters that are used to create the model components into the training result.
              Instance represents: Handle of the training result.
            </summary>
            <param name="trainingImages">Training images that were used for training the model components.</param>
            <param name="ambiguityCriterion">Criterion for solving the ambiguities. Default: "rigidity"</param>
            <param name="maxContourOverlap">Maximum contour overlap of the found initial components. Default: 0.2</param>
            <param name="clusterThreshold">Threshold for clustering the initial components. Default: 0.5</param>
            <returns>Contour regions of rigid model components.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentTraining.InspectClusteredComponents(System.String,System.Double,System.Double)">
            <summary>
              Inspect the rigid model components obtained from the training.
              Instance represents: Handle of the training result.
            </summary>
            <param name="ambiguityCriterion">Criterion for solving the ambiguities. Default: "rigidity"</param>
            <param name="maxContourOverlap">Maximum contour overlap of the found initial components. Default: 0.2</param>
            <param name="clusterThreshold">Threshold for clustering the initial components. Default: 0.5</param>
            <returns>Contour regions of rigid model components.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentTraining.TrainModelComponents(HalconDotNet.HImage,HalconDotNet.HRegion,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.String,System.Double,System.Double)">
            <summary>
              Train components and relations for the component-based matching.
              Modified instance represents: Handle of the training result.
            </summary>
            <param name="modelImage">Input image from which the shape models of the initial components should be created.</param>
            <param name="initialComponents">Contour regions or enclosing regions of the initial components.</param>
            <param name="trainingImages">Training images that are used for training the model components.</param>
            <param name="contrastLow">Lower hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="contrastHigh">Upper hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="minSize">Minimum size of connected contour regions. Default: "auto"</param>
            <param name="minScore">Minimum score of the instances of the initial components to be found. Default: 0.5</param>
            <param name="searchRowTol">Search tolerance in row direction. Default: -1</param>
            <param name="searchColumnTol">Search tolerance in column direction. Default: -1</param>
            <param name="searchAngleTol">Angle search tolerance. Default: -1</param>
            <param name="trainingEmphasis">Decision whether the training emphasis should lie on a fast computation or on a high robustness. Default: "speed"</param>
            <param name="ambiguityCriterion">Criterion for solving ambiguous matches of the initial components in the training images. Default: "rigidity"</param>
            <param name="maxContourOverlap">Maximum contour overlap of the found initial components in a training image. Default: 0.2</param>
            <param name="clusterThreshold">Threshold for clustering the initial components. Default: 0.5</param>
            <returns>Contour regions of rigid model components.</returns>
        </member>
        <member name="M:HalconDotNet.HComponentTraining.TrainModelComponents(HalconDotNet.HImage,HalconDotNet.HRegion,HalconDotNet.HImage,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.Double,System.String,System.String,System.Double,System.Double)">
            <summary>
              Train components and relations for the component-based matching.
              Modified instance represents: Handle of the training result.
            </summary>
            <param name="modelImage">Input image from which the shape models of the initial components should be created.</param>
            <param name="initialComponents">Contour regions or enclosing regions of the initial components.</param>
            <param name="trainingImages">Training images that are used for training the model components.</param>
            <param name="contrastLow">Lower hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="contrastHigh">Upper hysteresis threshold for the contrast of the initial components in the image. Default: "auto"</param>
            <param name="minSize">Minimum size of connected contour regions. Default: "auto"</param>
            <param name="minScore">Minimum score of the instances of the initial components to be found. Default: 0.5</param>
            <param name="searchRowTol">Search tolerance in row direction. Default: -1</param>
            <param name="searchColumnTol">Search tolerance in column direction. Default: -1</param>
            <param name="searchAngleTol">Angle search tolerance. Default: -1</param>
            <param name="trainingEmphasis">Decision whether the training emphasis should lie on a fast computation or on a high robustness. Default: "speed"</param>
            <param name="ambiguityCriterion">Criterion for solving ambiguous matches of the initial components in the training images. Default: "rigidity"</param>
            <param name="maxContourOverlap">Maximum contour overlap of the found initial components in a training image. Default: 0.2</param>
            <param name="clusterThreshold">Threshold for clustering the initial components. Default: 0.5</param>
            <returns>Contour regions of rigid model components.</returns>
        </member>
        <member name="T:HalconDotNet.HVariationModel">
            <summary>Represents an instance of a variation model.</summary>
        </member>
        <member name="M:HalconDotNet.HVariationModel.#ctor(System.String)">
            <summary>
              Read a variation model from a file.
              Modified instance represents: ID of the variation model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HVariationModel.#ctor(System.Int32,System.Int32,System.String,System.String)">
            <summary>
              Create a variation model for image comparison.
              Modified instance represents: ID of the variation model.
            </summary>
            <param name="width">Width of the images to be compared. Default: 640</param>
            <param name="height">Height of the images to be compared. Default: 480</param>
            <param name="type">Type of the images to be compared. Default: "byte"</param>
            <param name="mode">Method used for computing the variation model. Default: "standard"</param>
        </member>
        <member name="M:HalconDotNet.HVariationModel.DeserializeVariationModel(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a variation model.
              Modified instance represents: ID of the variation model.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HVariationModel.SerializeVariationModel">
            <summary>
              Serialize a variation model.
              Instance represents: ID of the variation model.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HVariationModel.ReadVariationModel(System.String)">
            <summary>
              Read a variation model from a file.
              Modified instance represents: ID of the variation model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HVariationModel.WriteVariationModel(System.String)">
            <summary>
              Write a variation model to a file.
              Instance represents: ID of the variation model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HVariationModel.GetThreshImagesVariationModel(HalconDotNet.HImage@)">
            <summary>
              Return the threshold images used for image comparison by a variation model.
              Instance represents: ID of the variation model.
            </summary>
            <param name="maxImage">Threshold image for the upper threshold.</param>
            <returns>Threshold image for the lower threshold.</returns>
        </member>
        <member name="M:HalconDotNet.HVariationModel.GetVariationModel(HalconDotNet.HImage@)">
            <summary>
              Return the images used for image comparison by a variation model.
              Instance represents: ID of the variation model.
            </summary>
            <param name="varImage">Variation image of the trained object.</param>
            <returns>Image of the trained object.</returns>
        </member>
        <member name="M:HalconDotNet.HVariationModel.CompareExtVariationModel(HalconDotNet.HImage,System.String)">
            <summary>
              Compare an image to a variation model.
              Instance represents: ID of the variation model.
            </summary>
            <param name="image">Image of the object to be compared.</param>
            <param name="mode">Method used for comparing the variation model. Default: "absolute"</param>
            <returns>Region containing the points that differ substantially from the model.</returns>
        </member>
        <member name="M:HalconDotNet.HVariationModel.CompareVariationModel(HalconDotNet.HImage)">
            <summary>
              Compare an image to a variation model.
              Instance represents: ID of the variation model.
            </summary>
            <param name="image">Image of the object to be compared.</param>
            <returns>Region containing the points that differ substantially from the model.</returns>
        </member>
        <member name="M:HalconDotNet.HVariationModel.PrepareDirectVariationModel(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a variation model for comparison with an image.
              Instance represents: ID of the variation model.
            </summary>
            <param name="refImage">Reference image of the object.</param>
            <param name="varImage">Variation image of the object.</param>
            <param name="absThreshold">Absolute minimum threshold for the differences between the image and the variation model. Default: 10</param>
            <param name="varThreshold">Threshold for the differences based on the variation of the variation model. Default: 2</param>
        </member>
        <member name="M:HalconDotNet.HVariationModel.PrepareDirectVariationModel(HalconDotNet.HImage,HalconDotNet.HImage,System.Double,System.Double)">
            <summary>
              Prepare a variation model for comparison with an image.
              Instance represents: ID of the variation model.
            </summary>
            <param name="refImage">Reference image of the object.</param>
            <param name="varImage">Variation image of the object.</param>
            <param name="absThreshold">Absolute minimum threshold for the differences between the image and the variation model. Default: 10</param>
            <param name="varThreshold">Threshold for the differences based on the variation of the variation model. Default: 2</param>
        </member>
        <member name="M:HalconDotNet.HVariationModel.PrepareVariationModel(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a variation model for comparison with an image.
              Instance represents: ID of the variation model.
            </summary>
            <param name="absThreshold">Absolute minimum threshold for the differences between the image and the variation model. Default: 10</param>
            <param name="varThreshold">Threshold for the differences based on the variation of the variation model. Default: 2</param>
        </member>
        <member name="M:HalconDotNet.HVariationModel.PrepareVariationModel(System.Double,System.Double)">
            <summary>
              Prepare a variation model for comparison with an image.
              Instance represents: ID of the variation model.
            </summary>
            <param name="absThreshold">Absolute minimum threshold for the differences between the image and the variation model. Default: 10</param>
            <param name="varThreshold">Threshold for the differences based on the variation of the variation model. Default: 2</param>
        </member>
        <member name="M:HalconDotNet.HVariationModel.TrainVariationModel(HalconDotNet.HImage)">
            <summary>
              Train a variation model.
              Instance represents: ID of the variation model.
            </summary>
            <param name="images">Images of the object to be trained.</param>
        </member>
        <member name="M:HalconDotNet.HVariationModel.ClearTrainDataVariationModel">
            <summary>
              Free the memory of the training data of a variation model.
              Instance represents: ID of the variation model.
            </summary>
        </member>
        <member name="M:HalconDotNet.HVariationModel.CreateVariationModel(System.Int32,System.Int32,System.String,System.String)">
            <summary>
              Create a variation model for image comparison.
              Modified instance represents: ID of the variation model.
            </summary>
            <param name="width">Width of the images to be compared. Default: 640</param>
            <param name="height">Height of the images to be compared. Default: 480</param>
            <param name="type">Type of the images to be compared. Default: "byte"</param>
            <param name="mode">Method used for computing the variation model. Default: "standard"</param>
        </member>
        <member name="T:HalconDotNet.HLexicon">
            <summary>Represents an instance of a lexicon.</summary>
        </member>
        <member name="M:HalconDotNet.HLexicon.#ctor(System.String,System.String)">
            <summary>
              Create a lexicon from a text file.
              Modified instance represents: Handle of the lexicon.
            </summary>
            <param name="name">Unique name for the new lexicon. Default: "lex1"</param>
            <param name="fileName">Name of a text file containing words for the new lexicon. Default: "words.txt"</param>
        </member>
        <member name="M:HalconDotNet.HLexicon.#ctor(System.String,HalconDotNet.HTuple)">
            <summary>
              Create a lexicon from a tuple of words.
              Modified instance represents: Handle of the lexicon.
            </summary>
            <param name="name">Unique name for the new lexicon. Default: "lex1"</param>
            <param name="words">Word list for the new lexicon. Default: ["word1","word2","word3"]</param>
        </member>
        <member name="M:HalconDotNet.HLexicon.SuggestLexicon(System.String,System.Int32@)">
            <summary>
              Find a similar word in a lexicon.
              Instance represents: Handle of the lexicon.
            </summary>
            <param name="word">Word to be looked up. Default: "word"</param>
            <param name="numCorrections">Difference between the words in edit operations.</param>
            <returns>Most similar word found in the lexicon.</returns>
        </member>
        <member name="M:HalconDotNet.HLexicon.LookupLexicon(System.String)">
            <summary>
              Check if a word is contained in a lexicon.
              Instance represents: Handle of the lexicon.
            </summary>
            <param name="word">Word to be looked up. Default: "word"</param>
            <returns>Result of the search.</returns>
        </member>
        <member name="M:HalconDotNet.HLexicon.InspectLexicon">
            <summary>
              Query all words from a lexicon.
              Instance represents: Handle of the lexicon.
            </summary>
            <returns>List of all words.</returns>
        </member>
        <member name="M:HalconDotNet.HLexicon.ImportLexicon(System.String,System.String)">
            <summary>
              Create a lexicon from a text file.
              Modified instance represents: Handle of the lexicon.
            </summary>
            <param name="name">Unique name for the new lexicon. Default: "lex1"</param>
            <param name="fileName">Name of a text file containing words for the new lexicon. Default: "words.txt"</param>
        </member>
        <member name="M:HalconDotNet.HLexicon.CreateLexicon(System.String,HalconDotNet.HTuple)">
            <summary>
              Create a lexicon from a tuple of words.
              Modified instance represents: Handle of the lexicon.
            </summary>
            <param name="name">Unique name for the new lexicon. Default: "lex1"</param>
            <param name="words">Word list for the new lexicon. Default: ["word1","word2","word3"]</param>
        </member>
        <member name="T:HalconDotNet.HRegion">
            <summary>Represents an instance of a region object(-array).</summary>
        </member>
        <member name="M:HalconDotNet.HRegion.#ctor">
            <summary>Create an uninitialized iconic object</summary>
        </member>
        <member name="M:HalconDotNet.HRegion.#ctor(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a rectangle parallel to the coordinate axes.
              Modified instance represents: Created rectangle.
            </summary>
            <param name="row1">Line of upper left corner point. Default: 30.0</param>
            <param name="column1">Column of upper left corner point. Default: 20.0</param>
            <param name="row2">Line of lower right corner point. Default: 100.0</param>
            <param name="column2">Column of lower right corner point. Default: 200.0</param>
        </member>
        <member name="M:HalconDotNet.HRegion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create a rectangle parallel to the coordinate axes.
              Modified instance represents: Created rectangle.
            </summary>
            <param name="row1">Line of upper left corner point. Default: 30.0</param>
            <param name="column1">Column of upper left corner point. Default: 20.0</param>
            <param name="row2">Line of lower right corner point. Default: 100.0</param>
            <param name="column2">Column of lower right corner point. Default: 200.0</param>
        </member>
        <member name="M:HalconDotNet.HRegion.#ctor(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create an ellipse sector.
              Modified instance represents: Created ellipse(s).
            </summary>
            <param name="row">Line index of center. Default: 200.0</param>
            <param name="column">Column index of center. Default: 200.0</param>
            <param name="phi">Orientation of the longer radius (Radius1). Default: 0.0</param>
            <param name="radius1">Longer radius. Default: 100.0</param>
            <param name="radius2">Shorter radius. Default: 60.0</param>
            <param name="startAngle">Start angle of the sector. Default: 0.0</param>
            <param name="endAngle">End angle of the sector. Default: 3.14159</param>
        </member>
        <member name="M:HalconDotNet.HRegion.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create an ellipse sector.
              Modified instance represents: Created ellipse(s).
            </summary>
            <param name="row">Line index of center. Default: 200.0</param>
            <param name="column">Column index of center. Default: 200.0</param>
            <param name="phi">Orientation of the longer radius (Radius1). Default: 0.0</param>
            <param name="radius1">Longer radius. Default: 100.0</param>
            <param name="radius2">Shorter radius. Default: 60.0</param>
            <param name="startAngle">Start angle of the sector. Default: 0.0</param>
            <param name="endAngle">End angle of the sector. Default: 3.14159</param>
        </member>
        <member name="M:HalconDotNet.HRegion.#ctor(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a circle sector.
              Modified instance represents: Generated circle sector.
            </summary>
            <param name="row">Line index of center. Default: 200.0</param>
            <param name="column">Column index of center. Default: 200.0</param>
            <param name="radius">Radius of circle. Default: 100.5</param>
            <param name="startAngle">Start angle of the circle sector. Default: 0.0</param>
            <param name="endAngle">End angle of the circle sector. Default: 3.14159</param>
        </member>
        <member name="M:HalconDotNet.HRegion.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create a circle sector.
              Modified instance represents: Generated circle sector.
            </summary>
            <param name="row">Line index of center. Default: 200.0</param>
            <param name="column">Column index of center. Default: 200.0</param>
            <param name="radius">Radius of circle. Default: 100.5</param>
            <param name="startAngle">Start angle of the circle sector. Default: 0.0</param>
            <param name="endAngle">End angle of the circle sector. Default: 3.14159</param>
        </member>
        <member name="M:HalconDotNet.HRegion.#ctor(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a circle.
              Modified instance represents: Generated circle.
            </summary>
            <param name="row">Line index of center. Default: 200.0</param>
            <param name="column">Column index of center. Default: 200.0</param>
            <param name="radius">Radius of circle. Default: 100.5</param>
        </member>
        <member name="M:HalconDotNet.HRegion.#ctor(System.Double,System.Double,System.Double)">
            <summary>
              Create a circle.
              Modified instance represents: Generated circle.
            </summary>
            <param name="row">Line index of center. Default: 200.0</param>
            <param name="column">Column index of center. Default: 200.0</param>
            <param name="radius">Radius of circle. Default: 100.5</param>
        </member>
        <member name="M:HalconDotNet.HRegion.op_BitwiseAnd(HalconDotNet.HRegion,HalconDotNet.HRegion)">
            <summary>Returns the intersection of regions</summary>
        </member>
        <member name="M:HalconDotNet.HRegion.op_BitwiseOr(HalconDotNet.HRegion,HalconDotNet.HRegion)">
            <summary>Returns the union of regions</summary>
        </member>
        <member name="M:HalconDotNet.HRegion.op_Division(HalconDotNet.HRegion,HalconDotNet.HRegion)">
            <summary>Returns the difference of regions</summary>
        </member>
        <member name="M:HalconDotNet.HRegion.op_LogicalNot(HalconDotNet.HRegion)">
            <summary>
              Returns the recomplement of the region. Note that the result
              is not necessarily finite, so you might wish to intersect the
              result with the image domain you are interested in.
            </summary>
        </member>
        <member name="M:HalconDotNet.HRegion.op_BitwiseAnd(HalconDotNet.HRegion,HalconDotNet.HImage)">
            <summary>
              Returns the intersection of the region and the image domain.
              In particular, the result will not exceed the image bounds.
            </summary>
        </member>
        <member name="M:HalconDotNet.HRegion.op_LessThanOrEqual(HalconDotNet.HRegion,HalconDotNet.HRegion)">
            <summary>Test if one region is a subset of the other</summary>
        </member>
        <member name="M:HalconDotNet.HRegion.op_GreaterThanOrEqual(HalconDotNet.HRegion,HalconDotNet.HRegion)">
            <summary>Test if one region is a subset of the other</summary>
        </member>
        <member name="M:HalconDotNet.HRegion.op_Addition(HalconDotNet.HRegion,HalconDotNet.HRegion)">
            <summary>Returns the Minkowski addition of regions</summary>
        </member>
        <member name="M:HalconDotNet.HRegion.op_Subtraction(HalconDotNet.HRegion,HalconDotNet.HRegion)">
            <summary>Returns the Minkowski subtraction of regions</summary>
        </member>
        <member name="M:HalconDotNet.HRegion.op_Addition(HalconDotNet.HRegion,System.Double)">
            <summary>Dilates the region by the specified radius</summary>
        </member>
        <member name="M:HalconDotNet.HRegion.op_Addition(System.Double,HalconDotNet.HRegion)">
            <summary>Dilates the region by the specified radius</summary>
        </member>
        <member name="M:HalconDotNet.HRegion.op_Subtraction(HalconDotNet.HRegion,System.Double)">
            <summary>Erodes the region by the specified radius</summary>
        </member>
        <member name="M:HalconDotNet.HRegion.op_Addition(HalconDotNet.HRegion,System.Drawing.Point)">
            <summary>Translates the region</summary>
        </member>
        <member name="M:HalconDotNet.HRegion.op_Multiply(HalconDotNet.HRegion,System.Double)">
            <summary>Zooms the region</summary>
        </member>
        <member name="M:HalconDotNet.HRegion.op_Multiply(System.Double,HalconDotNet.HRegion)">
            <summary>Zooms the region</summary>
        </member>
        <member name="M:HalconDotNet.HRegion.op_UnaryNegation(HalconDotNet.HRegion)">
            <summary>Transposes the region</summary>
        </member>
        <member name="M:HalconDotNet.HRegion.op_Implicit(HalconDotNet.HXLDCont)~HalconDotNet.HRegion">
            <summary>Converts an XLD contour to a filled region</summary>
        </member>
        <member name="M:HalconDotNet.HRegion.op_Implicit(HalconDotNet.HXLDPoly)~HalconDotNet.HRegion">
            <summary>Converts an XLD polygon to a filled region</summary>
        </member>
        <member name="M:HalconDotNet.HRegion.op_Implicit(HalconDotNet.HRegion)~HalconDotNet.HXLDCont">
            <summary>Returns an XLD contour representing the region border</summary>
        </member>
        <member name="M:HalconDotNet.HRegion.GenContourRegionXld(System.String)">
            <summary>
              Generate XLD contours from regions.
              Instance represents: Input regions.
            </summary>
            <param name="mode">Mode of contour generation. Default: "border"</param>
            <returns>Resulting contours.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GenContoursSkeletonXld(System.Int32,System.String)">
            <summary>
              Convert a skeleton into XLD contours.
              Instance represents: Skeleton of which the contours are to be determined.
            </summary>
            <param name="length">Minimum number of points a contour has to have. Default: 1</param>
            <param name="mode">Contour filter mode. Default: "filter"</param>
            <returns>Resulting contours.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ReceiveRegion(HalconDotNet.HSocket)">
            <summary>
              Receive regions over a socket connection.
              Modified instance represents: Received regions.
            </summary>
            <param name="socket">Socket number.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.SendRegion(HalconDotNet.HSocket)">
            <summary>
              Send regions over a socket connection.
              Instance represents: Regions to be sent.
            </summary>
            <param name="socket">Socket number.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.CreateSheetOfLightModel(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a model to perform 3D-measurements using the sheet-of-light technique.
              Instance represents: Region of the images containing the profiles to be processed. If the provided region is not rectangular, its smallest enclosing rectangle will be used.
            </summary>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the sheet-of-light model. Default: "min_gray"</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the sheet-of-light model. Default: 50</param>
            <returns>Handle for using and accessing the sheet-of-light model.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.CreateSheetOfLightModel(System.String,System.Int32)">
            <summary>
              Create a model to perform 3D-measurements using the sheet-of-light technique.
              Instance represents: Region of the images containing the profiles to be processed. If the provided region is not rectangular, its smallest enclosing rectangle will be used.
            </summary>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the sheet-of-light model. Default: "min_gray"</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the sheet-of-light model. Default: 50</param>
            <returns>Handle for using and accessing the sheet-of-light model.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.SelectCharacters(System.String,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
              Selects characters from a given region.
              Instance represents: Region of text lines in which to select the characters.
            </summary>
            <param name="dotPrint">Should dot print characters be detected? Default: "false"</param>
            <param name="strokeWidth">Stroke width of a character. Default: "medium"</param>
            <param name="charWidth">Width of a character. Default: 25</param>
            <param name="charHeight">Height of a character. Default: 25</param>
            <param name="punctuation">Add punctuation? Default: "false"</param>
            <param name="diacriticMarks">Exist diacritic marks? Default: "false"</param>
            <param name="partitionMethod">Method to partition neighbored characters. Default: "none"</param>
            <param name="partitionLines">Should lines be partitioned? Default: "false"</param>
            <param name="fragmentDistance">Distance of fragments. Default: "medium"</param>
            <param name="connectFragments">Connect fragments? Default: "false"</param>
            <param name="clutterSizeMax">Maximum size of clutter. Default: 0</param>
            <param name="stopAfter">Stop execution after this step. Default: "completion"</param>
            <returns>Selected characters.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.SegmentCharacters(HalconDotNet.HImage,HalconDotNet.HRegion@,System.String,System.String,System.String,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,HalconDotNet.HTuple@)">
            <summary>
              Segments characters in a given region of an image.
              Instance represents: Area in the image where the text lines are located.
            </summary>
            <param name="image">Input image.</param>
            <param name="regionForeground">Region of characters.</param>
            <param name="method">Method to segment the characters. Default: "local_auto_shape"</param>
            <param name="eliminateLines">Eliminate horizontal and vertical lines? Default: "false"</param>
            <param name="dotPrint">Should dot print characters be detected? Default: "false"</param>
            <param name="strokeWidth">Stroke width of a character. Default: "medium"</param>
            <param name="charWidth">Width of a character. Default: 25</param>
            <param name="charHeight">Height of a character. Default: 25</param>
            <param name="thresholdOffset">Value to adjust the segmentation. Default: 0</param>
            <param name="contrast">Minimum gray value difference between text and background. Default: 10</param>
            <param name="usedThreshold">Threshold used to segment the characters.</param>
            <returns>Image used for the segmentation.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.SegmentCharacters(HalconDotNet.HImage,HalconDotNet.HRegion@,System.String,System.String,System.String,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,System.Int32@)">
            <summary>
              Segments characters in a given region of an image.
              Instance represents: Area in the image where the text lines are located.
            </summary>
            <param name="image">Input image.</param>
            <param name="regionForeground">Region of characters.</param>
            <param name="method">Method to segment the characters. Default: "local_auto_shape"</param>
            <param name="eliminateLines">Eliminate horizontal and vertical lines? Default: "false"</param>
            <param name="dotPrint">Should dot print characters be detected? Default: "false"</param>
            <param name="strokeWidth">Stroke width of a character. Default: "medium"</param>
            <param name="charWidth">Width of a character. Default: 25</param>
            <param name="charHeight">Height of a character. Default: 25</param>
            <param name="thresholdOffset">Value to adjust the segmentation. Default: 0</param>
            <param name="contrast">Minimum gray value difference between text and background. Default: 10</param>
            <param name="usedThreshold">Threshold used to segment the characters.</param>
            <returns>Image used for the segmentation.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.TextLineSlant(HalconDotNet.HImage,System.Int32,System.Double,System.Double)">
            <summary>
              Determines the slant of characters of a text line or paragraph.
              Instance represents: Area of text lines.
            </summary>
            <param name="image">Input image.</param>
            <param name="charHeight">Height of the text lines. Default: 25</param>
            <param name="slantFrom">Minimum slant of the characters Default: -0.523599</param>
            <param name="slantTo">Maximum slant of the characters Default: 0.523599</param>
            <returns>Calculated slant of the characters in the region</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.TextLineOrientation(HalconDotNet.HImage,System.Int32,System.Double,System.Double)">
            <summary>
              Determines the orientation of a text line or paragraph.
              Instance represents: Area of text lines.
            </summary>
            <param name="image">Input image.</param>
            <param name="charHeight">Height of the text lines. Default: 25</param>
            <param name="orientationFrom">Minimum rotation of the text lines. Default: -0.523599</param>
            <param name="orientationTo">Maximum rotation of the text lines. Default: 0.523599</param>
            <returns>Calculated rotation angle of the text lines.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.LearnNdimNorm(HalconDotNet.HRegion,HalconDotNet.HImage,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,System.Double@)">
            <summary>
              Construct classes for class_ndim_norm.
              Instance represents: Foreground pixels to be trained.
            </summary>
            <param name="background">Background pixels to be trained (rejection class).</param>
            <param name="image">Multi-channel training image.</param>
            <param name="metric">Metric to be used. Default: "euclid"</param>
            <param name="distance">Maximum cluster radius. Default: 10.0</param>
            <param name="minNumberPercent">The ratio of the number of pixels in a cluster to the total number of pixels (in percent) must be larger than MinNumberPercent (otherwise the cluster is not output). Default: 0.01</param>
            <param name="center">Coordinates of all cluster centers.</param>
            <param name="quality">Overlap of the rejection class with the classified objects (1: no overlap).</param>
            <returns>Cluster radii or half edge lengths.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.LearnNdimNorm(HalconDotNet.HRegion,HalconDotNet.HImage,System.String,System.Double,System.Double,HalconDotNet.HTuple@,System.Double@)">
            <summary>
              Construct classes for class_ndim_norm.
              Instance represents: Foreground pixels to be trained.
            </summary>
            <param name="background">Background pixels to be trained (rejection class).</param>
            <param name="image">Multi-channel training image.</param>
            <param name="metric">Metric to be used. Default: "euclid"</param>
            <param name="distance">Maximum cluster radius. Default: 10.0</param>
            <param name="minNumberPercent">The ratio of the number of pixels in a cluster to the total number of pixels (in percent) must be larger than MinNumberPercent (otherwise the cluster is not output). Default: 0.01</param>
            <param name="center">Coordinates of all cluster centers.</param>
            <param name="quality">Overlap of the rejection class with the classified objects (1: no overlap).</param>
            <returns>Cluster radii or half edge lengths.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.LearnNdimBox(HalconDotNet.HRegion,HalconDotNet.HImage,HalconDotNet.HClassBox)">
            <summary>
              Train a classificator using a multi-channel image.
              Instance represents: Foreground pixels to be trained.
            </summary>
            <param name="background">Background pixels to be trained (rejection class).</param>
            <param name="multiChannelImage">Multi-channel training image.</param>
            <param name="classifHandle">Handle of the classifier.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.PolarTransRegionInv(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
              Transform a region in polar coordinates back to cartesian coordinates.
              Instance represents: Input region.
            </summary>
            <param name="row">Row coordinate of the center of the arc. Default: 256</param>
            <param name="column">Column coordinate of the center of the arc. Default: 256</param>
            <param name="angleStart">Angle of the ray to map the column coordinate 0 of PolarRegion to. Default: 0.0</param>
            <param name="angleEnd">Angle of the ray to map the column coordinate $WidthIn-1$ of PolarRegion to. Default: 6.2831853</param>
            <param name="radiusStart">Radius of the circle to map the row coordinate 0 of PolarRegion to. Default: 0</param>
            <param name="radiusEnd">Radius of the circle to map the row coordinate $HeightIn-1$ of PolarRegion to. Default: 100</param>
            <param name="widthIn">Width of the virtual input image. Default: 512</param>
            <param name="heightIn">Height of the virtual input image. Default: 512</param>
            <param name="width">Width of the virtual output image. Default: 512</param>
            <param name="height">Height of the virtual output image. Default: 512</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "nearest_neighbor"</param>
            <returns>Output region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.PolarTransRegionInv(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
              Transform a region in polar coordinates back to cartesian coordinates.
              Instance represents: Input region.
            </summary>
            <param name="row">Row coordinate of the center of the arc. Default: 256</param>
            <param name="column">Column coordinate of the center of the arc. Default: 256</param>
            <param name="angleStart">Angle of the ray to map the column coordinate 0 of PolarRegion to. Default: 0.0</param>
            <param name="angleEnd">Angle of the ray to map the column coordinate $WidthIn-1$ of PolarRegion to. Default: 6.2831853</param>
            <param name="radiusStart">Radius of the circle to map the row coordinate 0 of PolarRegion to. Default: 0</param>
            <param name="radiusEnd">Radius of the circle to map the row coordinate $HeightIn-1$ of PolarRegion to. Default: 100</param>
            <param name="widthIn">Width of the virtual input image. Default: 512</param>
            <param name="heightIn">Height of the virtual input image. Default: 512</param>
            <param name="width">Width of the virtual output image. Default: 512</param>
            <param name="height">Height of the virtual output image. Default: 512</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "nearest_neighbor"</param>
            <returns>Output region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.PolarTransRegion(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,System.String)">
            <summary>
              Transform a region within an annular arc to polar coordinates.
              Instance represents: Input region.
            </summary>
            <param name="row">Row coordinate of the center of the arc. Default: 256</param>
            <param name="column">Column coordinate of the center of the arc. Default: 256</param>
            <param name="angleStart">Angle of the ray to be mapped to column coordinate 0 of PolarTransRegion. Default: 0.0</param>
            <param name="angleEnd">Angle of the ray to be mapped to column coordinate $Width-1$ of PolarTransRegion. Default: 6.2831853</param>
            <param name="radiusStart">Radius of the circle to be mapped to row coordinate 0 of PolarTransRegion. Default: 0</param>
            <param name="radiusEnd">Radius of the circle to be mapped to row coordinate $Height-1$ of PolarTransRegion. Default: 100</param>
            <param name="width">Width of the virtual output image. Default: 512</param>
            <param name="height">Height of the virtual output image. Default: 512</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "nearest_neighbor"</param>
            <returns>Output region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.PolarTransRegion(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.String)">
            <summary>
              Transform a region within an annular arc to polar coordinates.
              Instance represents: Input region.
            </summary>
            <param name="row">Row coordinate of the center of the arc. Default: 256</param>
            <param name="column">Column coordinate of the center of the arc. Default: 256</param>
            <param name="angleStart">Angle of the ray to be mapped to column coordinate 0 of PolarTransRegion. Default: 0.0</param>
            <param name="angleEnd">Angle of the ray to be mapped to column coordinate $Width-1$ of PolarTransRegion. Default: 6.2831853</param>
            <param name="radiusStart">Radius of the circle to be mapped to row coordinate 0 of PolarTransRegion. Default: 0</param>
            <param name="radiusEnd">Radius of the circle to be mapped to row coordinate $Height-1$ of PolarTransRegion. Default: 100</param>
            <param name="width">Width of the virtual output image. Default: 512</param>
            <param name="height">Height of the virtual output image. Default: 512</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "nearest_neighbor"</param>
            <returns>Output region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MergeRegionsLineScan(HalconDotNet.HRegion,HalconDotNet.HRegion@,System.Int32,System.String,System.Int32)">
            <summary>
              Merge regions from line scan images.
              Instance represents: Current input regions.
            </summary>
            <param name="prevRegions">Merged regions from the previous iteration.</param>
            <param name="prevMergedRegions">Regions from the previous iteration which could not be merged with the current ones.</param>
            <param name="imageHeight">Height of the line scan images. Default: 512</param>
            <param name="mergeBorder">Image line of the current image, which touches the previous image. Default: "top"</param>
            <param name="maxImagesRegion">Maximum number of images for a single region. Default: 3</param>
            <returns>Current regions, merged with old ones where applicable.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.PartitionRectangle(System.Double,System.Double)">
            <summary>
              Partition a region into rectangles of approximately equal size.
              Instance represents: Region to be partitioned.
            </summary>
            <param name="width">Width of the individual rectangles.</param>
            <param name="height">Height of the individual rectangles.</param>
            <returns>Partitioned region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.PartitionDynamic(System.Double,System.Double)">
            <summary>
              Partition a region horizontally at positions of small vertical extent.
              Instance represents: Region to be partitioned.
            </summary>
            <param name="distance">Approximate width of the resulting region parts.</param>
            <param name="percent">Maximum percental shift of the split position. Default: 20</param>
            <returns>Partitioned region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.RegionToLabel(System.String,System.Int32,System.Int32)">
            <summary>
              Convert regions to a label image.
              Instance represents: Regions to be converted.
            </summary>
            <param name="type">Pixel type of the result image. Default: "int2"</param>
            <param name="width">Width of the image to be generated. Default: 512</param>
            <param name="height">Height of the image to be generated. Default: 512</param>
            <returns>Result image of dimension Width * Height containing the converted regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.RegionToBin(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Convert a region into a binary byte-image.
              Instance represents: Regions to be converted.
            </summary>
            <param name="foregroundGray">Gray value in which the regions are displayed. Default: 255</param>
            <param name="backgroundGray">Gray value in which the background is displayed. Default: 0</param>
            <param name="width">Width of the image to be generated. Default: 512</param>
            <param name="height">Height of the image to be generated. Default: 512</param>
            <returns>Result image of dimension Width * Height containing the converted regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Union2(HalconDotNet.HRegion)">
            <summary>
              Return the union of two regions.
              Instance represents: Region for which the union with all regions in Region2 is to be computed.
            </summary>
            <param name="region2">Regions which should be added to Region1.</param>
            <returns>Resulting regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Union1">
            <summary>
              Return the union of all input regions.
              Instance represents: Regions of which the union is to be computed.
            </summary>
            <returns>Union of all input regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ClosestPointTransform(HalconDotNet.HImage@,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Compute the closest-point transformation of a region.
              Instance represents: Region for which the distance to the border is computed.
            </summary>
            <param name="closestPoints">Image containing the coordinates of the closest points.</param>
            <param name="metric">Type of metric to be used for the closest-point transformation. Default: "city-block"</param>
            <param name="foreground">Compute the distance for pixels inside (true) or outside (false) the input region. Default: "true"</param>
            <param name="closestPointMode">Mode in which the coordinates of the closest points are returned. Default: "absolute"</param>
            <param name="width">Width of the output images. Default: 640</param>
            <param name="height">Height of the output images. Default: 480</param>
            <returns>Image containing the distance information.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DistanceTransform(System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Compute the distance transformation of a region.
              Instance represents: Region for which the distance to the border is computed.
            </summary>
            <param name="metric">Type of metric to be used for the distance transformation. Default: "city-block"</param>
            <param name="foreground">Compute the distance for pixels inside (true) or outside (false) the input region. Default: "true"</param>
            <param name="width">Width of the output image. Default: 640</param>
            <param name="height">Height of the output image. Default: 480</param>
            <returns>Image containing the distance information.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Skeleton">
            <summary>
              Compute the skeleton of a region.
              Instance represents: Region to be thinned.
            </summary>
            <returns>Resulting skeleton.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ProjectiveTransRegion(HalconDotNet.HHomMat2D,System.String)">
            <summary>
              Apply a projective transformation to a region.
              Instance represents: Input regions.
            </summary>
            <param name="homMat2D">Homogeneous projective transformation matrix.</param>
            <param name="interpolation">Interpolation method for the transformation. Default: "bilinear"</param>
            <returns>Output regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.AffineTransRegion(HalconDotNet.HHomMat2D,System.String)">
            <summary>
              Apply an arbitrary affine 2D transformation to regions.
              Instance represents: Region(s) to be rotated and scaled.
            </summary>
            <param name="homMat2D">Input transformation matrix.</param>
            <param name="interpolate">Should the transformation be done using interpolation? Default: "nearest_neighbor"</param>
            <returns>Transformed output region(s).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MirrorRegion(System.String,System.Int32)">
            <summary>
              Reflect a region about an axis.
              Instance represents: Region(s) to be reflected.
            </summary>
            <param name="mode">Axis of symmetry. Default: "row"</param>
            <param name="widthHeight">Twice the coordinate of the axis of symmetry. Default: 512</param>
            <returns>Reflected region(s).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ZoomRegion(System.Double,System.Double)">
            <summary>
              Zoom a region.
              Instance represents: Region(s) to be zoomed.
            </summary>
            <param name="scaleWidth">Scale factor in x-direction. Default: 2.0</param>
            <param name="scaleHeight">Scale factor in y-direction. Default: 2.0</param>
            <returns>Zoomed region(s).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MoveRegion(System.Int32,System.Int32)">
            <summary>
              Translate a region.
              Instance represents: Region(s) to be moved.
            </summary>
            <param name="row">Row coordinate of the vector by which the region is to be moved. Default: 30</param>
            <param name="column">Row coordinate of the vector by which the region is to be moved. Default: 30</param>
            <returns>Translated region(s).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.JunctionsSkeleton(HalconDotNet.HRegion@)">
            <summary>
              Find junctions and end points in a skeleton.
              Instance represents: Input skeletons.
            </summary>
            <param name="juncPoints">Extracted junctions.</param>
            <returns>Extracted end points.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Intersection(HalconDotNet.HRegion)">
            <summary>
              Calculate the intersection of two regions.
              Instance represents: Regions to be intersected with all regions in Region2.
            </summary>
            <param name="region2">Regions with which Region1 is intersected.</param>
            <returns>Result of the intersection.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Interjacent(System.String)">
            <summary>
              Partition the image plane using given regions.
              Instance represents: Regions for which the separating lines are to be determined.
            </summary>
            <param name="mode">Mode of operation. Default: "mixed"</param>
            <returns>Output region containing the separating lines.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.FillUp">
            <summary>
              Fill up holes in regions.
              Instance represents: Input regions containing holes.
            </summary>
            <returns>Regions without holes.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.FillUpShape(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Fill up holes in regions having given shape features.
              Instance represents: Input region(s).
            </summary>
            <param name="feature">Shape feature used. Default: "area"</param>
            <param name="min">Minimum value for Feature. Default: 1.0</param>
            <param name="max">Maximum value for Feature. Default: 100.0</param>
            <returns>Output region(s) with filled holes.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.FillUpShape(System.String,System.Double,System.Double)">
            <summary>
              Fill up holes in regions having given shape features.
              Instance represents: Input region(s).
            </summary>
            <param name="feature">Shape feature used. Default: "area"</param>
            <param name="min">Minimum value for Feature. Default: 1.0</param>
            <param name="max">Maximum value for Feature. Default: 100.0</param>
            <returns>Output region(s) with filled holes.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ExpandRegion(HalconDotNet.HRegion,HalconDotNet.HTuple,System.String)">
            <summary>
              Fill gaps between regions or split overlapping regions.
              Instance represents: Regions for which the gaps are to be closed, or which are to be separated.
            </summary>
            <param name="forbiddenArea">Regions in which no expansion takes place.</param>
            <param name="iterations">Number of iterations. Default: "maximal"</param>
            <param name="mode">Expansion mode. Default: "image"</param>
            <returns>Expanded or separated regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ExpandRegion(HalconDotNet.HRegion,System.Int32,System.String)">
            <summary>
              Fill gaps between regions or split overlapping regions.
              Instance represents: Regions for which the gaps are to be closed, or which are to be separated.
            </summary>
            <param name="forbiddenArea">Regions in which no expansion takes place.</param>
            <param name="iterations">Number of iterations. Default: "maximal"</param>
            <param name="mode">Expansion mode. Default: "image"</param>
            <returns>Expanded or separated regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ClipRegionRel(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Clip a region relative to its smallest surrounding rectangle.
              Instance represents: Regions to be clipped.
            </summary>
            <param name="top">Number of rows clipped at the top. Default: 1</param>
            <param name="bottom">Number of rows clipped at the bottom. Default: 1</param>
            <param name="left">Number of columns clipped at the left. Default: 1</param>
            <param name="right">Number of columns clipped at the right. Default: 1</param>
            <returns>Clipped regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ClipRegion(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Clip a region to a rectangle.
              Instance represents: Region to be clipped.
            </summary>
            <param name="row1">Row coordinate of the upper left corner of the rectangle. Default: 0</param>
            <param name="column1">Column coordinate of the upper left corner of the rectangle. Default: 0</param>
            <param name="row2">Row coordinate of the lower right corner of the rectangle. Default: 256</param>
            <param name="column2">Column coordinate of the lower right corner of the rectangle. Default: 256</param>
            <returns>Clipped regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.RankRegion(System.Int32,System.Int32,System.Int32)">
            <summary>
              Rank operator for regions.
              Instance represents: Region(s) to be transformed.
            </summary>
            <param name="width">Width of the filter mask. Default: 15</param>
            <param name="height">Height of the filter mask. Default: 15</param>
            <param name="number">Minimum number of points lying within the filter mask. Default: 70</param>
            <returns>Resulting region(s).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Connection">
            <summary>
              Compute connected components of a region.
              Instance represents: Input region.
            </summary>
            <returns>Connected components.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.SymmDifference(HalconDotNet.HRegion)">
            <summary>
              Calculate the symmetric difference of two regions.
              Instance represents: Input region 1.
            </summary>
            <param name="region2">Input region 2.</param>
            <returns>Resulting region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Difference(HalconDotNet.HRegion)">
            <summary>
              Calculate the difference of two regions.
              Instance represents: Regions to be processed.
            </summary>
            <param name="sub">The union of these regions is subtracted from Region.</param>
            <returns>Resulting region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Complement">
            <summary>
              Return the complement of a region.
              Instance represents: Input region(s).
            </summary>
            <returns>Complemented regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.BackgroundSeg">
            <summary>
              Determine the connected components of the background of given regions.
              Instance represents: Input regions.
            </summary>
            <returns>Connected components of the background.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.HammingChangeRegion(System.Int32,System.Int32,System.Int32)">
            <summary>
              Generate a region having a given Hamming distance.
              Instance represents: Region to be modified.
            </summary>
            <param name="width">Width of the region to be changed. Default: 100</param>
            <param name="height">Height of the region to be changed. Default: 100</param>
            <param name="distance">Hamming distance between the old and new regions. Default: 1000</param>
            <returns>Regions having the required Hamming distance.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.RemoveNoiseRegion(System.String)">
            <summary>
              Remove noise from a region.
              Instance represents: Regions to be modified.
            </summary>
            <param name="type">Mode of noise removal. Default: "n_4"</param>
            <returns>Less noisy regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ShapeTrans(System.String)">
            <summary>
              Transform the shape of a region.
              Instance represents: Regions to be transformed.
            </summary>
            <param name="type">Type of transformation. Default: "convex"</param>
            <returns>Transformed regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ExpandGray(HalconDotNet.HImage,HalconDotNet.HRegion,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple)">
            <summary>
              Fill gaps between regions (depending on gray value or color) or split overlapping regions.
              Instance represents: Regions for which the gaps are to be closed, or which are to be separated.
            </summary>
            <param name="image">Image (possibly multi-channel) for gray value or color comparison.</param>
            <param name="forbiddenArea">Regions in which no expansion takes place.</param>
            <param name="iterations">Number of iterations. Default: "maximal"</param>
            <param name="mode">Expansion mode. Default: "image"</param>
            <param name="threshold">Maximum difference between the gray value or color at the region's border and a candidate for expansion. Default: 32</param>
            <returns>Expanded or separated regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ExpandGray(HalconDotNet.HImage,HalconDotNet.HRegion,System.String,System.String,System.Int32)">
            <summary>
              Fill gaps between regions (depending on gray value or color) or split overlapping regions.
              Instance represents: Regions for which the gaps are to be closed, or which are to be separated.
            </summary>
            <param name="image">Image (possibly multi-channel) for gray value or color comparison.</param>
            <param name="forbiddenArea">Regions in which no expansion takes place.</param>
            <param name="iterations">Number of iterations. Default: "maximal"</param>
            <param name="mode">Expansion mode. Default: "image"</param>
            <param name="threshold">Maximum difference between the gray value or color at the region's border and a candidate for expansion. Default: 32</param>
            <returns>Expanded or separated regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ExpandGrayRef(HalconDotNet.HImage,HalconDotNet.HRegion,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Fill gaps between regions (depending on gray value or color) or split overlapping regions.
              Instance represents: Regions for which the gaps are to be closed, or which are to be separated.
            </summary>
            <param name="image">Image (possibly multi-channel) for gray value or color comparison.</param>
            <param name="forbiddenArea">Regions in which no expansion takes place.</param>
            <param name="iterations">Number of iterations. Default: "maximal"</param>
            <param name="mode">Expansion mode. Default: "image"</param>
            <param name="refGray">Reference gray value or color for comparison. Default: 128</param>
            <param name="threshold">Maximum difference between the reference gray value or color and a candidate for expansion. Default: 32</param>
            <returns>Expanded or separated regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ExpandGrayRef(HalconDotNet.HImage,HalconDotNet.HRegion,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Fill gaps between regions (depending on gray value or color) or split overlapping regions.
              Instance represents: Regions for which the gaps are to be closed, or which are to be separated.
            </summary>
            <param name="image">Image (possibly multi-channel) for gray value or color comparison.</param>
            <param name="forbiddenArea">Regions in which no expansion takes place.</param>
            <param name="iterations">Number of iterations. Default: "maximal"</param>
            <param name="mode">Expansion mode. Default: "image"</param>
            <param name="refGray">Reference gray value or color for comparison. Default: 128</param>
            <param name="threshold">Maximum difference between the reference gray value or color and a candidate for expansion. Default: 32</param>
            <returns>Expanded or separated regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.SplitSkeletonLines(System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Split lines represented by one pixel wide, non-branching lines.
              Instance represents: Input lines (represented by 1 pixel wide, non-branching regions).
            </summary>
            <param name="maxDistance">Maximum distance of the line points to the line segment connecting both end points. Default: 3</param>
            <param name="beginRow">Row coordinates of the start points of the output lines.</param>
            <param name="beginCol">Column coordinates of the start points of the output lines.</param>
            <param name="endRow">Row coordinates of the end points of the output lines.</param>
            <param name="endCol">Column coordinates of the end points of the output lines.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.SplitSkeletonRegion(System.Int32)">
            <summary>
              Split lines represented by one pixel wide, non-branching regions.
              Instance represents: Input lines (represented by 1 pixel wide, non-branching regions).
            </summary>
            <param name="maxDistance">Maximum distance of the line points to the line segment connecting both end points. Default: 3</param>
            <returns>Split lines.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GenRegionHisto(HalconDotNet.HTuple,System.Int32,System.Int32,System.Int32)">
            <summary>
              Convert a histogram into a region.
              Modified instance represents: Region containing the histogram.
            </summary>
            <param name="histogram">Input histogram.</param>
            <param name="row">Row coordinate of the center of the histogram. Default: 255</param>
            <param name="column">Column coordinate of the center of the histogram. Default: 255</param>
            <param name="scale">Scale factor for the histogram. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HRegion.EliminateRuns(System.Int32,System.Int32)">
            <summary>
              Eliminate runs of a given length.
              Instance represents: Region to be clipped.
            </summary>
            <param name="elimShorter">All runs which are shorter are eliminated. Default: 3</param>
            <param name="elimLonger">All runs which are longer are eliminated. Default: 1000</param>
            <returns>Clipped regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ObjDiff(HalconDotNet.HRegion)">
            <summary>
              Calculate the difference of two object tuples.
              Instance represents: Object tuple 1.
            </summary>
            <param name="objectsSub">Object tuple 2.</param>
            <returns>Objects from Objects that are not part of ObjectsSub.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.PaintRegion(HalconDotNet.HImage,HalconDotNet.HTuple,System.String)">
            <summary>
              Paint regions into an image.
              Instance represents: Regions to be painted into the input image.
            </summary>
            <param name="image">Image in which the regions are to be painted.</param>
            <param name="grayval">Desired gray values of the regions. Default: 255.0</param>
            <param name="type">Paint regions filled or as boundaries. Default: "fill"</param>
            <returns>Image containing the result.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.PaintRegion(HalconDotNet.HImage,System.Double,System.String)">
            <summary>
              Paint regions into an image.
              Instance represents: Regions to be painted into the input image.
            </summary>
            <param name="image">Image in which the regions are to be painted.</param>
            <param name="grayval">Desired gray values of the regions. Default: 255.0</param>
            <param name="type">Paint regions filled or as boundaries. Default: "fill"</param>
            <returns>Image containing the result.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.OverpaintRegion(HalconDotNet.HImage,HalconDotNet.HTuple,System.String)">
            <summary>
              Overpaint regions in an image.
              Instance represents: Regions to be painted into the input image.
            </summary>
            <param name="image">Image in which the regions are to be painted.</param>
            <param name="grayval">Desired gray values of the regions. Default: 255.0</param>
            <param name="type">Paint regions filled or as boundaries. Default: "fill"</param>
        </member>
        <member name="M:HalconDotNet.HRegion.OverpaintRegion(HalconDotNet.HImage,System.Double,System.String)">
            <summary>
              Overpaint regions in an image.
              Instance represents: Regions to be painted into the input image.
            </summary>
            <param name="image">Image in which the regions are to be painted.</param>
            <param name="grayval">Desired gray values of the regions. Default: 255.0</param>
            <param name="type">Paint regions filled or as boundaries. Default: "fill"</param>
        </member>
        <member name="M:HalconDotNet.HRegion.CopyObj(System.Int32,System.Int32)">
            <summary>
              Copy an iconic object in the HALCON database.
              Instance represents: Objects to be copied.
            </summary>
            <param name="index">Starting index of the objects to be copied. Default: 1</param>
            <param name="numObj">Number of objects to be copied or -1. Default: 1</param>
            <returns>Copied objects.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ConcatObj(HalconDotNet.HRegion)">
            <summary>
              Concatenate two iconic object tuples.
              Instance represents: Object tuple 1.
            </summary>
            <param name="objects2">Object tuple 2.</param>
            <returns>Concatenated objects.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.SelectObj(HalconDotNet.HTuple)">
            <summary>
              Select objects from an object tuple.
              Instance represents: Input objects.
            </summary>
            <param name="index">Indices of the objects to be selected. Default: 1</param>
            <returns>Selected objects.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.SelectObj(System.Int32)">
            <summary>
              Select objects from an object tuple.
              Instance represents: Input objects.
            </summary>
            <param name="index">Indices of the objects to be selected. Default: 1</param>
            <returns>Selected objects.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.CompareObj(HalconDotNet.HRegion,HalconDotNet.HTuple)">
            <summary>
              Compare iconic objects regarding equality.
              Instance represents: Reference objects.
            </summary>
            <param name="objects2">Test objects.</param>
            <param name="epsilon">Maximum allowed difference between two gray values or  coordinates etc. Default: 0.0</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.CompareObj(HalconDotNet.HRegion,System.Double)">
            <summary>
              Compare iconic objects regarding equality.
              Instance represents: Reference objects.
            </summary>
            <param name="objects2">Test objects.</param>
            <param name="epsilon">Maximum allowed difference between two gray values or  coordinates etc. Default: 0.0</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.TestSubsetRegion(HalconDotNet.HRegion)">
            <summary>
              Test whether a region is contained in another region.
              Instance represents: Test region.
            </summary>
            <param name="region2">Region for comparison.</param>
            <returns>Is Region1 contained in Region2?</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.TestEqualRegion(HalconDotNet.HRegion)">
            <summary>
              Test whether the regions of two objects are identical.
              Instance represents: Test regions.
            </summary>
            <param name="regions2">Comparative regions.</param>
            <returns>boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.TestEqualObj(HalconDotNet.HRegion)">
            <summary>
              Compare image objects regarding equality.
              Instance represents: Test objects.
            </summary>
            <param name="objects2">Comparative objects.</param>
            <returns>boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GenRegionPolygonFilled(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Store a polygon as a "filled" region.
              Modified instance represents: Created region.
            </summary>
            <param name="rows">Line indices of the base points of the region contour. Default: 100</param>
            <param name="columns">Column indices of the base points of the region contour. Default: 100</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenRegionPolygon(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Store a polygon as a region.
              Modified instance represents: Created region.
            </summary>
            <param name="rows">Line indices of the base points of the region contour. Default: 100</param>
            <param name="columns">Colum indices of the base points of the region contour. Default: 100</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenRegionPoints(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Store individual pixels as image region.
              Modified instance represents: Created region.
            </summary>
            <param name="rows">Lines of the pixels in the region. Default: 100</param>
            <param name="columns">Columns of the pixels in the region. Default: 100</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenRegionPoints(System.Int32,System.Int32)">
            <summary>
              Store individual pixels as image region.
              Modified instance represents: Created region.
            </summary>
            <param name="rows">Lines of the pixels in the region. Default: 100</param>
            <param name="columns">Columns of the pixels in the region. Default: 100</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenRegionRuns(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a region from a runlength coding.
              Modified instance represents: Created region.
            </summary>
            <param name="row">Lines of the runs. Default: 100</param>
            <param name="columnBegin">Columns of the starting points of the runs. Default: 50</param>
            <param name="columnEnd">Columns of the ending points of the runs. Default: 200</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenRegionRuns(System.Int32,System.Int32,System.Int32)">
            <summary>
              Create a region from a runlength coding.
              Modified instance represents: Created region.
            </summary>
            <param name="row">Lines of the runs. Default: 100</param>
            <param name="columnBegin">Columns of the starting points of the runs. Default: 50</param>
            <param name="columnEnd">Columns of the ending points of the runs. Default: 200</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenRectangle2(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a rectangle of any orientation.
              Modified instance represents: Created rectangle.
            </summary>
            <param name="row">Line index of the center. Default: 300.0</param>
            <param name="column">Column index of the center. Default: 200.0</param>
            <param name="phi">Angle of longitudinal axis to the horizontal (in radians). Default: 0.0</param>
            <param name="length1">Half width. Default: 100.0</param>
            <param name="length2">Half height. Default: 20.0</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenRectangle2(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create a rectangle of any orientation.
              Modified instance represents: Created rectangle.
            </summary>
            <param name="row">Line index of the center. Default: 300.0</param>
            <param name="column">Column index of the center. Default: 200.0</param>
            <param name="phi">Angle of longitudinal axis to the horizontal (in radians). Default: 0.0</param>
            <param name="length1">Half width. Default: 100.0</param>
            <param name="length2">Half height. Default: 20.0</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenRectangle1(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a rectangle parallel to the coordinate axes.
              Modified instance represents: Created rectangle.
            </summary>
            <param name="row1">Line of upper left corner point. Default: 30.0</param>
            <param name="column1">Column of upper left corner point. Default: 20.0</param>
            <param name="row2">Line of lower right corner point. Default: 100.0</param>
            <param name="column2">Column of lower right corner point. Default: 200.0</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenRectangle1(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create a rectangle parallel to the coordinate axes.
              Modified instance represents: Created rectangle.
            </summary>
            <param name="row1">Line of upper left corner point. Default: 30.0</param>
            <param name="column1">Column of upper left corner point. Default: 20.0</param>
            <param name="row2">Line of lower right corner point. Default: 100.0</param>
            <param name="column2">Column of lower right corner point. Default: 200.0</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenRandomRegion(System.Int32,System.Int32)">
            <summary>
              Create a random region.
              Modified instance represents: Created random region with expansion Width x Height.
            </summary>
            <param name="width">Maximum horizontal expansion of random region. Default: 128</param>
            <param name="height">Maximum vertical expansion of random region. Default: 128</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenEllipseSector(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create an ellipse sector.
              Modified instance represents: Created ellipse(s).
            </summary>
            <param name="row">Line index of center. Default: 200.0</param>
            <param name="column">Column index of center. Default: 200.0</param>
            <param name="phi">Orientation of the longer radius (Radius1). Default: 0.0</param>
            <param name="radius1">Longer radius. Default: 100.0</param>
            <param name="radius2">Shorter radius. Default: 60.0</param>
            <param name="startAngle">Start angle of the sector. Default: 0.0</param>
            <param name="endAngle">End angle of the sector. Default: 3.14159</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenEllipseSector(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create an ellipse sector.
              Modified instance represents: Created ellipse(s).
            </summary>
            <param name="row">Line index of center. Default: 200.0</param>
            <param name="column">Column index of center. Default: 200.0</param>
            <param name="phi">Orientation of the longer radius (Radius1). Default: 0.0</param>
            <param name="radius1">Longer radius. Default: 100.0</param>
            <param name="radius2">Shorter radius. Default: 60.0</param>
            <param name="startAngle">Start angle of the sector. Default: 0.0</param>
            <param name="endAngle">End angle of the sector. Default: 3.14159</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenEllipse(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create an ellipse.
              Modified instance represents: Created ellipse(s).
            </summary>
            <param name="row">Line index of center. Default: 200.0</param>
            <param name="column">Column index of center. Default: 200.0</param>
            <param name="phi">Orientation of the longer radius (Radius1). Default: 0.0</param>
            <param name="radius1">Longer radius. Default: 100.0</param>
            <param name="radius2">Shorter radius. Default: 60.0</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenEllipse(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create an ellipse.
              Modified instance represents: Created ellipse(s).
            </summary>
            <param name="row">Line index of center. Default: 200.0</param>
            <param name="column">Column index of center. Default: 200.0</param>
            <param name="phi">Orientation of the longer radius (Radius1). Default: 0.0</param>
            <param name="radius1">Longer radius. Default: 100.0</param>
            <param name="radius2">Shorter radius. Default: 60.0</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenCircleSector(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a circle sector.
              Modified instance represents: Generated circle sector.
            </summary>
            <param name="row">Line index of center. Default: 200.0</param>
            <param name="column">Column index of center. Default: 200.0</param>
            <param name="radius">Radius of circle. Default: 100.5</param>
            <param name="startAngle">Start angle of the circle sector. Default: 0.0</param>
            <param name="endAngle">End angle of the circle sector. Default: 3.14159</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenCircleSector(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create a circle sector.
              Modified instance represents: Generated circle sector.
            </summary>
            <param name="row">Line index of center. Default: 200.0</param>
            <param name="column">Column index of center. Default: 200.0</param>
            <param name="radius">Radius of circle. Default: 100.5</param>
            <param name="startAngle">Start angle of the circle sector. Default: 0.0</param>
            <param name="endAngle">End angle of the circle sector. Default: 3.14159</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenCircle(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a circle.
              Modified instance represents: Generated circle.
            </summary>
            <param name="row">Line index of center. Default: 200.0</param>
            <param name="column">Column index of center. Default: 200.0</param>
            <param name="radius">Radius of circle. Default: 100.5</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenCircle(System.Double,System.Double,System.Double)">
            <summary>
              Create a circle.
              Modified instance represents: Generated circle.
            </summary>
            <param name="row">Line index of center. Default: 200.0</param>
            <param name="column">Column index of center. Default: 200.0</param>
            <param name="radius">Radius of circle. Default: 100.5</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenCheckerRegion(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Create a checkered region.
              Modified instance represents: Created checkerboard region.
            </summary>
            <param name="widthRegion">Largest occurring $x$ value of the region. Default: 511</param>
            <param name="heightRegion">Largest occurring $y$ value of the region. Default: 511</param>
            <param name="widthPattern">Width of a field of the checkerboard. Default: 64</param>
            <param name="heightPattern">Height of a field of the checkerboard. Default: 64</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenGridRegion(HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32)">
            <summary>
              Create a region from lines or pixels.
              Modified instance represents: Created lines/pixel region.
            </summary>
            <param name="rowSteps">Step width in line direction or zero. Default: 10</param>
            <param name="columnSteps">Step width in column direction or zero. Default: 10</param>
            <param name="type">Type of created pattern. Default: "lines"</param>
            <param name="width">Maximum width of pattern. Default: 512</param>
            <param name="height">Maximum height of pattern. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenGridRegion(System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
              Create a region from lines or pixels.
              Modified instance represents: Created lines/pixel region.
            </summary>
            <param name="rowSteps">Step width in line direction or zero. Default: 10</param>
            <param name="columnSteps">Step width in column direction or zero. Default: 10</param>
            <param name="type">Type of created pattern. Default: "lines"</param>
            <param name="width">Maximum width of pattern. Default: 512</param>
            <param name="height">Maximum height of pattern. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenRandomRegions(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,System.Int32)">
            <summary>
              Create random regions like circles, rectangles and ellipses.
              Modified instance represents: Created regions.
            </summary>
            <param name="type">Type of regions to be created. Default: "circle"</param>
            <param name="widthMin">Minimum width of the region. Default: 10.0</param>
            <param name="widthMax">Maximum width of the region. Default: 20.0</param>
            <param name="heightMin">Minimum height of the region. Default: 10.0</param>
            <param name="heightMax">Maximum height of the region. Default: 30.0</param>
            <param name="phiMin">Minimum rotation angle of the region. Default: -0.7854</param>
            <param name="phiMax">Maximum rotation angle of the region. Default: 0.7854</param>
            <param name="numRegions">Number of regions. Default: 100</param>
            <param name="width">Maximum horizontal expansion. Default: 512</param>
            <param name="height">Maximum vertical expansion. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenRandomRegions(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
              Create random regions like circles, rectangles and ellipses.
              Modified instance represents: Created regions.
            </summary>
            <param name="type">Type of regions to be created. Default: "circle"</param>
            <param name="widthMin">Minimum width of the region. Default: 10.0</param>
            <param name="widthMax">Maximum width of the region. Default: 20.0</param>
            <param name="heightMin">Minimum height of the region. Default: 10.0</param>
            <param name="heightMax">Maximum height of the region. Default: 30.0</param>
            <param name="phiMin">Minimum rotation angle of the region. Default: -0.7854</param>
            <param name="phiMax">Maximum rotation angle of the region. Default: 0.7854</param>
            <param name="numRegions">Number of regions. Default: 100</param>
            <param name="width">Maximum horizontal expansion. Default: 512</param>
            <param name="height">Maximum vertical expansion. Default: 512</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenRegionHline(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Store input lines described in Hesse normal form as regions.
              Modified instance represents: Created regions (one for every line), clipped to maximum image format.
            </summary>
            <param name="orientation">Orientation of the normal vector in radians. Default: 0.0</param>
            <param name="distance">Distance from the line to the coordinate origin (0.0). Default: 200</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenRegionHline(System.Double,System.Double)">
            <summary>
              Store input lines described in Hesse normal form as regions.
              Modified instance represents: Created regions (one for every line), clipped to maximum image format.
            </summary>
            <param name="orientation">Orientation of the normal vector in radians. Default: 0.0</param>
            <param name="distance">Distance from the line to the coordinate origin (0.0). Default: 200</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenRegionLine(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Store input lines as regions.
              Modified instance represents: Created regions.
            </summary>
            <param name="beginRow">Line coordinates of the starting points of the input lines. Default: 100</param>
            <param name="beginCol">Column coordinates of the starting points of the input lines. Default: 50</param>
            <param name="endRow">Line coordinates of the ending points of the input lines. Default: 150</param>
            <param name="endCol">Column coordinates of the ending points of the input lines. Default: 250</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenRegionLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Store input lines as regions.
              Modified instance represents: Created regions.
            </summary>
            <param name="beginRow">Line coordinates of the starting points of the input lines. Default: 100</param>
            <param name="beginCol">Column coordinates of the starting points of the input lines. Default: 50</param>
            <param name="endRow">Line coordinates of the ending points of the input lines. Default: 150</param>
            <param name="endCol">Column coordinates of the ending points of the input lines. Default: 250</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GenEmptyRegion">
            <summary>
              Create an empty region.
              Modified instance represents: Empty region (no pixels).
            </summary>
        </member>
        <member name="M:HalconDotNet.HRegion.GetRegionThickness(HalconDotNet.HTuple@)">
            <summary>
              Access the thickness of a region along the main axis.
              Instance represents: Region to be analysed.
            </summary>
            <param name="histogramm">Histogram of the thickness of the region along its main axis.</param>
            <returns>Thickness of the region along its main axis.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GetRegionPolygon(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Polygon approximation of a region.
              Instance represents: Region to be approximated.
            </summary>
            <param name="tolerance">Maximum distance between the polygon and the edge of the region. Default: 5.0</param>
            <param name="rows">Line numbers of the base points of the contour.</param>
            <param name="columns">Column numbers of the base points of the contour.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GetRegionPolygon(System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Polygon approximation of a region.
              Instance represents: Region to be approximated.
            </summary>
            <param name="tolerance">Maximum distance between the polygon and the edge of the region. Default: 5.0</param>
            <param name="rows">Line numbers of the base points of the contour.</param>
            <param name="columns">Column numbers of the base points of the contour.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GetRegionPoints(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Access the pixels of a region.
              Instance represents: This region is accessed.
            </summary>
            <param name="rows">Line numbers of the pixels in the region</param>
            <param name="columns">Column numbers of the pixels in the region.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GetRegionContour(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Access the contour of an object.
              Instance represents: Output region.
            </summary>
            <param name="rows">Line numbers of the contour pixels.</param>
            <param name="columns">Column numbers of the contour pixels.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GetRegionRuns(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Access the runlength coding of a region.
              Instance represents: Output region.
            </summary>
            <param name="row">Line numbers of the chords.</param>
            <param name="columnBegin">Column numbers of the starting points of the chords.</param>
            <param name="columnEnd">Column numbers of the ending points of the chords.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GetRegionChain(System.Int32@,System.Int32@,HalconDotNet.HTuple@)">
            <summary>
              Contour of an object as chain code.
              Instance represents: Region to be transformed.
            </summary>
            <param name="row">Line of starting point.</param>
            <param name="column">Column of starting point.</param>
            <param name="chain">Direction code of the contour (from starting point).</param>
        </member>
        <member name="M:HalconDotNet.HRegion.GetRegionConvex(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Access convex hull as contour.
              Instance represents: Output region.
            </summary>
            <param name="rows">Line numbers of contour pixels.</param>
            <param name="columns">Column numbers of the contour pixels.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.DoOcrWordKnn(HalconDotNet.HImage,HalconDotNet.HOCRKnn,System.String,System.Int32,System.Int32,HalconDotNet.HTuple@,System.String@,System.Double@)">
            <summary>
              Classify a related group of characters with an OCR classifier.
              Instance represents: Characters to be recognized.
            </summary>
            <param name="image">Gray values of the characters.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="expression">Expression describing the allowed word structure.</param>
            <param name="numAlternatives">Number of classes per character considered for the internal word correction. Default: 3</param>
            <param name="numCorrections">Maximum number of corrected characters. Default: 2</param>
            <param name="confidence">Confidence of the class of the characters.</param>
            <param name="word">Word text after classification and correction.</param>
            <param name="score">Measure of similarity between corrected word and uncorrected classification results.</param>
            <returns>Result of classifying the characters with the k-NN.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DoOcrWordKnn(HalconDotNet.HImage,HalconDotNet.HOCRKnn,System.String,System.Int32,System.Int32,System.Double@,System.String@,System.Double@)">
            <summary>
              Classify a related group of characters with an OCR classifier.
              Instance represents: Characters to be recognized.
            </summary>
            <param name="image">Gray values of the characters.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="expression">Expression describing the allowed word structure.</param>
            <param name="numAlternatives">Number of classes per character considered for the internal word correction. Default: 3</param>
            <param name="numCorrections">Maximum number of corrected characters. Default: 2</param>
            <param name="confidence">Confidence of the class of the characters.</param>
            <param name="word">Word text after classification and correction.</param>
            <param name="score">Measure of similarity between corrected word and uncorrected classification results.</param>
            <returns>Result of classifying the characters with the k-NN.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DoOcrMultiClassKnn(HalconDotNet.HImage,HalconDotNet.HOCRKnn,HalconDotNet.HTuple@)">
            <summary>
              Classify multiple characters with an k-NN classifier.
              Instance represents: Characters to be recognized.
            </summary>
            <param name="image">Gray values of the characters.</param>
            <param name="OCRHandle">Handle of the k-NN classifier.</param>
            <param name="confidence">Confidence of the class of the characters.</param>
            <returns>Result of classifying the characters with the k-NN.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DoOcrMultiClassKnn(HalconDotNet.HImage,HalconDotNet.HOCRKnn,System.Double@)">
            <summary>
              Classify multiple characters with an k-NN classifier.
              Instance represents: Characters to be recognized.
            </summary>
            <param name="image">Gray values of the characters.</param>
            <param name="OCRHandle">Handle of the k-NN classifier.</param>
            <param name="confidence">Confidence of the class of the characters.</param>
            <returns>Result of classifying the characters with the k-NN.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DoOcrSingleClassKnn(HalconDotNet.HImage,HalconDotNet.HOCRKnn,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Classify a single character with an OCR classifier.
              Instance represents: Character to be recognized.
            </summary>
            <param name="image">Gray values of the character.</param>
            <param name="OCRHandle">Handle of the k-NN classifier.</param>
            <param name="numClasses">Number of maximal classes to determine. Default: 1</param>
            <param name="numNeighbors">Number of neighbors to consider. Default: 1</param>
            <param name="confidence">Confidence(s) of the class(es) of the character.</param>
            <returns>Results of classifying the character with the k-NN.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DoOcrSingleClassKnn(HalconDotNet.HImage,HalconDotNet.HOCRKnn,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double@)">
            <summary>
              Classify a single character with an OCR classifier.
              Instance represents: Character to be recognized.
            </summary>
            <param name="image">Gray values of the character.</param>
            <param name="OCRHandle">Handle of the k-NN classifier.</param>
            <param name="numClasses">Number of maximal classes to determine. Default: 1</param>
            <param name="numNeighbors">Number of neighbors to consider. Default: 1</param>
            <param name="confidence">Confidence(s) of the class(es) of the character.</param>
            <returns>Results of classifying the character with the k-NN.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DoOcrWordSvm(HalconDotNet.HImage,HalconDotNet.HOCRSvm,System.String,System.Int32,System.Int32,System.String@,System.Double@)">
            <summary>
              Classify a related group of characters with an OCR classifier.
              Instance represents: Characters to be recognized.
            </summary>
            <param name="image">Gray values of the characters.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="expression">Expression describing the allowed word structure.</param>
            <param name="numAlternatives">Number of classes per character considered for the internal word correction. Default: 3</param>
            <param name="numCorrections">Maximum number of corrected characters. Default: 2</param>
            <param name="word">Word text after classification and correction.</param>
            <param name="score">Measure of similarity between corrected word and uncorrected classification results.</param>
            <returns>Result of classifying the characters with the SVM.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DoOcrMultiClassSvm(HalconDotNet.HImage,HalconDotNet.HOCRSvm)">
            <summary>
              Classify multiple characters with an SVM-based OCR classifier.
              Instance represents: Characters to be recognized.
            </summary>
            <param name="image">Gray values of the characters.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <returns>Result of classifying the characters with the SVM.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DoOcrSingleClassSvm(HalconDotNet.HImage,HalconDotNet.HOCRSvm,HalconDotNet.HTuple)">
            <summary>
              Classify a single character with an SVM-based OCR classifier.
              Instance represents: Character to be recognized.
            </summary>
            <param name="image">Gray values of the character.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="num">Number of best classes to determine. Default: 1</param>
            <returns>Result of classifying the character with the SVM.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DoOcrWordMlp(HalconDotNet.HImage,HalconDotNet.HOCRMlp,System.String,System.Int32,System.Int32,HalconDotNet.HTuple@,System.String@,System.Double@)">
            <summary>
              Classify a related group of characters with an OCR classifier.
              Instance represents: Characters to be recognized.
            </summary>
            <param name="image">Gray values of the characters.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="expression">Expression describing the allowed word structure.</param>
            <param name="numAlternatives">Number of classes per character considered for the internal word correction. Default: 3</param>
            <param name="numCorrections">Maximum number of corrected characters. Default: 2</param>
            <param name="confidence">Confidence of the class of the characters.</param>
            <param name="word">Word text after classification and correction.</param>
            <param name="score">Measure of similarity between corrected word and uncorrected classification results.</param>
            <returns>Result of classifying the characters with the MLP.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DoOcrWordMlp(HalconDotNet.HImage,HalconDotNet.HOCRMlp,System.String,System.Int32,System.Int32,System.Double@,System.String@,System.Double@)">
            <summary>
              Classify a related group of characters with an OCR classifier.
              Instance represents: Characters to be recognized.
            </summary>
            <param name="image">Gray values of the characters.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="expression">Expression describing the allowed word structure.</param>
            <param name="numAlternatives">Number of classes per character considered for the internal word correction. Default: 3</param>
            <param name="numCorrections">Maximum number of corrected characters. Default: 2</param>
            <param name="confidence">Confidence of the class of the characters.</param>
            <param name="word">Word text after classification and correction.</param>
            <param name="score">Measure of similarity between corrected word and uncorrected classification results.</param>
            <returns>Result of classifying the characters with the MLP.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DoOcrMultiClassMlp(HalconDotNet.HImage,HalconDotNet.HOCRMlp,HalconDotNet.HTuple@)">
            <summary>
              Classify multiple characters with an OCR classifier.
              Instance represents: Characters to be recognized.
            </summary>
            <param name="image">Gray values of the characters.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="confidence">Confidence of the class of the characters.</param>
            <returns>Result of classifying the characters with the MLP.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DoOcrMultiClassMlp(HalconDotNet.HImage,HalconDotNet.HOCRMlp,System.Double@)">
            <summary>
              Classify multiple characters with an OCR classifier.
              Instance represents: Characters to be recognized.
            </summary>
            <param name="image">Gray values of the characters.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="confidence">Confidence of the class of the characters.</param>
            <returns>Result of classifying the characters with the MLP.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DoOcrSingleClassMlp(HalconDotNet.HImage,HalconDotNet.HOCRMlp,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Classify a single character with an OCR classifier.
              Instance represents: Character to be recognized.
            </summary>
            <param name="image">Gray values of the character.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="num">Number of best classes to determine. Default: 1</param>
            <param name="confidence">Confidence(s) of the class(es) of the character.</param>
            <returns>Result of classifying the character with the MLP.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DoOcrSingleClassMlp(HalconDotNet.HImage,HalconDotNet.HOCRMlp,HalconDotNet.HTuple,System.Double@)">
            <summary>
              Classify a single character with an OCR classifier.
              Instance represents: Character to be recognized.
            </summary>
            <param name="image">Gray values of the character.</param>
            <param name="OCRHandle">Handle of the OCR classifier.</param>
            <param name="num">Number of best classes to determine. Default: 1</param>
            <param name="confidence">Confidence(s) of the class(es) of the character.</param>
            <returns>Result of classifying the character with the MLP.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DoOcrSingle(HalconDotNet.HImage,HalconDotNet.HOCRBox,HalconDotNet.HTuple@)">
            <summary>
              Classify one character.
              Instance represents: Character to be recognized.
            </summary>
            <param name="image">Gray values of the characters.</param>
            <param name="ocrHandle">ID of the OCR classifier.</param>
            <param name="confidences">Confidence values of the characters.</param>
            <returns>Classes (names) of the characters.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DoOcrMulti(HalconDotNet.HImage,HalconDotNet.HOCRBox,HalconDotNet.HTuple@)">
            <summary>
              Classify characters.
              Instance represents: Characters to be recognized.
            </summary>
            <param name="image">Gray values for the characters.</param>
            <param name="ocrHandle">ID of the OCR classifier.</param>
            <param name="confidence">Confidence values of the characters.</param>
            <returns>Class (name) of the characters.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DoOcrMulti(HalconDotNet.HImage,HalconDotNet.HOCRBox,System.Double@)">
            <summary>
              Classify characters.
              Instance represents: Characters to be recognized.
            </summary>
            <param name="image">Gray values for the characters.</param>
            <param name="ocrHandle">ID of the OCR classifier.</param>
            <param name="confidence">Confidence values of the characters.</param>
            <returns>Class (name) of the characters.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.TraindOcrClassBox(HalconDotNet.HImage,HalconDotNet.HOCRBox,HalconDotNet.HTuple)">
            <summary>
              Train an OCR classifier by the input of regions.
              Instance represents: Characters to be trained.
            </summary>
            <param name="image">Gray values for the characters.</param>
            <param name="ocrHandle">ID of the desired OCR-classifier.</param>
            <param name="classVal">Class (name) of the characters. Default: "a"</param>
            <returns>Average confidence during a re-classification of the trained characters.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.TraindOcrClassBox(HalconDotNet.HImage,HalconDotNet.HOCRBox,System.String)">
            <summary>
              Train an OCR classifier by the input of regions.
              Instance represents: Characters to be trained.
            </summary>
            <param name="image">Gray values for the characters.</param>
            <param name="ocrHandle">ID of the desired OCR-classifier.</param>
            <param name="classVal">Class (name) of the characters. Default: "a"</param>
            <returns>Average confidence during a re-classification of the trained characters.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ProtectOcrTrainf(System.String,HalconDotNet.HTuple,System.String)">
            <summary>Protection of training data.</summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="password">Passwords for protecting the training files.</param>
            <param name="trainingFileProtected">Names of the protected training files.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.ProtectOcrTrainf(System.String,System.String,System.String)">
            <summary>Protection of training data.</summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="password">Passwords for protecting the training files.</param>
            <param name="trainingFileProtected">Names of the protected training files.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.WriteOcrTrainf(HalconDotNet.HImage,HalconDotNet.HTuple,System.String)">
            <summary>
              Storing of training characters into a file.
              Instance represents: Characters to be trained.
            </summary>
            <param name="image">Gray values of the characters.</param>
            <param name="classVal">Class (name) of the characters.</param>
            <param name="trainingFile">Name of the training file. Default: "train_ocr"</param>
        </member>
        <member name="M:HalconDotNet.HRegion.WriteOcrTrainf(HalconDotNet.HImage,System.String,System.String)">
            <summary>
              Storing of training characters into a file.
              Instance represents: Characters to be trained.
            </summary>
            <param name="image">Gray values of the characters.</param>
            <param name="classVal">Class (name) of the characters.</param>
            <param name="trainingFile">Name of the training file. Default: "train_ocr"</param>
        </member>
        <member name="M:HalconDotNet.HRegion.SortRegion(System.String,System.String,System.String)">
            <summary>
              Sorting of regions with respect to their relative position.
              Instance represents: Regions to be sorted.
            </summary>
            <param name="sortMode">Kind of sorting. Default: "first_point"</param>
            <param name="order">Increasing or decreasing sorting order. Default: "true"</param>
            <param name="rowOrCol">Sorting first with respect to row, then to column. Default: "row"</param>
            <returns>Sorted regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.TestdOcrClassBox(HalconDotNet.HImage,HalconDotNet.HOCRBox,HalconDotNet.HTuple)">
            <summary>
              Test an OCR classifier.
              Instance represents: Characters to be tested.
            </summary>
            <param name="image">Gray values for the characters.</param>
            <param name="ocrHandle">ID of the desired OCR-classifier.</param>
            <param name="classVal">Class (name) of the characters. Default: "a"</param>
            <returns>Confidence for the character to belong to the class.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.TestdOcrClassBox(HalconDotNet.HImage,HalconDotNet.HOCRBox,System.String)">
            <summary>
              Test an OCR classifier.
              Instance represents: Characters to be tested.
            </summary>
            <param name="image">Gray values for the characters.</param>
            <param name="ocrHandle">ID of the desired OCR-classifier.</param>
            <param name="classVal">Class (name) of the characters. Default: "a"</param>
            <returns>Confidence for the character to belong to the class.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.AppendOcrTrainf(HalconDotNet.HImage,HalconDotNet.HTuple,System.String)">
            <summary>
              Add characters to a training file.
              Instance represents: Characters to be trained.
            </summary>
            <param name="image">Gray values of the characters.</param>
            <param name="classVal">Class (name) of the characters.</param>
            <param name="trainingFile">Name of the training file. Default: "train_ocr"</param>
        </member>
        <member name="M:HalconDotNet.HRegion.AppendOcrTrainf(HalconDotNet.HImage,System.String,System.String)">
            <summary>
              Add characters to a training file.
              Instance represents: Characters to be trained.
            </summary>
            <param name="image">Gray values of the characters.</param>
            <param name="classVal">Class (name) of the characters.</param>
            <param name="trainingFile">Name of the training file. Default: "train_ocr"</param>
        </member>
        <member name="M:HalconDotNet.HRegion.Pruning(System.Int32)">
            <summary>
              Prune the branches of a region.
              Instance represents: Regions to be processed.
            </summary>
            <param name="length">Length of the branches to be removed. Default: 2</param>
            <returns>Result of the pruning operation.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Boundary(System.String)">
            <summary>
              Reduce a region to its boundary.
              Instance represents: Regions for which the boundary is to be computed.
            </summary>
            <param name="boundaryType">Boundary type. Default: "inner"</param>
            <returns>Resulting boundaries.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Fitting(HalconDotNet.HRegion)">
            <summary>
              Perform a closing after an opening with multiple structuring elements.
              Instance represents: Regions to be processed.
            </summary>
            <param name="structElements">Structuring elements.</param>
            <returns>Fitted regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GenStructElements(System.String,System.Int32,System.Int32)">
            <summary>
              Generate standard structuring elements.
              Modified instance represents: Generated structuring elements.
            </summary>
            <param name="type">Type of structuring element to generate. Default: "noise"</param>
            <param name="row">Row coordinate of the reference point. Default: 1</param>
            <param name="column">Column coordinate of the reference point. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HRegion.TransposeRegion(System.Int32,System.Int32)">
            <summary>
              Reflect a region about a point.
              Instance represents: Region to be reflected.
            </summary>
            <param name="row">Row coordinate of the reference point. Default: 0</param>
            <param name="column">Column coordinate of the reference point. Default: 0</param>
            <returns>Transposed region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ThinningSeq(System.String,HalconDotNet.HTuple)">
            <summary>
              Remove the result of a hit-or-miss operation from a region (sequential).
              Instance represents: Regions to be processed.
            </summary>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "l"</param>
            <param name="iterations">Number of iterations. For 'f', 'f2', 'h' and 'i' the only useful value is 1. Default: 20</param>
            <returns>Result of the thinning operator.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ThinningSeq(System.String,System.Int32)">
            <summary>
              Remove the result of a hit-or-miss operation from a region (sequential).
              Instance represents: Regions to be processed.
            </summary>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "l"</param>
            <param name="iterations">Number of iterations. For 'f', 'f2', 'h' and 'i' the only useful value is 1. Default: 20</param>
            <returns>Result of the thinning operator.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ThinningGolay(System.String,System.Int32)">
            <summary>
              Remove the result of a hit-or-miss operation from a region (using a Golay structuring element).
              Instance represents: Regions to be processed.
            </summary>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="rotation">Rotation of the Golay element. Depending on the element, not all rotations are valid. Default: 0</param>
            <returns>Result of the thinning operator.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Thinning(HalconDotNet.HRegion,HalconDotNet.HRegion,System.Int32,System.Int32,System.Int32)">
            <summary>
              Remove the result of a hit-or-miss operation from a region.
              Instance represents: Regions to be processed.
            </summary>
            <param name="structElement1">Structuring element for the foreground.</param>
            <param name="structElement2">Structuring element for the background.</param>
            <param name="row">Row coordinate of the reference point. Default: 0</param>
            <param name="column">Column coordinate of the reference point. Default: 0</param>
            <param name="iterations">Number of iterations. Default: 1</param>
            <returns>Result of the thinning operator.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ThickeningSeq(System.String,System.Int32)">
            <summary>
              Add the result of a hit-or-miss operation to a region (sequential).
              Instance represents: Regions to be processed.
            </summary>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="iterations">Number of iterations. Default: 1</param>
            <returns>Result of the thickening operator.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ThickeningGolay(System.String,System.Int32)">
            <summary>
              Add the result of a hit-or-miss operation to a region (using a Golay structuring element).
              Instance represents: Regions to be processed.
            </summary>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="rotation">Rotation of the Golay element. Depending on the element, not all rotations are valid. Default: 0</param>
            <returns>Result of the thickening operator.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Thickening(HalconDotNet.HRegion,HalconDotNet.HRegion,System.Int32,System.Int32,System.Int32)">
            <summary>
              Add the result of a hit-or-miss operation to a region.
              Instance represents: Regions to be processed.
            </summary>
            <param name="structElement1">Structuring element for the foreground.</param>
            <param name="structElement2">Structuring element for the background.</param>
            <param name="row">Row coordinate of the reference point. Default: 16</param>
            <param name="column">Column coordinate of the reference point. Default: 16</param>
            <param name="iterations">Number of iterations. Default: 1</param>
            <returns>Result of the thickening operator.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.HitOrMissSeq(System.String)">
            <summary>
              Hit-or-miss operation for regions using the Golay alphabet (sequential).
              Instance represents: Regions to be processed.
            </summary>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <returns>Result of the hit-or-miss operation.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.HitOrMissGolay(System.String,System.Int32)">
            <summary>
              Hit-or-miss operation for regions using the Golay alphabet.
              Instance represents: Regions to be processed.
            </summary>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="rotation">Rotation of the Golay element. Depending on the element, not all rotations are valid. Default: 0</param>
            <returns>Result of the hit-or-miss operation.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.HitOrMiss(HalconDotNet.HRegion,HalconDotNet.HRegion,System.Int32,System.Int32)">
            <summary>
              Hit-or-miss operation for regions.
              Instance represents: Regions to be processed.
            </summary>
            <param name="structElement1">Erosion mask for the input regions.</param>
            <param name="structElement2">Erosion mask for the complements of the input regions.</param>
            <param name="row">Row coordinate of the reference point. Default: 16</param>
            <param name="column">Column coordinate of the reference point. Default: 16</param>
            <returns>Result of the hit-or-miss operation.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GolayElements(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
              Generate the structuring elements of the Golay alphabet.
              Modified instance represents: Structuring element for the foreground.
            </summary>
            <param name="golayElement">Name of the structuring element. Default: "l"</param>
            <param name="rotation">Rotation of the Golay element. Depending on the element, not all rotations are valid. Default: 0</param>
            <param name="row">Row coordinate of the reference point. Default: 16</param>
            <param name="column">Column coordinate of the reference point. Default: 16</param>
            <returns>Structuring element for the background.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MorphSkiz(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Thinning of a region.
              Instance represents: Regions to be thinned.
            </summary>
            <param name="iterations1">Number of iterations for the sequential thinning with the element 'l' of the Golay alphabet. Default: 100</param>
            <param name="iterations2">Number of iterations for the sequential thinning with the element 'e' of the Golay alphabet. Default: 1</param>
            <returns>Result of the skiz operator.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MorphSkiz(System.Int32,System.Int32)">
            <summary>
              Thinning of a region.
              Instance represents: Regions to be thinned.
            </summary>
            <param name="iterations1">Number of iterations for the sequential thinning with the element 'l' of the Golay alphabet. Default: 100</param>
            <param name="iterations2">Number of iterations for the sequential thinning with the element 'e' of the Golay alphabet. Default: 1</param>
            <returns>Result of the skiz operator.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MorphSkeleton">
            <summary>
              Compute the morphological skeleton of a region.
              Instance represents: Regions to be processed.
            </summary>
            <returns>Resulting morphological skeleton.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MorphHat(HalconDotNet.HRegion)">
            <summary>
              Compute the union of bottom_hat and top_hat.
              Instance represents: Regions to be processed.
            </summary>
            <param name="structElement">Structuring element (position-invariant).</param>
            <returns>Union of top hat and bottom hat.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.BottomHat(HalconDotNet.HRegion)">
            <summary>
              Compute the bottom hat of regions.
              Instance represents: Regions to be processed.
            </summary>
            <param name="structElement">Structuring element (position independent).</param>
            <returns>Result of the bottom hat operator.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.TopHat(HalconDotNet.HRegion)">
            <summary>
              Compute the top hat of regions.
              Instance represents: Regions to be processed.
            </summary>
            <param name="structElement">Structuring element (position independent).</param>
            <returns>Result of the top hat operator.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MinkowskiSub2(HalconDotNet.HRegion,System.Int32,System.Int32,System.Int32)">
            <summary>
              Erode a region (using a reference point).
              Instance represents: Regions to be eroded.
            </summary>
            <param name="structElement">Structuring element.</param>
            <param name="row">Row coordinate of the reference point. Default: 0</param>
            <param name="column">Column coordinate of the reference point. Default: 0</param>
            <param name="iterations">Number of iterations. Default: 1</param>
            <returns>Eroded regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MinkowskiSub1(HalconDotNet.HRegion,System.Int32)">
            <summary>
              Erode a region.
              Instance represents: Regions to be eroded.
            </summary>
            <param name="structElement">Structuring element.</param>
            <param name="iterations">Number of iterations. Default: 1</param>
            <returns>Eroded regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MinkowskiAdd2(HalconDotNet.HRegion,System.Int32,System.Int32,System.Int32)">
            <summary>
              Dilate a region (using a reference point).
              Instance represents: Regions to be dilated.
            </summary>
            <param name="structElement">Structuring element.</param>
            <param name="row">Row coordinate of the reference point.</param>
            <param name="column">Column coordinate of the reference point.</param>
            <param name="iterations">Number of iterations. Default: 1</param>
            <returns>Dilated regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MinkowskiAdd1(HalconDotNet.HRegion,System.Int32)">
            <summary>
              Perform a Minkowski addition on a region.
              Instance represents: Regions to be dilated.
            </summary>
            <param name="structElement">Structuring element.</param>
            <param name="iterations">Number of iterations. Default: 1</param>
            <returns>Dilated regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ClosingRectangle1(System.Int32,System.Int32)">
            <summary>
              Close a region with a rectangular structuring element.
              Instance represents: Regions to be closed.
            </summary>
            <param name="width">Width of the structuring rectangle. Default: 10</param>
            <param name="height">Height of the structuring rectangle. Default: 10</param>
            <returns>Closed regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ClosingGolay(System.String,System.Int32)">
            <summary>
              Close a region with an element from the Golay alphabet.
              Instance represents: Regions to be closed.
            </summary>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="rotation">Rotation of the Golay element. Depending on the element, not all rotations are valid. Default: 0</param>
            <returns>Closed regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ClosingCircle(HalconDotNet.HTuple)">
            <summary>
              Close a region with a circular structuring element.
              Instance represents: Regions to be closed.
            </summary>
            <param name="radius">Radius of the circular structuring element. Default: 3.5</param>
            <returns>Closed regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ClosingCircle(System.Double)">
            <summary>
              Close a region with a circular structuring element.
              Instance represents: Regions to be closed.
            </summary>
            <param name="radius">Radius of the circular structuring element. Default: 3.5</param>
            <returns>Closed regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Closing(HalconDotNet.HRegion)">
            <summary>
              Close a region.
              Instance represents: Regions to be closed.
            </summary>
            <param name="structElement">Structuring element (position-invariant).</param>
            <returns>Closed regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.OpeningSeg(HalconDotNet.HRegion)">
            <summary>
              Separate overlapping regions.
              Instance represents: Regions to be opened.
            </summary>
            <param name="structElement">Structuring element (position-invariant).</param>
            <returns>Opened regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.OpeningGolay(System.String,System.Int32)">
            <summary>
              Open a region with an element from the Golay alphabet.
              Instance represents: Regions to be opened.
            </summary>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="rotation">Rotation of the Golay element. Depending on the element, not all rotations are valid. Default: 0</param>
            <returns>Opened regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.OpeningRectangle1(System.Int32,System.Int32)">
            <summary>
              Open a region with a rectangular structuring element.
              Instance represents: Regions to be opened.
            </summary>
            <param name="width">Width of the structuring rectangle. Default: 10</param>
            <param name="height">Height of the structuring rectangle. Default: 10</param>
            <returns>Opened regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.OpeningCircle(HalconDotNet.HTuple)">
            <summary>
              Open a region with a circular structuring element.
              Instance represents: Regions to be opened.
            </summary>
            <param name="radius">Radius of the circular structuring element. Default: 3.5</param>
            <returns>Opened regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.OpeningCircle(System.Double)">
            <summary>
              Open a region with a circular structuring element.
              Instance represents: Regions to be opened.
            </summary>
            <param name="radius">Radius of the circular structuring element. Default: 3.5</param>
            <returns>Opened regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Opening(HalconDotNet.HRegion)">
            <summary>
              Open a region.
              Instance represents: Regions to be opened.
            </summary>
            <param name="structElement">Structuring element (position-invariant).</param>
            <returns>Opened regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ErosionSeq(System.String,System.Int32)">
            <summary>
              Erode a region sequentially.
              Instance represents: Regions to be eroded.
            </summary>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="iterations">Number of iterations. Default: 1</param>
            <returns>Eroded regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ErosionGolay(System.String,System.Int32,System.Int32)">
            <summary>
              Erode a region with an element from the Golay alphabet.
              Instance represents: Regions to be eroded.
            </summary>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="iterations">Number of iterations. Default: 1</param>
            <param name="rotation">Rotation of the Golay element. Depending on the element, not all rotations are valid. Default: 0</param>
            <returns>Eroded regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ErosionRectangle1(System.Int32,System.Int32)">
            <summary>
              Erode a region with a rectangular structuring element.
              Instance represents: Regions to be eroded.
            </summary>
            <param name="width">Width of the structuring rectangle. Default: 11</param>
            <param name="height">Height of the structuring rectangle. Default: 11</param>
            <returns>Eroded regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ErosionCircle(HalconDotNet.HTuple)">
            <summary>
              Erode a region with a circular structuring element.
              Instance represents: Regions to be eroded.
            </summary>
            <param name="radius">Radius of the circular structuring element. Default: 3.5</param>
            <returns>Eroded regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ErosionCircle(System.Double)">
            <summary>
              Erode a region with a circular structuring element.
              Instance represents: Regions to be eroded.
            </summary>
            <param name="radius">Radius of the circular structuring element. Default: 3.5</param>
            <returns>Eroded regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Erosion2(HalconDotNet.HRegion,System.Int32,System.Int32,System.Int32)">
            <summary>
              Erode a region (using a reference point).
              Instance represents: Regions to be eroded.
            </summary>
            <param name="structElement">Structuring element.</param>
            <param name="row">Row coordinate of the reference point. Default: 0</param>
            <param name="column">Column coordinate of the reference point. Default: 0</param>
            <param name="iterations">Number of iterations. Default: 1</param>
            <returns>Eroded regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Erosion1(HalconDotNet.HRegion,System.Int32)">
            <summary>
              Erode a region.
              Instance represents: Regions to be eroded.
            </summary>
            <param name="structElement">Structuring element.</param>
            <param name="iterations">Number of iterations. Default: 1</param>
            <returns>Eroded regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DilationSeq(System.String,System.Int32)">
            <summary>
              Dilate a region sequentially.
              Instance represents: Regions to be dilated.
            </summary>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="iterations">Number of iterations. Default: 1</param>
            <returns>Dilated regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DilationGolay(System.String,System.Int32,System.Int32)">
            <summary>
              Dilate a region with an element from the Golay alphabet.
              Instance represents: Regions to be dilated.
            </summary>
            <param name="golayElement">Structuring element from the Golay alphabet. Default: "h"</param>
            <param name="iterations">Number of iterations. Default: 1</param>
            <param name="rotation">Rotation of the Golay element. Depending on the element, not all rotations are valid. Default: 0</param>
            <returns>Dilated regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DilationRectangle1(System.Int32,System.Int32)">
            <summary>
              Dilate a region with a rectangular structuring element.
              Instance represents: Regions to be dilated.
            </summary>
            <param name="width">Width of the structuring rectangle. Default: 11</param>
            <param name="height">Height of the structuring rectangle. Default: 11</param>
            <returns>Dilated regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DilationCircle(HalconDotNet.HTuple)">
            <summary>
              Dilate a region with a circular structuring element.
              Instance represents: Regions to be dilated.
            </summary>
            <param name="radius">Radius of the circular structuring element. Default: 3.5</param>
            <returns>Dilated regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DilationCircle(System.Double)">
            <summary>
              Dilate a region with a circular structuring element.
              Instance represents: Regions to be dilated.
            </summary>
            <param name="radius">Radius of the circular structuring element. Default: 3.5</param>
            <returns>Dilated regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Dilation2(HalconDotNet.HRegion,System.Int32,System.Int32,System.Int32)">
            <summary>
              Dilate a region (using a reference point).
              Instance represents: Regions to be dilated.
            </summary>
            <param name="structElement">Structuring element.</param>
            <param name="row">Row coordinate of the reference point. Default: 0</param>
            <param name="column">Column coordinate of the reference point. Default: 0</param>
            <param name="iterations">Number of iterations. Default: 1</param>
            <returns>Dilated regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Dilation1(HalconDotNet.HRegion,System.Int32)">
            <summary>
              Dilate a region.
              Instance represents: Regions to be dilated.
            </summary>
            <param name="structElement">Structuring element.</param>
            <param name="iterations">Number of iterations. Default: 1</param>
            <returns>Dilated regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.AddChannels(HalconDotNet.HImage)">
            <summary>
              Add gray values to regions.
              Instance represents: Input regions (without pixel values).
            </summary>
            <param name="image">Input image with pixel values for regions.</param>
            <returns>Output image(s) with regions and pixel values (one image per input region).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.HoughCircles(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Centres of circles for a specific radius.
              Instance represents: Binary edge image in which the circles are to be detected.
            </summary>
            <param name="radius">Radius of the circle to be searched in the image. Default: 12</param>
            <param name="percent">Indicates the percentage (approximately) of the (ideal) circle which must be present in the edge image RegionIn. Default: 60</param>
            <param name="mode">The modus defines the position of the circle in question: 0 - the radius is equivalent to the outer border of the set pixels. 1 - the radius is equivalent to the centres of the circle lines´ pixels. 2 - both 0 and 1 (a little more fuzzy, but more reliable in contrast to circles set slightly differently, necessitates 50  </param>
            <returns>Centres of those circles which are included in the edge image by Percent percent.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.HoughCircles(System.Int32,System.Int32,System.Int32)">
            <summary>
              Centres of circles for a specific radius.
              Instance represents: Binary edge image in which the circles are to be detected.
            </summary>
            <param name="radius">Radius of the circle to be searched in the image. Default: 12</param>
            <param name="percent">Indicates the percentage (approximately) of the (ideal) circle which must be present in the edge image RegionIn. Default: 60</param>
            <param name="mode">The modus defines the position of the circle in question: 0 - the radius is equivalent to the outer border of the set pixels. 1 - the radius is equivalent to the centres of the circle lines´ pixels. 2 - both 0 and 1 (a little more fuzzy, but more reliable in contrast to circles set slightly differently, necessitates 50  </param>
            <returns>Centres of those circles which are included in the edge image by Percent percent.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.HoughCircleTrans(HalconDotNet.HTuple)">
            <summary>
              Return the Hough-Transform for circles with a given radius.
              Instance represents: Binary edge image in which the circles are to be detected.
            </summary>
            <param name="radius">Radius of the circle to be searched in the image. Default: 12</param>
            <returns>Hough transform for circles with a given radius.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.HoughCircleTrans(System.Int32)">
            <summary>
              Return the Hough-Transform for circles with a given radius.
              Instance represents: Binary edge image in which the circles are to be detected.
            </summary>
            <param name="radius">Radius of the circle to be searched in the image. Default: 12</param>
            <returns>Hough transform for circles with a given radius.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.HoughLines(System.Int32,System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple@)">
            <summary>
              Detect lines in edge images with the help of the Hough transform and returns it in HNF.
              Instance represents: Binary edge image in which the lines are to be detected.
            </summary>
            <param name="angleResolution">Adjusting the resolution in the angle area. Default: 4</param>
            <param name="threshold">Threshold value in the Hough image. Default: 100</param>
            <param name="angleGap">Minimal distance of two maxima in the Hough image (direction: angle). Default: 5</param>
            <param name="distGap">Minimal distance of two maxima in the Hough image (direction: distance). Default: 5</param>
            <param name="dist">Distance of the detected lines from the origin.</param>
            <returns>Angles (in radians) of the detected lines' normal vectors.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.HoughLineTrans(System.Int32)">
            <summary>
              Produce the Hough transform for lines within regions.
              Instance represents: Binary edge image in which lines are to be detected.
            </summary>
            <param name="angleResolution">Adjusting the resolution in the angle area. Default: 4</param>
            <returns>Hough transform for lines.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.SelectMatchingLines(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Select those lines from a set of lines (in HNF) which fit best into a region.
              Instance represents: Region in which the lines are to be matched.
            </summary>
            <param name="angleIn">Angles (in radians) of the normal vectors of the input lines.</param>
            <param name="distIn">Distances of the input lines form the origin.</param>
            <param name="lineWidth">Widths of the lines. Default: 7</param>
            <param name="thresh">Threshold value for the number of line points in the region. Default: 100</param>
            <param name="angleOut">Angles (in radians) of the normal vectors of the selected lines.</param>
            <param name="distOut">Distances of the selected lines from the origin.</param>
            <returns>Region array containing the matched lines.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.SelectMatchingLines(System.Double,System.Double,System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
              Select those lines from a set of lines (in HNF) which fit best into a region.
              Instance represents: Region in which the lines are to be matched.
            </summary>
            <param name="angleIn">Angles (in radians) of the normal vectors of the input lines.</param>
            <param name="distIn">Distances of the input lines form the origin.</param>
            <param name="lineWidth">Widths of the lines. Default: 7</param>
            <param name="thresh">Threshold value for the number of line points in the region. Default: 100</param>
            <param name="angleOut">Angles (in radians) of the normal vectors of the selected lines.</param>
            <param name="distOut">Distances of the selected lines from the origin.</param>
            <returns>Region array containing the matched lines.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GetIcon(HalconDotNet.HWindow)">
            <summary>
              Query the icon for region output
              Modified instance represents: Icon for the regions center of gravity.
            </summary>
            <param name="windowHandle">Window_id.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.SetIcon(HalconDotNet.HWindow)">
            <summary>
              Icon definition for region output.
              Instance represents: Icon for center of gravity.
            </summary>
            <param name="windowHandle">Window_id.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.DispRegion(HalconDotNet.HWindow)">
            <summary>
              Displays regions in a window.
              Instance represents: Regions to display.
            </summary>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.DragRegion3(HalconDotNet.HRegion,HalconDotNet.HWindow,System.Int32,System.Int32)">
            <summary>
              Interactive movement of a region with restriction of positions.
              Instance represents: Regions to move.
            </summary>
            <param name="maskRegion">Points on which it is allowed for a region to move.</param>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row index of the reference point. Default: 100</param>
            <param name="column">Column index of the reference point. Default: 100</param>
            <returns>Moved regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DragRegion2(HalconDotNet.HWindow,System.Int32,System.Int32)">
            <summary>
              Interactive movement of a region with fixpoint specification.
              Instance represents: Regions to move.
            </summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row index of the reference point. Default: 100</param>
            <param name="column">Column index of the reference point. Default: 100</param>
            <returns>Moved regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DragRegion1(HalconDotNet.HWindow)">
            <summary>
              Interactive moving of a region.
              Instance represents: Regions to move.
            </summary>
            <param name="windowHandle">Window identifier.</param>
            <returns>Moved Regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DrawRegion(HalconDotNet.HWindow)">
            <summary>
              Interactive drawing of a closed region.
              Modified instance represents: Interactive created region.
            </summary>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.DrawPolygon(HalconDotNet.HWindow)">
            <summary>
              Interactive drawing of a polygon row.
              Modified instance represents: Region, which encompasses all painted points.
            </summary>
            <param name="windowHandle">Window identifier.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.DistanceSr(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Calculate the distance between a line segment and one region.
              Instance represents: Input region.
            </summary>
            <param name="row1">Row coordinate of the first point of the line segment.</param>
            <param name="column1">Column coordinate of the first point of the line segment.</param>
            <param name="row2">Row coordinate of the second point of the line segment.</param>
            <param name="column2">Column coordinate of the second point of the line segment.</param>
            <param name="distanceMin">Minimum distance between the line segment and the region.</param>
            <param name="distanceMax">Maximum distance between the line segment and the region.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.DistanceSr(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
              Calculate the distance between a line segment and one region.
              Instance represents: Input region.
            </summary>
            <param name="row1">Row coordinate of the first point of the line segment.</param>
            <param name="column1">Column coordinate of the first point of the line segment.</param>
            <param name="row2">Row coordinate of the second point of the line segment.</param>
            <param name="column2">Column coordinate of the second point of the line segment.</param>
            <param name="distanceMin">Minimum distance between the line segment and the region.</param>
            <param name="distanceMax">Maximum distance between the line segment and the region.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.DistanceLr(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Calculate the distance between a line and a region.
              Instance represents: Input region.
            </summary>
            <param name="row1">Row coordinate of the first point of the line.</param>
            <param name="column1">Column coordinate of the first point of the line.</param>
            <param name="row2">Row coordinate of the second point of the line.</param>
            <param name="column2">Column coordinate of the second point of the line.</param>
            <param name="distanceMin">Minimum distance between the line and the region</param>
            <param name="distanceMax">Maximum distance between the line and the region</param>
        </member>
        <member name="M:HalconDotNet.HRegion.DistanceLr(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
              Calculate the distance between a line and a region.
              Instance represents: Input region.
            </summary>
            <param name="row1">Row coordinate of the first point of the line.</param>
            <param name="column1">Column coordinate of the first point of the line.</param>
            <param name="row2">Row coordinate of the second point of the line.</param>
            <param name="column2">Column coordinate of the second point of the line.</param>
            <param name="distanceMin">Minimum distance between the line and the region</param>
            <param name="distanceMax">Maximum distance between the line and the region</param>
        </member>
        <member name="M:HalconDotNet.HRegion.DistancePr(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Calculate the distance between a point and a region.
              Instance represents: Input region.
            </summary>
            <param name="row">Row coordinate of the point.</param>
            <param name="column">Column coordinate of the point.</param>
            <param name="distanceMin">Minimum distance between the point and the region.</param>
            <param name="distanceMax">Maximum distance between the point and the region.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.DistancePr(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
              Calculate the distance between a point and a region.
              Instance represents: Input region.
            </summary>
            <param name="row">Row coordinate of the point.</param>
            <param name="column">Column coordinate of the point.</param>
            <param name="distanceMin">Minimum distance between the point and the region.</param>
            <param name="distanceMax">Maximum distance between the point and the region.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.NoiseDistributionMean(HalconDotNet.HImage,System.Int32)">
            <summary>
              Determine the noise distribution of an image.
              Instance represents: Region from which the noise distribution is to be estimated.
            </summary>
            <param name="image">Corresponding image.</param>
            <param name="filterSize">Size of the mean filter. Default: 21</param>
            <returns>Noise distribution of all input regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.FuzzyEntropy(HalconDotNet.HImage,System.Int32,System.Int32)">
            <summary>
              Determine the fuzzy entropy of regions.
              Instance represents: Regions for which the fuzzy entropy is to be calculated.
            </summary>
            <param name="image">Input image containing the fuzzy membership values.</param>
            <param name="apar">Start of the fuzzy function. Default: 0</param>
            <param name="cpar">End of the fuzzy function. Default: 255</param>
            <returns>Fuzzy entropy of a region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.FuzzyPerimeter(HalconDotNet.HImage,System.Int32,System.Int32)">
            <summary>
              Calculate the fuzzy perimeter of a region.
              Instance represents: Regions for which the fuzzy perimeter is to be calculated.
            </summary>
            <param name="image">Input image containing the fuzzy membership values.</param>
            <param name="apar">Start of the fuzzy function. Default: 0</param>
            <param name="cpar">End of the fuzzy function. Default: 255</param>
            <returns>Fuzzy perimeter of a region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.RegionToMean(HalconDotNet.HImage)">
            <summary>
              Paint regions with their average gray value.
              Instance represents: Input regions.
            </summary>
            <param name="image">original gray-value image.</param>
            <returns>Result image with painted regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.CloseEdgesLength(HalconDotNet.HImage,System.Int32,System.Int32)">
            <summary>
              Close edge gaps using the edge amplitude image.
              Instance represents: Region containing one pixel thick edges.
            </summary>
            <param name="gradient">Edge amplitude (gradient) image.</param>
            <param name="minAmplitude">Minimum edge amplitude. Default: 16</param>
            <param name="maxGapLength">Maximal number of points by which edges are extended. Default: 3</param>
            <returns>Region containing closed edges.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.CloseEdges(HalconDotNet.HImage,System.Int32)">
            <summary>
              Close edge gaps using the edge amplitude image.
              Instance represents: Region containing one pixel thick edges.
            </summary>
            <param name="edgeImage">Edge amplitude (gradient) image.</param>
            <param name="minAmplitude">Minimum edge amplitude. Default: 16</param>
            <returns>Region containing closed edges.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DeserializeRegion(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized region.
              Modified instance represents: Region.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.SerializeRegion">
            <summary>
              Serialize a region.
              Instance represents: Region.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.WriteRegion(System.String)">
            <summary>
              Write regions to a file.
              Instance represents: Region of the images which are returned.
            </summary>
            <param name="fileName">Name of region file. Default: "region.hobj"</param>
        </member>
        <member name="M:HalconDotNet.HRegion.ReadRegion(System.String)">
            <summary>
              Read binary images or HALCON regions.
              Modified instance represents: Read region.
            </summary>
            <param name="fileName">Name of the region to be read.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.MomentsRegionCentralInvar(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Geometric moments of regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="PSI2">Moment of 2nd order.</param>
            <param name="PSI3">Moment of 2nd order.</param>
            <param name="PSI4">Moment of 2nd order.</param>
            <returns>Moment of 2nd order.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MomentsRegionCentralInvar(System.Double@,System.Double@,System.Double@)">
            <summary>
              Geometric moments of regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="PSI2">Moment of 2nd order.</param>
            <param name="PSI3">Moment of 2nd order.</param>
            <param name="PSI4">Moment of 2nd order.</param>
            <returns>Moment of 2nd order.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MomentsRegionCentral(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Geometric moments of regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="i2">Moment of 2nd order.</param>
            <param name="i3">Moment of 2nd order.</param>
            <param name="i4">Moment of 3rd order.</param>
            <returns>Moment of 2nd order.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MomentsRegionCentral(System.Double@,System.Double@,System.Double@)">
            <summary>
              Geometric moments of regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="i2">Moment of 2nd order.</param>
            <param name="i3">Moment of 2nd order.</param>
            <param name="i4">Moment of 3rd order.</param>
            <returns>Moment of 2nd order.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MomentsRegion3rdInvar(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Geometric moments of regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="m12">Moment of 3rd order (column-dependent).</param>
            <param name="m03">Moment of 3rd order (column-dependent).</param>
            <param name="m30">Moment of 3rd order (line-dependent).</param>
            <returns>Moment of 3rd order (line-dependent).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MomentsRegion3rdInvar(System.Double@,System.Double@,System.Double@)">
            <summary>
              Geometric moments of regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="m12">Moment of 3rd order (column-dependent).</param>
            <param name="m03">Moment of 3rd order (column-dependent).</param>
            <param name="m30">Moment of 3rd order (line-dependent).</param>
            <returns>Moment of 3rd order (line-dependent).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MomentsRegion3rd(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Geometric moments of regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="m12">Moment of 3rd order (column-dependent).</param>
            <param name="m03">Moment of 3rd order (column-dependent).</param>
            <param name="m30">Moment of 3rd order (line-dependent).</param>
            <returns>Moment of 3rd order (line-dependent).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MomentsRegion3rd(System.Double@,System.Double@,System.Double@)">
            <summary>
              Geometric moments of regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="m12">Moment of 3rd order (column-dependent).</param>
            <param name="m03">Moment of 3rd order (column-dependent).</param>
            <param name="m30">Moment of 3rd order (line-dependent).</param>
            <returns>Moment of 3rd order (line-dependent).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.SmallestRectangle2(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Smallest surrounding rectangle with any orientation.
              Instance represents: Regions to be examined.
            </summary>
            <param name="row">Line index of the center.</param>
            <param name="column">Column index of the center.</param>
            <param name="phi">Orientation of the surrounding rectangle (arc measure)</param>
            <param name="length1">First radius (half length) of the surrounding rectangle.</param>
            <param name="length2">Second radius (half width) of the surrounding rectangle.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.SmallestRectangle2(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Smallest surrounding rectangle with any orientation.
              Instance represents: Regions to be examined.
            </summary>
            <param name="row">Line index of the center.</param>
            <param name="column">Column index of the center.</param>
            <param name="phi">Orientation of the surrounding rectangle (arc measure)</param>
            <param name="length1">First radius (half length) of the surrounding rectangle.</param>
            <param name="length2">Second radius (half width) of the surrounding rectangle.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.SmallestRectangle1(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Surrounding rectangle parallel to the coordinate axes.
              Instance represents: Regions to be examined.
            </summary>
            <param name="row1">Line index of upper left corner point.</param>
            <param name="column1">Column index of upper left corner point.</param>
            <param name="row2">Line index of lower right corner point.</param>
            <param name="column2">Column index of lower right corner point.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.SmallestRectangle1(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Surrounding rectangle parallel to the coordinate axes.
              Instance represents: Regions to be examined.
            </summary>
            <param name="row1">Line index of upper left corner point.</param>
            <param name="column1">Column index of upper left corner point.</param>
            <param name="row2">Line index of lower right corner point.</param>
            <param name="column2">Column index of lower right corner point.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.SmallestCircle(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Smallest surrounding circle of a region.
              Instance represents: Regions to be examined.
            </summary>
            <param name="row">Line index of the center.</param>
            <param name="column">Column index of the center.</param>
            <param name="radius">Radius of the surrounding circle.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.SmallestCircle(System.Double@,System.Double@,System.Double@)">
            <summary>
              Smallest surrounding circle of a region.
              Instance represents: Regions to be examined.
            </summary>
            <param name="row">Line index of the center.</param>
            <param name="column">Column index of the center.</param>
            <param name="radius">Radius of the surrounding circle.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.SelectShapeProto(HalconDotNet.HRegion,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Choose regions having a certain relation to each other.
              Instance represents: Regions to be examined.
            </summary>
            <param name="pattern">Region compared to Regions.</param>
            <param name="feature">Shape features to be checked. Default: "covers"</param>
            <param name="min">Lower border of feature. Default: 50.0</param>
            <param name="max">Upper border of the feature. Default: 100.0</param>
            <returns>Regions fulfilling the condition.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.SelectShapeProto(HalconDotNet.HRegion,System.String,System.Double,System.Double)">
            <summary>
              Choose regions having a certain relation to each other.
              Instance represents: Regions to be examined.
            </summary>
            <param name="pattern">Region compared to Regions.</param>
            <param name="feature">Shape features to be checked. Default: "covers"</param>
            <param name="min">Lower border of feature. Default: 50.0</param>
            <param name="max">Upper border of the feature. Default: 100.0</param>
            <returns>Regions fulfilling the condition.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.RegionFeatures(HalconDotNet.HTuple)">
            <summary>
              Calculate shape features of regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="features">Shape features to be calculated. Default: "area"</param>
            <returns>The calculated features.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.RegionFeatures(System.String)">
            <summary>
              Calculate shape features of regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="features">Shape features to be calculated. Default: "area"</param>
            <returns>The calculated features.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.SelectShape(HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Choose regions with the aid of shape features.
              Instance represents: Regions to be examined.
            </summary>
            <param name="features">Shape features to be checked. Default: "area"</param>
            <param name="operation">Linkage type of the individual features. Default: "and"</param>
            <param name="min">Lower limits of the features or 'min'. Default: 150.0</param>
            <param name="max">Upper limits of the features or 'max'. Default: 99999.0</param>
            <returns>Regions fulfilling the condition.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.SelectShape(System.String,System.String,System.Double,System.Double)">
            <summary>
              Choose regions with the aid of shape features.
              Instance represents: Regions to be examined.
            </summary>
            <param name="features">Shape features to be checked. Default: "area"</param>
            <param name="operation">Linkage type of the individual features. Default: "and"</param>
            <param name="min">Lower limits of the features or 'min'. Default: 150.0</param>
            <param name="max">Upper limits of the features or 'max'. Default: 99999.0</param>
            <returns>Regions fulfilling the condition.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.RunlengthFeatures(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Characteristic values for runlength coding of regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="KFactor">Storing factor in relation to a square.</param>
            <param name="LFactor">Mean number of runs per line.</param>
            <param name="meanLength">Mean length of runs.</param>
            <param name="bytes">Number of bytes necessary for coding the region.</param>
            <returns>Number of runs.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.RunlengthFeatures(System.Double@,System.Double@,System.Double@,System.Int32@)">
            <summary>
              Characteristic values for runlength coding of regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="KFactor">Storing factor in relation to a square.</param>
            <param name="LFactor">Mean number of runs per line.</param>
            <param name="meanLength">Mean length of runs.</param>
            <param name="bytes">Number of bytes necessary for coding the region.</param>
            <returns>Number of runs.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.FindNeighbors(HalconDotNet.HRegion,System.Int32,HalconDotNet.HTuple@)">
            <summary>
              Search direct neighbors.
              Instance represents: Starting regions.
            </summary>
            <param name="regions2">Comparative regions.</param>
            <param name="maxDistance">Maximal distance of regions. Default: 1</param>
            <param name="regionIndex2">Indices of the found regions from Regions2.</param>
            <returns>Indices of the found regions from Regions1.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MomentsRegion2ndRelInvar(HalconDotNet.HTuple@)">
            <summary>
              Geometric moments of regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="PHI2">Moment of 2nd order.</param>
            <returns>Moment of 2nd order.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MomentsRegion2ndRelInvar(System.Double@)">
            <summary>
              Geometric moments of regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="PHI2">Moment of 2nd order.</param>
            <returns>Moment of 2nd order.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MomentsRegion2ndInvar(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Geometric moments of regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="m20">Moment of 2nd order (line-dependent).</param>
            <param name="m02">Moment of 2nd order (column-dependent).</param>
            <returns>Product of inertia of the axes through the center parallel to the coordinate axes.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MomentsRegion2ndInvar(System.Double@,System.Double@)">
            <summary>
              Geometric moments of regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="m20">Moment of 2nd order (line-dependent).</param>
            <param name="m02">Moment of 2nd order (column-dependent).</param>
            <returns>Product of inertia of the axes through the center parallel to the coordinate axes.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MomentsRegion2nd(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Calculate the geometric moments of regions.
              Instance represents: Input regions.
            </summary>
            <param name="m20">Moment of 2nd order (row-dependent).</param>
            <param name="m02">Moment of 2nd order (column-dependent).</param>
            <param name="ia">Length of the major axis of the input region.</param>
            <param name="ib">Length of the minor axis of the input region.</param>
            <returns>Product of inertia of the axes through the center parallel to the coordinate axes.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MomentsRegion2nd(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Calculate the geometric moments of regions.
              Instance represents: Input regions.
            </summary>
            <param name="m20">Moment of 2nd order (row-dependent).</param>
            <param name="m02">Moment of 2nd order (column-dependent).</param>
            <param name="ia">Length of the major axis of the input region.</param>
            <param name="ib">Length of the minor axis of the input region.</param>
            <returns>Product of inertia of the axes through the center parallel to the coordinate axes.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DistanceRrMin(HalconDotNet.HRegion,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Minimum distance between the contour pixels of two regions each.
              Instance represents: Regions to be examined.
            </summary>
            <param name="regions2">Regions to be examined.</param>
            <param name="row1">Line index on contour in Regions1.</param>
            <param name="column1">Column index on contour in Regions1.</param>
            <param name="row2">Line index on contour in Regions2.</param>
            <param name="column2">Column index on contour in Regions2.</param>
            <returns>Minimum distance between contours of the regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DistanceRrMin(HalconDotNet.HRegion,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Minimum distance between the contour pixels of two regions each.
              Instance represents: Regions to be examined.
            </summary>
            <param name="regions2">Regions to be examined.</param>
            <param name="row1">Line index on contour in Regions1.</param>
            <param name="column1">Column index on contour in Regions1.</param>
            <param name="row2">Line index on contour in Regions2.</param>
            <param name="column2">Column index on contour in Regions2.</param>
            <returns>Minimum distance between contours of the regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DistanceRrMinDil(HalconDotNet.HRegion)">
            <summary>
              Minimum distance between two regions with the help of dilation.
              Instance represents: Regions to be examined.
            </summary>
            <param name="regions2">Regions to be examined.</param>
            <returns>Minimum distances of the regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.DiameterRegion(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Maximal distance between two boundary points of a region.
              Instance represents: Regions to be examined.
            </summary>
            <param name="row1">Row index of the first extreme point.</param>
            <param name="column1">Column index of the first extreme point.</param>
            <param name="row2">Row index of the second extreme point.</param>
            <param name="column2">Column index of the second extreme point.</param>
            <param name="diameter">Distance of the two extreme points.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.DiameterRegion(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Double@)">
            <summary>
              Maximal distance between two boundary points of a region.
              Instance represents: Regions to be examined.
            </summary>
            <param name="row1">Row index of the first extreme point.</param>
            <param name="column1">Column index of the first extreme point.</param>
            <param name="row2">Row index of the second extreme point.</param>
            <param name="column2">Column index of the second extreme point.</param>
            <param name="diameter">Distance of the two extreme points.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.TestRegionPoint(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Test if the region contains a given point.
              Instance represents: Region(s) to be examined.
            </summary>
            <param name="row">Row index of the test pixel(s). Default: 100</param>
            <param name="column">Column index of the test pixel(s). Default: 100</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.TestRegionPoint(System.Int32,System.Int32)">
            <summary>
              Test if the region contains a given point.
              Instance represents: Region(s) to be examined.
            </summary>
            <param name="row">Row index of the test pixel(s). Default: 100</param>
            <param name="column">Column index of the test pixel(s). Default: 100</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GetRegionIndex(System.Int32,System.Int32)">
            <summary>
              Index of all regions containing a given pixel.
              Instance represents: Regions to be examined.
            </summary>
            <param name="row">Line index of the test pixel. Default: 100</param>
            <param name="column">Column index of the test pixel. Default: 100</param>
            <returns>Index of the regions containing the test pixel.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.SelectRegionPoint(System.Int32,System.Int32)">
            <summary>
              Choose all regions containing a given pixel.
              Instance represents: Regions to be examined.
            </summary>
            <param name="row">Line index of the test pixel. Default: 100</param>
            <param name="column">Column index of the test pixel. Default: 100</param>
            <returns>All regions containing the test pixel.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.SelectShapeStd(System.String,System.Double)">
            <summary>
              Select regions of a given shape.
              Instance represents: Input regions to be selected.
            </summary>
            <param name="shape">Shape features to be checked. Default: "max_area"</param>
            <param name="percent">Similarity measure. Default: 70.0</param>
            <returns>Regions with desired shape.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.HammingDistanceNorm(HalconDotNet.HRegion,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Hamming distance between two regions using normalization.
              Instance represents: Regions to be examined.
            </summary>
            <param name="regions2">Comparative regions.</param>
            <param name="norm">Type of normalization. Default: "center"</param>
            <param name="similarity">Similarity of two regions.</param>
            <returns>Hamming distance of two regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.HammingDistanceNorm(HalconDotNet.HRegion,System.String,System.Double@)">
            <summary>
              Hamming distance between two regions using normalization.
              Instance represents: Regions to be examined.
            </summary>
            <param name="regions2">Comparative regions.</param>
            <param name="norm">Type of normalization. Default: "center"</param>
            <param name="similarity">Similarity of two regions.</param>
            <returns>Hamming distance of two regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.HammingDistance(HalconDotNet.HRegion,HalconDotNet.HTuple@)">
            <summary>
              Hamming distance between two regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="regions2">Comparative regions.</param>
            <param name="similarity">Similarity of two regions.</param>
            <returns>Hamming distance of two regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.HammingDistance(HalconDotNet.HRegion,System.Double@)">
            <summary>
              Hamming distance between two regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="regions2">Comparative regions.</param>
            <param name="similarity">Similarity of two regions.</param>
            <returns>Hamming distance of two regions.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Eccentricity(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Shape features derived from the ellipse parameters.
              Instance represents: Region(s) to be examined.
            </summary>
            <param name="bulkiness">Calculated shape feature.</param>
            <param name="structureFactor">Calculated shape feature.</param>
            <returns>Shape feature (in case of a circle = 1.0).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Eccentricity(System.Double@,System.Double@)">
            <summary>
              Shape features derived from the ellipse parameters.
              Instance represents: Region(s) to be examined.
            </summary>
            <param name="bulkiness">Calculated shape feature.</param>
            <param name="structureFactor">Calculated shape feature.</param>
            <returns>Shape feature (in case of a circle = 1.0).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.EulerNumber">
            <summary>
              Calculate the Euler number.
              Instance represents: Region(s) to be examined.
            </summary>
            <returns>Calculated Euler number.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.OrientationRegion">
            <summary>
              Orientation of a region.
              Instance represents: Region(s) to be examined.
            </summary>
            <returns>Orientation of region (arc measure).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.EllipticAxis(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Calculate the parameters of the equivalent ellipse.
              Instance represents: Input regions.
            </summary>
            <param name="rb">Secondary radius (normalized to the area).</param>
            <param name="phi">Angle between main radius and x-axis in radians.</param>
            <returns>Main radius (normalized to the area).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.EllipticAxis(System.Double@,System.Double@)">
            <summary>
              Calculate the parameters of the equivalent ellipse.
              Instance represents: Input regions.
            </summary>
            <param name="rb">Secondary radius (normalized to the area).</param>
            <param name="phi">Angle between main radius and x-axis in radians.</param>
            <returns>Main radius (normalized to the area).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.SelectRegionSpatial(HalconDotNet.HRegion,System.String,HalconDotNet.HTuple@)">
            <summary>
              Pose relation of regions.
              Instance represents: Starting regions
            </summary>
            <param name="regions2">Comparative regions</param>
            <param name="direction">Desired neighboring relation. Default: "left"</param>
            <param name="regionIndex2">Indices in the input tuples (Regions1 or ParRef{Regions2}), respectively.</param>
            <returns>Indices in the input tuples (Regions1 or ParRef{Regions2}), respectively.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.SpatialRelation(HalconDotNet.HRegion,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Pose relation of regions with regard to 
              Instance represents: Starting regions.
            </summary>
            <param name="regions2">Comparative regions.</param>
            <param name="percent">Percentage of the area of the comparative region which must be located left/right or  Default: 50</param>
            <param name="regionIndex2">Indices of the regions in the tuple of the input regions which fulfill the pose relation.</param>
            <param name="relation1">Horizontal pose relation in which RegionIndex2[n] stands with RegionIndex1[n].</param>
            <param name="relation2">Vertical pose relation in which RegionIndex2[n] stands with RegionIndex1[n].</param>
            <returns>Indices of the regions in the tuple of the input regions which fulfill the pose relation.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Convexity">
            <summary>
              Shape factor for the convexity of a region.
              Instance represents: Region(s) to be examined.
            </summary>
            <returns>Convexity of the input region(s).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Contlength">
            <summary>
              Contour length of a region.
              Instance represents: Region(s) to be examined.
            </summary>
            <returns>Contour length of the input region(s).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ConnectAndHoles(HalconDotNet.HTuple@)">
            <summary>
              Number of connection components and holes
              Instance represents: Region(s) to be examined.
            </summary>
            <param name="numHoles">Number of holes of a region.</param>
            <returns>Number of connection components of a region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ConnectAndHoles(System.Int32@)">
            <summary>
              Number of connection components and holes
              Instance represents: Region(s) to be examined.
            </summary>
            <param name="numHoles">Number of holes of a region.</param>
            <returns>Number of connection components of a region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Rectangularity">
            <summary>
              Shape factor for the rectangularity of a region.
              Instance represents: Region(s) to be examined.
            </summary>
            <returns>Rectangularity of the input region(s).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Compactness">
            <summary>
              Shape factor for the compactness of a region.
              Instance represents: Region(s) to be examined.
            </summary>
            <returns>Compactness of the input region(s).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Circularity">
            <summary>
              Shape factor for the circularity (similarity to a circle) of a region.
              Instance represents: Region(s) to be examined.
            </summary>
            <returns>Circularity of the input region(s).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.AreaHoles">
            <summary>
              Compute the area of holes of regions.
              Instance represents: Region(s) to be examined.
            </summary>
            <returns>Area(s) of holes of the region(s).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.AreaCenter(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Area and center of regions.
              Instance represents: Region(s) to be examined.
            </summary>
            <param name="row">Line index of the center.</param>
            <param name="column">Column index of the center.</param>
            <returns>Area of the region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.AreaCenter(System.Double@,System.Double@)">
            <summary>
              Area and center of regions.
              Instance represents: Region(s) to be examined.
            </summary>
            <param name="row">Line index of the center.</param>
            <param name="column">Column index of the center.</param>
            <returns>Area of the region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.RunlengthDistribution(HalconDotNet.HTuple@)">
            <summary>
              Distribution of runs needed for runlength encoding of a region.
              Instance represents: Region to be examined.
            </summary>
            <param name="background">Length distribution of the background.</param>
            <returns>Length distribution of the region (foreground).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Roundness(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Shape factors from contour.
              Instance represents: Region(s) to be examined.
            </summary>
            <param name="sigma">Standard deviation of Distance.</param>
            <param name="roundness">Shape factor for roundness.</param>
            <param name="sides">Number of polygon sides.</param>
            <returns>Mean distance from the center.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Roundness(System.Double@,System.Double@,System.Double@)">
            <summary>
              Shape factors from contour.
              Instance represents: Region(s) to be examined.
            </summary>
            <param name="sigma">Standard deviation of Distance.</param>
            <param name="roundness">Shape factor for roundness.</param>
            <param name="sides">Number of polygon sides.</param>
            <returns>Mean distance from the center.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.InnerRectangle1(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Largest inner rectangle of a region.
              Instance represents: Region to be examined.
            </summary>
            <param name="row1">Row coordinate of the upper left corner point.</param>
            <param name="column1">Column coordinate of the upper left corner point.</param>
            <param name="row2">Row coordinate of the lower right corner point.</param>
            <param name="column2">Column coordinate of the lower right corner point.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.InnerRectangle1(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Largest inner rectangle of a region.
              Instance represents: Region to be examined.
            </summary>
            <param name="row1">Row coordinate of the upper left corner point.</param>
            <param name="column1">Column coordinate of the upper left corner point.</param>
            <param name="row2">Row coordinate of the lower right corner point.</param>
            <param name="column2">Column coordinate of the lower right corner point.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.InnerCircle(HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Largest inner circle of a region.
              Instance represents: Regions to be examined.
            </summary>
            <param name="row">Line index of the center.</param>
            <param name="column">Column index of the center.</param>
            <param name="radius">Radius of the inner circle.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.InnerCircle(System.Double@,System.Double@,System.Double@)">
            <summary>
              Largest inner circle of a region.
              Instance represents: Regions to be examined.
            </summary>
            <param name="row">Line index of the center.</param>
            <param name="column">Column index of the center.</param>
            <param name="radius">Radius of the inner circle.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.FitSurfaceFirstOrder(HalconDotNet.HImage,System.String,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Calculate gray value moments and approximation by a first order surface (plane).
              Instance represents: Regions to be checked.
            </summary>
            <param name="image">Corresponding gray values.</param>
            <param name="algorithm">Algorithm for the fitting. Default: "regression"</param>
            <param name="iterations">Maximum number of iterations (unused for 'regression'). Default: 5</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers. Default: 2.0</param>
            <param name="beta">Parameter Beta of the approximating surface.</param>
            <param name="gamma">Parameter Gamma of the approximating surface.</param>
            <returns>Parameter Alpha of the approximating surface.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.FitSurfaceFirstOrder(HalconDotNet.HImage,System.String,System.Int32,System.Double,System.Double@,System.Double@)">
            <summary>
              Calculate gray value moments and approximation by a first order surface (plane).
              Instance represents: Regions to be checked.
            </summary>
            <param name="image">Corresponding gray values.</param>
            <param name="algorithm">Algorithm for the fitting. Default: "regression"</param>
            <param name="iterations">Maximum number of iterations (unused for 'regression'). Default: 5</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers. Default: 2.0</param>
            <param name="beta">Parameter Beta of the approximating surface.</param>
            <param name="gamma">Parameter Gamma of the approximating surface.</param>
            <returns>Parameter Alpha of the approximating surface.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.FitSurfaceSecondOrder(HalconDotNet.HImage,System.String,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Calculate gray value moments and approximation by a second order surface.
              Instance represents: Regions to be checked.
            </summary>
            <param name="image">Corresponding gray values.</param>
            <param name="algorithm">Algorithm for the fitting. Default: "regression"</param>
            <param name="iterations">Maximum number of iterations (unused for 'regression'). Default: 5</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers. Default: 2.0</param>
            <param name="beta">Parameter Beta of the approximating surface.</param>
            <param name="gamma">Parameter Gamma of the approximating surface.</param>
            <param name="delta">Parameter Delta of the approximating surface.</param>
            <param name="epsilon">Parameter Epsilon of the approximating surface.</param>
            <param name="zeta">Parameter Zeta of the approximating surface.</param>
            <returns>Parameter Alpha of the approximating surface.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.FitSurfaceSecondOrder(HalconDotNet.HImage,System.String,System.Int32,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Calculate gray value moments and approximation by a second order surface.
              Instance represents: Regions to be checked.
            </summary>
            <param name="image">Corresponding gray values.</param>
            <param name="algorithm">Algorithm for the fitting. Default: "regression"</param>
            <param name="iterations">Maximum number of iterations (unused for 'regression'). Default: 5</param>
            <param name="clippingFactor">Clipping factor for the elimination of outliers. Default: 2.0</param>
            <param name="beta">Parameter Beta of the approximating surface.</param>
            <param name="gamma">Parameter Gamma of the approximating surface.</param>
            <param name="delta">Parameter Delta of the approximating surface.</param>
            <param name="epsilon">Parameter Epsilon of the approximating surface.</param>
            <param name="zeta">Parameter Zeta of the approximating surface.</param>
            <returns>Parameter Alpha of the approximating surface.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ShapeHistoPoint(HalconDotNet.HImage,System.String,System.Int32,System.Int32,HalconDotNet.HTuple@)">
            <summary>
              Determine a histogram of features along all threshold values.
              Instance represents: Region in which the features are to be examined.
            </summary>
            <param name="image">Gray value image.</param>
            <param name="feature">Feature to be examined. Default: "convexity"</param>
            <param name="row">Row of the pixel which the region must contain. Default: 256</param>
            <param name="column">Column of the pixel which the region must contain. Default: 256</param>
            <param name="relativeHisto">Relative distribution of the feature.</param>
            <returns>Absolute distribution of the feature.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.ShapeHistoAll(HalconDotNet.HImage,System.String,HalconDotNet.HTuple@)">
            <summary>
              Determine a histogram of features along all threshold values.
              Instance represents: Region in which the features are to be examined.
            </summary>
            <param name="image">Gray value image.</param>
            <param name="feature">Feature to be examined. Default: "connected_components"</param>
            <param name="relativeHisto">Relative distribution of the feature.</param>
            <returns>Absolute distribution of the feature.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GrayFeatures(HalconDotNet.HImage,HalconDotNet.HTuple)">
            <summary>
              Calculates gray value features for a set of regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="image">Gray value image.</param>
            <param name="features">Names of the features. Default: "mean"</param>
            <returns>Value sof the features.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GrayFeatures(HalconDotNet.HImage,System.String)">
            <summary>
              Calculates gray value features for a set of regions.
              Instance represents: Regions to be examined.
            </summary>
            <param name="image">Gray value image.</param>
            <param name="features">Names of the features. Default: "mean"</param>
            <returns>Value sof the features.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.SelectGray(HalconDotNet.HImage,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Select regions based on gray value features.
              Instance represents: Regions to be examined.
            </summary>
            <param name="image">Gray value image.</param>
            <param name="features">Names of the features. Default: "mean"</param>
            <param name="operation">Logical connection of features. Default: "and"</param>
            <param name="min">Lower limit(s) of features. Default: 128.0</param>
            <param name="max">Upper limit(s) of features. Default: 255.0</param>
            <returns>Regions having features within the limits.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.SelectGray(HalconDotNet.HImage,System.String,System.String,System.Double,System.Double)">
            <summary>
              Select regions based on gray value features.
              Instance represents: Regions to be examined.
            </summary>
            <param name="image">Gray value image.</param>
            <param name="features">Names of the features. Default: "mean"</param>
            <param name="operation">Logical connection of features. Default: "and"</param>
            <param name="min">Lower limit(s) of features. Default: 128.0</param>
            <param name="max">Upper limit(s) of features. Default: 255.0</param>
            <returns>Regions having features within the limits.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MinMaxGray(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Determine the minimum and maximum gray values within regions.
              Instance represents: Regions, the features of which are to be calculated.
            </summary>
            <param name="image">Gray value image.</param>
            <param name="percent">Percentage below (above) the absolute maximum (minimum). Default: 0</param>
            <param name="min">"Minimum" gray value.</param>
            <param name="max">"Maximum" gray value.</param>
            <param name="range">Difference between Max and Min.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.MinMaxGray(HalconDotNet.HImage,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
              Determine the minimum and maximum gray values within regions.
              Instance represents: Regions, the features of which are to be calculated.
            </summary>
            <param name="image">Gray value image.</param>
            <param name="percent">Percentage below (above) the absolute maximum (minimum). Default: 0</param>
            <param name="min">"Minimum" gray value.</param>
            <param name="max">"Maximum" gray value.</param>
            <param name="range">Difference between Max and Min.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.Intensity(HalconDotNet.HImage,HalconDotNet.HTuple@)">
            <summary>
              Calculate the mean and deviation of gray values.
              Instance represents: Regions in which the features are calculated.
            </summary>
            <param name="image">Gray value image.</param>
            <param name="deviation">Deviation of gray values within a region.</param>
            <returns>Mean gray value of a region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Intensity(HalconDotNet.HImage,System.Double@)">
            <summary>
              Calculate the mean and deviation of gray values.
              Instance represents: Regions in which the features are calculated.
            </summary>
            <param name="image">Gray value image.</param>
            <param name="deviation">Deviation of gray values within a region.</param>
            <returns>Mean gray value of a region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GrayHistoRange(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Double@)">
            <summary>
              Calculate the gray value distribution of a single channel image within a certain gray value range.
              Instance represents: Region in which the histogram is to be calculated.
            </summary>
            <param name="image">Input image.</param>
            <param name="min">Minimum gray value. Default: 0</param>
            <param name="max">Maximum gray value. Default: 255</param>
            <param name="numBins">Number of bins. Default: 256</param>
            <param name="binSize">Bin size.</param>
            <returns>Histogram to be calculated.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GrayHistoRange(HalconDotNet.HImage,System.Double,System.Double,System.Int32,System.Double@)">
            <summary>
              Calculate the gray value distribution of a single channel image within a certain gray value range.
              Instance represents: Region in which the histogram is to be calculated.
            </summary>
            <param name="image">Input image.</param>
            <param name="min">Minimum gray value. Default: 0</param>
            <param name="max">Maximum gray value. Default: 255</param>
            <param name="numBins">Number of bins. Default: 256</param>
            <param name="binSize">Bin size.</param>
            <returns>Histogram to be calculated.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Histo2dim(HalconDotNet.HImage,HalconDotNet.HImage)">
            <summary>
              Calculate the histogram of two-channel gray value images.
              Instance represents: Region in which the histogram is to be calculated.
            </summary>
            <param name="imageCol">Channel 1.</param>
            <param name="imageRow">Channel 2.</param>
            <returns>Histogram to be calculated.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GrayHistoAbs(HalconDotNet.HImage,HalconDotNet.HTuple)">
            <summary>
              Calculate the gray value distribution.
              Instance represents: Region in which the histogram is to be calculated.
            </summary>
            <param name="image">Image the gray value distribution of which is to be calculated.</param>
            <param name="quantization">Quantization of the gray values. Default: 1.0</param>
            <returns>Absolute frequencies of the gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GrayHistoAbs(HalconDotNet.HImage,System.Double)">
            <summary>
              Calculate the gray value distribution.
              Instance represents: Region in which the histogram is to be calculated.
            </summary>
            <param name="image">Image the gray value distribution of which is to be calculated.</param>
            <param name="quantization">Quantization of the gray values. Default: 1.0</param>
            <returns>Absolute frequencies of the gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GrayHisto(HalconDotNet.HImage,HalconDotNet.HTuple@)">
            <summary>
              Calculate the gray value distribution.
              Instance represents: Region in which the histogram is to be calculated.
            </summary>
            <param name="image">Image the gray value distribution of which is to be calculated.</param>
            <param name="relativeHisto">Frequencies, normalized to the area of the region.</param>
            <returns>Absolute frequencies of the gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.EntropyGray(HalconDotNet.HImage,HalconDotNet.HTuple@)">
            <summary>
              Determine the entropy and anisotropy of images.
              Instance represents: Regions where the features are to be determined.
            </summary>
            <param name="image">Gray value image.</param>
            <param name="anisotropy">Measure of the symmetry of gray value distribution.</param>
            <returns>Information content (entropy) of the gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.EntropyGray(HalconDotNet.HImage,System.Double@)">
            <summary>
              Determine the entropy and anisotropy of images.
              Instance represents: Regions where the features are to be determined.
            </summary>
            <param name="image">Gray value image.</param>
            <param name="anisotropy">Measure of the symmetry of gray value distribution.</param>
            <returns>Information content (entropy) of the gray values.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.CoocFeatureImage(HalconDotNet.HImage,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Calculate a co-occurrence matrix and derive gray value features thereof.
              Instance represents: Region to be examined.
            </summary>
            <param name="image">Corresponding gray values.</param>
            <param name="ldGray">Number of gray values to be distinguished (2^LdGray@f$2^{LdGray}$). Default: 6</param>
            <param name="direction">Direction in which the matrix is to be calculated. Default: 0</param>
            <param name="correlation">Correlation of gray values.</param>
            <param name="homogeneity">Local homogeneity of gray values.</param>
            <param name="contrast">Gray value contrast.</param>
            <returns>Gray value energy.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.CoocFeatureImage(HalconDotNet.HImage,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
              Calculate a co-occurrence matrix and derive gray value features thereof.
              Instance represents: Region to be examined.
            </summary>
            <param name="image">Corresponding gray values.</param>
            <param name="ldGray">Number of gray values to be distinguished (2^LdGray@f$2^{LdGray}$). Default: 6</param>
            <param name="direction">Direction in which the matrix is to be calculated. Default: 0</param>
            <param name="correlation">Correlation of gray values.</param>
            <param name="homogeneity">Local homogeneity of gray values.</param>
            <param name="contrast">Gray value contrast.</param>
            <returns>Gray value energy.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GenCoocMatrix(HalconDotNet.HImage,System.Int32,System.Int32)">
            <summary>
              Calculate the co-occurrence matrix of a region in an image.
              Instance represents: Region to be checked.
            </summary>
            <param name="image">Image providing the gray values.</param>
            <param name="ldGray">Number of gray values to be distinguished (2^LdGray@f$2^{LdGray}$). Default: 6</param>
            <param name="direction">Direction of neighbor relation. Default: 0</param>
            <returns>Co-occurrence matrix (matrices).</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.MomentsGrayPlane(HalconDotNet.HImage,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Calculate gray value moments and approximation by a plane.
              Instance represents: Regions to be checked.
            </summary>
            <param name="image">Corresponding gray values.</param>
            <param name="MRow">Mixed moments along a line.</param>
            <param name="MCol">Mixed moments along a column.</param>
            <param name="alpha">Parameter Alpha of the approximating plane.</param>
            <param name="beta">Parameter Beta of the approximating plane.</param>
            <param name="mean">Mean gray value.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.MomentsGrayPlane(HalconDotNet.HImage,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Calculate gray value moments and approximation by a plane.
              Instance represents: Regions to be checked.
            </summary>
            <param name="image">Corresponding gray values.</param>
            <param name="MRow">Mixed moments along a line.</param>
            <param name="MCol">Mixed moments along a column.</param>
            <param name="alpha">Parameter Alpha of the approximating plane.</param>
            <param name="beta">Parameter Beta of the approximating plane.</param>
            <param name="mean">Mean gray value.</param>
        </member>
        <member name="M:HalconDotNet.HRegion.PlaneDeviation(HalconDotNet.HImage)">
            <summary>
              Calculate the deviation of the gray values from the approximating image plane.
              Instance represents: Regions, of which the plane deviation is to be calculated.
            </summary>
            <param name="image">Gray value image.</param>
            <returns>Deviation of the gray values within a region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.EllipticAxisGray(HalconDotNet.HImage,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the orientation and major axes of a region in a gray value image.
              Instance represents: Region(s) to be examined.
            </summary>
            <param name="image">Gray value image.</param>
            <param name="rb">Minor axis of the region.</param>
            <param name="phi">Angle enclosed by the major axis and the x-axis.</param>
            <returns>Major axis of the region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.EllipticAxisGray(HalconDotNet.HImage,System.Double@,System.Double@)">
            <summary>
              Compute the orientation and major axes of a region in a gray value image.
              Instance represents: Region(s) to be examined.
            </summary>
            <param name="image">Gray value image.</param>
            <param name="rb">Minor axis of the region.</param>
            <param name="phi">Angle enclosed by the major axis and the x-axis.</param>
            <returns>Major axis of the region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.AreaCenterGray(HalconDotNet.HImage,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Compute the area and center of gravity of a region in a gray value image.
              Instance represents: Region(s) to be examined.
            </summary>
            <param name="image">Gray value image.</param>
            <param name="row">Row coordinate of the gray value center of gravity.</param>
            <param name="column">Column coordinate of the gray value center of gravity.</param>
            <returns>Gray value volume of the region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.AreaCenterGray(HalconDotNet.HImage,System.Double@,System.Double@)">
            <summary>
              Compute the area and center of gravity of a region in a gray value image.
              Instance represents: Region(s) to be examined.
            </summary>
            <param name="image">Gray value image.</param>
            <param name="row">Row coordinate of the gray value center of gravity.</param>
            <param name="column">Column coordinate of the gray value center of gravity.</param>
            <returns>Gray value volume of the region.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GrayProjections(HalconDotNet.HImage,System.String,HalconDotNet.HTuple@)">
            <summary>
              Calculate horizontal and vertical gray-value projections.
              Instance represents: Region to be processed.
            </summary>
            <param name="image">Grayvalues for projections.</param>
            <param name="mode">Method to compute the projections. Default: "simple"</param>
            <param name="vertProjection">Vertical projection.</param>
            <returns>Horizontal projection.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Get2dBarCodePos(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Extract the data values of the elements (in ECC 200: "modules") inside a bar code region ("Data Matrix symbol") and their positions in the image.
              Instance represents: Region that might contain a bar code.
            </summary>
            <param name="image">Corresponding image.</param>
            <param name="barCodeDescr">Description of the 2D bar code class.</param>
            <param name="codeRegDescr">Additional parameters describing the bar code region. They can be used for extracting the data.</param>
            <param name="genParamNames">List of names of (optional) generic control parameters. Default: []</param>
            <param name="genParamValues">List of values of the generic parameters. Default: []</param>
            <param name="barCodeData">Tuple with the data values of the extracted symbol. value $ greater than $ 0: logical 1, value $ less than $ 0: logical 0, value = 0: module could not be classified.</param>
            <param name="dataElementRow">Tuple with the row positions of the data elements of the extracted symbol in the image.</param>
            <param name="dataElementCol">Tuple with the column positions of the data elements of the extracted symbol in the image.</param>
            <returns>Tuple with the dimension of the extracted symbol. In the case of ECC 200: data field width, height, symbol index.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.Get2dBarCode(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Extract the values of the data elements (in ECC 200: "modules") inside a bar code region ("Data Matrix symbol").
              Instance represents: Region that might contain a 2D bar code.
            </summary>
            <param name="image">Corresponding image.</param>
            <param name="barCodeDescr">Description of the bar code class.</param>
            <param name="codeRegDescr">Additional parameters describing the bar code region. They can be used for extracting the data</param>
            <param name="genParamNames">List of names of (optional) generic control parameters. Default: []</param>
            <param name="genParamValues">List of values of the generic parameters. Default: []</param>
            <param name="barCodeData">Tuple with the data values of the extracted symbol. value $ greater than $ 0: logical 1, value $ less than $ 0: logical 0, value = 0: module could not be classified.</param>
            <returns>Tuple with the dimension of the extracted symbol. In the case of ECC 200: data field width, height, symbol index.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GrabDataAsync(HalconDotNet.HXLDCont@,HalconDotNet.HFramegrabber,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Asynchronous grab of images and preprocessed image data from the specified image acquisition device.
              Modified instance represents: Pre-processed image regions.
            </summary>
            <param name="contours">Pre-processed XLD contours.</param>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
            <param name="maxDelay">Maximum tolerated delay between the start of the asynchronous grab and the delivery of the image [ms]. Default: -1.0</param>
            <param name="data">Pre-processed control data.</param>
            <returns>Grabbed image data.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GrabDataAsync(HalconDotNet.HXLDCont@,HalconDotNet.HFramegrabber,System.Double,System.String@)">
            <summary>
              Asynchronous grab of images and preprocessed image data from the specified image acquisition device.
              Modified instance represents: Pre-processed image regions.
            </summary>
            <param name="contours">Pre-processed XLD contours.</param>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
            <param name="maxDelay">Maximum tolerated delay between the start of the asynchronous grab and the delivery of the image [ms]. Default: -1.0</param>
            <param name="data">Pre-processed control data.</param>
            <returns>Grabbed image data.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GrabData(HalconDotNet.HXLDCont@,HalconDotNet.HFramegrabber,HalconDotNet.HTuple@)">
            <summary>
              Synchronous grab of images and preprocessed image data from the specified image acquisition device.
              Modified instance represents: Preprocessed image regions.
            </summary>
            <param name="contours">Preprocessed XLD contours.</param>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
            <param name="data">Preprocessed control data.</param>
            <returns>Grabbed image data.</returns>
        </member>
        <member name="M:HalconDotNet.HRegion.GrabData(HalconDotNet.HXLDCont@,HalconDotNet.HFramegrabber,System.String@)">
            <summary>
              Synchronous grab of images and preprocessed image data from the specified image acquisition device.
              Modified instance represents: Preprocessed image regions.
            </summary>
            <param name="contours">Preprocessed XLD contours.</param>
            <param name="acqHandle">Handle of the acquisition device to be used.</param>
            <param name="data">Preprocessed control data.</param>
            <returns>Grabbed image data.</returns>
        </member>
        <member name="P:HalconDotNet.HRegion.Item(HalconDotNet.HTuple)">
            <summary>Returns the iconic object(s) at the specified index</summary>
        </member>
        <member name="P:HalconDotNet.HRegion.Area">
            <summary>The area of the region</summary>
        </member>
        <member name="P:HalconDotNet.HRegion.Row">
            <summary>The center row of the region</summary>
        </member>
        <member name="P:HalconDotNet.HRegion.Column">
            <summary>The center column of the region</summary>
        </member>
        <member name="T:HalconDotNet.HDeformableModel">
            <summary>Represents an instance of a deformable model for matching.</summary>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.#ctor(System.String)">
            <summary>
              Read a deformable model from a file.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.#ctor(HalconDotNet.HXLDCont,HalconDotNet.HTuple,HalconDotNet.HPose,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a deformable model for planar calibrated matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="camParam">The parameters of the internal orientation of the camera.</param>
            <param name="referencePose">The reference pose of the object.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameter. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.#ctor(HalconDotNet.HXLDCont,HalconDotNet.HTuple,HalconDotNet.HPose,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a deformable model for planar calibrated matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="camParam">The parameters of the internal orientation of the camera.</param>
            <param name="referencePose">The reference pose of the object.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameter. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.#ctor(HalconDotNet.HXLDCont,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a deformable model for planar uncalibrated matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.#ctor(HalconDotNet.HXLDCont,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a deformable model for planar uncalibrated matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.#ctor(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HPose,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a deformable model for calibrated perspective matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="camParam">The parameters of the internal orientation of the camera.</param>
            <param name="referencePose">The reference pose of the object in the reference image.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "none"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Thresholds or hysteresis thresholds for the contrast of the object in the template image. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The parameter names. Default: []</param>
            <param name="paramValue">Values of the parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.#ctor(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HPose,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a deformable model for calibrated perspective matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="camParam">The parameters of the internal orientation of the camera.</param>
            <param name="referencePose">The reference pose of the object in the reference image.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "none"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Thresholds or hysteresis thresholds for the contrast of the object in the template image. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The parameter names. Default: []</param>
            <param name="paramValue">Values of the parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.#ctor(HalconDotNet.HImage,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Creates a deformable model for uncalibrated, perspective matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "none"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Thresholds or hysteresis thresholds for the contrast of the object in the template image. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameter. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.#ctor(HalconDotNet.HImage,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Creates a deformable model for uncalibrated, perspective matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "none"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Thresholds or hysteresis thresholds for the contrast of the object in the template image. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameter. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.GetDeformableModelOrigin(System.Double@,System.Double@)">
            <summary>
              Return the origin (reference point) of a deformable model.
              Instance represents: Handle of the model.
            </summary>
            <param name="row">Row coordinate of the origin of the deformable model.</param>
            <param name="column">Column coordinate of the origin of the deformable model.</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.SetDeformableModelOrigin(System.Double,System.Double)">
            <summary>
              Set the origin (reference point) of a deformable model.
              Instance represents: Handle of the model.
            </summary>
            <param name="row">Row coordinate of the origin of the deformable model.</param>
            <param name="column">Column coordinate of the origin of the deformable model.</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.SetDeformableModelParam(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set selected parameters of the deformable model.
              Instance represents: Handle of the model.
            </summary>
            <param name="genParamNames">Parameter names.</param>
            <param name="genParamValues">Parameter values.</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.GetDeformableModelParams(HalconDotNet.HTuple)">
            <summary>
              Return the parameters of a deformable model.
              Instance represents: Handle of the model.
            </summary>
            <param name="genParamNames">Names of the generic parameters that are to be queried for the deformable model. Default: "angle_start"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.GetDeformableModelParams(System.String)">
            <summary>
              Return the parameters of a deformable model.
              Instance represents: Handle of the model.
            </summary>
            <param name="genParamNames">Names of the generic parameters that are to be queried for the deformable model. Default: "angle_start"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.GetDeformableModelContours(System.Int32)">
            <summary>
              Return the contour representation of a deformable model.
              Instance represents: Handle of the model.
            </summary>
            <param name="level">Pyramid level for which the contour representation should be returned. Default: 1</param>
            <returns>Contour representation of the deformable model.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.DeserializeDeformableModel(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a deformable model.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.SerializeDeformableModel">
            <summary>
              Serialize a deformable model.
              Instance represents: Handle of a model to be saved.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.ReadDeformableModel(System.String)">
            <summary>
              Read a deformable model from a file.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.WriteDeformableModel(System.String)">
            <summary>
              Write a deformable model to a file.
              Instance represents: Handle of a model to be saved.
            </summary>
            <param name="fileName">The path and filename of the model to be saved.</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.FindLocalDeformableModel(HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HXLDCont@,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,HalconDotNet.HTuple,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a local deformable model in an image.
              Instance represents: Handle of the model.
            </summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="vectorField">Vector field of the rectification transformation.</param>
            <param name="deformedContours">Contours of the found instances of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleCMin">Minimum scale of the model in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the model in column direction. Default: 1.0</param>
            <param name="minScore">Minumum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 1.0</param>
            <param name="numLevels">Number of pyramid levels used in the matching. Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="resultType">Switch for requested iconic result. Default: []</param>
            <param name="paramName">The general parameter names. Default: []</param>
            <param name="paramValue">Values of the general parameters. Default: []</param>
            <param name="score">Scores of the found instances of the model.</param>
            <param name="row">Row coordinates of the found instances of the model.</param>
            <param name="column">Column coordinates of the found instances of the model.</param>
            <returns>Rectified image of the found model.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.FindLocalDeformableModel(HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HXLDCont@,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a local deformable model in an image.
              Instance represents: Handle of the model.
            </summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="vectorField">Vector field of the rectification transformation.</param>
            <param name="deformedContours">Contours of the found instances of the model.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleCMin">Minimum scale of the model in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the model in column direction. Default: 1.0</param>
            <param name="minScore">Minumum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 1.0</param>
            <param name="numLevels">Number of pyramid levels used in the matching. Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="resultType">Switch for requested iconic result. Default: []</param>
            <param name="paramName">The general parameter names. Default: []</param>
            <param name="paramValue">Values of the general parameters. Default: []</param>
            <param name="score">Scores of the found instances of the model.</param>
            <param name="row">Row coordinates of the found instances of the model.</param>
            <param name="column">Column coordinates of the found instances of the model.</param>
            <returns>Rectified image of the found model.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.FindPlanarCalibDeformableModel(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,HalconDotNet.HTuple,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a calibrated deformable model in an image and return their 3D pose.
              Instance represents: Handle of the model.
            </summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleCMin">Minimum scale of the model in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the model in column direction. Default: 1.0</param>
            <param name="minScore">Minumum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 1.0</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="paramName">The general parameter names. Default: []</param>
            <param name="paramValue">Values of the general parameters. Default: []</param>
            <param name="covPose">6 standard deviations or 36 covariances of the pose parameters.</param>
            <param name="score">Score of the found instances of the model.</param>
            <returns>Pose of the object.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.FindPlanarCalibDeformableModel(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a calibrated deformable model in an image and return their 3D pose.
              Instance represents: Handle of the model.
            </summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleCMin">Minimum scale of the model in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the model in column direction. Default: 1.0</param>
            <param name="minScore">Minumum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 1.0</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="paramName">The general parameter names. Default: []</param>
            <param name="paramValue">Values of the general parameters. Default: []</param>
            <param name="covPose">6 standard deviations or 36 covariances of the pose parameters.</param>
            <param name="score">Score of the found instances of the model.</param>
            <returns>Pose of the object.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.FindPlanarUncalibDeformableModel(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,HalconDotNet.HTuple,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a planar projective invariant deformable model in an image.
              Instance represents: Handle of the model.
            </summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleCMin">Minimum scale of the model in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the model in column direction. Default: 1.0</param>
            <param name="minScore">Minumum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 1.0</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="paramName">The general parameter names. Default: []</param>
            <param name="paramValue">Values of the general parameters. Default: []</param>
            <param name="score">Score of the found instances of the model.</param>
            <returns>Homographies between model and found instances.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.FindPlanarUncalibDeformableModel(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a planar projective invariant deformable model in an image.
              Instance represents: Handle of the model.
            </summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the model in row direction. Default: 1.0</param>
            <param name="scaleCMin">Minimum scale of the model in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the model in column direction. Default: 1.0</param>
            <param name="minScore">Minumum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 1.0</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="paramName">The general parameter names. Default: []</param>
            <param name="paramValue">Values of the general parameters. Default: []</param>
            <param name="score">Score of the found instances of the model.</param>
            <returns>Homographies between model and found instances.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.SetLocalDeformableModelMetric(HalconDotNet.HImage,HalconDotNet.HImage,System.String)">
            <summary>
              Set the metric of a local deformable model that was created from XLD contours.
              Instance represents: Handle of the model.
            </summary>
            <param name="image">Input image used for the determination of the polarity.</param>
            <param name="vectorField">Vector field of the local deformation.</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.SetPlanarCalibDeformableModelMetric(HalconDotNet.HImage,HalconDotNet.HPose,System.String)">
            <summary>
              Set the metric of a planar calibrated deformable model that was created from XLD contours.
              Instance represents: Handle of the model.
            </summary>
            <param name="image">Input image used for the determination of the polarity.</param>
            <param name="pose">Pose of the model in the image.</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.SetPlanarUncalibDeformableModelMetric(HalconDotNet.HImage,HalconDotNet.HHomMat2D,System.String)">
            <summary>
              Set the metric of a planar uncalibrated deformable model that was created from XLD contours.
              Instance represents: Handle of the model.
            </summary>
            <param name="image">Input image used for the determination of the polarity.</param>
            <param name="homMat2D">Transformation matrix.</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.CreateLocalDeformableModelXld(HalconDotNet.HXLDCont,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a deformable model for local deformable matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.CreateLocalDeformableModelXld(HalconDotNet.HXLDCont,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a deformable model for local deformable matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.CreatePlanarCalibDeformableModelXld(HalconDotNet.HXLDCont,HalconDotNet.HTuple,HalconDotNet.HPose,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a deformable model for planar calibrated matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="camParam">The parameters of the internal orientation of the camera.</param>
            <param name="referencePose">The reference pose of the object.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameter. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.CreatePlanarCalibDeformableModelXld(HalconDotNet.HXLDCont,HalconDotNet.HTuple,HalconDotNet.HPose,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a deformable model for planar calibrated matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="camParam">The parameters of the internal orientation of the camera.</param>
            <param name="referencePose">The reference pose of the object.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameter. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.CreatePlanarUncalibDeformableModelXld(HalconDotNet.HXLDCont,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a deformable model for planar uncalibrated matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.CreatePlanarUncalibDeformableModelXld(HalconDotNet.HXLDCont,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a deformable model for planar uncalibrated matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.CreateLocalDeformableModel(HalconDotNet.HImage,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Creates a deformable model for local, deformable matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "none"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Thresholds or hysteresis thresholds for the contrast of the object in the template image. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.CreateLocalDeformableModel(HalconDotNet.HImage,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Creates a deformable model for local, deformable matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "none"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Thresholds or hysteresis thresholds for the contrast of the object in the template image. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.CreatePlanarCalibDeformableModel(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HPose,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a deformable model for calibrated perspective matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="camParam">The parameters of the internal orientation of the camera.</param>
            <param name="referencePose">The reference pose of the object in the reference image.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "none"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Thresholds or hysteresis thresholds for the contrast of the object in the template image. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The parameter names. Default: []</param>
            <param name="paramValue">Values of the parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.CreatePlanarCalibDeformableModel(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HPose,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a deformable model for calibrated perspective matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="camParam">The parameters of the internal orientation of the camera.</param>
            <param name="referencePose">The reference pose of the object in the reference image.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "none"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Thresholds or hysteresis thresholds for the contrast of the object in the template image. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The parameter names. Default: []</param>
            <param name="paramValue">Values of the parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.CreatePlanarUncalibDeformableModel(HalconDotNet.HImage,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Creates a deformable model for uncalibrated, perspective matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "none"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Thresholds or hysteresis thresholds for the contrast of the object in the template image. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameter. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableModel.CreatePlanarUncalibDeformableModel(HalconDotNet.HImage,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Creates a deformable model for uncalibrated, perspective matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRMax">Maximum scale of the pattern in row direction. Default: 1.0</param>
            <param name="scaleRStep">Scale step length (resolution) in row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCMax">Maximum scale of the pattern in column direction. Default: 1.0</param>
            <param name="scaleCStep">Scale step length (resolution) in column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization used for generating the model. Default: "none"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Thresholds or hysteresis thresholds for the contrast of the object in the template image. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
            <param name="paramName">The generic parameter names. Default: []</param>
            <param name="paramValue">Values of the generic parameter. Default: []</param>
        </member>
        <member name="T:HalconDotNet.HInfo">
            <summary>Class grouping system information related functionality.</summary>
        </member>
        <member name="M:HalconDotNet.HInfo.QueryOperatorInfo">
            <summary>Query slots concerning information with relation to the operator get_operator_info.</summary>
            <returns>Slotnames of the operator get_operator_info.</returns>
        </member>
        <member name="M:HalconDotNet.HInfo.QueryParamInfo">
            <summary>Query slots of the online-information concerning the operator get_param_info.</summary>
            <returns>Slotnames for the operator get_param_info.</returns>
        </member>
        <member name="M:HalconDotNet.HInfo.GetOperatorName(System.String)">
            <summary>Get operators with the given string as a substring of their name.</summary>
            <param name="pattern">Substring of the seeked names (empty $ less than = greater than $ all names). Default: "info"</param>
            <returns>Detected operator names.</returns>
        </member>
        <member name="M:HalconDotNet.HInfo.GetParamTypes(System.String,HalconDotNet.HTuple@)">
            <summary>Get default data type for the control parameters of a HALCON-operator.</summary>
            <param name="operatorName">Name of the operator. Default: "get_param_types"</param>
            <param name="outpCtrlParType">Default type of the output control parameters.</param>
            <returns>Default type of the input control parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HInfo.GetParamNum(System.String,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.String@)">
            <summary>Get number of the different parameter classes of a HALCON-operator.</summary>
            <param name="operatorName">Name of the operator. Default: "get_param_num"</param>
            <param name="inpObjPar">Number of the input object parameters.</param>
            <param name="outpObjPar">Number of the output object parameters.</param>
            <param name="inpCtrlPar">Number of the input control parameters.</param>
            <param name="outpCtrlPar">Number of the output control parameters.</param>
            <param name="type">System operator or user procedure.</param>
            <returns>Name of the called C-function.</returns>
        </member>
        <member name="M:HalconDotNet.HInfo.GetParamNames(System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get the names of the parameters of a HALCON-operator.</summary>
            <param name="operatorName">Name of the operator. Default: "get_param_names"</param>
            <param name="outpObjPar">Names of the output objects.</param>
            <param name="inpCtrlPar">Names of the input control parameters.</param>
            <param name="outpCtrlPar">Names of the output control parameters.</param>
            <returns>Names of the input objects.</returns>
        </member>
        <member name="M:HalconDotNet.HInfo.GetOperatorInfo(System.String,System.String)">
            <summary>Get information concerning a HALCON-operator.</summary>
            <param name="operatorName">Name of the operator on which more information is needed. Default: "get_operator_info"</param>
            <param name="slot">Desired information. Default: "abstract"</param>
            <returns>Information (empty if no information is available)</returns>
        </member>
        <member name="M:HalconDotNet.HInfo.GetParamInfo(System.String,System.String,System.String)">
            <summary>Get information concerning the operator parameters.</summary>
            <param name="operatorName">Name of the operator on whose parameter more information is needed. Default: "get_param_info"</param>
            <param name="paramName">Name of the parameter on which more information is needed. Default: "Slot"</param>
            <param name="slot">Desired information. Default: "description"</param>
            <returns>Information (empty in case there is no information available).</returns>
        </member>
        <member name="M:HalconDotNet.HInfo.SearchOperator(System.String)">
            <summary>Search names of all operators assigned to one keyword.</summary>
            <param name="keyword">Keyword for which corresponding operators are searched. Default: "Information"</param>
            <returns>Operators whose slot 'keyword' contains the keyword.</returns>
        </member>
        <member name="M:HalconDotNet.HInfo.GetKeywords(System.String)">
            <summary>Get keywords which are assigned to operators.</summary>
            <param name="operatorName">Substring in the names of those operators for which keywords are needed. Default: "get_keywords"</param>
            <returns>Keywords for the operators.</returns>
        </member>
        <member name="M:HalconDotNet.HInfo.GetChapterInfo(HalconDotNet.HTuple)">
            <summary>Get information concerning the chapters on operators.</summary>
            <param name="chapter">Operator class or subclass of interest. Default: ""</param>
            <returns>Operator classes (Chapter = ") or operator subclasses respectively operators.</returns>
        </member>
        <member name="M:HalconDotNet.HInfo.GetChapterInfo(System.String)">
            <summary>Get information concerning the chapters on operators.</summary>
            <param name="chapter">Operator class or subclass of interest. Default: ""</param>
            <returns>Operator classes (Chapter = ") or operator subclasses respectively operators.</returns>
        </member>
        <member name="M:HalconDotNet.HInfo.QueryWindowType">
            <summary>Query all available window types.</summary>
            <returns>Names of available window types.</returns>
        </member>
        <member name="M:HalconDotNet.HInfo.GetComprise(HalconDotNet.HWindow)">
            <summary>Get the output treatment of an image matrix.</summary>
            <param name="windowHandle">Window_id.</param>
            <returns>Display mode for images.</returns>
        </member>
        <member name="M:HalconDotNet.HInfo.QueryShape">
            <summary>Query the region display modes.</summary>
            <returns>region display mode names.</returns>
        </member>
        <member name="M:HalconDotNet.HInfo.QueryLineWidth(System.Int32@,System.Int32@)">
            <summary>Query the possible line widths.</summary>
            <param name="min">Displayable minimum width.</param>
            <param name="max">Displayable maximum width.</param>
        </member>
        <member name="M:HalconDotNet.HInfo.QueryColored">
            <summary>Query the number of colors for color output.</summary>
            <returns>Tuple of the possible numbers of colors.</returns>
        </member>
        <member name="M:HalconDotNet.HInfo.InfoFramegrabber(System.String,System.String,HalconDotNet.HTuple@)">
            <summary>Query information about the specified image acquisition interface.</summary>
            <param name="name">HALCON image acquisition interface name, i.e., name of the corresponding DLL (Windows) or shared library (Linux/OS X). Default: "File"</param>
            <param name="query">Name of the chosen query. Default: "info_boards"</param>
            <param name="valueList">List of values (according to Query).</param>
            <returns>Textual information (according to Query).</returns>
        </member>
        <member name="T:HalconDotNet.HFunction1D">
            <summary>Represents an instance of a 1d function.</summary>
        </member>
        <member name="M:HalconDotNet.HFunction1D.#ctor">
            <summary>Create an uninitialized instance.</summary>
        </member>
        <member name="M:HalconDotNet.HFunction1D.#ctor(HalconDotNet.HTuple)">
            <summary>
              Create a function from a sequence of y-values.
              Modified instance represents: Created function.
            </summary>
            <param name="YValues">X value for function points.</param>
        </member>
        <member name="M:HalconDotNet.HFunction1D.#ctor(System.Double)">
            <summary>
              Create a function from a sequence of y-values.
              Modified instance represents: Created function.
            </summary>
            <param name="YValues">X value for function points.</param>
        </member>
        <member name="M:HalconDotNet.HFunction1D.#ctor(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a function from a set of (x,y) pairs.
              Modified instance represents: Created function.
            </summary>
            <param name="XValues">X value for function points.</param>
            <param name="YValues">Y-value for function points.</param>
        </member>
        <member name="M:HalconDotNet.HFunction1D.#ctor(System.Double,System.Double)">
            <summary>
              Create a function from a set of (x,y) pairs.
              Modified instance represents: Created function.
            </summary>
            <param name="XValues">X value for function points.</param>
            <param name="YValues">Y-value for function points.</param>
        </member>
        <member name="M:HalconDotNet.HFunction1D.op_Addition(HalconDotNet.HFunction1D,System.Double)">
            <summary>Adds a constant offset to the function's Y values</summary>
        </member>
        <member name="M:HalconDotNet.HFunction1D.op_Addition(System.Double,HalconDotNet.HFunction1D)">
            <summary>Adds a constant offset to the function's Y values</summary>
        </member>
        <member name="M:HalconDotNet.HFunction1D.op_Subtraction(HalconDotNet.HFunction1D,System.Double)">
            <summary>Subtracts a constant offset from the function's Y values</summary>
        </member>
        <member name="M:HalconDotNet.HFunction1D.op_UnaryNegation(HalconDotNet.HFunction1D)">
            <summary>Negates the Y values of the function</summary>
        </member>
        <member name="M:HalconDotNet.HFunction1D.op_Multiply(HalconDotNet.HFunction1D,System.Double)">
            <summary>Scales the function's Y values</summary>
        </member>
        <member name="M:HalconDotNet.HFunction1D.op_Multiply(System.Double,HalconDotNet.HFunction1D)">
            <summary>Scales the function's Y values</summary>
        </member>
        <member name="M:HalconDotNet.HFunction1D.op_Division(HalconDotNet.HFunction1D,System.Double)">
            <summary>Scales the function's Y values</summary>
        </member>
        <member name="M:HalconDotNet.HFunction1D.op_Multiply(HalconDotNet.HFunction1D,HalconDotNet.HFunction1D)">
            <summary>Composes two functions (not a pointwise multiplication)</summary>
        </member>
        <member name="M:HalconDotNet.HFunction1D.op_LogicalNot(HalconDotNet.HFunction1D)">
            <summary>Calculates the inverse of the function</summary>
        </member>
        <member name="M:HalconDotNet.HFunction1D.GnuplotPlotFunct1d(HalconDotNet.HGnuplot)">
            <summary>
              Plot a function using gnuplot.
              Instance represents: Function to be plotted.
            </summary>
            <param name="gnuplotFileID">Identifier for the gnuplot output stream.</param>
        </member>
        <member name="M:HalconDotNet.HFunction1D.ComposeFunct1d(HalconDotNet.HFunction1D,System.String)">
            <summary>
              Compose two functions.
              Instance represents: Input function 1.
            </summary>
            <param name="function2">Input function 2.</param>
            <param name="border">Border treatment for the input functions. Default: "constant"</param>
            <returns>Composed function.</returns>
        </member>
        <member name="M:HalconDotNet.HFunction1D.InvertFunct1d">
            <summary>
              Calculate the inverse of a function.
              Instance represents: Input function.
            </summary>
            <returns>Inverse of the input function.</returns>
        </member>
        <member name="M:HalconDotNet.HFunction1D.DerivateFunct1d(System.String)">
            <summary>
              Calculate the derivatives of a function.
              Instance represents: Input function
            </summary>
            <param name="mode">Type of derivative Default: "first"</param>
            <returns>Derivative of the input function</returns>
        </member>
        <member name="M:HalconDotNet.HFunction1D.LocalMinMaxFunct1d(System.String,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Calculate the local minimum and maximum points of a function.
              Instance represents: Input function
            </summary>
            <param name="mode">Handling of plateaus Default: "strict_min_max"</param>
            <param name="interpolation">Interpolation of the input function Default: "true"</param>
            <param name="min">Minimum points of the input function</param>
            <param name="max">Maximum points of the input function</param>
        </member>
        <member name="M:HalconDotNet.HFunction1D.ZeroCrossingsFunct1d">
            <summary>
              Calculate the zero crossings of a function.
              Instance represents: Input function
            </summary>
            <returns>Zero crossings of the input function</returns>
        </member>
        <member name="M:HalconDotNet.HFunction1D.ScaleYFunct1d(System.Double,System.Double)">
            <summary>
              Multiplication and addition of the y values.
              Instance represents: Input function.
            </summary>
            <param name="mult">Factor for scaling of the y values. Default: 2.0</param>
            <param name="add">Constant which is added to the y values. Default: 0.0</param>
            <returns>Transformed function.</returns>
        </member>
        <member name="M:HalconDotNet.HFunction1D.NegateFunct1d">
            <summary>
              Negation of the y values.
              Instance represents: Input function.
            </summary>
            <returns>Function with the negated y values.</returns>
        </member>
        <member name="M:HalconDotNet.HFunction1D.AbsFunct1d">
            <summary>
              Absolute value of the y values.
              Instance represents: Input function.
            </summary>
            <returns>Function with the absolute values of the y values.</returns>
        </member>
        <member name="M:HalconDotNet.HFunction1D.GetYValueFunct1d(HalconDotNet.HTuple,System.String)">
            <summary>
              Return the value of a function at an arbitrary position.
              Instance represents: Input function.
            </summary>
            <param name="x">X coordinate at which the function should be evaluated.</param>
            <param name="border">Border treatment for the input function. Default: "constant"</param>
            <returns>Y value at the given x value.</returns>
        </member>
        <member name="M:HalconDotNet.HFunction1D.GetYValueFunct1d(System.Double,System.String)">
            <summary>
              Return the value of a function at an arbitrary position.
              Instance represents: Input function.
            </summary>
            <param name="x">X coordinate at which the function should be evaluated.</param>
            <param name="border">Border treatment for the input function. Default: "constant"</param>
            <returns>Y value at the given x value.</returns>
        </member>
        <member name="M:HalconDotNet.HFunction1D.GetPairFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Access a function value using the index of the control points.
              Instance represents: Input function.
            </summary>
            <param name="index">Index of the control points.</param>
            <param name="x">X value at the given control points.</param>
            <param name="y">Y value at the given control points.</param>
        </member>
        <member name="M:HalconDotNet.HFunction1D.GetPairFunct1d(System.Int32,System.Double@,System.Double@)">
            <summary>
              Access a function value using the index of the control points.
              Instance represents: Input function.
            </summary>
            <param name="index">Index of the control points.</param>
            <param name="x">X value at the given control points.</param>
            <param name="y">Y value at the given control points.</param>
        </member>
        <member name="M:HalconDotNet.HFunction1D.NumPointsFunct1d">
            <summary>
              Number of control points of the function.
              Instance represents: Input function.
            </summary>
            <returns>Number of control points.</returns>
        </member>
        <member name="M:HalconDotNet.HFunction1D.YRangeFunct1d(System.Double@,System.Double@)">
            <summary>
              Smallest and largest y value of the function.
              Instance represents: Input function.
            </summary>
            <param name="YMin">Smallest y value.</param>
            <param name="YMax">Largest y value.</param>
        </member>
        <member name="M:HalconDotNet.HFunction1D.XRangeFunct1d(System.Double@,System.Double@)">
            <summary>
              Smallest and largest x value of the function.
              Instance represents: Input function.
            </summary>
            <param name="XMin">Smallest x value.</param>
            <param name="XMax">Largest x value.</param>
        </member>
        <member name="M:HalconDotNet.HFunction1D.Funct1dToPairs(HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Access to the x/y values of a function.
              Instance represents: Input function.
            </summary>
            <param name="XValues">X values of the function.</param>
            <param name="YValues">Y values of the function.</param>
        </member>
        <member name="M:HalconDotNet.HFunction1D.SampleFunct1d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Sample a function equidistantly in an interval.
              Instance represents: Input function.
            </summary>
            <param name="XMin">Minimum x value of the output function.</param>
            <param name="XMax">Maximum x value of the output function.</param>
            <param name="XDist">Distance of the samples.</param>
            <param name="border">Border treatment for the input function. Default: "constant"</param>
            <returns>Sampled function.</returns>
        </member>
        <member name="M:HalconDotNet.HFunction1D.SampleFunct1d(System.Double,System.Double,System.Double,System.String)">
            <summary>
              Sample a function equidistantly in an interval.
              Instance represents: Input function.
            </summary>
            <param name="XMin">Minimum x value of the output function.</param>
            <param name="XMax">Maximum x value of the output function.</param>
            <param name="XDist">Distance of the samples.</param>
            <param name="border">Border treatment for the input function. Default: "constant"</param>
            <returns>Sampled function.</returns>
        </member>
        <member name="M:HalconDotNet.HFunction1D.TransformFunct1d(HalconDotNet.HTuple)">
            <summary>
              Transform a function using given transformation parameters.
              Instance represents: Input function.
            </summary>
            <param name="paramsVal">Transformation parameters between the functions.</param>
            <returns>Transformed function.</returns>
        </member>
        <member name="M:HalconDotNet.HFunction1D.MatchFunct1dTrans(HalconDotNet.HFunction1D,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double@,HalconDotNet.HTuple@)">
            <summary>
              Calculate transformation parameters between two functions.
              Instance represents: Function 1.
            </summary>
            <param name="function2">Function 2.</param>
            <param name="border">Border treatment for function 2. Default: "constant"</param>
            <param name="paramsConst">Values of the parameters to remain constant. Default: [1.0,0.0,1.0,0.0]</param>
            <param name="useParams">Should a parameter be adapted for it? Default: ["true","true","true","true"]</param>
            <param name="chiSquare">Quadratic error of the output function.</param>
            <param name="covar">Covariance Matrix of the transformation parameters.</param>
            <returns>Transformation parameters between the functions.</returns>
        </member>
        <member name="M:HalconDotNet.HFunction1D.DistanceFunct1d(HalconDotNet.HFunction1D,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Compute the distance of two functions.
              Instance represents: Input function 1.
            </summary>
            <param name="function2">Input function 2.</param>
            <param name="mode">Modes of invariants. Default: "length"</param>
            <param name="sigma">Variance of the optional smoothing with a Gaussian filter. Default: 0.0</param>
            <returns>Distance of the functions.</returns>
        </member>
        <member name="M:HalconDotNet.HFunction1D.DistanceFunct1d(HalconDotNet.HFunction1D,System.String,System.Double)">
            <summary>
              Compute the distance of two functions.
              Instance represents: Input function 1.
            </summary>
            <param name="function2">Input function 2.</param>
            <param name="mode">Modes of invariants. Default: "length"</param>
            <param name="sigma">Variance of the optional smoothing with a Gaussian filter. Default: 0.0</param>
            <returns>Distance of the functions.</returns>
        </member>
        <member name="M:HalconDotNet.HFunction1D.SmoothFunct1dGauss(System.Double)">
            <summary>
              Smooth an equidistant 1D function with a Gaussian function.
              Instance represents: Function to be smoothed.
            </summary>
            <param name="sigma">Sigma of the Gaussian function for the smoothing. Default: 2.0</param>
            <returns>Smoothed function.</returns>
        </member>
        <member name="M:HalconDotNet.HFunction1D.IntegrateFunct1d(HalconDotNet.HTuple@)">
            <summary>
              Compute the positive and negative areas of a function.
              Instance represents: Input function.
            </summary>
            <param name="negative">Area under the negative part of the function.</param>
            <returns>Area under the positive part of the function.</returns>
        </member>
        <member name="M:HalconDotNet.HFunction1D.ReadFunct1d(System.String)">
            <summary>
              Read a function from a file.
              Modified instance represents: Function from the file.
            </summary>
            <param name="fileName">Name of the file to be read.</param>
        </member>
        <member name="M:HalconDotNet.HFunction1D.WriteFunct1d(System.String)">
            <summary>
              Write a function to a file.
              Instance represents: Function to be written.
            </summary>
            <param name="fileName">Name of the file to be written.</param>
        </member>
        <member name="M:HalconDotNet.HFunction1D.CreateFunct1dArray(HalconDotNet.HTuple)">
            <summary>
              Create a function from a sequence of y-values.
              Modified instance represents: Created function.
            </summary>
            <param name="YValues">X value for function points.</param>
        </member>
        <member name="M:HalconDotNet.HFunction1D.CreateFunct1dArray(System.Double)">
            <summary>
              Create a function from a sequence of y-values.
              Modified instance represents: Created function.
            </summary>
            <param name="YValues">X value for function points.</param>
        </member>
        <member name="M:HalconDotNet.HFunction1D.CreateFunct1dPairs(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a function from a set of (x,y) pairs.
              Modified instance represents: Created function.
            </summary>
            <param name="XValues">X value for function points.</param>
            <param name="YValues">Y-value for function points.</param>
        </member>
        <member name="M:HalconDotNet.HFunction1D.CreateFunct1dPairs(System.Double,System.Double)">
            <summary>
              Create a function from a set of (x,y) pairs.
              Modified instance represents: Created function.
            </summary>
            <param name="XValues">X value for function points.</param>
            <param name="YValues">Y-value for function points.</param>
        </member>
        <member name="M:HalconDotNet.HFunction1D.SmoothFunct1dMean(System.Int32,System.Int32)">
            <summary>
              Smooth an equidistant 1D function by averaging its values.
              Instance represents: 1D function.
            </summary>
            <param name="smoothSize">Size of the averaging mask. Default: 9</param>
            <param name="iterations">Number of iterations for the smoothing. Default: 3</param>
            <returns>Smoothed function.</returns>
        </member>
        <member name="T:HalconDotNet.HScene3D">
            <summary>Represents an instance of a 3D graphic scene.</summary>
        </member>
        <member name="M:HalconDotNet.HScene3D.#ctor">
            <summary>
              Create the data structure that is needed to visualize collections of 3D objects.
              Modified instance represents: Handle of the 3D scene.
            </summary>
        </member>
        <member name="M:HalconDotNet.HScene3D.GetDisplayScene3dInfo(HalconDotNet.HWindow,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Get the depth or the index of instances in a displayed 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row coordinates.</param>
            <param name="column">Column coordinates.</param>
            <param name="information">Information. Default: "depth"</param>
            <returns>Indices or the depth of the objects at (Row,Column).</returns>
        </member>
        <member name="M:HalconDotNet.HScene3D.GetDisplayScene3dInfo(HalconDotNet.HWindow,System.Double,System.Double,System.String)">
            <summary>
              Get the depth or the index of instances in a displayed 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row coordinates.</param>
            <param name="column">Column coordinates.</param>
            <param name="information">Information. Default: "depth"</param>
            <returns>Indices or the depth of the objects at (Row,Column).</returns>
        </member>
        <member name="M:HalconDotNet.HScene3D.SetScene3dToWorldPose(HalconDotNet.HPose)">
            <summary>
              Set the pose of a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="toWorldPose">New pose of the 3D scene.</param>
        </member>
        <member name="M:HalconDotNet.HScene3D.SetScene3dParam(System.String,HalconDotNet.HTuple)">
            <summary>
              Set parameters of a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="genParamName">Names of the generic parameters. Default: "quality"</param>
            <param name="genParamValue">Values of the generic parameters. Default: "high"</param>
        </member>
        <member name="M:HalconDotNet.HScene3D.SetScene3dParam(System.String,System.String)">
            <summary>
              Set parameters of a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="genParamName">Names of the generic parameters. Default: "quality"</param>
            <param name="genParamValue">Values of the generic parameters. Default: "high"</param>
        </member>
        <member name="M:HalconDotNet.HScene3D.SetScene3dLightParam(System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set parameters of a light in a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="lightIndex">Index of the light source.</param>
            <param name="genParamName">Names of the generic parameters. Default: "ambient"</param>
            <param name="genParamValue">Values of the generic parameters. Default: [0.2,0.2,0.2]</param>
        </member>
        <member name="M:HalconDotNet.HScene3D.SetScene3dLightParam(System.Int32,System.String,System.String)">
            <summary>
              Set parameters of a light in a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="lightIndex">Index of the light source.</param>
            <param name="genParamName">Names of the generic parameters. Default: "ambient"</param>
            <param name="genParamValue">Values of the generic parameters. Default: [0.2,0.2,0.2]</param>
        </member>
        <member name="M:HalconDotNet.HScene3D.SetScene3dInstancePose(HalconDotNet.HTuple,HalconDotNet.HPose[])">
            <summary>
              Set the pose of an instance in a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="instanceIndex">Index of the instance.</param>
            <param name="pose">New pose of the instance.</param>
        </member>
        <member name="M:HalconDotNet.HScene3D.SetScene3dInstancePose(System.Int32,HalconDotNet.HPose)">
            <summary>
              Set the pose of an instance in a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="instanceIndex">Index of the instance.</param>
            <param name="pose">New pose of the instance.</param>
        </member>
        <member name="M:HalconDotNet.HScene3D.SetScene3dInstanceParam(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set parameters of an instance in a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="instanceIndex">Index of the instance.</param>
            <param name="genParamName">Names of the generic parameters. Default: "color"</param>
            <param name="genParamValue">Values of the generic parameters. Default: "green"</param>
        </member>
        <member name="M:HalconDotNet.HScene3D.SetScene3dInstanceParam(System.Int32,System.String,System.String)">
            <summary>
              Set parameters of an instance in a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="instanceIndex">Index of the instance.</param>
            <param name="genParamName">Names of the generic parameters. Default: "color"</param>
            <param name="genParamValue">Values of the generic parameters. Default: "green"</param>
        </member>
        <member name="M:HalconDotNet.HScene3D.SetScene3dCameraPose(System.Int32,HalconDotNet.HPose)">
            <summary>
              Set the pose of a camera in a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="cameraIndex">Index of the camera.</param>
            <param name="pose">New pose of the camera.</param>
        </member>
        <member name="M:HalconDotNet.HScene3D.RenderScene3d(System.Int32)">
            <summary>
              Render an image of a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="cameraIndex">Index of the camera used to display the scene.</param>
            <returns>Rendered 3D scene.</returns>
        </member>
        <member name="M:HalconDotNet.HScene3D.RemoveScene3dLight(System.Int32)">
            <summary>
              Remove a light from a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="lightIndex">Light to remove.</param>
        </member>
        <member name="M:HalconDotNet.HScene3D.RemoveScene3dInstance(HalconDotNet.HTuple)">
            <summary>
              Remove an object instance from a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="instanceIndex">Index of the instance to remove.</param>
        </member>
        <member name="M:HalconDotNet.HScene3D.RemoveScene3dInstance(System.Int32)">
            <summary>
              Remove an object instance from a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="instanceIndex">Index of the instance to remove.</param>
        </member>
        <member name="M:HalconDotNet.HScene3D.RemoveScene3dCamera(System.Int32)">
            <summary>
              Remove a camera from a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="cameraIndex">Index of the camera to remove.</param>
        </member>
        <member name="M:HalconDotNet.HScene3D.DisplayScene3d(HalconDotNet.HWindow,HalconDotNet.HTuple)">
            <summary>
              Display a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="cameraIndex">Index of the camera used to display the scene.</param>
        </member>
        <member name="M:HalconDotNet.HScene3D.DisplayScene3d(HalconDotNet.HWindow,System.String)">
            <summary>
              Display a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="cameraIndex">Index of the camera used to display the scene.</param>
        </member>
        <member name="M:HalconDotNet.HScene3D.AddScene3dLight(HalconDotNet.HTuple,System.String)">
            <summary>
              Add a light source to a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="lightPosition">Position of the new light source. Default: [-100.0,-100.0,0.0]</param>
            <param name="lightKind">Type of the new light source. Default: "point_light"</param>
            <returns>Index of the new light source in the 3D scene.</returns>
        </member>
        <member name="M:HalconDotNet.HScene3D.AddScene3dInstance(HalconDotNet.HObjectModel3D[],HalconDotNet.HPose[])">
            <summary>
              Add an instance of a 3D object model to a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="pose">Pose of the 3D object model.</param>
            <returns>Index of the new instance in the 3D scene.</returns>
        </member>
        <member name="M:HalconDotNet.HScene3D.AddScene3dInstance(HalconDotNet.HObjectModel3D,HalconDotNet.HPose)">
            <summary>
              Add an instance of a 3D object model to a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="pose">Pose of the 3D object model.</param>
            <returns>Index of the new instance in the 3D scene.</returns>
        </member>
        <member name="M:HalconDotNet.HScene3D.AddScene3dCamera(HalconDotNet.HTuple)">
            <summary>
              Add a camera to a 3D scene.
              Instance represents: Handle of the 3D scene.
            </summary>
            <param name="cameraParam">Parameters of the new camera.</param>
            <returns>Index of the new camera in the 3D scene.</returns>
        </member>
        <member name="M:HalconDotNet.HScene3D.CreateScene3d">
            <summary>
              Create the data structure that is needed to visualize collections of 3D objects.
              Modified instance represents: Handle of the 3D scene.
            </summary>
        </member>
        <member name="T:HalconDotNet.HColorTransLUT">
            <summary>Represents an instance of a color space transformation lookup table</summary>
        </member>
        <member name="M:HalconDotNet.HColorTransLUT.#ctor(System.String,System.String,System.Int32)">
            <summary>
              Creates the look-up-table for transformation of an image from the RGB color space to an arbitrary color space.
              Modified instance represents: Handle of the look-up-table for color space transformation.
            </summary>
            <param name="colorSpace">Color space of the output image. Default: "hsv"</param>
            <param name="transDirection">Direction of color space transformation. Default: "from_rgb"</param>
            <param name="numBits">Number of bits of the input image. Default: 8</param>
        </member>
        <member name="M:HalconDotNet.HColorTransLUT.ApplyColorTransLut(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage@,HalconDotNet.HImage@)">
            <summary>
              Color space transformation using pre-generated look-up-table.
              Instance represents: Handle of the look-up-table for the color space transformation.
            </summary>
            <param name="image1">Input image (channel 2).</param>
            <param name="image2">Input image (channel 2).</param>
            <param name="image3">Input image (channel 3).</param>
            <param name="imageResult2">Color-transformed output image (channel 2).</param>
            <param name="imageResult3">Color-transformed output image (channel 3).</param>
            <returns>Color-transformed output image (channel 1).</returns>
        </member>
        <member name="M:HalconDotNet.HColorTransLUT.CreateColorTransLut(System.String,System.String,System.Int32)">
            <summary>
              Creates the look-up-table for transformation of an image from the RGB color space to an arbitrary color space.
              Modified instance represents: Handle of the look-up-table for color space transformation.
            </summary>
            <param name="colorSpace">Color space of the output image. Default: "hsv"</param>
            <param name="transDirection">Direction of color space transformation. Default: "from_rgb"</param>
            <param name="numBits">Number of bits of the input image. Default: 8</param>
        </member>
        <member name="T:HalconDotNet.HBgEsti">
            <summary>Represents an instance of a background estimator.</summary>
        </member>
        <member name="M:HalconDotNet.HBgEsti.#ctor(HalconDotNet.HImage,System.Double,System.Double,System.String,System.Double,System.Double,System.String,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
              Generate and initialize a data set for the background estimation.
              Modified instance represents: ID of the BgEsti data set.
            </summary>
            <param name="initializeImage">initialization image.</param>
            <param name="syspar1">1. system matrix parameter. Default: 0.7</param>
            <param name="syspar2">2. system matrix parameter. Default: 0.7</param>
            <param name="gainMode">Gain type. Default: "fixed"</param>
            <param name="gain1">Kalman gain / foreground adaptation time. Default: 0.002</param>
            <param name="gain2">Kalman gain / background adaptation time. Default: 0.02</param>
            <param name="adaptMode">Threshold adaptation. Default: "on"</param>
            <param name="minDiff">Foreground/background threshold. Default: 7.0</param>
            <param name="statNum">Number of statistic data sets. Default: 10</param>
            <param name="confidenceC">Confidence constant. Default: 3.25</param>
            <param name="timeC">Constant for decay time. Default: 15.0</param>
        </member>
        <member name="M:HalconDotNet.HBgEsti.GiveBgEsti">
            <summary>
              Return the estimated background image.
              Instance represents: ID of the BgEsti data set.
            </summary>
            <returns>Estimated background image of the current data set.</returns>
        </member>
        <member name="M:HalconDotNet.HBgEsti.UpdateBgEsti(HalconDotNet.HImage,HalconDotNet.HRegion)">
            <summary>
              Change the estimated background image.
              Instance represents: ID of the BgEsti data set.
            </summary>
            <param name="presentImage">Current image.</param>
            <param name="upDateRegion">Region describing areas to change.</param>
        </member>
        <member name="M:HalconDotNet.HBgEsti.RunBgEsti(HalconDotNet.HImage)">
            <summary>
              Estimate the background and return the foreground region.
              Instance represents: ID of the BgEsti data set.
            </summary>
            <param name="presentImage">Current image.</param>
            <returns>Region of the detected foreground.</returns>
        </member>
        <member name="M:HalconDotNet.HBgEsti.GetBgEstiParams(System.Double@,System.String@,System.Double@,System.Double@,System.String@,System.Double@,System.Int32@,System.Double@,System.Double@)">
            <summary>
              Return the parameters of the data set.
              Instance represents: ID of the BgEsti data set.
            </summary>
            <param name="syspar2">2. system matrix parameter.</param>
            <param name="gainMode">Gain type.</param>
            <param name="gain1">Kalman gain / foreground adaptation time.</param>
            <param name="gain2">Kalman gain / background adaptation time.</param>
            <param name="adaptMode">Threshold adaptation.</param>
            <param name="minDiff">Foreground / background threshold.</param>
            <param name="statNum">Number of statistic data sets.</param>
            <param name="confidenceC">Confidence constant.</param>
            <param name="timeC">Constant for decay time.</param>
            <returns>1. system matrix parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HBgEsti.SetBgEstiParams(System.Double,System.Double,System.String,System.Double,System.Double,System.String,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
              Change the parameters of the data set.
              Instance represents: ID of the BgEsti data set.
            </summary>
            <param name="syspar1">1. system matrix parameter. Default: 0.7</param>
            <param name="syspar2">2. system matrix parameter. Default: 0.7</param>
            <param name="gainMode">Gain type. Default: "fixed"</param>
            <param name="gain1">Kalman gain / foreground adaptation time. Default: 0.002</param>
            <param name="gain2">Kalman gain / background adaptation time. Default: 0.02</param>
            <param name="adaptMode">Threshold adaptation. Default: "on"</param>
            <param name="minDiff">Foreground/background threshold. Default: 7.0</param>
            <param name="statNum">Number of statistic data sets. Default: 10</param>
            <param name="confidenceC">Confidence constant. Default: 3.25</param>
            <param name="timeC">Constant for decay time. Default: 15.0</param>
        </member>
        <member name="M:HalconDotNet.HBgEsti.CreateBgEsti(HalconDotNet.HImage,System.Double,System.Double,System.String,System.Double,System.Double,System.String,System.Double,System.Int32,System.Double,System.Double)">
            <summary>
              Generate and initialize a data set for the background estimation.
              Modified instance represents: ID of the BgEsti data set.
            </summary>
            <param name="initializeImage">initialization image.</param>
            <param name="syspar1">1. system matrix parameter. Default: 0.7</param>
            <param name="syspar2">2. system matrix parameter. Default: 0.7</param>
            <param name="gainMode">Gain type. Default: "fixed"</param>
            <param name="gain1">Kalman gain / foreground adaptation time. Default: 0.002</param>
            <param name="gain2">Kalman gain / background adaptation time. Default: 0.02</param>
            <param name="adaptMode">Threshold adaptation. Default: "on"</param>
            <param name="minDiff">Foreground/background threshold. Default: 7.0</param>
            <param name="statNum">Number of statistic data sets. Default: 10</param>
            <param name="confidenceC">Confidence constant. Default: 3.25</param>
            <param name="timeC">Constant for decay time. Default: 15.0</param>
        </member>
        <member name="T:HalconDotNet.HObjectModel3D">
            <summary>Represents an instance of a 3D object model.</summary>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.#ctor">
            <summary>
              Create an empty 3D object model.
              Modified instance represents: Handle of the new 3D object model.
            </summary>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.#ctor(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a 3D object model that represents a point cloud from a set of 3D points.
              Modified instance represents: Handle of the resulting 3D object model.
            </summary>
            <param name="x">The x-coodinates of the points in the 3D point  cloud.</param>
            <param name="y">The y-coodinates of the points in the 3D point  cloud.</param>
            <param name="z">The z-coodinates of the points in the 3D point  cloud.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
              Create a 3D object model that represents a point cloud from a set of 3D points.
              Modified instance represents: Handle of the resulting 3D object model.
            </summary>
            <param name="x">The x-coodinates of the points in the 3D point  cloud.</param>
            <param name="y">The y-coodinates of the points in the 3D point  cloud.</param>
            <param name="z">The z-coodinates of the points in the 3D point  cloud.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.#ctor(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage)">
            <summary>
              Transform 3D points from images to a 3D object model.
              Modified instance represents: Handle of the 3D object model.
            </summary>
            <param name="x">Image with the X-Coordinates and the ROI of the 3D points.</param>
            <param name="y">Image with the Y-Coordinates of the 3D points.</param>
            <param name="z">Image with the Z-Coordinates of the 3D points.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.#ctor(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Read a 3D object model from a file.
              Modified instance represents: Handle of the 3D object model.
            </summary>
            <param name="fileName">Filename of the file to be read.</param>
            <param name="scale">Scale of the data in the file. Default: "m"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="status">Status information.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.#ctor(System.String,System.String,System.String,System.String,System.String@)">
            <summary>
              Read a 3D object model from a file.
              Modified instance represents: Handle of the 3D object model.
            </summary>
            <param name="fileName">Filename of the file to be read.</param>
            <param name="scale">Scale of the data in the file. Default: "m"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="status">Status information.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.GetSheetOfLightResultObjectModel3d(HalconDotNet.HSheetOfLightModel)">
            <summary>
              Get the result of a calibrated measurement performed with the  sheet-of-light technique as a 3D object model.
              Modified instance represents: Handle of the resulting 3D object model.
            </summary>
            <param name="sheetOfLightModelID">Handle for accessing the sheet-of-light model.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.FitPrimitivesObjectModel3d(HalconDotNet.HObjectModel3D[],HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Fit 3D primitives into a set of 3D points.</summary>
            <param name="objectModel3D">Handle of the input 3D object model.</param>
            <param name="paramName">Names of the generic parameters.</param>
            <param name="paramValue">Values of the generic parameters.</param>
            <returns>Handle of the output 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.FitPrimitivesObjectModel3d(System.String,System.String)">
            <summary>
              Fit 3D primitives into a set of 3D points.
              Instance represents: Handle of the input 3D object model.
            </summary>
            <param name="paramName">Names of the generic parameters.</param>
            <param name="paramValue">Values of the generic parameters.</param>
            <returns>Handle of the output 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SegmentObjectModel3d(HalconDotNet.HObjectModel3D[],HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Segment a set of 3D points into sub-sets with similar characteristics.</summary>
            <param name="objectModel3D">Handle of the input 3D object model.</param>
            <param name="paramName">Names of the generic parameters.</param>
            <param name="paramValue">Values of the generic parameters.</param>
            <returns>Handle of the output 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SegmentObjectModel3d(System.String,System.String)">
            <summary>
              Segment a set of 3D points into sub-sets with similar characteristics.
              Instance represents: Handle of the input 3D object model.
            </summary>
            <param name="paramName">Names of the generic parameters.</param>
            <param name="paramValue">Values of the generic parameters.</param>
            <returns>Handle of the output 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SurfaceNormalsObjectModel3d(HalconDotNet.HObjectModel3D[],System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Calculate the 3D surface normals of a 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model containing 3D point data.</param>
            <param name="method">Normals calculation method. Default: "mls"</param>
            <param name="genParamName">Names of generic smoothing parameters. Default: []</param>
            <param name="genParamValue">Values of generic smoothing parameters. Default: []</param>
            <returns>Handle of the 3D object model with calculated 3D normals.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SurfaceNormalsObjectModel3d(System.String,System.String,System.Double)">
            <summary>
              Calculate the 3D surface normals of a 3D object model.
              Instance represents: Handle of the 3D object model containing 3D point data.
            </summary>
            <param name="method">Normals calculation method. Default: "mls"</param>
            <param name="genParamName">Names of generic smoothing parameters. Default: []</param>
            <param name="genParamValue">Values of generic smoothing parameters. Default: []</param>
            <returns>Handle of the 3D object model with calculated 3D normals.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SmoothObjectModel3d(HalconDotNet.HObjectModel3D[],System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Smooth the 3D points of a 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model containing 3D point data.</param>
            <param name="method">Smoothing method. Default: "mls"</param>
            <param name="genParamName">Names of generic smoothing parameters. Default: []</param>
            <param name="genParamValue">Values of generic smoothing parameters. Default: []</param>
            <returns>Handle of the 3D object model with the smoothed 3D point data.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SmoothObjectModel3d(System.String,System.String,System.Double)">
            <summary>
              Smooth the 3D points of a 3D object model.
              Instance represents: Handle of the 3D object model containing 3D point data.
            </summary>
            <param name="method">Smoothing method. Default: "mls"</param>
            <param name="genParamName">Names of generic smoothing parameters. Default: []</param>
            <param name="genParamValue">Values of generic smoothing parameters. Default: []</param>
            <returns>Handle of the 3D object model with the smoothed 3D point data.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.TriangulateObjectModel3d(HalconDotNet.HObjectModel3D[],System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Create a surface triangulation for a 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model containing 3D point data.</param>
            <param name="method">Triangulation method. Default: "greedy"</param>
            <param name="genParamName">Names of the generic triangulation parameters. Default: []</param>
            <param name="genParamValue">Values of the generic triangulation parameters. Default: []</param>
            <param name="information">Additional information about the triangulation process.</param>
            <returns>Handle of the 3D object model with the triangulated surface.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.TriangulateObjectModel3d(System.String,System.String,System.Double,System.Int32@)">
            <summary>
              Create a surface triangulation for a 3D object model.
              Instance represents: Handle of the 3D object model containing 3D point data.
            </summary>
            <param name="method">Triangulation method. Default: "greedy"</param>
            <param name="genParamName">Names of the generic triangulation parameters. Default: []</param>
            <param name="genParamValue">Values of the generic triangulation parameters. Default: []</param>
            <param name="information">Additional information about the triangulation process.</param>
            <returns>Handle of the 3D object model with the triangulated surface.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.ReconstructSurfaceStereo(HalconDotNet.HImage,HalconDotNet.HStereoModel)">
            <summary>
              Reconstruct surface from calibrated multi-view stereo images.
              Modified instance represents: Handle to the resulting surface.
            </summary>
            <param name="images">An image array acquired by the camera setup associated to the stereo model.</param>
            <param name="stereoModelID">Handle of the stereo model.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.RefineDeformableSurfaceModel(HalconDotNet.HDeformableSurfaceModel,System.Double,HalconDotNet.HObjectModel3D,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HDeformableSurfaceMatchingResult[]@)">
            <summary>
              Refine the position and deformation of a deformable surface model in a 3D scene.
              Instance represents: Handle of the 3D object model containing the scene.
            </summary>
            <param name="deformableSurfaceModel">Handle of the deformable surface model.</param>
            <param name="relSamplingDistance">Relative sampling distance of the scene. Default: 0.05</param>
            <param name="initialDeformationObjectModel3D">Initial deformation of the 3D object model</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="deformableSurfaceMatchingResult">Handle of the matching result.</param>
            <returns>Score of the refined model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.RefineDeformableSurfaceModel(HalconDotNet.HDeformableSurfaceModel,System.Double,HalconDotNet.HObjectModel3D,System.String,System.String,HalconDotNet.HDeformableSurfaceMatchingResult@)">
            <summary>
              Refine the position and deformation of a deformable surface model in a 3D scene.
              Instance represents: Handle of the 3D object model containing the scene.
            </summary>
            <param name="deformableSurfaceModel">Handle of the deformable surface model.</param>
            <param name="relSamplingDistance">Relative sampling distance of the scene. Default: 0.05</param>
            <param name="initialDeformationObjectModel3D">Initial deformation of the 3D object model</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="deformableSurfaceMatchingResult">Handle of the matching result.</param>
            <returns>Score of the refined model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.FindDeformableSurfaceModel(HalconDotNet.HDeformableSurfaceModel,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HDeformableSurfaceMatchingResult[]@)">
            <summary>
              Find the best match of a deformable surface model in a 3D scene.
              Instance represents: Handle of the 3D object model containing the scene.
            </summary>
            <param name="deformableSurfaceModel">Handle of the deformable surface model.</param>
            <param name="relSamplingDistance">Scene sampling distance relative to the diameter of the surface model. Default: 0.05</param>
            <param name="minScore">Minimum score of the returned match. Default: 0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="deformableSurfaceMatchingResult">Handle of the matching result.</param>
            <returns>Score of the found instances of the surface model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.FindDeformableSurfaceModel(HalconDotNet.HDeformableSurfaceModel,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HDeformableSurfaceMatchingResult@)">
            <summary>
              Find the best match of a deformable surface model in a 3D scene.
              Instance represents: Handle of the 3D object model containing the scene.
            </summary>
            <param name="deformableSurfaceModel">Handle of the deformable surface model.</param>
            <param name="relSamplingDistance">Scene sampling distance relative to the diameter of the surface model. Default: 0.05</param>
            <param name="minScore">Minimum score of the returned match. Default: 0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="deformableSurfaceMatchingResult">Handle of the matching result.</param>
            <returns>Score of the found instances of the surface model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.AddDeformableSurfaceModelSample(HalconDotNet.HDeformableSurfaceModel,HalconDotNet.HObjectModel3D[])">
            <summary>Add a sample deformation to a deformable surface model</summary>
            <param name="deformableSurfaceModel">Handle of the deformable surface model.</param>
            <param name="objectModel3D">Handle of the deformed 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.AddDeformableSurfaceModelSample(HalconDotNet.HDeformableSurfaceModel)">
            <summary>
              Add a sample deformation to a deformable surface model
              Instance represents: Handle of the deformed 3D object model.
            </summary>
            <param name="deformableSurfaceModel">Handle of the deformable surface model.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.CreateDeformableSurfaceModel(System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create the data structure needed to perform deformable surface-based matching.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="relSamplingDistance">Sampling distance relative to the object's diameter Default: 0.05</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Handle of the deformable surface model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.CreateDeformableSurfaceModel(System.Double,System.String,System.String)">
            <summary>
              Create the data structure needed to perform deformable surface-based matching.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="relSamplingDistance">Sampling distance relative to the object's diameter Default: 0.05</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Handle of the deformable surface model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.RefineSurfaceModelPose(HalconDotNet.HSurfaceModel,HalconDotNet.HPose[],HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HSurfaceMatchingResult[]@)">
            <summary>
              Refine the pose of a surface model in a 3D scene.
              Instance represents: Handle of the 3D object model containing the scene.
            </summary>
            <param name="surfaceModelID">Handle of the surface model.</param>
            <param name="initialPose">Initial pose of the surface model in the scene.</param>
            <param name="minScore">Minimum score of the returned poses. Default: 0</param>
            <param name="returnResultHandle">Enable returning a result handle in SurfaceMatchingResultID. Default: "false"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="score">Score of the found instances of the model.</param>
            <param name="surfaceMatchingResultID">Handle of the matching result, if enabled in ReturnResultHandle.</param>
            <returns>3D pose of the surface model in the scene.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.RefineSurfaceModelPose(HalconDotNet.HSurfaceModel,HalconDotNet.HPose,System.Double,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HSurfaceMatchingResult@)">
            <summary>
              Refine the pose of a surface model in a 3D scene.
              Instance represents: Handle of the 3D object model containing the scene.
            </summary>
            <param name="surfaceModelID">Handle of the surface model.</param>
            <param name="initialPose">Initial pose of the surface model in the scene.</param>
            <param name="minScore">Minimum score of the returned poses. Default: 0</param>
            <param name="returnResultHandle">Enable returning a result handle in SurfaceMatchingResultID. Default: "false"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="score">Score of the found instances of the model.</param>
            <param name="surfaceMatchingResultID">Handle of the matching result, if enabled in ReturnResultHandle.</param>
            <returns>3D pose of the surface model in the scene.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.FindSurfaceModel(HalconDotNet.HSurfaceModel,System.Double,System.Double,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HSurfaceMatchingResult[]@)">
            <summary>
              Find the best matches of a surface model in a 3D scene.
              Instance represents: Handle of the 3D object model containing the scene.
            </summary>
            <param name="surfaceModelID">Handle of the surface model.</param>
            <param name="relSamplingDistance">Scene sampling distance relative to the diameter of the surface model. Default: 0.05</param>
            <param name="keyPointFraction">Fraction of sampled scene points used as key points. Default: 0.2</param>
            <param name="minScore">Minimum score of the returned poses. Default: 0</param>
            <param name="returnResultHandle">Enable returning a result handle in SurfaceMatchingResultID. Default: "false"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="score">Score of the found instances of the surface model.</param>
            <param name="surfaceMatchingResultID">Handle of the matching result, if enabled in ReturnResultHandle.</param>
            <returns>3D pose of the surface model in the scene.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.FindSurfaceModel(HalconDotNet.HSurfaceModel,System.Double,System.Double,System.Double,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HSurfaceMatchingResult@)">
            <summary>
              Find the best matches of a surface model in a 3D scene.
              Instance represents: Handle of the 3D object model containing the scene.
            </summary>
            <param name="surfaceModelID">Handle of the surface model.</param>
            <param name="relSamplingDistance">Scene sampling distance relative to the diameter of the surface model. Default: 0.05</param>
            <param name="keyPointFraction">Fraction of sampled scene points used as key points. Default: 0.2</param>
            <param name="minScore">Minimum score of the returned poses. Default: 0</param>
            <param name="returnResultHandle">Enable returning a result handle in SurfaceMatchingResultID. Default: "false"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="score">Score of the found instances of the surface model.</param>
            <param name="surfaceMatchingResultID">Handle of the matching result, if enabled in ReturnResultHandle.</param>
            <returns>3D pose of the surface model in the scene.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.CreateSurfaceModel(System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create the data structure needed to perform surface-based matching.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="relSamplingDistance">Sampling distance relative to the object's diameter Default: 0.03</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Handle of the surface model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.CreateSurfaceModel(System.Double,System.String,System.String)">
            <summary>
              Create the data structure needed to perform surface-based matching.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="relSamplingDistance">Sampling distance relative to the object's diameter Default: 0.03</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Handle of the surface model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SimplifyObjectModel3d(HalconDotNet.HObjectModel3D[],System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Simplify a triangulated 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model that should be simplified.</param>
            <param name="method">Method that should be used for simplification. Default: "preserve_point_coordinates"</param>
            <param name="amount">Degree of simplification (default: percentage of remaining model points).</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Handle of the simplified 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SimplifyObjectModel3d(System.String,System.Double,System.String,System.String)">
            <summary>
              Simplify a triangulated 3D object model.
              Instance represents: Handle of the 3D object model that should be simplified.
            </summary>
            <param name="method">Method that should be used for simplification. Default: "preserve_point_coordinates"</param>
            <param name="amount">Degree of simplification (default: percentage of remaining model points).</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Handle of the simplified 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.DistanceObjectModel3d(HalconDotNet.HObjectModel3D,HalconDotNet.HPose,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Compute the distances of the points of one 3D object model to another 3D object model.
              Instance represents: Handle of the source 3D object model.
            </summary>
            <param name="objectModel3DTo">Handle of the target 3D object model.</param>
            <param name="pose">Pose of the source 3D object model in the target 3D object model. Default: []</param>
            <param name="maxDistance">Maximum distance of interest. Default: 0</param>
            <param name="genParamNames">Names of the generic input parameters. Default: []</param>
            <param name="genParamValues">Values of the generic input parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.DistanceObjectModel3d(HalconDotNet.HObjectModel3D,HalconDotNet.HPose,System.Double,System.String,System.String)">
            <summary>
              Compute the distances of the points of one 3D object model to another 3D object model.
              Instance represents: Handle of the source 3D object model.
            </summary>
            <param name="objectModel3DTo">Handle of the target 3D object model.</param>
            <param name="pose">Pose of the source 3D object model in the target 3D object model. Default: []</param>
            <param name="maxDistance">Maximum distance of interest. Default: 0</param>
            <param name="genParamNames">Names of the generic input parameters. Default: []</param>
            <param name="genParamValues">Values of the generic input parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.UnionObjectModel3d(HalconDotNet.HObjectModel3D[],System.String)">
            <summary>Combine several 3D object models to a new 3D object model.</summary>
            <param name="objectModels3D">Handle of input 3D object models.</param>
            <param name="method">Method used for the union. Default: "points_surface"</param>
            <returns>Handle of the resulting 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.UnionObjectModel3d(System.String)">
            <summary>
              Combine several 3D object models to a new 3D object model.
              Instance represents: Handle of input 3D object models.
            </summary>
            <param name="method">Method used for the union. Default: "points_surface"</param>
            <returns>Handle of the resulting 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SetObjectModel3dAttribMod(HalconDotNet.HTuple,System.String,HalconDotNet.HTuple)">
            <summary>
              Set attributes of a 3D object model.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="attribName">Name of the attributes.</param>
            <param name="attachExtAttribTo">Defines where extended attributes are attached to. Default: []</param>
            <param name="attribValues">Attribute values.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SetObjectModel3dAttribMod(System.String,System.String,System.Double)">
            <summary>
              Set attributes of a 3D object model.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="attribName">Name of the attributes.</param>
            <param name="attachExtAttribTo">Defines where extended attributes are attached to. Default: []</param>
            <param name="attribValues">Attribute values.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SetObjectModel3dAttrib(HalconDotNet.HTuple,System.String,HalconDotNet.HTuple)">
            <summary>
              Set attributes of a 3D object model.
              Instance represents: Handle of the input 3D object model.
            </summary>
            <param name="attribName">Name of the attributes.</param>
            <param name="attachExtAttribTo">Defines where extended attributes are attached to. Default: []</param>
            <param name="attribValues">Attribute values.</param>
            <returns>Handle of the resulting 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SetObjectModel3dAttrib(System.String,System.String,System.Double)">
            <summary>
              Set attributes of a 3D object model.
              Instance represents: Handle of the input 3D object model.
            </summary>
            <param name="attribName">Name of the attributes.</param>
            <param name="attachExtAttribTo">Defines where extended attributes are attached to. Default: []</param>
            <param name="attribValues">Attribute values.</param>
            <returns>Handle of the resulting 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.GenEmptyObjectModel3d">
            <summary>
              Create an empty 3D object model.
              Modified instance represents: Handle of the new 3D object model.
            </summary>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SampleObjectModel3d(HalconDotNet.HObjectModel3D[],System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Sample a 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model to be sampled.</param>
            <param name="method">Selects between the different subsampling methods. Default: "fast"</param>
            <param name="sampleDistance">Sampling distance. Default: 0.05</param>
            <param name="genParamName">Names of the generic parameters that can be adjusted. Default: []</param>
            <param name="genParamValue">Values of the generic parameters that can be  adjusted. Default: []</param>
            <returns>Handle of the 3D object model that contains the sampled points.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SampleObjectModel3d(System.String,System.Double,System.String,System.Double)">
            <summary>
              Sample a 3D object model.
              Instance represents: Handle of the 3D object model to be sampled.
            </summary>
            <param name="method">Selects between the different subsampling methods. Default: "fast"</param>
            <param name="sampleDistance">Sampling distance. Default: 0.05</param>
            <param name="genParamName">Names of the generic parameters that can be adjusted. Default: []</param>
            <param name="genParamValue">Values of the generic parameters that can be  adjusted. Default: []</param>
            <returns>Handle of the 3D object model that contains the sampled points.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.RegisterObjectModel3dGlobal(HalconDotNet.HObjectModel3D[],HalconDotNet.HHomMat3D[],HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Improve the relative transformations between 3D object models based on  their overlaps.</summary>
            <param name="objectModels3D">Handles of several 3D object models.</param>
            <param name="homMats3D">Approximate relative transformations between  the 3D object models.</param>
            <param name="from">Type of interpretation for the transformations. Default: "global"</param>
            <param name="to">Target indices of the transformations if  From specifies the source indices, otherwise  the parameter must be empty. Default: []</param>
            <param name="genParamName">Names of the generic parameters that can be adjusted  for the global 3D object model registration. Default: []</param>
            <param name="genParamValue">Values of the generic parameters that can be adjusted  for the global 3D object model registration. Default: []</param>
            <param name="scores">Number of overlapping neighbors for each  3D object model.</param>
            <returns>Resulting Transformations.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.RegisterObjectModel3dGlobal(HalconDotNet.HHomMat3D[],System.String,System.Int32,System.String,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Improve the relative transformations between 3D object models based on  their overlaps.
              Instance represents: Handles of several 3D object models.
            </summary>
            <param name="homMats3D">Approximate relative transformations between  the 3D object models.</param>
            <param name="from">Type of interpretation for the transformations. Default: "global"</param>
            <param name="to">Target indices of the transformations if  From specifies the source indices, otherwise  the parameter must be empty. Default: []</param>
            <param name="genParamName">Names of the generic parameters that can be adjusted  for the global 3D object model registration. Default: []</param>
            <param name="genParamValue">Values of the generic parameters that can be adjusted  for the global 3D object model registration. Default: []</param>
            <param name="scores">Number of overlapping neighbors for each  3D object model.</param>
            <returns>Resulting Transformations.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.RegisterObjectModel3dPair(HalconDotNet.HObjectModel3D,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Search for a transformation between two 3D object models.
              Instance represents: Handle of the first 3D object model.
            </summary>
            <param name="objectModel3D2">Handle of the second 3D object model.</param>
            <param name="method">Method for the registration. Default: "matching"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="score">Overlapping of the two 3D object models.</param>
            <returns>Pose to transform ObjectModel3D1 in  the reference frame of ObjectModel3D2.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.RegisterObjectModel3dPair(HalconDotNet.HObjectModel3D,System.String,System.String,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Search for a transformation between two 3D object models.
              Instance represents: Handle of the first 3D object model.
            </summary>
            <param name="objectModel3D2">Handle of the second 3D object model.</param>
            <param name="method">Method for the registration. Default: "matching"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="score">Overlapping of the two 3D object models.</param>
            <returns>Pose to transform ObjectModel3D1 in  the reference frame of ObjectModel3D2.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.GenObjectModel3dFromPoints(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a 3D object model that represents a point cloud from a set of 3D points.
              Modified instance represents: Handle of the resulting 3D object model.
            </summary>
            <param name="x">The x-coodinates of the points in the 3D point  cloud.</param>
            <param name="y">The y-coodinates of the points in the 3D point  cloud.</param>
            <param name="z">The z-coodinates of the points in the 3D point  cloud.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.GenObjectModel3dFromPoints(System.Double,System.Double,System.Double)">
            <summary>
              Create a 3D object model that represents a point cloud from a set of 3D points.
              Modified instance represents: Handle of the resulting 3D object model.
            </summary>
            <param name="x">The x-coodinates of the points in the 3D point  cloud.</param>
            <param name="y">The y-coodinates of the points in the 3D point  cloud.</param>
            <param name="z">The z-coodinates of the points in the 3D point  cloud.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.GenBoxObjectModel3d(HalconDotNet.HPose[],HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create a 3D object model that represents a box.</summary>
            <param name="pose">The pose that describes the position and  orientation of the box.  The pose has its origin in the center of the box.</param>
            <param name="lengthX">The length of the box along the x-axis.</param>
            <param name="lengthY">The length of the box along the y-axis.</param>
            <param name="lengthZ">The length of the box along the z-axis.</param>
            <returns>Handle of the resulting 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.GenBoxObjectModel3d(HalconDotNet.HPose,System.Double,System.Double,System.Double)">
            <summary>
              Create a 3D object model that represents a box.
              Modified instance represents: Handle of the resulting 3D object model.
            </summary>
            <param name="pose">The pose that describes the position and  orientation of the box.  The pose has its origin in the center of the box.</param>
            <param name="lengthX">The length of the box along the x-axis.</param>
            <param name="lengthY">The length of the box along the y-axis.</param>
            <param name="lengthZ">The length of the box along the z-axis.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.GenPlaneObjectModel3d(HalconDotNet.HPose,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a 3D object model that represents a plane.
              Modified instance represents: Handle of the resulting 3D object model.
            </summary>
            <param name="pose">The center and the rotation of the plane.</param>
            <param name="XExtent">x coordinates specifying the extent of the plane.</param>
            <param name="YExtent">y coordinates specifying the extent of the plane.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.GenPlaneObjectModel3d(HalconDotNet.HPose,System.Double,System.Double)">
            <summary>
              Create a 3D object model that represents a plane.
              Modified instance represents: Handle of the resulting 3D object model.
            </summary>
            <param name="pose">The center and the rotation of the plane.</param>
            <param name="XExtent">x coordinates specifying the extent of the plane.</param>
            <param name="YExtent">y coordinates specifying the extent of the plane.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.GenSphereObjectModel3dCenter(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create a 3D object model that represents a sphere from x,y,z coordinates.</summary>
            <param name="x">The x-coodinate of the center point of the sphere.</param>
            <param name="y">The y-coodinate of the center point of the sphere.</param>
            <param name="z">The z-coodinate of the center point of the sphere.</param>
            <param name="radius">The radius of the sphere.</param>
            <returns>Handle of the resulting 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.GenSphereObjectModel3dCenter(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create a 3D object model that represents a sphere from x,y,z coordinates.
              Modified instance represents: Handle of the resulting 3D object model.
            </summary>
            <param name="x">The x-coodinate of the center point of the sphere.</param>
            <param name="y">The y-coodinate of the center point of the sphere.</param>
            <param name="z">The z-coodinate of the center point of the sphere.</param>
            <param name="radius">The radius of the sphere.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.GenSphereObjectModel3d(HalconDotNet.HPose[],HalconDotNet.HTuple)">
            <summary>Create a 3D object model that represents a sphere.</summary>
            <param name="pose">The pose that describes the position of the sphere.</param>
            <param name="radius">The radius of the sphere.</param>
            <returns>Handle of the resulting 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.GenSphereObjectModel3d(HalconDotNet.HPose,System.Double)">
            <summary>
              Create a 3D object model that represents a sphere.
              Modified instance represents: Handle of the resulting 3D object model.
            </summary>
            <param name="pose">The pose that describes the position of the sphere.</param>
            <param name="radius">The radius of the sphere.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.GenCylinderObjectModel3d(HalconDotNet.HPose[],HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Create a 3D object model that represents a cylinder.</summary>
            <param name="pose">The pose that describes the position and  orientation of the cylinder.</param>
            <param name="radius">The radius of the cylinder.</param>
            <param name="minExtent">The length of the cylinder in negative direction of the rotation axis.</param>
            <param name="maxExtent">The length of the cylinder in positive direction of the rotation axis.</param>
            <returns>Handle of the resulting 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.GenCylinderObjectModel3d(HalconDotNet.HPose,System.Double,System.Double,System.Double)">
            <summary>
              Create a 3D object model that represents a cylinder.
              Modified instance represents: Handle of the resulting 3D object model.
            </summary>
            <param name="pose">The pose that describes the position and  orientation of the cylinder.</param>
            <param name="radius">The radius of the cylinder.</param>
            <param name="minExtent">The length of the cylinder in negative direction of the rotation axis.</param>
            <param name="maxExtent">The length of the cylinder in positive direction of the rotation axis.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SmallestBoundingBoxObjectModel3d(HalconDotNet.HObjectModel3D[],System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the smallest bounding box around the points of a  3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="type">The method that is used to estimate the  smallest box. Default: "oriented"</param>
            <param name="length1">The length of the longest side of the box.</param>
            <param name="length2">The length of the second longest side of the  box.</param>
            <param name="length3">The length of the third longest side of the  box.</param>
            <returns>The pose that describes the position and  orientation of the box that is generated.  The pose has its origin in the center of the  box and is oriented such  that the x-axis is aligned with the longest  side of the box.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SmallestBoundingBoxObjectModel3d(System.String,System.Double@,System.Double@,System.Double@)">
            <summary>
              Calculate the smallest bounding box around the points of a  3D object model.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="type">The method that is used to estimate the  smallest box. Default: "oriented"</param>
            <param name="length1">The length of the longest side of the box.</param>
            <param name="length2">The length of the second longest side of the  box.</param>
            <param name="length3">The length of the third longest side of the  box.</param>
            <returns>The pose that describes the position and  orientation of the box that is generated.  The pose has its origin in the center of the  box and is oriented such  that the x-axis is aligned with the longest  side of the box.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SmallestSphereObjectModel3d(HalconDotNet.HObjectModel3D[],HalconDotNet.HTuple@)">
            <summary>Calculate the smallest sphere around the points of a 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="radius">The estimated radius of the sphere.</param>
            <returns>x-, y-, and z-coordinates  describing the center point of the sphere.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SmallestSphereObjectModel3d(System.Double@)">
            <summary>
              Calculate the smallest sphere around the points of a 3D object model.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="radius">The estimated radius of the sphere.</param>
            <returns>x-, y-, and z-coordinates  describing the center point of the sphere.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.IntersectPlaneObjectModel3d(HalconDotNet.HObjectModel3D[],HalconDotNet.HPose[])">
            <summary>Intersect a 3D object model with a plane.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="plane">Pose of the plane. Default: [0,0,0,0,0,0,0]</param>
            <returns>Handle of the 3D object model that describes  the intersection as a set of lines.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.IntersectPlaneObjectModel3d(HalconDotNet.HPose)">
            <summary>
              Intersect a 3D object model with a plane.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="plane">Pose of the plane. Default: [0,0,0,0,0,0,0]</param>
            <returns>Handle of the 3D object model that describes  the intersection as a set of lines.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.ConvexHullObjectModel3d(HalconDotNet.HObjectModel3D[])">
            <summary>Calculate the convex hull of a 3D object model. </summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <returns>Handle of the 3D object model that describes  the convex hull.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.ConvexHullObjectModel3d">
            <summary>
              Calculate the convex hull of a 3D object model. 
              Instance represents: Handle of the 3D object model.
            </summary>
            <returns>Handle of the 3D object model that describes  the convex hull.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SelectObjectModel3d(HalconDotNet.HObjectModel3D[],HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Select 3D object models from an array of 3D object models according  to global features.</summary>
            <param name="objectModel3D">Handles of the available 3D object models to  select.</param>
            <param name="feature">List of features a test is performed on. Default: "has_triangles"</param>
            <param name="operation">Logical operation to combine the features given in Feature. Default: "and"</param>
            <param name="minValue">Minimum value for the given feature. Default: 1</param>
            <param name="maxValue">Maximum value for the given feature. Default: 1</param>
            <returns>A subset of ObjectModel3D fulfilling  the given conditions.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SelectObjectModel3d(System.String,System.String,System.Double,System.Double)">
            <summary>
              Select 3D object models from an array of 3D object models according  to global features.
              Instance represents: Handles of the available 3D object models to  select.
            </summary>
            <param name="feature">List of features a test is performed on. Default: "has_triangles"</param>
            <param name="operation">Logical operation to combine the features given in Feature. Default: "and"</param>
            <param name="minValue">Minimum value for the given feature. Default: 1</param>
            <param name="maxValue">Maximum value for the given feature. Default: 1</param>
            <returns>A subset of ObjectModel3D fulfilling  the given conditions.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.AreaObjectModel3d(HalconDotNet.HObjectModel3D[])">
            <summary>Calculate the area of all faces of a 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <returns>Calculated area.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.AreaObjectModel3d">
            <summary>
              Calculate the area of all faces of a 3D object model.
              Instance represents: Handle of the 3D object model.
            </summary>
            <returns>Calculated area.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.MaxDiameterObjectModel3d(HalconDotNet.HObjectModel3D[])">
            <summary>Calculate the maximal diameter of a 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <returns>Calculated diameter.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.MaxDiameterObjectModel3d">
            <summary>
              Calculate the maximal diameter of a 3D object model.
              Instance represents: Handle of the 3D object model.
            </summary>
            <returns>Calculated diameter.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.MomentsObjectModel3d(HalconDotNet.HObjectModel3D[],HalconDotNet.HTuple)">
            <summary>Calculates the mean or the central moment of second order for a 3D object  model.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="momentsToCalculate">Moment to calculate. Default: "mean_points"</param>
            <returns>Calculated moment.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.MomentsObjectModel3d(System.String)">
            <summary>
              Calculates the mean or the central moment of second order for a 3D object  model.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="momentsToCalculate">Moment to calculate. Default: "mean_points"</param>
            <returns>Calculated moment.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.VolumeObjectModel3dRelativeToPlane(HalconDotNet.HObjectModel3D[],HalconDotNet.HPose[],HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Calculate the volume of a 3D object model relative to a plane.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="plane">Pose of the plane. Default: [0,0,0,0,0,0,0]</param>
            <param name="mode">Method to combine volumes laying  above and below the reference plane. Default: "signed"</param>
            <param name="useFaceOrientation">Decides whether the orientation of a face should  affect the resulting sign of the underlying  volume. Default: "true"</param>
            <returns>Calculated volume.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.VolumeObjectModel3dRelativeToPlane(HalconDotNet.HPose,System.String,System.String)">
            <summary>
              Calculate the volume of a 3D object model relative to a plane.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="plane">Pose of the plane. Default: [0,0,0,0,0,0,0]</param>
            <param name="mode">Method to combine volumes laying  above and below the reference plane. Default: "signed"</param>
            <param name="useFaceOrientation">Decides whether the orientation of a face should  affect the resulting sign of the underlying  volume. Default: "true"</param>
            <returns>Calculated volume.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.ReduceObjectModel3dByView(HalconDotNet.HRegion,HalconDotNet.HObjectModel3D[],HalconDotNet.HTuple,HalconDotNet.HPose[])">
            <summary>Remove points from a 3D object model by projecting it to a virtual view  and removing all points outside of a given region.</summary>
            <param name="region">Region in the image plane.</param>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="camParam">Internal camera parameters.</param>
            <param name="pose">3D pose of the world coordinate system in camera coordinates.</param>
            <returns>Handle of the reduced 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.ReduceObjectModel3dByView(HalconDotNet.HRegion,HalconDotNet.HTuple,HalconDotNet.HPose)">
            <summary>
              Remove points from a 3D object model by projecting it to a virtual view  and removing all points outside of a given region.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="region">Region in the image plane.</param>
            <param name="camParam">Internal camera parameters.</param>
            <param name="pose">3D pose of the world coordinate system in camera coordinates.</param>
            <returns>Handle of the reduced 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.ConnectionObjectModel3d(HalconDotNet.HObjectModel3D[],HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Determine the connected components of the 3D object model.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="feature">Attribute used to calculate the connected  components. Default: "distance_3d"</param>
            <param name="value">Maximum value for the distance between two  connected components. Default: 1.0</param>
            <returns>Handle of the 3D object models that represent  the connected components.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.ConnectionObjectModel3d(System.String,System.Double)">
            <summary>
              Determine the connected components of the 3D object model.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="feature">Attribute used to calculate the connected  components. Default: "distance_3d"</param>
            <param name="value">Maximum value for the distance between two  connected components. Default: 1.0</param>
            <returns>Handle of the 3D object models that represent  the connected components.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SelectPointsObjectModel3d(HalconDotNet.HObjectModel3D[],HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Apply a threshold to an attribute of 3D object models.</summary>
            <param name="objectModel3D">Handle of the 3D object models.</param>
            <param name="attrib">Attributes the threshold is applied to. Default: "point_coord_z"</param>
            <param name="minValue">Minimum value for the attributes specified by  Attrib. Default: 0.5</param>
            <param name="maxValue">Maximum value for the attributes specified  by Attrib. Default: 1.0</param>
            <returns>Handle of the reduced 3D object models.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SelectPointsObjectModel3d(System.String,System.Double,System.Double)">
            <summary>
              Apply a threshold to an attribute of 3D object models.
              Instance represents: Handle of the 3D object models.
            </summary>
            <param name="attrib">Attributes the threshold is applied to. Default: "point_coord_z"</param>
            <param name="minValue">Minimum value for the attributes specified by  Attrib. Default: 0.5</param>
            <param name="maxValue">Maximum value for the attributes specified  by Attrib. Default: 1.0</param>
            <returns>Handle of the reduced 3D object models.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.GetDispObjectModel3dInfo(HalconDotNet.HWindow,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Get the depth or the index of a displayed 3D object model.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row coordinates.</param>
            <param name="column">Column coordinates.</param>
            <param name="information">Information. Default: "depth"</param>
            <returns>Indices or the depth of the objects at (Row,Column).</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.GetDispObjectModel3dInfo(HalconDotNet.HWindow,System.Double,System.Double,System.String)">
            <summary>Get the depth or the index of a displayed 3D object model.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="row">Row coordinates.</param>
            <param name="column">Column coordinates.</param>
            <param name="information">Information. Default: "depth"</param>
            <returns>Indices or the depth of the objects at (Row,Column).</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.RenderObjectModel3d(HalconDotNet.HObjectModel3D[],HalconDotNet.HTuple,HalconDotNet.HPose[],HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Render 3D object models to get an image.</summary>
            <param name="objectModel3D">Handles of the 3D object models.</param>
            <param name="camParam">Camera parameters of the scene.</param>
            <param name="pose">3D poses of the objects.</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Rendered scene.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.RenderObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HPose,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Render 3D object models to get an image.
              Instance represents: Handles of the 3D object models.
            </summary>
            <param name="camParam">Camera parameters of the scene.</param>
            <param name="pose">3D poses of the objects.</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Rendered scene.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.DispObjectModel3d(HalconDotNet.HWindow,HalconDotNet.HObjectModel3D[],HalconDotNet.HTuple,HalconDotNet.HPose[],HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Display 3D object models.</summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="objectModel3D">Handles of the 3D object models.</param>
            <param name="camParam">Camera parameters of the scene. Default: []</param>
            <param name="pose">3D poses of the objects. Default: []</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.DispObjectModel3d(HalconDotNet.HWindow,HalconDotNet.HTuple,HalconDotNet.HPose,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Display 3D object models.
              Instance represents: Handles of the 3D object models.
            </summary>
            <param name="windowHandle">Window identifier.</param>
            <param name="camParam">Camera parameters of the scene. Default: []</param>
            <param name="pose">3D poses of the objects. Default: []</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.CopyObjectModel3d(HalconDotNet.HTuple)">
            <summary>
              Copy a 3D object model.
              Instance represents: Handle of the input 3D object model.
            </summary>
            <param name="attributes">Attributes to be copyied. Default: "all"</param>
            <returns>Handle of the copied 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.CopyObjectModel3d(System.String)">
            <summary>
              Copy a 3D object model.
              Instance represents: Handle of the input 3D object model.
            </summary>
            <param name="attributes">Attributes to be copyied. Default: "all"</param>
            <returns>Handle of the copied 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.PrepareObjectModel3d(HalconDotNet.HObjectModel3D[],System.String,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Prepare a 3D object model for a certain operation.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="purpose">Purpose of the 3D object model. Default: "shape_based_matching_3d"</param>
            <param name="overwriteData">Specify if already existing data should be overwritten. Default: "true"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.PrepareObjectModel3d(System.String,System.String,System.String,System.String)">
            <summary>
              Prepare a 3D object model for a certain operation.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="purpose">Purpose of the 3D object model. Default: "shape_based_matching_3d"</param>
            <param name="overwriteData">Specify if already existing data should be overwritten. Default: "true"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.ObjectModel3dToXyz(HalconDotNet.HImage@,HalconDotNet.HImage@,System.String,HalconDotNet.HTuple,HalconDotNet.HPose)">
            <summary>
              Transform 3D points from a 3D object model to images.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="y">Image with the Y-Coordinates of the 3D points.</param>
            <param name="z">Image with the Z-Coordinates of the 3D points.</param>
            <param name="type">Type of the conversion. Default: "cartesian"</param>
            <param name="camParam">Camera parameters.</param>
            <param name="pose">Pose of the 3D object model.</param>
            <returns>Image with the X-Coordinates of the 3D points.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.XyzToObjectModel3d(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage)">
            <summary>
              Transform 3D points from images to a 3D object model.
              Modified instance represents: Handle of the 3D object model.
            </summary>
            <param name="x">Image with the X-Coordinates and the ROI of the 3D points.</param>
            <param name="y">Image with the Y-Coordinates of the 3D points.</param>
            <param name="z">Image with the Z-Coordinates of the 3D points.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.GetObjectModel3dParams(HalconDotNet.HObjectModel3D[],HalconDotNet.HTuple)">
            <summary>Return attributes of 3D object models.</summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="paramName">Names of the generic attributes that are queried for the 3D object model. Default: "num_points"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.GetObjectModel3dParams(System.String)">
            <summary>
              Return attributes of 3D object models.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="paramName">Names of the generic attributes that are queried for the 3D object model. Default: "num_points"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.ProjectObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HPose,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Project a 3D object model into image coordinates.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="camParam">Internal camera parameters.</param>
            <param name="pose">3D pose of the world coordinate system in camera coordinates.</param>
            <param name="genParamName">Name of the generic parameter. Default: []</param>
            <param name="genParamValue">Value of the generic parameter. Default: []</param>
            <returns>Projected model contours.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.ProjectObjectModel3d(HalconDotNet.HTuple,HalconDotNet.HPose,System.String,System.String)">
            <summary>
              Project a 3D object model into image coordinates.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="camParam">Internal camera parameters.</param>
            <param name="pose">3D pose of the world coordinate system in camera coordinates.</param>
            <param name="genParamName">Name of the generic parameter. Default: []</param>
            <param name="genParamValue">Value of the generic parameter. Default: []</param>
            <returns>Projected model contours.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.RigidTransObjectModel3d(HalconDotNet.HObjectModel3D[],HalconDotNet.HPose[])">
            <summary>Apply a rigid 3D transformation to 3D object models.</summary>
            <param name="objectModel3D">Handles of the 3D object models.</param>
            <param name="pose">Poses.</param>
            <returns>Handles of the transformed 3D object models.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.RigidTransObjectModel3d(HalconDotNet.HPose)">
            <summary>
              Apply a rigid 3D transformation to 3D object models.
              Instance represents: Handles of the 3D object models.
            </summary>
            <param name="pose">Poses.</param>
            <returns>Handles of the transformed 3D object models.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.ProjectiveTransObjectModel3d(HalconDotNet.HObjectModel3D[],HalconDotNet.HHomMat3D[])">
            <summary>Apply an arbitrary projective 3D transformation to 3D object models.</summary>
            <param name="objectModel3D">Handles of the 3D object models.</param>
            <param name="homMat3D">Homogeneous projective transformation matrix.</param>
            <returns>Handles of the transformed 3D object models.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.ProjectiveTransObjectModel3d(HalconDotNet.HHomMat3D)">
            <summary>
              Apply an arbitrary projective 3D transformation to 3D object models.
              Instance represents: Handles of the 3D object models.
            </summary>
            <param name="homMat3D">Homogeneous projective transformation matrix.</param>
            <returns>Handles of the transformed 3D object models.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.AffineTransObjectModel3d(HalconDotNet.HObjectModel3D[],HalconDotNet.HHomMat3D[])">
            <summary>Apply an arbitrary affine 3D transformation to 3D object models.</summary>
            <param name="objectModel3D">Handles of the 3D object models.</param>
            <param name="homMat3D">Transformation matrices.</param>
            <returns>Handles of the transformed 3D object models.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.AffineTransObjectModel3d(HalconDotNet.HHomMat3D)">
            <summary>
              Apply an arbitrary affine 3D transformation to 3D object models.
              Instance represents: Handles of the 3D object models.
            </summary>
            <param name="homMat3D">Transformation matrices.</param>
            <returns>Handles of the transformed 3D object models.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SerializeObjectModel3d">
            <summary>
              Serialize a 3D object model.
              Instance represents: Handle of the 3D object model.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.DeserializeObjectModel3d(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized 3D object model.
              Modified instance represents: Handle of the 3D object model.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.WriteObjectModel3d(System.String,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Writes a 3D object model to a file.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="fileType">Type of the file that is written. Default: "om3"</param>
            <param name="fileName">Name of the file that is written.</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.WriteObjectModel3d(System.String,System.String,System.String,System.String)">
            <summary>
              Writes a 3D object model to a file.
              Instance represents: Handle of the 3D object model.
            </summary>
            <param name="fileType">Type of the file that is written. Default: "om3"</param>
            <param name="fileName">Name of the file that is written.</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.ReadObjectModel3d(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Read a 3D object model from a file.
              Modified instance represents: Handle of the 3D object model.
            </summary>
            <param name="fileName">Filename of the file to be read.</param>
            <param name="scale">Scale of the data in the file. Default: "m"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Status information.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.ReadObjectModel3d(System.String,System.String,System.String,System.String)">
            <summary>
              Read a 3D object model from a file.
              Modified instance represents: Handle of the 3D object model.
            </summary>
            <param name="fileName">Filename of the file to be read.</param>
            <param name="scale">Scale of the data in the file. Default: "m"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Status information.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.ReadObjectModel3dDxf(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Read a 3D object model from a DXF file.
              Modified instance represents: Handle of the read 3D object model.
            </summary>
            <param name="fileName">Name of the DXF file</param>
            <param name="scale">Scale or unit. Default: "m"</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the DXF input. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the DXF input. Default: []</param>
            <returns>Status information.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.ReadObjectModel3dDxf(System.String,System.String,System.String,System.Double)">
            <summary>
              Read a 3D object model from a DXF file.
              Modified instance represents: Handle of the read 3D object model.
            </summary>
            <param name="fileName">Name of the DXF file</param>
            <param name="scale">Scale or unit. Default: "m"</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the DXF input. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the DXF input. Default: []</param>
            <returns>Status information.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SceneFlowCalib(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HPose)">
            <summary>Compute the calibrated scene flow between two stereo image pairs.</summary>
            <param name="imageRect1T1">Input image 1 at time @f$t_{1}$t_1.</param>
            <param name="imageRect2T1">Input image 2 at time @f$t_{1}$t_1.</param>
            <param name="imageRect1T2">Input image 1 at time @f$t_{2}$t_2.</param>
            <param name="imageRect2T2">Input image 2 at time @f$t_{2}$t_2.</param>
            <param name="disparity">Disparity between input images 1 and 2 at time @f$t_{1}$t_1.</param>
            <param name="smoothingFlow">Weight of the regularization term relative to the data term (derivatives of the optical flow). Default: 40.0</param>
            <param name="smoothingDisparity">Weight of the regularization term relative to the data term (derivatives of the disparity change). Default: 40.0</param>
            <param name="genParamName">Parameter name(s) for the algorithm. Default: "default_parameters"</param>
            <param name="genParamValue">Parameter value(s) for the algorithm. Default: "accurate"</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <param name="relPoseRect">Pose of the rectified camera 2 in relation to the rectified camera 1.</param>
            <returns>Handle of the 3D object model.</returns>
        </member>
        <member name="M:HalconDotNet.HObjectModel3D.SceneFlowCalib(HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage,HalconDotNet.HImage,System.Double,System.Double,System.String,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HPose)">
            <summary>
              Compute the calibrated scene flow between two stereo image pairs.
              Modified instance represents: Handle of the 3D object model.
            </summary>
            <param name="imageRect1T1">Input image 1 at time @f$t_{1}$t_1.</param>
            <param name="imageRect2T1">Input image 2 at time @f$t_{1}$t_1.</param>
            <param name="imageRect1T2">Input image 1 at time @f$t_{2}$t_2.</param>
            <param name="imageRect2T2">Input image 2 at time @f$t_{2}$t_2.</param>
            <param name="disparity">Disparity between input images 1 and 2 at time @f$t_{1}$t_1.</param>
            <param name="smoothingFlow">Weight of the regularization term relative to the data term (derivatives of the optical flow). Default: 40.0</param>
            <param name="smoothingDisparity">Weight of the regularization term relative to the data term (derivatives of the disparity change). Default: 40.0</param>
            <param name="genParamName">Parameter name(s) for the algorithm. Default: "default_parameters"</param>
            <param name="genParamValue">Parameter value(s) for the algorithm. Default: "accurate"</param>
            <param name="camParamRect1">Internal camera parameters of the rectified camera 1.</param>
            <param name="camParamRect2">Internal camera parameters of the rectified camera 2.</param>
            <param name="relPoseRect">Pose of the rectified camera 2 in relation to the rectified camera 1.</param>
        </member>
        <member name="T:HalconDotNet.HTemplate">
            <summary>Represents an instance of a template for gray value matching.</summary>
        </member>
        <member name="M:HalconDotNet.HTemplate.#ctor(HalconDotNet.HImage,System.Int32,System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>
              Preparing a pattern for template matching with rotation.
              Modified instance represents: Template number.
            </summary>
            <param name="template">Input image whose domain will be processed for the pattern matching.</param>
            <param name="numLevel">Maximal number of pyramid levels. Default: 4</param>
            <param name="angleStart">Smallest Rotation of the pattern. Default: -0.39</param>
            <param name="angleExtend">Maximum positive Extension of AngleStart. Default: 0.79</param>
            <param name="angleStep">Step rate (angle precision) of matching. Default: 0.0982</param>
            <param name="optimize">Kind of optimizing. Default: "sort"</param>
            <param name="grayValues">Kind of grayvalues. Default: "original"</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.#ctor(HalconDotNet.HImage,System.Int32,System.Int32,System.String,System.String)">
            <summary>
              Preparing a pattern for template matching.
              Modified instance represents: Template number.
            </summary>
            <param name="template">Input image whose domain will be processed for the pattern matching.</param>
            <param name="firstError">Not yet in use. Default: 255</param>
            <param name="numLevel">Maximal number of pyramid levels. Default: 4</param>
            <param name="optimize">Kind of optimizing. Default: "sort"</param>
            <param name="grayValues">Kind of grayvalues. Default: "original"</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.#ctor(System.String)">
            <summary>
              Reading a template from file.
              Modified instance represents: Template number.
            </summary>
            <param name="fileName">file name.</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.CreateTemplateRot(HalconDotNet.HImage,System.Int32,System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>
              Preparing a pattern for template matching with rotation.
              Modified instance represents: Template number.
            </summary>
            <param name="template">Input image whose domain will be processed for the pattern matching.</param>
            <param name="numLevel">Maximal number of pyramid levels. Default: 4</param>
            <param name="angleStart">Smallest Rotation of the pattern. Default: -0.39</param>
            <param name="angleExtend">Maximum positive Extension of AngleStart. Default: 0.79</param>
            <param name="angleStep">Step rate (angle precision) of matching. Default: 0.0982</param>
            <param name="optimize">Kind of optimizing. Default: "sort"</param>
            <param name="grayValues">Kind of grayvalues. Default: "original"</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.CreateTemplate(HalconDotNet.HImage,System.Int32,System.Int32,System.String,System.String)">
            <summary>
              Preparing a pattern for template matching.
              Modified instance represents: Template number.
            </summary>
            <param name="template">Input image whose domain will be processed for the pattern matching.</param>
            <param name="firstError">Not yet in use. Default: 255</param>
            <param name="numLevel">Maximal number of pyramid levels. Default: 4</param>
            <param name="optimize">Kind of optimizing. Default: "sort"</param>
            <param name="grayValues">Kind of grayvalues. Default: "original"</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.SerializeTemplate">
            <summary>
              Serialize a template.
              Instance represents: Handle of the template.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HTemplate.DeserializeTemplate(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized template.
              Modified instance represents: Template number.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.WriteTemplate(System.String)">
            <summary>
              Writing a template to file.
              Instance represents: Template number.
            </summary>
            <param name="fileName">file name.</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.ReadTemplate(System.String)">
            <summary>
              Reading a template from file.
              Modified instance represents: Template number.
            </summary>
            <param name="fileName">file name.</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.SetOffsetTemplate(System.Int32)">
            <summary>
              Gray value offset for template.
              Instance represents: Template number.
            </summary>
            <param name="grayOffset">Offset of gray values. Default: 0</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.SetReferenceTemplate(System.Double,System.Double)">
            <summary>
              Define reference position for a matching template.
              Instance represents: Template number.
            </summary>
            <param name="row">Reference position of template (row).</param>
            <param name="column">Reference position of template (column).</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.AdaptTemplate(HalconDotNet.HImage)">
            <summary>
              Adapting a template to the size of an image.
              Instance represents: Template number.
            </summary>
            <param name="image">Image which determines the size of the later matching.</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.FastMatchMg(HalconDotNet.HImage,System.Double,HalconDotNet.HTuple)">
            <summary>
              Searching all good grayvalue matches in a pyramid.
              Instance represents: Template number.
            </summary>
            <param name="image">Input image inside of which the pattern has to be found.</param>
            <param name="maxError">Maximal average difference of the grayvalues. Default: 30.0</param>
            <param name="numLevel">Number of levels in the pyramid. Default: 3</param>
            <returns>All points which have an error below a certain threshold.</returns>
        </member>
        <member name="M:HalconDotNet.HTemplate.FastMatchMg(HalconDotNet.HImage,System.Double,System.Int32)">
            <summary>
              Searching all good grayvalue matches in a pyramid.
              Instance represents: Template number.
            </summary>
            <param name="image">Input image inside of which the pattern has to be found.</param>
            <param name="maxError">Maximal average difference of the grayvalues. Default: 30.0</param>
            <param name="numLevel">Number of levels in the pyramid. Default: 3</param>
            <returns>All points which have an error below a certain threshold.</returns>
        </member>
        <member name="M:HalconDotNet.HTemplate.BestMatchPreMg(HalconDotNet.HImage,System.Double,System.String,System.Int32,HalconDotNet.HTuple,System.Double@,System.Double@,System.Double@)">
            <summary>
              Searching the best grayvalue matches in a pre generated pyramid.
              Instance represents: Template number.
            </summary>
            <param name="imagePyramid">Image pyramid inside of which the pattern has to be found.</param>
            <param name="maxError">Maximal average difference of the grayvalues. Default: 30.0</param>
            <param name="subPixel">Exactness in subpixels in case of 'true'. Default: "false"</param>
            <param name="numLevels">Number of the used resolution levels. Default: 3</param>
            <param name="whichLevels">Resolution level up to which the method "best match" is used. Default: "original"</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="error">Average divergence of the grayvalues in the best match.</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.BestMatchPreMg(HalconDotNet.HImage,System.Double,System.String,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
              Searching the best grayvalue matches in a pre generated pyramid.
              Instance represents: Template number.
            </summary>
            <param name="imagePyramid">Image pyramid inside of which the pattern has to be found.</param>
            <param name="maxError">Maximal average difference of the grayvalues. Default: 30.0</param>
            <param name="subPixel">Exactness in subpixels in case of 'true'. Default: "false"</param>
            <param name="numLevels">Number of the used resolution levels. Default: 3</param>
            <param name="whichLevels">Resolution level up to which the method "best match" is used. Default: "original"</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="error">Average divergence of the grayvalues in the best match.</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.BestMatchMg(HalconDotNet.HImage,System.Double,System.String,System.Int32,HalconDotNet.HTuple,System.Double@,System.Double@,System.Double@)">
            <summary>
              Searching the best grayvalue matches in a pyramid.
              Instance represents: Template number.
            </summary>
            <param name="image">Input image inside of which the pattern has to be found.</param>
            <param name="maxError">Maximal average difference of the grayvalues. Default: 30.0</param>
            <param name="subPixel">Exactness in subpixels in case of 'true'. Default: "false"</param>
            <param name="numLevels">Number of the used resolution levels. Default: 4</param>
            <param name="whichLevels">Resolution level up to which the method "best match" is used. Default: 2</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="error">Average divergence of the grayvalues in the best match.</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.BestMatchMg(HalconDotNet.HImage,System.Double,System.String,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
              Searching the best grayvalue matches in a pyramid.
              Instance represents: Template number.
            </summary>
            <param name="image">Input image inside of which the pattern has to be found.</param>
            <param name="maxError">Maximal average difference of the grayvalues. Default: 30.0</param>
            <param name="subPixel">Exactness in subpixels in case of 'true'. Default: "false"</param>
            <param name="numLevels">Number of the used resolution levels. Default: 4</param>
            <param name="whichLevels">Resolution level up to which the method "best match" is used. Default: 2</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="error">Average divergence of the grayvalues in the best match.</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.FastMatch(HalconDotNet.HImage,System.Double)">
            <summary>
              Searching all good matches of a template and an image.
              Instance represents: Template number.
            </summary>
            <param name="image">Input image inside of which the pattern has to be found.</param>
            <param name="maxError">Maximal average difference of the grayvalues. Default: 20.0</param>
            <returns>All points whose error lies below a certain threshold.</returns>
        </member>
        <member name="M:HalconDotNet.HTemplate.BestMatchRotMg(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.String,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Searching the best matching of a template and a pyramid with rotation.
              Instance represents: Template number.
            </summary>
            <param name="image">Input image inside of which the pattern has to be found.</param>
            <param name="angleStart">Smallest Rotation of the pattern. Default: -0.39</param>
            <param name="angleExtend">Maximum positive Extension of AngleStart. Default: 0.79</param>
            <param name="maxError">Maximum average difference of the grayvalues. Default: 40.0</param>
            <param name="subPixel">Subpixel accuracy in case of 'true'. Default: "false"</param>
            <param name="numLevels">Number of the used resolution levels. Default: 3</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="angle">Rotation angle of pattern.</param>
            <param name="error">Average divergence of the grayvalues of the best match.</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.BestMatchRotMg(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.String,System.Int32,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Searching the best matching of a template and a pyramid with rotation.
              Instance represents: Template number.
            </summary>
            <param name="image">Input image inside of which the pattern has to be found.</param>
            <param name="angleStart">Smallest Rotation of the pattern. Default: -0.39</param>
            <param name="angleExtend">Maximum positive Extension of AngleStart. Default: 0.79</param>
            <param name="maxError">Maximum average difference of the grayvalues. Default: 40.0</param>
            <param name="subPixel">Subpixel accuracy in case of 'true'. Default: "false"</param>
            <param name="numLevels">Number of the used resolution levels. Default: 3</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="angle">Rotation angle of pattern.</param>
            <param name="error">Average divergence of the grayvalues of the best match.</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.BestMatchRot(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Searching the best matching of a template and an image with rotation.
              Instance represents: Template number.
            </summary>
            <param name="image">Input image inside of which the pattern has to be found.</param>
            <param name="angleStart">Smallest Rotation of the pattern. Default: -0.39</param>
            <param name="angleExtend">Maximum positive Extension of AngleStart. Default: 0.79</param>
            <param name="maxError">Maximum average difference of the grayvalues. Default: 30.0</param>
            <param name="subPixel">Subpixel accuracy in case of 'true'. Default: "false"</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="angle">Rotation angle of pattern.</param>
            <param name="error">Average divergence of the grayvalues of the best match.</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.BestMatchRot(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.String,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
              Searching the best matching of a template and an image with rotation.
              Instance represents: Template number.
            </summary>
            <param name="image">Input image inside of which the pattern has to be found.</param>
            <param name="angleStart">Smallest Rotation of the pattern. Default: -0.39</param>
            <param name="angleExtend">Maximum positive Extension of AngleStart. Default: 0.79</param>
            <param name="maxError">Maximum average difference of the grayvalues. Default: 30.0</param>
            <param name="subPixel">Subpixel accuracy in case of 'true'. Default: "false"</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="angle">Rotation angle of pattern.</param>
            <param name="error">Average divergence of the grayvalues of the best match.</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.BestMatch(HalconDotNet.HImage,System.Double,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Searching the best matching of a template and an image.
              Instance represents: Template number.
            </summary>
            <param name="image">Input image inside of which the pattern has to be found.</param>
            <param name="maxError">Maximum average difference of the grayvalues. Default: 20.0</param>
            <param name="subPixel">Subpixel accuracy in case of 'true'. Default: "false"</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="error">Average divergence of the grayvalues of the best match.</param>
        </member>
        <member name="M:HalconDotNet.HTemplate.BestMatch(HalconDotNet.HImage,System.Double,System.String,System.Double@,System.Double@,System.Double@)">
            <summary>
              Searching the best matching of a template and an image.
              Instance represents: Template number.
            </summary>
            <param name="image">Input image inside of which the pattern has to be found.</param>
            <param name="maxError">Maximum average difference of the grayvalues. Default: 20.0</param>
            <param name="subPixel">Subpixel accuracy in case of 'true'. Default: "false"</param>
            <param name="row">Row position of the best match.</param>
            <param name="column">Column position of the best match.</param>
            <param name="error">Average divergence of the grayvalues of the best match.</param>
        </member>
        <member name="T:HalconDotNet.HSurfaceMatchingResult">
            <summary>Represents an instance of a surface matching result.</summary>
        </member>
        <member name="M:HalconDotNet.HSurfaceMatchingResult.GetSurfaceMatchingResult(HalconDotNet.HTuple,System.Int32)">
            <summary>
              Get details of a result from surface based matching.
              Instance represents: Handle of the surface matching result.
            </summary>
            <param name="resultName">Name of the result property. Default: "pose"</param>
            <param name="resultIndex">Index of the matching result, starting with 0. Default: 0</param>
            <returns>Value of the result property.</returns>
        </member>
        <member name="M:HalconDotNet.HSurfaceMatchingResult.GetSurfaceMatchingResult(System.String,System.Int32)">
            <summary>
              Get details of a result from surface based matching.
              Instance represents: Handle of the surface matching result.
            </summary>
            <param name="resultName">Name of the result property. Default: "pose"</param>
            <param name="resultIndex">Index of the matching result, starting with 0. Default: 0</param>
            <returns>Value of the result property.</returns>
        </member>
        <member name="M:HalconDotNet.HSurfaceMatchingResult.ClearAllSurfaceMatchingResults">
            <summary>Free the memory of all surface matching results.</summary>
        </member>
        <member name="M:HalconDotNet.HSurfaceMatchingResult.RefineSurfaceModelPose(HalconDotNet.HSurfaceModel,HalconDotNet.HObjectModel3D,HalconDotNet.HPose[],HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HSurfaceMatchingResult[]@)">
            <summary>Refine the pose of a surface model in a 3D scene.</summary>
            <param name="surfaceModelID">Handle of the surface model.</param>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="initialPose">Initial pose of the surface model in the scene.</param>
            <param name="minScore">Minimum score of the returned poses. Default: 0</param>
            <param name="returnResultHandle">Enable returning a result handle in SurfaceMatchingResultID. Default: "false"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="score">Score of the found instances of the model.</param>
            <param name="surfaceMatchingResultID">Handle of the matching result, if enabled in ReturnResultHandle.</param>
            <returns>3D pose of the surface model in the scene.</returns>
        </member>
        <member name="M:HalconDotNet.HSurfaceMatchingResult.RefineSurfaceModelPose(HalconDotNet.HSurfaceModel,HalconDotNet.HObjectModel3D,HalconDotNet.HPose,System.Double,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Refine the pose of a surface model in a 3D scene.
              Modified instance represents: Handle of the matching result, if enabled in ReturnResultHandle.
            </summary>
            <param name="surfaceModelID">Handle of the surface model.</param>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="initialPose">Initial pose of the surface model in the scene.</param>
            <param name="minScore">Minimum score of the returned poses. Default: 0</param>
            <param name="returnResultHandle">Enable returning a result handle in SurfaceMatchingResultID. Default: "false"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="score">Score of the found instances of the model.</param>
            <returns>3D pose of the surface model in the scene.</returns>
        </member>
        <member name="M:HalconDotNet.HSurfaceMatchingResult.FindSurfaceModel(HalconDotNet.HSurfaceModel,HalconDotNet.HObjectModel3D,System.Double,System.Double,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HSurfaceMatchingResult[]@)">
            <summary>Find the best matches of a surface model in a 3D scene.</summary>
            <param name="surfaceModelID">Handle of the surface model.</param>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="relSamplingDistance">Scene sampling distance relative to the diameter of the surface model. Default: 0.05</param>
            <param name="keyPointFraction">Fraction of sampled scene points used as key points. Default: 0.2</param>
            <param name="minScore">Minimum score of the returned poses. Default: 0</param>
            <param name="returnResultHandle">Enable returning a result handle in SurfaceMatchingResultID. Default: "false"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="score">Score of the found instances of the surface model.</param>
            <param name="surfaceMatchingResultID">Handle of the matching result, if enabled in ReturnResultHandle.</param>
            <returns>3D pose of the surface model in the scene.</returns>
        </member>
        <member name="M:HalconDotNet.HSurfaceMatchingResult.FindSurfaceModel(HalconDotNet.HSurfaceModel,HalconDotNet.HObjectModel3D,System.Double,System.Double,System.Double,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a surface model in a 3D scene.
              Modified instance represents: Handle of the matching result, if enabled in ReturnResultHandle.
            </summary>
            <param name="surfaceModelID">Handle of the surface model.</param>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="relSamplingDistance">Scene sampling distance relative to the diameter of the surface model. Default: 0.05</param>
            <param name="keyPointFraction">Fraction of sampled scene points used as key points. Default: 0.2</param>
            <param name="minScore">Minimum score of the returned poses. Default: 0</param>
            <param name="returnResultHandle">Enable returning a result handle in SurfaceMatchingResultID. Default: "false"</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="score">Score of the found instances of the surface model.</param>
            <returns>3D pose of the surface model in the scene.</returns>
        </member>
        <member name="T:HalconDotNet.HHomMat3D">
            <summary>Represents a homogeneous 3D transformation matrix.</summary>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.#ctor">
            <summary>
              Generate the homogeneous transformation matrix of the identical 3D transformation.
              Modified instance represents: Transformation matrix.
            </summary>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.DeserializeHomMat3d(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized homogeneous 3D transformation matrix.
              Modified instance represents: Transformation matrix.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.SerializeHomMat3d">
            <summary>
              Serialize a homogeneous 3D transformation matrix.
              Instance represents: Transformation matrix.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.ProjectiveTransHomPoint3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Project a homogeneous 3D point using a projective transformation matrix.
              Instance represents: Homogeneous projective transformation matrix.
            </summary>
            <param name="px">Input point (x coordinate).</param>
            <param name="py">Input point (y coordinate).</param>
            <param name="pz">Input point (z coordinate).</param>
            <param name="pw">Input point (w coordinate).</param>
            <param name="qy">Output point (y coordinate).</param>
            <param name="qz">Output point (z coordinate).</param>
            <param name="qw">Output point (w coordinate).</param>
            <returns>Output point (x coordinate).</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.ProjectiveTransHomPoint3d(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
              Project a homogeneous 3D point using a projective transformation matrix.
              Instance represents: Homogeneous projective transformation matrix.
            </summary>
            <param name="px">Input point (x coordinate).</param>
            <param name="py">Input point (y coordinate).</param>
            <param name="pz">Input point (z coordinate).</param>
            <param name="pw">Input point (w coordinate).</param>
            <param name="qy">Output point (y coordinate).</param>
            <param name="qz">Output point (z coordinate).</param>
            <param name="qw">Output point (w coordinate).</param>
            <returns>Output point (x coordinate).</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.ProjectiveTransPoint3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Project a 3D point using a projective transformation matrix.
              Instance represents: Homogeneous projective transformation matrix.
            </summary>
            <param name="px">Input point (x coordinate).</param>
            <param name="py">Input point (y coordinate).</param>
            <param name="pz">Input point (z coordinate).</param>
            <param name="qy">Output point (y coordinate).</param>
            <param name="qz">Output point (z coordinate).</param>
            <returns>Output point (x coordinate).</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.ProjectiveTransPoint3d(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
              Project a 3D point using a projective transformation matrix.
              Instance represents: Homogeneous projective transformation matrix.
            </summary>
            <param name="px">Input point (x coordinate).</param>
            <param name="py">Input point (y coordinate).</param>
            <param name="pz">Input point (z coordinate).</param>
            <param name="qy">Output point (y coordinate).</param>
            <param name="qz">Output point (z coordinate).</param>
            <returns>Output point (x coordinate).</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.AffineTransPoint3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Apply an arbitrary affine 3D transformation to points.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="px">Input point(s) (x coordinate). Default: 64</param>
            <param name="py">Input point(s) (y coordinate). Default: 64</param>
            <param name="pz">Input point(s) (z coordinate). Default: 64</param>
            <param name="qy">Output point(s) (y coordinate).</param>
            <param name="qz">Output point(s) (z coordinate).</param>
            <returns>Output point(s) (x coordinate).</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.AffineTransPoint3d(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
              Apply an arbitrary affine 3D transformation to points.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="px">Input point(s) (x coordinate). Default: 64</param>
            <param name="py">Input point(s) (y coordinate). Default: 64</param>
            <param name="pz">Input point(s) (z coordinate). Default: 64</param>
            <param name="qy">Output point(s) (y coordinate).</param>
            <param name="qz">Output point(s) (z coordinate).</param>
            <returns>Output point(s) (x coordinate).</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.VectorToHomMat3d(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Approximate a 3D transformation from point correspondences.
              Modified instance represents: Output transformation matrix.
            </summary>
            <param name="transformationType">Type of the transformation to compute. Default: "rigid"</param>
            <param name="px">X coordinates of the original points.</param>
            <param name="py">Y coordinates of the original points.</param>
            <param name="pz">Z coordinates of the original points.</param>
            <param name="qx">X coordinates of the transformed points.</param>
            <param name="qy">Y coordinates of the transformed points.</param>
            <param name="qz">Z coordinates of the transformed points.</param>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dDeterminant">
            <summary>
              Compute the determinant of a homogeneous 3D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <returns>Determinant of the input matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dTranspose">
            <summary>
              Transpose a homogeneous 3D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dInvert">
            <summary>
              Invert a homogeneous 3D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dCompose(HalconDotNet.HHomMat3D)">
            <summary>
              Multiply two homogeneous 3D transformation matrices.
              Instance represents: Left input transformation matrix.
            </summary>
            <param name="homMat3DRight">Right input transformation matrix.</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dRotateLocal(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a rotation to a homogeneous 3D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="phi">Rotation angle. Default: 0.78</param>
            <param name="axis">Axis, to be rotated around. Default: "x"</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dRotateLocal(System.Double,System.String)">
            <summary>
              Add a rotation to a homogeneous 3D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="phi">Rotation angle. Default: 0.78</param>
            <param name="axis">Axis, to be rotated around. Default: "x"</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dRotate(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a rotation to a homogeneous 3D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="phi">Rotation angle. Default: 0.78</param>
            <param name="axis">Axis, to be rotated around. Default: "x"</param>
            <param name="px">Fixed point of the transformation (x coordinate). Default: 0</param>
            <param name="py">Fixed point of the transformation (y coordinate). Default: 0</param>
            <param name="pz">Fixed point of the transformation (z coordinate). Default: 0</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dRotate(System.Double,System.String,System.Double,System.Double,System.Double)">
            <summary>
              Add a rotation to a homogeneous 3D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="phi">Rotation angle. Default: 0.78</param>
            <param name="axis">Axis, to be rotated around. Default: "x"</param>
            <param name="px">Fixed point of the transformation (x coordinate). Default: 0</param>
            <param name="py">Fixed point of the transformation (y coordinate). Default: 0</param>
            <param name="pz">Fixed point of the transformation (z coordinate). Default: 0</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dScaleLocal(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a scaling to a homogeneous 3D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="sx">Scale factor along the x-axis. Default: 2</param>
            <param name="sy">Scale factor along the y-axis. Default: 2</param>
            <param name="sz">Scale factor along the z-axis. Default: 2</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dScaleLocal(System.Double,System.Double,System.Double)">
            <summary>
              Add a scaling to a homogeneous 3D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="sx">Scale factor along the x-axis. Default: 2</param>
            <param name="sy">Scale factor along the y-axis. Default: 2</param>
            <param name="sz">Scale factor along the z-axis. Default: 2</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dScale(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a scaling to a homogeneous 3D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="sx">Scale factor along the x-axis. Default: 2</param>
            <param name="sy">Scale factor along the y-axis. Default: 2</param>
            <param name="sz">Scale factor along the z-axis. Default: 2</param>
            <param name="px">Fixed point of the transformation (x coordinate). Default: 0</param>
            <param name="py">Fixed point of the transformation (y coordinate). Default: 0</param>
            <param name="pz">Fixed point of the transformation (z coordinate). Default: 0</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dScale(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Add a scaling to a homogeneous 3D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="sx">Scale factor along the x-axis. Default: 2</param>
            <param name="sy">Scale factor along the y-axis. Default: 2</param>
            <param name="sz">Scale factor along the z-axis. Default: 2</param>
            <param name="px">Fixed point of the transformation (x coordinate). Default: 0</param>
            <param name="py">Fixed point of the transformation (y coordinate). Default: 0</param>
            <param name="pz">Fixed point of the transformation (z coordinate). Default: 0</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dTranslateLocal(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a translation to a homogeneous 3D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="tx">Translation along the x-axis. Default: 64</param>
            <param name="ty">Translation along the y-axis. Default: 64</param>
            <param name="tz">Translation along the z-axis. Default: 64</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dTranslateLocal(System.Double,System.Double,System.Double)">
            <summary>
              Add a translation to a homogeneous 3D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="tx">Translation along the x-axis. Default: 64</param>
            <param name="ty">Translation along the y-axis. Default: 64</param>
            <param name="tz">Translation along the z-axis. Default: 64</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dTranslate(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a translation to a homogeneous 3D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="tx">Translation along the x-axis. Default: 64</param>
            <param name="ty">Translation along the y-axis. Default: 64</param>
            <param name="tz">Translation along the z-axis. Default: 64</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dTranslate(System.Double,System.Double,System.Double)">
            <summary>
              Add a translation to a homogeneous 3D transformation matrix.
              Instance represents: Input transformation matrix.
            </summary>
            <param name="tx">Translation along the x-axis. Default: 64</param>
            <param name="ty">Translation along the y-axis. Default: 64</param>
            <param name="tz">Translation along the z-axis. Default: 64</param>
            <returns>Output transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dIdentity">
            <summary>
              Generate the homogeneous transformation matrix of the identical 3D transformation.
              Modified instance represents: Transformation matrix.
            </summary>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dProject(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Project an affine 3D transformation matrix to a 2D projective transformation matrix.
              Instance represents: 3x4 3D transformation matrix.
            </summary>
            <param name="principalPointRow">Row coordinate of the principal point. Default: 256</param>
            <param name="principalPointCol">Column coordinate of the principal point. Default: 256</param>
            <param name="focus">Focal length in pixels. Default: 256</param>
            <returns>Homogeneous projective transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dProject(System.Double,System.Double,System.Double)">
            <summary>
              Project an affine 3D transformation matrix to a 2D projective transformation matrix.
              Instance represents: 3x4 3D transformation matrix.
            </summary>
            <param name="principalPointRow">Row coordinate of the principal point. Default: 256</param>
            <param name="principalPointCol">Column coordinate of the principal point. Default: 256</param>
            <param name="focus">Focal length in pixels. Default: 256</param>
            <returns>Homogeneous projective transformation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.ProjectHomPointHomMat3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Project a homogeneous 3D point using a 3x4 projection matrix.
              Instance represents: 3x4 projection matrix.
            </summary>
            <param name="px">Input point (x coordinate).</param>
            <param name="py">Input point (y coordinate).</param>
            <param name="pz">Input point (z coordinate).</param>
            <param name="pw">Input point (w coordinate).</param>
            <param name="qy">Output point (y coordinate).</param>
            <param name="qw">Output point (w coordinate).</param>
            <returns>Output point (x coordinate).</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.ProjectHomPointHomMat3d(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
              Project a homogeneous 3D point using a 3x4 projection matrix.
              Instance represents: 3x4 projection matrix.
            </summary>
            <param name="px">Input point (x coordinate).</param>
            <param name="py">Input point (y coordinate).</param>
            <param name="pz">Input point (z coordinate).</param>
            <param name="pw">Input point (w coordinate).</param>
            <param name="qy">Output point (y coordinate).</param>
            <param name="qw">Output point (w coordinate).</param>
            <returns>Output point (x coordinate).</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.ProjectPointHomMat3d(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Project a 3D point using a 3x4 projection matrix.
              Instance represents: 3x4 projection matrix.
            </summary>
            <param name="px">Input point (x coordinate).</param>
            <param name="py">Input point (y coordinate).</param>
            <param name="pz">Input point (z coordinate).</param>
            <param name="qy">Output point (y coordinate).</param>
            <returns>Output point (x coordinate).</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.ProjectPointHomMat3d(System.Double,System.Double,System.Double,System.Double@)">
            <summary>
              Project a 3D point using a 3x4 projection matrix.
              Instance represents: 3x4 projection matrix.
            </summary>
            <param name="px">Input point (x coordinate).</param>
            <param name="py">Input point (y coordinate).</param>
            <param name="pz">Input point (z coordinate).</param>
            <param name="qy">Output point (y coordinate).</param>
            <returns>Output point (x coordinate).</returns>
        </member>
        <member name="M:HalconDotNet.HHomMat3D.HomMat3dToPose">
            <summary>
              Convert a homogeneous transformation matrix into a 3D pose.
              Instance represents: Homogeneous transformation matrix.
            </summary>
            <returns>Equivalent 3D pose.</returns>
        </member>
        <member name="T:HalconDotNet.HIODevice">
            <summary>Represents an instance of an I/O device.</summary>
        </member>
        <member name="M:HalconDotNet.HIODevice.#ctor(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Open and configure an I/O device. 
              Modified instance represents: Handle of the opened I/O device.
            </summary>
            <param name="IOInterfaceName">HALCON I/O interface name. Default: []</param>
            <param name="IODeviceName">I/O device name. Default: []</param>
            <param name="genParamName">Dynamic parameter names. Default: []</param>
            <param name="genParamValue">Dynamic parameter values. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HIODevice.OpenIoChannel(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Open and configure I/O channels.
              Instance represents: Handle of the opened I/O device.
            </summary>
            <param name="IOChannelName">HALCON I/O channel names of the specified device.</param>
            <param name="genParamName">Parameter names. Default: []</param>
            <param name="genParamValue">Parameter values. Default: []</param>
            <returns>Handles of the opened I/O channel.</returns>
        </member>
        <member name="M:HalconDotNet.HIODevice.OpenIoChannel(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Open and configure I/O channels.
              Instance represents: Handle of the opened I/O device.
            </summary>
            <param name="IOChannelName">HALCON I/O channel names of the specified device.</param>
            <param name="genParamName">Parameter names. Default: []</param>
            <param name="genParamValue">Parameter values. Default: []</param>
            <returns>Handles of the opened I/O channel.</returns>
        </member>
        <member name="M:HalconDotNet.HIODevice.QueryIoDevice(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Query information about channels of the specified I/O device. 
              Instance represents: Handle of the opened I/O device.
            </summary>
            <param name="IOChannelName">Channel names to query.</param>
            <param name="query">Name of the query. Default: "param_name"</param>
            <returns>List of values (according to Query).</returns>
        </member>
        <member name="M:HalconDotNet.HIODevice.QueryIoDevice(System.String,HalconDotNet.HTuple)">
            <summary>
              Query information about channels of the specified I/O device. 
              Instance represents: Handle of the opened I/O device.
            </summary>
            <param name="IOChannelName">Channel names to query.</param>
            <param name="query">Name of the query. Default: "param_name"</param>
            <returns>List of values (according to Query).</returns>
        </member>
        <member name="M:HalconDotNet.HIODevice.ControlIoDevice(System.String,HalconDotNet.HTuple)">
            <summary>
              Perform an action on the I/O device.
              Instance represents: Handle of the opened I/O device.
            </summary>
            <param name="action">Name of the action to perform.</param>
            <param name="argument">List of arguments for the action. Default: []</param>
            <returns>List of result values returned by the action.</returns>
        </member>
        <member name="M:HalconDotNet.HIODevice.ControlIoDevice(System.String,System.String)">
            <summary>
              Perform an action on the I/O device.
              Instance represents: Handle of the opened I/O device.
            </summary>
            <param name="action">Name of the action to perform.</param>
            <param name="argument">List of arguments for the action. Default: []</param>
            <returns>List of result values returned by the action.</returns>
        </member>
        <member name="M:HalconDotNet.HIODevice.SetIoDeviceParam(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Configure a specific I/O device instance.
              Instance represents: Handle of the opened I/O device.
            </summary>
            <param name="paramName">Parameter names. Default: []</param>
            <param name="paramValue">Parameter values to set. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HIODevice.SetIoDeviceParam(System.String,System.String)">
            <summary>
              Configure a specific I/O device instance.
              Instance represents: Handle of the opened I/O device.
            </summary>
            <param name="paramName">Parameter names. Default: []</param>
            <param name="paramValue">Parameter values to set. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HIODevice.GetIoDeviceParam(HalconDotNet.HTuple)">
            <summary>
              Query settings of an I/O device instance. 
              Instance represents: Handle of the opened I/O device.
            </summary>
            <param name="paramName">Parameter names. Default: ""</param>
            <returns>Parameter values.</returns>
        </member>
        <member name="M:HalconDotNet.HIODevice.GetIoDeviceParam(System.String)">
            <summary>
              Query settings of an I/O device instance. 
              Instance represents: Handle of the opened I/O device.
            </summary>
            <param name="paramName">Parameter names. Default: ""</param>
            <returns>Parameter values.</returns>
        </member>
        <member name="M:HalconDotNet.HIODevice.OpenIoDevice(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Open and configure an I/O device. 
              Modified instance represents: Handle of the opened I/O device.
            </summary>
            <param name="IOInterfaceName">HALCON I/O interface name. Default: []</param>
            <param name="IODeviceName">I/O device name. Default: []</param>
            <param name="genParamName">Dynamic parameter names. Default: []</param>
            <param name="genParamValue">Dynamic parameter values. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HIODevice.ControlIoInterface(System.String,System.String,HalconDotNet.HTuple)">
            <summary>Perform an action on the I/O interface.</summary>
            <param name="IOInterfaceName">HALCON I/O interface name. Default: []</param>
            <param name="action">Name of the action to perform.</param>
            <param name="argument">List of arguments for the action. Default: []</param>
            <returns>List of results returned by the action.</returns>
        </member>
        <member name="M:HalconDotNet.HIODevice.ControlIoInterface(System.String,System.String,System.String)">
            <summary>Perform an action on the I/O interface.</summary>
            <param name="IOInterfaceName">HALCON I/O interface name. Default: []</param>
            <param name="action">Name of the action to perform.</param>
            <param name="argument">List of arguments for the action. Default: []</param>
            <returns>List of results returned by the action.</returns>
        </member>
        <member name="M:HalconDotNet.HIODevice.QueryIoInterface(System.String,HalconDotNet.HTuple)">
            <summary>Query information about the specified I/O device interface.</summary>
            <param name="IOInterfaceName">HALCON I/O interface name. Default: []</param>
            <param name="query">Parameter name of the query. Default: []</param>
            <returns>List of result values (according to Query).</returns>
        </member>
        <member name="M:HalconDotNet.HIODevice.QueryIoInterface(System.String,System.String)">
            <summary>Query information about the specified I/O device interface.</summary>
            <param name="IOInterfaceName">HALCON I/O interface name. Default: []</param>
            <param name="query">Parameter name of the query. Default: []</param>
            <returns>List of result values (according to Query).</returns>
        </member>
        <member name="T:HalconDotNet.HDeformableSurfaceModel">
            <summary>Represents an instance of a deformable surface model.</summary>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceModel.#ctor(System.String)">
            <summary>
              Read a deformable surface model from a file.
              Modified instance represents: Handle of the read deformable surface model.
            </summary>
            <param name="fileName">Name of the file to read.</param>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceModel.#ctor(HalconDotNet.HObjectModel3D,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create the data structure needed to perform deformable surface-based matching.
              Modified instance represents: Handle of the deformable surface model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="relSamplingDistance">Sampling distance relative to the object's diameter Default: 0.05</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceModel.#ctor(HalconDotNet.HObjectModel3D,System.Double,System.String,System.String)">
            <summary>
              Create the data structure needed to perform deformable surface-based matching.
              Modified instance represents: Handle of the deformable surface model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="relSamplingDistance">Sampling distance relative to the object's diameter Default: 0.05</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceModel.DeserializeDeformableSurfaceModel(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a deformable surface model.
              Modified instance represents: Handle of the deformable surface model.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceModel.SerializeDeformableSurfaceModel">
            <summary>
              Serialize a deformable surface_model.
              Instance represents: Handle of the deformable surface model.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceModel.ReadDeformableSurfaceModel(System.String)">
            <summary>
              Read a deformable surface model from a file.
              Modified instance represents: Handle of the read deformable surface model.
            </summary>
            <param name="fileName">Name of the file to read.</param>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceModel.WriteDeformableSurfaceModel(System.String)">
            <summary>
              Write a deformable surface model to a file.
              Instance represents: Handle of the deformable surface model to write.
            </summary>
            <param name="fileName">File name to write to.</param>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceModel.RefineDeformableSurfaceModel(HalconDotNet.HObjectModel3D,System.Double,HalconDotNet.HObjectModel3D,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HDeformableSurfaceMatchingResult[]@)">
            <summary>
              Refine the position and deformation of a deformable surface model in a 3D scene.
              Instance represents: Handle of the deformable surface model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="relSamplingDistance">Relative sampling distance of the scene. Default: 0.05</param>
            <param name="initialDeformationObjectModel3D">Initial deformation of the 3D object model</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="deformableSurfaceMatchingResult">Handle of the matching result.</param>
            <returns>Score of the refined model.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceModel.RefineDeformableSurfaceModel(HalconDotNet.HObjectModel3D,System.Double,HalconDotNet.HObjectModel3D,System.String,System.String,HalconDotNet.HDeformableSurfaceMatchingResult@)">
            <summary>
              Refine the position and deformation of a deformable surface model in a 3D scene.
              Instance represents: Handle of the deformable surface model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="relSamplingDistance">Relative sampling distance of the scene. Default: 0.05</param>
            <param name="initialDeformationObjectModel3D">Initial deformation of the 3D object model</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="deformableSurfaceMatchingResult">Handle of the matching result.</param>
            <returns>Score of the refined model.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceModel.FindDeformableSurfaceModel(HalconDotNet.HObjectModel3D,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HDeformableSurfaceMatchingResult[]@)">
            <summary>
              Find the best match of a deformable surface model in a 3D scene.
              Instance represents: Handle of the deformable surface model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="relSamplingDistance">Scene sampling distance relative to the diameter of the surface model. Default: 0.05</param>
            <param name="minScore">Minimum score of the returned match. Default: 0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="deformableSurfaceMatchingResult">Handle of the matching result.</param>
            <returns>Score of the found instances of the surface model.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceModel.FindDeformableSurfaceModel(HalconDotNet.HObjectModel3D,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HDeformableSurfaceMatchingResult@)">
            <summary>
              Find the best match of a deformable surface model in a 3D scene.
              Instance represents: Handle of the deformable surface model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="relSamplingDistance">Scene sampling distance relative to the diameter of the surface model. Default: 0.05</param>
            <param name="minScore">Minimum score of the returned match. Default: 0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="deformableSurfaceMatchingResult">Handle of the matching result.</param>
            <returns>Score of the found instances of the surface model.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceModel.GetDeformableSurfaceModelParam(HalconDotNet.HTuple)">
            <summary>
              Return the parameters and properties of a deformable surface model.
              Instance represents: Handle of the deformable surface model.
            </summary>
            <param name="paramName">Name of the parameter. Default: "sampled_model"</param>
            <returns>Value of the parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceModel.GetDeformableSurfaceModelParam(System.String)">
            <summary>
              Return the parameters and properties of a deformable surface model.
              Instance represents: Handle of the deformable surface model.
            </summary>
            <param name="paramName">Name of the parameter. Default: "sampled_model"</param>
            <returns>Value of the parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceModel.AddDeformableSurfaceModelReferencePoint(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a reference point to a deformable surface model.
              Instance represents: Handle of the deformable surface model.
            </summary>
            <param name="referencePointX">x-coordinates of a reference point.</param>
            <param name="referencePointY">x-coordinates of a reference point.</param>
            <param name="referencePointZ">x-coordinates of a reference point.</param>
            <returns>Index of the new reference point.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceModel.AddDeformableSurfaceModelReferencePoint(System.Double,System.Double,System.Double)">
            <summary>
              Add a reference point to a deformable surface model.
              Instance represents: Handle of the deformable surface model.
            </summary>
            <param name="referencePointX">x-coordinates of a reference point.</param>
            <param name="referencePointY">x-coordinates of a reference point.</param>
            <param name="referencePointZ">x-coordinates of a reference point.</param>
            <returns>Index of the new reference point.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceModel.AddDeformableSurfaceModelSample(HalconDotNet.HObjectModel3D[])">
            <summary>
              Add a sample deformation to a deformable surface model
              Instance represents: Handle of the deformable surface model.
            </summary>
            <param name="objectModel3D">Handle of the deformed 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceModel.AddDeformableSurfaceModelSample(HalconDotNet.HObjectModel3D)">
            <summary>
              Add a sample deformation to a deformable surface model
              Instance represents: Handle of the deformable surface model.
            </summary>
            <param name="objectModel3D">Handle of the deformed 3D object model.</param>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceModel.CreateDeformableSurfaceModel(HalconDotNet.HObjectModel3D,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create the data structure needed to perform deformable surface-based matching.
              Modified instance represents: Handle of the deformable surface model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="relSamplingDistance">Sampling distance relative to the object's diameter Default: 0.05</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceModel.CreateDeformableSurfaceModel(HalconDotNet.HObjectModel3D,System.Double,System.String,System.String)">
            <summary>
              Create the data structure needed to perform deformable surface-based matching.
              Modified instance represents: Handle of the deformable surface model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="relSamplingDistance">Sampling distance relative to the object's diameter Default: 0.05</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
        </member>
        <member name="T:HalconDotNet.HClassGmm">
            <summary>Represents an instance of a Gaussian mixture model.</summary>
        </member>
        <member name="M:HalconDotNet.HClassGmm.#ctor(System.String)">
            <summary>
              Read a Gaussian Mixture Model from a file.
              Modified instance represents: GMM handle.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HClassGmm.#ctor(System.Int32,System.Int32,HalconDotNet.HTuple,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Create a Gaussian Mixture Model for classification
              Modified instance represents: GMM handle.
            </summary>
            <param name="numDim">Number of dimensions of the feature space. Default: 3</param>
            <param name="numClasses">Number of classes of the GMM. Default: 5</param>
            <param name="numCenters">Number of centers per class. Default: 1</param>
            <param name="covarType">Type of the covariance matrices. Default: "spherical"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "normalization"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
            <param name="randSeed">Seed value of the random number generator that is used to initialize the GMM with random values. Default: 42</param>
        </member>
        <member name="M:HalconDotNet.HClassGmm.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Create a Gaussian Mixture Model for classification
              Modified instance represents: GMM handle.
            </summary>
            <param name="numDim">Number of dimensions of the feature space. Default: 3</param>
            <param name="numClasses">Number of classes of the GMM. Default: 5</param>
            <param name="numCenters">Number of centers per class. Default: 1</param>
            <param name="covarType">Type of the covariance matrices. Default: "spherical"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "normalization"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
            <param name="randSeed">Seed value of the random number generator that is used to initialize the GMM with random values. Default: 42</param>
        </member>
        <member name="M:HalconDotNet.HClassGmm.ClassifyImageClassGmm(HalconDotNet.HImage,System.Double)">
            <summary>
              Classify an image with a Gaussian Mixture Model.
              Instance represents: GMM handle.
            </summary>
            <param name="image">Input image.</param>
            <param name="rejectionThreshold">Threshold for the rejection of the classification. Default: 0.5</param>
            <returns>Segmented classes.</returns>
        </member>
        <member name="M:HalconDotNet.HClassGmm.AddSamplesImageClassGmm(HalconDotNet.HImage,HalconDotNet.HRegion,System.Double)">
            <summary>
              Add training samples from an image to the training data of a Gaussian Mixture Model.
              Instance represents: GMM handle.
            </summary>
            <param name="image">Training image.</param>
            <param name="classRegions">Regions of the classes to be trained.</param>
            <param name="randomize">Standard deviation of the Gaussian noise added to the training data. Default: 0.0</param>
        </member>
        <member name="M:HalconDotNet.HClassGmm.GetClassTrainDataGmm">
            <summary>
              Get the training data of a Gaussian Mixture Model (GMM).
              Instance represents: Handle of a GMM that contains training data.
            </summary>
            <returns>Handle of the training data of the classifier.</returns>
        </member>
        <member name="M:HalconDotNet.HClassGmm.AddClassTrainDataGmm(HalconDotNet.HClassTrainData)">
            <summary>
              Add training data to a Gaussian Mixture Model (GMM).
              Instance represents: Handle of a GMM which receives the training data.
            </summary>
            <param name="classTrainDataHandle">Handle of training data for a classifier.</param>
        </member>
        <member name="M:HalconDotNet.HClassGmm.SelectFeatureSetGmm(HalconDotNet.HClassTrainData,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal combination from a set of features to classify the  provided data.
              Modified instance represents: A trained GMM classifier using only the selected  features.
            </summary>
            <param name="classTrainDataHandle">Handle of the training data.</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure  the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure  the classifier. Default: []</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
            <returns>The selected feature set, contains indices or names.</returns>
        </member>
        <member name="M:HalconDotNet.HClassGmm.SelectFeatureSetGmm(HalconDotNet.HClassTrainData,System.String,System.String,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal combination from a set of features to classify the  provided data.
              Modified instance represents: A trained GMM classifier using only the selected  features.
            </summary>
            <param name="classTrainDataHandle">Handle of the training data.</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure  the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure  the classifier. Default: []</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
            <returns>The selected feature set, contains indices or names.</returns>
        </member>
        <member name="M:HalconDotNet.HClassGmm.CreateClassLutGmm(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a look-up table using a gaussian mixture model to classify byte images.
              Instance represents: GMM handle.
            </summary>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <returns>Handle of the LUT classifier.</returns>
        </member>
        <member name="M:HalconDotNet.HClassGmm.ClearSamplesClassGmm(HalconDotNet.HClassGmm[])">
            <summary>Clear the training data of a Gaussian Mixture Model.</summary>
            <param name="GMMHandle">GMM handle.</param>
        </member>
        <member name="M:HalconDotNet.HClassGmm.ClearSamplesClassGmm">
            <summary>
              Clear the training data of a Gaussian Mixture Model.
              Instance represents: GMM handle.
            </summary>
        </member>
        <member name="M:HalconDotNet.HClassGmm.DeserializeClassGmm(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized Gaussian Mixture Model.
              Modified instance represents: GMM handle.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HClassGmm.SerializeClassGmm">
            <summary>
              Serialize a Gaussian Mixture Model (GMM).
              Instance represents: GMM handle.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HClassGmm.ReadClassGmm(System.String)">
            <summary>
              Read a Gaussian Mixture Model from a file.
              Modified instance represents: GMM handle.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HClassGmm.WriteClassGmm(System.String)">
            <summary>
              Write a Gaussian Mixture Model to a file.
              Instance represents: GMM handle.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HClassGmm.ReadSamplesClassGmm(System.String)">
            <summary>
              Read the training data of a Gaussian Mixture Model from a file.
              Instance represents: GMM handle.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HClassGmm.WriteSamplesClassGmm(System.String)">
            <summary>
              Write the training data of a Gaussian Mixture Model to a file.
              Instance represents: GMM handle.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HClassGmm.ClassifyClassGmm(HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Calculate the class of a feature vector by a Gaussian Mixture Model.
              Instance represents: GMM handle.
            </summary>
            <param name="features">Feature vector.</param>
            <param name="num">Number of best classes to determine. Default: 1</param>
            <param name="classProb">A-posteriori probability of the classes.</param>
            <param name="density">Probability density of the feature vector.</param>
            <param name="KSigmaProb">Normalized k-sigma-probability for the feature vector.</param>
            <returns>Result of classifying the feature vector with the GMM.</returns>
        </member>
        <member name="M:HalconDotNet.HClassGmm.EvaluateClassGmm(HalconDotNet.HTuple,System.Double@,System.Double@)">
            <summary>
              Evaluate a feature vector by a Gaussian Mixture Model.
              Instance represents: GMM handle.
            </summary>
            <param name="features">Feature vector.</param>
            <param name="density">Probability density of the feature vector.</param>
            <param name="KSigmaProb">Normalized k-sigma-probability for the feature vector.</param>
            <returns>A-posteriori probability of the classes.</returns>
        </member>
        <member name="M:HalconDotNet.HClassGmm.TrainClassGmm(System.Int32,System.Double,System.String,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Train a Gaussian Mixture Model.
              Instance represents: GMM handle.
            </summary>
            <param name="maxIter">Maximum number of iterations of the expectation maximization algorithm Default: 100</param>
            <param name="threshold">Threshold for relative change of the error for the expectation maximization algorithm to terminate. Default: 0.001</param>
            <param name="classPriors">Mode to determine the a-priori probabilities of the classes Default: "training"</param>
            <param name="regularize">Regularization value for preventing covariance matrix singularity. Default: 0.0001</param>
            <param name="iter">Number of executed iterations per class</param>
            <returns>Number of found centers per class</returns>
        </member>
        <member name="M:HalconDotNet.HClassGmm.GetPrepInfoClassGmm(System.String,HalconDotNet.HTuple@)">
            <summary>
              Compute the information content of the preprocessed feature vectors of a GMM.
              Instance represents: GMM handle.
            </summary>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "principal_components"</param>
            <param name="cumInformationCont">Cumulative information content of the transformed feature vectors.</param>
            <returns>Relative information content of the transformed feature vectors.</returns>
        </member>
        <member name="M:HalconDotNet.HClassGmm.GetSampleNumClassGmm">
            <summary>
              Return the number of training samples stored in the training data of a Gaussian Mixture Model (GMM).
              Instance represents: GMM handle.
            </summary>
            <returns>Number of stored training samples.</returns>
        </member>
        <member name="M:HalconDotNet.HClassGmm.GetSampleClassGmm(System.Int32,System.Int32@)">
            <summary>
              Return a training sample from the training data of a Gaussian Mixture Models (GMM).
              Instance represents: GMM handle.
            </summary>
            <param name="numSample">Index of the stored training sample.</param>
            <param name="classID">Class of the training sample.</param>
            <returns>Feature vector of the training sample.</returns>
        </member>
        <member name="M:HalconDotNet.HClassGmm.AddSampleClassGmm(HalconDotNet.HTuple,System.Int32,System.Double)">
            <summary>
              Add a training sample to the training data of a Gaussian Mixture Model.
              Instance represents: GMM handle.
            </summary>
            <param name="features">Feature vector of the training sample to be stored.</param>
            <param name="classID">Class of the training sample to be stored.</param>
            <param name="randomize">Standard deviation of the Gaussian noise added to the training data. Default: 0.0</param>
        </member>
        <member name="M:HalconDotNet.HClassGmm.GetParamsClassGmm(System.Int32@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,System.String@)">
            <summary>
              Return the parameters of a Gaussian Mixture Model.
              Instance represents: GMM handle.
            </summary>
            <param name="numClasses">Number of classes of the GMM.</param>
            <param name="minCenters">Minimum number of centers per GMM class.</param>
            <param name="maxCenters">Maximum number of centers per GMM class.</param>
            <param name="covarType">Type of the covariance matrices.</param>
            <returns>Number of dimensions of the feature space.</returns>
        </member>
        <member name="M:HalconDotNet.HClassGmm.CreateClassGmm(System.Int32,System.Int32,HalconDotNet.HTuple,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Create a Gaussian Mixture Model for classification
              Modified instance represents: GMM handle.
            </summary>
            <param name="numDim">Number of dimensions of the feature space. Default: 3</param>
            <param name="numClasses">Number of classes of the GMM. Default: 5</param>
            <param name="numCenters">Number of centers per class. Default: 1</param>
            <param name="covarType">Type of the covariance matrices. Default: "spherical"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "normalization"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
            <param name="randSeed">Seed value of the random number generator that is used to initialize the GMM with random values. Default: 42</param>
        </member>
        <member name="M:HalconDotNet.HClassGmm.CreateClassGmm(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Create a Gaussian Mixture Model for classification
              Modified instance represents: GMM handle.
            </summary>
            <param name="numDim">Number of dimensions of the feature space. Default: 3</param>
            <param name="numClasses">Number of classes of the GMM. Default: 5</param>
            <param name="numCenters">Number of centers per class. Default: 1</param>
            <param name="covarType">Type of the covariance matrices. Default: "spherical"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "normalization"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
            <param name="randSeed">Seed value of the random number generator that is used to initialize the GMM with random values. Default: 42</param>
        </member>
        <member name="T:HalconDotNet.HXLDModPara">
            <summary>Represents an instance of an XLD modified parallel object(-array).</summary>
        </member>
        <member name="M:HalconDotNet.HXLDModPara.#ctor">
            <summary>Create an uninitialized iconic object</summary>
        </member>
        <member name="M:HalconDotNet.HXLDModPara.CombineRoadsXld(HalconDotNet.HXLDPoly,HalconDotNet.HXLDExtPara,HalconDotNet.HXLDPoly,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Combine road hypotheses from two resolution levels.
              Instance represents: Modified parallels obtained from EdgePolygons.
            </summary>
            <param name="edgePolygons">XLD polygons to be examined.</param>
            <param name="extParallels">Extended parallels obtained from EdgePolygons.</param>
            <param name="centerLines">Road-center-line polygons to be examined.</param>
            <param name="maxAngleParallel">Maximum angle between two parallel line segments. Default: 0.523598775598</param>
            <param name="maxAngleColinear">Maximum angle between two collinear line segments. Default: 0.261799387799</param>
            <param name="maxDistanceParallel">Maximum distance between two parallel line segments. Default: 40</param>
            <param name="maxDistanceColinear">Maximum distance between two collinear line segments. Default: 40</param>
            <returns>Roadsides found.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDModPara.CombineRoadsXld(HalconDotNet.HXLDPoly,HalconDotNet.HXLDExtPara,HalconDotNet.HXLDPoly,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Combine road hypotheses from two resolution levels.
              Instance represents: Modified parallels obtained from EdgePolygons.
            </summary>
            <param name="edgePolygons">XLD polygons to be examined.</param>
            <param name="extParallels">Extended parallels obtained from EdgePolygons.</param>
            <param name="centerLines">Road-center-line polygons to be examined.</param>
            <param name="maxAngleParallel">Maximum angle between two parallel line segments. Default: 0.523598775598</param>
            <param name="maxAngleColinear">Maximum angle between two collinear line segments. Default: 0.261799387799</param>
            <param name="maxDistanceParallel">Maximum distance between two parallel line segments. Default: 40</param>
            <param name="maxDistanceColinear">Maximum distance between two collinear line segments. Default: 40</param>
            <returns>Roadsides found.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDModPara.ObjDiff(HalconDotNet.HXLDModPara)">
            <summary>
              Calculate the difference of two object tuples.
              Instance represents: Object tuple 1.
            </summary>
            <param name="objectsSub">Object tuple 2.</param>
            <returns>Objects from Objects that are not part of ObjectsSub.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDModPara.CopyObj(System.Int32,System.Int32)">
            <summary>
              Copy an iconic object in the HALCON database.
              Instance represents: Objects to be copied.
            </summary>
            <param name="index">Starting index of the objects to be copied. Default: 1</param>
            <param name="numObj">Number of objects to be copied or -1. Default: 1</param>
            <returns>Copied objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDModPara.ConcatObj(HalconDotNet.HXLDModPara)">
            <summary>
              Concatenate two iconic object tuples.
              Instance represents: Object tuple 1.
            </summary>
            <param name="objects2">Object tuple 2.</param>
            <returns>Concatenated objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDModPara.SelectObj(HalconDotNet.HTuple)">
            <summary>
              Select objects from an object tuple.
              Instance represents: Input objects.
            </summary>
            <param name="index">Indices of the objects to be selected. Default: 1</param>
            <returns>Selected objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDModPara.SelectObj(System.Int32)">
            <summary>
              Select objects from an object tuple.
              Instance represents: Input objects.
            </summary>
            <param name="index">Indices of the objects to be selected. Default: 1</param>
            <returns>Selected objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDModPara.CompareObj(HalconDotNet.HXLDModPara,HalconDotNet.HTuple)">
            <summary>
              Compare iconic objects regarding equality.
              Instance represents: Reference objects.
            </summary>
            <param name="objects2">Test objects.</param>
            <param name="epsilon">Maximum allowed difference between two gray values or  coordinates etc. Default: 0.0</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDModPara.CompareObj(HalconDotNet.HXLDModPara,System.Double)">
            <summary>
              Compare iconic objects regarding equality.
              Instance represents: Reference objects.
            </summary>
            <param name="objects2">Test objects.</param>
            <param name="epsilon">Maximum allowed difference between two gray values or  coordinates etc. Default: 0.0</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDModPara.TestEqualObj(HalconDotNet.HXLDModPara)">
            <summary>
              Compare image objects regarding equality.
              Instance represents: Test objects.
            </summary>
            <param name="objects2">Comparative objects.</param>
            <returns>boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDModPara.GenGridRectificationMap(HalconDotNet.HImage,HalconDotNet.HXLDModPara@,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
              Instance represents: Input contours.
            </summary>
            <param name="image">Input image.</param>
            <param name="meshes">Output contours.</param>
            <param name="gridSpacing">Distance of the grid points in the rectified image.</param>
            <param name="rotation">Rotation to be applied to the point grid. Default: "auto"</param>
            <param name="row">Row coordinates of the grid points.</param>
            <param name="column">Column coordinates of the grid points.</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
            <returns>Image containing the mapping data.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDModPara.GenGridRectificationMap(HalconDotNet.HImage,HalconDotNet.HXLDModPara@,System.Int32,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
              Instance represents: Input contours.
            </summary>
            <param name="image">Input image.</param>
            <param name="meshes">Output contours.</param>
            <param name="gridSpacing">Distance of the grid points in the rectified image.</param>
            <param name="rotation">Rotation to be applied to the point grid. Default: "auto"</param>
            <param name="row">Row coordinates of the grid points.</param>
            <param name="column">Column coordinates of the grid points.</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
            <returns>Image containing the mapping data.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDModPara.SelectXldPoint(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Choose all contours or polygons containing a given point.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row">Line coordinate of the test point. Default: 100.0</param>
            <param name="column">Column coordinate of the test point. Default: 100.0</param>
            <returns>All contours or polygons containing the test point.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDModPara.SelectXldPoint(System.Double,System.Double)">
            <summary>
              Choose all contours or polygons containing a given point.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row">Line coordinate of the test point. Default: 100.0</param>
            <param name="column">Column coordinate of the test point. Default: 100.0</param>
            <returns>All contours or polygons containing the test point.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDModPara.SelectShapeXld(HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Select contours or polygons using shape features.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="features">Shape features to be checked. Default: "area"</param>
            <param name="operation">Operation type between the individual features. Default: "and"</param>
            <param name="min">Lower limits of the features or 'min'. Default: 150.0</param>
            <param name="max">Upper limits of the features or 'max'. Default: 99999.0</param>
            <returns>Contours or polygons fulfilling the condition(s).</returns>
        </member>
        <member name="M:HalconDotNet.HXLDModPara.SelectShapeXld(System.String,System.String,System.Double,System.Double)">
            <summary>
              Select contours or polygons using shape features.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="features">Shape features to be checked. Default: "area"</param>
            <param name="operation">Operation type between the individual features. Default: "and"</param>
            <param name="min">Lower limits of the features or 'min'. Default: 150.0</param>
            <param name="max">Upper limits of the features or 'max'. Default: 99999.0</param>
            <returns>Contours or polygons fulfilling the condition(s).</returns>
        </member>
        <member name="M:HalconDotNet.HXLDModPara.ShapeTransXld(System.String)">
            <summary>
              Transform the shape of contours or polygons.
              Instance represents: Contours or polygons to be transformed.
            </summary>
            <param name="type">Type of transformation. Default: "convex"</param>
            <returns>Transformed contours respectively polygons.</returns>
        </member>
        <member name="P:HalconDotNet.HXLDModPara.Item(HalconDotNet.HTuple)">
            <summary>Returns the iconic object(s) at the specified index</summary>
        </member>
        <member name="T:HalconDotNet.HSerializedItem">
            <summary>Represents an instance of a serializied item.</summary>
        </member>
        <member name="M:HalconDotNet.HSerializedItem.#ctor(System.IntPtr,System.Int32,System.String)">
            <summary>
              Create a serialized item.
              Modified instance represents: Handle of the serialized item.
            </summary>
            <param name="pointer">Data pointer of the serialized item.</param>
            <param name="size">Size of the serialized item.</param>
            <param name="copy">Copy mode of the serialized item. Default: "true"</param>
        </member>
        <member name="M:HalconDotNet.HSerializedItem.#ctor(System.Byte[])">
            <summary>Creates a new serialized item with data given in byte array</summary>
            <remarks>The array needs to be kept alive until block is disposed!</remarks>
        </member>
        <member name="M:HalconDotNet.HSerializedItem.op_Implicit(HalconDotNet.HSerializedItem)~System.Byte[]">
            <summary>Copies a serialized item into a new byte array</summary>
        </member>
        <member name="M:HalconDotNet.HSerializedItem.ReceiveSerializedItem(HalconDotNet.HSocket)">
            <summary>
              Receive a serialized item over a socket connection.
              Modified instance represents: Handle of the serialized item.
            </summary>
            <param name="socket">Socket number.</param>
        </member>
        <member name="M:HalconDotNet.HSerializedItem.SendSerializedItem(HalconDotNet.HSocket)">
            <summary>
              Send a serialized item over a socket connection.
              Instance represents: Handle of the serialized item.
            </summary>
            <param name="socket">Socket number.</param>
        </member>
        <member name="M:HalconDotNet.HSerializedItem.FwriteSerializedItem(HalconDotNet.HFile)">
            <summary>
              Write a serialized item to a file.
              Instance represents: Handle of the serialized item.
            </summary>
            <param name="fileHandle">File handle.</param>
        </member>
        <member name="M:HalconDotNet.HSerializedItem.FreadSerializedItem(HalconDotNet.HFile)">
            <summary>
              Read a serialized item from a file.
              Modified instance represents: Handle of the serialized item.
            </summary>
            <param name="fileHandle">File handle.</param>
        </member>
        <member name="M:HalconDotNet.HSerializedItem.ClearAllSerializedItems">
            <summary>Delete all current existing serialized items.</summary>
        </member>
        <member name="M:HalconDotNet.HSerializedItem.GetSerializedItemPtr(System.Int32@)">
            <summary>
              Access the data pointer of a serialized item.
              Instance represents: Handle of the serialized item.
            </summary>
            <param name="size">Size of the serialized item.</param>
            <returns>Data pointer of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HSerializedItem.CreateSerializedItemPtr(System.IntPtr,System.Int32,System.String)">
            <summary>
              Create a serialized item.
              Modified instance represents: Handle of the serialized item.
            </summary>
            <param name="pointer">Data pointer of the serialized item.</param>
            <param name="size">Size of the serialized item.</param>
            <param name="copy">Copy mode of the serialized item. Default: "true"</param>
        </member>
        <member name="T:HalconDotNet.HMisc">
            <summary>Class grouping methods belonging to no other HALCON class.</summary>
        </member>
        <member name="M:HalconDotNet.HMisc.WriteTuple(HalconDotNet.HTuple,System.String)">
            <summary>Write a tuple to a file.</summary>
            <param name="tuple">Tuple with any kind of data.</param>
            <param name="fileName">Name of the file to be written.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.WriteTuple(System.Double,System.String)">
            <summary>Write a tuple to a file.</summary>
            <param name="tuple">Tuple with any kind of data.</param>
            <param name="fileName">Name of the file to be written.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.ReadTuple(System.String)">
            <summary>Read a tuple from a file.</summary>
            <param name="fileName">Name of the file to be read.</param>
            <returns>Tuple with any kind of data.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.CloseAllSerials">
            <summary>Close all serial devices.</summary>
        </member>
        <member name="M:HalconDotNet.HMisc.IntersectLinesOfSight(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HPose,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Get a 3D point from the intersection of two lines of sight within a binocular camera system.</summary>
            <param name="camParam1">Internal parameters of the projective camera 1.</param>
            <param name="camParam2">Internal parameters of the projective camera 2.</param>
            <param name="relPose">Point transformation from camera 2 to camera 1.</param>
            <param name="row1">Row coordinate of a point in image 1.</param>
            <param name="col1">Column coordinate of a point in image 1.</param>
            <param name="row2">Row coordinate of the corresponding point in image 2.</param>
            <param name="col2">Column coordinate of the corresponding point in image 2.</param>
            <param name="x">X coordinate of the 3D point.</param>
            <param name="y">Y coordinate of the 3D point.</param>
            <param name="z">Z coordinate of the 3D point.</param>
            <param name="dist">Distance of the 3D point to the lines of sight.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.IntersectLinesOfSight(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HPose,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>Get a 3D point from the intersection of two lines of sight within a binocular camera system.</summary>
            <param name="camParam1">Internal parameters of the projective camera 1.</param>
            <param name="camParam2">Internal parameters of the projective camera 2.</param>
            <param name="relPose">Point transformation from camera 2 to camera 1.</param>
            <param name="row1">Row coordinate of a point in image 1.</param>
            <param name="col1">Column coordinate of a point in image 1.</param>
            <param name="row2">Row coordinate of the corresponding point in image 2.</param>
            <param name="col2">Column coordinate of the corresponding point in image 2.</param>
            <param name="x">X coordinate of the 3D point.</param>
            <param name="y">Y coordinate of the 3D point.</param>
            <param name="z">Z coordinate of the 3D point.</param>
            <param name="dist">Distance of the 3D point to the lines of sight.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.CloseAllOcvs">
            <summary>Clear all OCV tools.</summary>
        </member>
        <member name="M:HalconDotNet.HMisc.CloseAllOcrs">
            <summary>Destroy all OCR classifiers.</summary>
        </member>
        <member name="M:HalconDotNet.HMisc.ConcatOcrTrainf(HalconDotNet.HTuple,System.String)">
            <summary>Concat training files.</summary>
            <param name="singleFiles">Names of the single training files. Default: ""</param>
            <param name="composedFile">Name of the composed training file. Default: "all_characters"</param>
        </member>
        <member name="M:HalconDotNet.HMisc.ConcatOcrTrainf(System.String,System.String)">
            <summary>Concat training files.</summary>
            <param name="singleFiles">Names of the single training files. Default: ""</param>
            <param name="composedFile">Name of the composed training file. Default: "all_characters"</param>
        </member>
        <member name="M:HalconDotNet.HMisc.ReadOcrTrainfNamesProtected(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query which characters are stored in a (protected) training file.</summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="password">Passwords for protected training files.</param>
            <param name="characterCount">Number of characters.</param>
            <returns>Names of the read characters.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.ReadOcrTrainfNamesProtected(System.String,System.String,System.Int32@)">
            <summary>Query which characters are stored in a (protected) training file.</summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="password">Passwords for protected training files.</param>
            <param name="characterCount">Number of characters.</param>
            <returns>Names of the read characters.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.ReadOcrTrainfNames(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Query which characters are stored in a training file.</summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="characterCount">Number of characters.</param>
            <returns>Names of the read characters.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.ReadOcrTrainfNames(System.String,System.Int32@)">
            <summary>Query which characters are stored in a training file.</summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="characterCount">Number of characters.</param>
            <returns>Names of the read characters.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.CloseAllMeasures">
            <summary>Delete all measure objects.</summary>
        </member>
        <member name="M:HalconDotNet.HMisc.ConvertPoint3dSpherToCart(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Convert spherical coordinates of a 3D point to Cartesian coordinates.</summary>
            <param name="longitude">Longitude of the 3D point.</param>
            <param name="latitude">Latitude of the 3D point.</param>
            <param name="radius">Radius of the 3D point.</param>
            <param name="equatPlaneNormal">Normal vector of the equatorial plane (points to the north pole). Default: "-y"</param>
            <param name="zeroMeridian">Coordinate axis in the equatorial plane that points to the zero meridian. Default: "-z"</param>
            <param name="x">X coordinate of the 3D point.</param>
            <param name="y">Y coordinate of the 3D point.</param>
            <param name="z">Z coordinate of the 3D point.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.ConvertPoint3dSpherToCart(System.Double,System.Double,System.Double,System.String,System.String,System.Double@,System.Double@,System.Double@)">
            <summary>Convert spherical coordinates of a 3D point to Cartesian coordinates.</summary>
            <param name="longitude">Longitude of the 3D point.</param>
            <param name="latitude">Latitude of the 3D point.</param>
            <param name="radius">Radius of the 3D point.</param>
            <param name="equatPlaneNormal">Normal vector of the equatorial plane (points to the north pole). Default: "-y"</param>
            <param name="zeroMeridian">Coordinate axis in the equatorial plane that points to the zero meridian. Default: "-z"</param>
            <param name="x">X coordinate of the 3D point.</param>
            <param name="y">Y coordinate of the 3D point.</param>
            <param name="z">Z coordinate of the 3D point.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.ConvertPoint3dCartToSpher(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Convert Cartesian coordinates of a 3D point to spherical coordinates.</summary>
            <param name="x">X coordinate of the 3D point.</param>
            <param name="y">Y coordinate of the 3D point.</param>
            <param name="z">Z coordinate of the 3D point.</param>
            <param name="equatPlaneNormal">Normal vector of the equatorial plane (points to the north pole). Default: "-y"</param>
            <param name="zeroMeridian">Coordinate axis in the equatorial plane that points to the zero meridian. Default: "-z"</param>
            <param name="latitude">Latitude of the 3D point.</param>
            <param name="radius">Radius of the 3D point.</param>
            <returns>Longitude of the 3D point.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.ConvertPoint3dCartToSpher(System.Double,System.Double,System.Double,System.String,System.String,System.Double@,System.Double@)">
            <summary>Convert Cartesian coordinates of a 3D point to spherical coordinates.</summary>
            <param name="x">X coordinate of the 3D point.</param>
            <param name="y">Y coordinate of the 3D point.</param>
            <param name="z">Z coordinate of the 3D point.</param>
            <param name="equatPlaneNormal">Normal vector of the equatorial plane (points to the north pole). Default: "-y"</param>
            <param name="zeroMeridian">Coordinate axis in the equatorial plane that points to the zero meridian. Default: "-z"</param>
            <param name="latitude">Latitude of the 3D point.</param>
            <param name="radius">Radius of the 3D point.</param>
            <returns>Longitude of the 3D point.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.ReadKalman(System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Read the description file of a Kalman filter.</summary>
            <param name="fileName">Description file for a Kalman filter. Default: "kalman.init"</param>
            <param name="model">The lined up matrices A, C, Q, possibly G and u, and if necessary L stored in row-major order.</param>
            <param name="measurement">The matrix R stored in row-major order.</param>
            <param name="prediction">The matrix P0@f$P_{0}$ (error covariance matrix of the initial state estimate) stored in row-major order and the initial state estimate x0@f$x_{0}$ lined up.</param>
            <returns>The dimensions of the state vector, the measurement vector and the controller vector.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.UpdateKalman(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Read an update file of a Kalman filter.</summary>
            <param name="fileName">Update file for a Kalman filter. Default: "kalman.updt"</param>
            <param name="dimensionIn">The dimensions of the state vector, measurement vector and controller vector. Default: [3,1,0]</param>
            <param name="modelIn">The lined up matrices A,C,Q, possibly G and u, and if necessary L which all have been stored in row-major order. Default: [1.0,1.0,0.5,0.0,1.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,54.3,37.9,48.0,37.9,34.3,42.5,48.0,42.5,43.7]</param>
            <param name="measurementIn">The matrix R stored in row-major order. Default: [1,2]</param>
            <param name="modelOut">The lined up matrices A,C,Q, possibly G and u, and if necessary L which all have been stored in row-major order.</param>
            <param name="measurementOut">The matrix R stored in row-major order.</param>
            <returns>The dimensions of the state vector, measurement vector and controller vector.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.FilterKalman(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>Estimate the current state of a system with the help of the Kalman filtering.</summary>
            <param name="dimension">The dimensions of the state vector, the measurement and the controller vector. Default: [3,1,0]</param>
            <param name="model">The lined up matrices A,C,Q, possibly G and u, and if necessary L which have been stored in row-major order. Default: [1.0,1.0,0.5,0.0,1.0,1.0,0.0,0.0,1.0,1.0,0.0,0.0,54.3,37.9,48.0,37.9,34.3,42.5,48.0,42.5,43.7]</param>
            <param name="measurement">The matrix R stored in row-major order and the measurement vector y lined up. Default: [1.2,1.0]</param>
            <param name="predictionIn">The matrix P*@f$P$ (the extrapolation-error covariances) stored in row-major order and the extrapolation vector x*@f$x$ lined up. Default: [0.0,0.0,0.0,0.0,180.5,0.0,0.0,0.0,100.0,0.0,100.0,0.0]</param>
            <param name="estimate">The matrix P~@f$P$ (the estimation-error covariances) stored in row-major order and the estimated state x~@f$x$ lined up.</param>
            <returns>The matrix P* (the extrapolation-error covariances)stored in row-major order and the extrapolation vector x*@f$x$ lined up.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.CreateRectificationGrid(System.Double,System.Int32,System.String)">
            <summary>Generate a PostScript file, which describes the rectification grid.</summary>
            <param name="width">Width of the checkered pattern in meters (without the two frames). Default: 0.17</param>
            <param name="numSquares">Number of squares per row and column. Default: 17</param>
            <param name="gridFile">File name of the PostScript file. Default: "rectification_grid.ps"</param>
        </member>
        <member name="M:HalconDotNet.HMisc.GenArbitraryDistortionMap(System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>Generate a projection map that describes the mapping between an arbitrarily distorted image and the rectified image.</summary>
            <param name="gridSpacing">Distance of the grid points in the rectified image.</param>
            <param name="row">Row coordinates of the grid points in the distorted image.</param>
            <param name="column">Column coordinates of the grid points in the distorted image.</param>
            <param name="gridWidth">Width of the point grid (number of grid points).</param>
            <param name="imageWidth">Width of the images to be rectified.</param>
            <param name="imageHeight">Height of the images to be rectified.</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
            <returns>Image containing the mapping data.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.ProjectionPl(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the projection of a point onto a line.</summary>
            <param name="row">Row coordinate of the point.</param>
            <param name="column">Column coordinate of the point.</param>
            <param name="row1">Row coordinate of the first point on the line.</param>
            <param name="column1">Column coordinate of the first point on the line.</param>
            <param name="row2">Row coordinate of the second point on the line.</param>
            <param name="column2">Column coordinate of the second point on the line.</param>
            <param name="rowProj">Row coordinate of the projected point.</param>
            <param name="colProj">Column coordinate of the projected point</param>
        </member>
        <member name="M:HalconDotNet.HMisc.ProjectionPl(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>Calculate the projection of a point onto a line.</summary>
            <param name="row">Row coordinate of the point.</param>
            <param name="column">Column coordinate of the point.</param>
            <param name="row1">Row coordinate of the first point on the line.</param>
            <param name="column1">Column coordinate of the first point on the line.</param>
            <param name="row2">Row coordinate of the second point on the line.</param>
            <param name="column2">Column coordinate of the second point on the line.</param>
            <param name="rowProj">Row coordinate of the projected point.</param>
            <param name="colProj">Column coordinate of the projected point</param>
        </member>
        <member name="M:HalconDotNet.HMisc.GetPointsEllipse(HalconDotNet.HTuple,System.Double,System.Double,System.Double,System.Double,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate a point of an ellipse corresponding to a specific angle.</summary>
            <param name="angle">Angle corresponding to the resulting point [rad]. Default: 0</param>
            <param name="row">Row coordinate of the center of the ellipse.</param>
            <param name="column">Column coordinate of the center of the ellipse.</param>
            <param name="phi">Orientation of the main axis [rad].</param>
            <param name="radius1">Length of the larger half axis.</param>
            <param name="radius2">Length of the smaller half axis.</param>
            <param name="rowPoint">Row coordinate of the point on the ellipse.</param>
            <param name="colPoint">Column coordinates of the point on the ellipse.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.GetPointsEllipse(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>Calculate a point of an ellipse corresponding to a specific angle.</summary>
            <param name="angle">Angle corresponding to the resulting point [rad]. Default: 0</param>
            <param name="row">Row coordinate of the center of the ellipse.</param>
            <param name="column">Column coordinate of the center of the ellipse.</param>
            <param name="phi">Orientation of the main axis [rad].</param>
            <param name="radius1">Length of the larger half axis.</param>
            <param name="radius2">Length of the smaller half axis.</param>
            <param name="rowPoint">Row coordinate of the point on the ellipse.</param>
            <param name="colPoint">Column coordinates of the point on the ellipse.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.IntersectionLl(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the intersection point of two lines.</summary>
            <param name="rowA1">Row coordinate of the first point of the first line.</param>
            <param name="columnA1">Column coordinate of the first point of the first line.</param>
            <param name="rowA2">Row coordinate of the second point of the first line.</param>
            <param name="columnA2">Column coordinate of the second point of the first line.</param>
            <param name="rowB1">Row coordinate of the first point of the second line.</param>
            <param name="columnB1">Column coordinate of the first point of the second line.</param>
            <param name="rowB2">Row coordinate of the second point of the second line.</param>
            <param name="columnB2">Column coordinate of the second point of the second line.</param>
            <param name="row">Row coordinate of the intersection point.</param>
            <param name="column">Column coordinate of the intersection point.</param>
            <param name="isParallel">Are the two lines parallel?</param>
        </member>
        <member name="M:HalconDotNet.HMisc.IntersectionLl(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Int32@)">
            <summary>Calculate the intersection point of two lines.</summary>
            <param name="rowA1">Row coordinate of the first point of the first line.</param>
            <param name="columnA1">Column coordinate of the first point of the first line.</param>
            <param name="rowA2">Row coordinate of the second point of the first line.</param>
            <param name="columnA2">Column coordinate of the second point of the first line.</param>
            <param name="rowB1">Row coordinate of the first point of the second line.</param>
            <param name="columnB1">Column coordinate of the first point of the second line.</param>
            <param name="rowB2">Row coordinate of the second point of the second line.</param>
            <param name="columnB2">Column coordinate of the second point of the second line.</param>
            <param name="row">Row coordinate of the intersection point.</param>
            <param name="column">Column coordinate of the intersection point.</param>
            <param name="isParallel">Are the two lines parallel?</param>
        </member>
        <member name="M:HalconDotNet.HMisc.AngleLx(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Calculate the angle between one line and the horizontal axis.</summary>
            <param name="row1">Row coordinate the first point of the line.</param>
            <param name="column1">Column coordinate of the first point of the line.</param>
            <param name="row2">Row coordinate of the second point of the line.</param>
            <param name="column2">Column coordinate of the second point of the line.</param>
            <returns>Angle between the line and the horizontal axis [rad].</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.AngleLx(System.Double,System.Double,System.Double,System.Double)">
            <summary>Calculate the angle between one line and the horizontal axis.</summary>
            <param name="row1">Row coordinate the first point of the line.</param>
            <param name="column1">Column coordinate of the first point of the line.</param>
            <param name="row2">Row coordinate of the second point of the line.</param>
            <param name="column2">Column coordinate of the second point of the line.</param>
            <returns>Angle between the line and the horizontal axis [rad].</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.AngleLl(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Calculate the angle between two lines.</summary>
            <param name="rowA1">Row coordinate of the first point of the first line.</param>
            <param name="columnA1">Column coordinate of the first point of the first line.</param>
            <param name="rowA2">Row coordinate of the second point of the first line.</param>
            <param name="columnA2">Column coordinate of the second point of the first line.</param>
            <param name="rowB1">Row coordinate of the first point of the second line.</param>
            <param name="columnB1">Column coordinate of the first point of the second line.</param>
            <param name="rowB2">Row coordinate of the second point of the second line.</param>
            <param name="columnB2">Column coordinate of the second point of the second line.</param>
            <returns>Angle between the lines [rad].</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.AngleLl(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Calculate the angle between two lines.</summary>
            <param name="rowA1">Row coordinate of the first point of the first line.</param>
            <param name="columnA1">Column coordinate of the first point of the first line.</param>
            <param name="rowA2">Row coordinate of the second point of the first line.</param>
            <param name="columnA2">Column coordinate of the second point of the first line.</param>
            <param name="rowB1">Row coordinate of the first point of the second line.</param>
            <param name="columnB1">Column coordinate of the first point of the second line.</param>
            <param name="rowB2">Row coordinate of the second point of the second line.</param>
            <param name="columnB2">Column coordinate of the second point of the second line.</param>
            <returns>Angle between the lines [rad].</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.DistanceSl(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the distances between a line segment and a line.</summary>
            <param name="rowA1">Row coordinate of the first point of the line segment.</param>
            <param name="columnA1">Column coordinate of the first point of the line segment.</param>
            <param name="rowA2">Row coordinate of the second point of the line segment.</param>
            <param name="columnA2">Column coordinate of the second point of the line segment.</param>
            <param name="rowB1">Row coordinate of the first point of the line.</param>
            <param name="columnB1">Column coordinate of the first point of the line.</param>
            <param name="rowB2">Row coordinate of the second point of the line.</param>
            <param name="columnB2">Column coordinate of the second point of the line.</param>
            <param name="distanceMin">Minimum distance between the line segment and the line.</param>
            <param name="distanceMax">Maximum distance between the line segment and the line.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.DistanceSl(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>Calculate the distances between a line segment and a line.</summary>
            <param name="rowA1">Row coordinate of the first point of the line segment.</param>
            <param name="columnA1">Column coordinate of the first point of the line segment.</param>
            <param name="rowA2">Row coordinate of the second point of the line segment.</param>
            <param name="columnA2">Column coordinate of the second point of the line segment.</param>
            <param name="rowB1">Row coordinate of the first point of the line.</param>
            <param name="columnB1">Column coordinate of the first point of the line.</param>
            <param name="rowB2">Row coordinate of the second point of the line.</param>
            <param name="columnB2">Column coordinate of the second point of the line.</param>
            <param name="distanceMin">Minimum distance between the line segment and the line.</param>
            <param name="distanceMax">Maximum distance between the line segment and the line.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.DistanceSs(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the distances between two line segments.</summary>
            <param name="rowA1">Row coordinate of the first point of the line segment.</param>
            <param name="columnA1">Column coordinate of the first point of the line segment.</param>
            <param name="rowA2">Row coordinate of the second point of the line segment.</param>
            <param name="columnA2">Column coordinate of the second point of the line segment.</param>
            <param name="rowB1">Row coordinate of the first point of the line.</param>
            <param name="columnB1">Column of the first point of the line.</param>
            <param name="rowB2">Row coordinate of the second point of the line.</param>
            <param name="columnB2">Column coordinate of the second point of the line.</param>
            <param name="distanceMin">Minimum distance between the line segments.</param>
            <param name="distanceMax">Maximum distance between the line segments.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.DistanceSs(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>Calculate the distances between two line segments.</summary>
            <param name="rowA1">Row coordinate of the first point of the line segment.</param>
            <param name="columnA1">Column coordinate of the first point of the line segment.</param>
            <param name="rowA2">Row coordinate of the second point of the line segment.</param>
            <param name="columnA2">Column coordinate of the second point of the line segment.</param>
            <param name="rowB1">Row coordinate of the first point of the line.</param>
            <param name="columnB1">Column of the first point of the line.</param>
            <param name="rowB2">Row coordinate of the second point of the line.</param>
            <param name="columnB2">Column coordinate of the second point of the line.</param>
            <param name="distanceMin">Minimum distance between the line segments.</param>
            <param name="distanceMax">Maximum distance between the line segments.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.DistancePs(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the distances between a point and a line segment.</summary>
            <param name="row">Row coordinate of the first point.</param>
            <param name="column">Column coordinate of the first point.</param>
            <param name="row1">Row coordinate of the first point of the line segment.</param>
            <param name="column1">Column coordinate of the first point of the line segment.</param>
            <param name="row2">Row coordinate of the second point of the line segment.</param>
            <param name="column2">Column coordinate of the second point of the line segment.</param>
            <param name="distanceMin">Minimum distance between the point and the line segment.</param>
            <param name="distanceMax">Maximum distance between the point and the line segment.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.DistancePs(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>Calculate the distances between a point and a line segment.</summary>
            <param name="row">Row coordinate of the first point.</param>
            <param name="column">Column coordinate of the first point.</param>
            <param name="row1">Row coordinate of the first point of the line segment.</param>
            <param name="column1">Column coordinate of the first point of the line segment.</param>
            <param name="row2">Row coordinate of the second point of the line segment.</param>
            <param name="column2">Column coordinate of the second point of the line segment.</param>
            <param name="distanceMin">Minimum distance between the point and the line segment.</param>
            <param name="distanceMax">Maximum distance between the point and the line segment.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.DistancePl(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Calculate the distance between one point and one line.</summary>
            <param name="row">Row coordinate of the point.</param>
            <param name="column">Column of the point.</param>
            <param name="row1">Row coordinate of the first point of the line.</param>
            <param name="column1">Column coordinate of the first point of the line.</param>
            <param name="row2">Row coordinate of the second point of the line.</param>
            <param name="column2">Column coordinate of the second point of the line.</param>
            <returns>Distance between the points.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.DistancePl(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Calculate the distance between one point and one line.</summary>
            <param name="row">Row coordinate of the point.</param>
            <param name="column">Column of the point.</param>
            <param name="row1">Row coordinate of the first point of the line.</param>
            <param name="column1">Column coordinate of the first point of the line.</param>
            <param name="row2">Row coordinate of the second point of the line.</param>
            <param name="column2">Column coordinate of the second point of the line.</param>
            <returns>Distance between the points.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.DistancePp(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Calculate the distance between two points.</summary>
            <param name="row1">Row coordinate of the first point.</param>
            <param name="column1">Column coordinate of the first point.</param>
            <param name="row2">Row coordinate of the second point.</param>
            <param name="column2">Column coordinate of the second point.</param>
            <returns>Distance between the points.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.DistancePp(System.Double,System.Double,System.Double,System.Double)">
            <summary>Calculate the distance between two points.</summary>
            <param name="row1">Row coordinate of the first point.</param>
            <param name="column1">Column coordinate of the first point.</param>
            <param name="row2">Row coordinate of the second point.</param>
            <param name="column2">Column coordinate of the second point.</param>
            <returns>Distance between the points.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.MatchFourierCoeff(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.String)">
            <summary>Similarity of two contours.</summary>
            <param name="realCoef1">Real parts of the pattern Fourier coefficients.</param>
            <param name="imaginaryCoef1">Imaginary parts of the pattern Fourier coefficients.</param>
            <param name="realCoef2">Real parts of the Fourier coefficients to be compared.</param>
            <param name="imaginaryCoef2">Imaginary parts of the Fourier coefficients to be compared.</param>
            <param name="maxCoef">Total number of Fourier coefficients. Default: 50</param>
            <param name="damping">Kind of attenuation. Default: "1/index"</param>
            <returns>Similarity of the contours.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.Fourier1dimInv(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>One dimensional Fourier synthesis (inverse Fourier transform).</summary>
            <param name="realCoef">Real parts.</param>
            <param name="imaginaryCoef">Imaginary parts.</param>
            <param name="maxCoef">Input of the steps for the backtransformation. Default: 100</param>
            <param name="rows">Row coordinates.</param>
            <param name="columns">Column coordinates.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.AbsInvarFourierCoeff(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,System.String,HalconDotNet.HTuple@)">
            <summary>Normalizing of the Fourier coefficients with respect to the displacment of the starting point. </summary>
            <param name="realInvar">Real parts of the normalized Fourier coefficients.</param>
            <param name="imaginaryInvar">Imaginary parts of the normalized Fourier coefficients.</param>
            <param name="coefP">Normalizing coefficients p. Default: 1</param>
            <param name="coefQ">Normalizing coefficients q. Default: 1</param>
            <param name="AZInvar">Order of the AZ-invariants. Default: "abs_amount"</param>
            <param name="imaginaryAbsInvar">Imaginary parts of the normalized Fourier coefficients.</param>
            <returns>Real parts of the normalized Fourier coefficients.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.InvarFourierCoeff(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.String,HalconDotNet.HTuple@)">
            <summary>Normalize the Fourier coefficients.</summary>
            <param name="realCoef">Real parts of the Fourier coefficients.</param>
            <param name="imaginaryCoef">Imaginary parts of the Fourier coefficients.</param>
            <param name="normPar">Input of the normalizing coefficients. Default: 1</param>
            <param name="invarType">Indicates the level of the affine mappings. Default: "affine_invar"</param>
            <param name="imaginaryInvar">Imaginary parts of the normalized Fourier coefficients.</param>
            <returns>Real parts of the normalized Fourier coefficients.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.Fourier1dim(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple@)">
            <summary>Calculate the Fourier coefficients of a parameterized contour.</summary>
            <param name="rows">Row coordinates of the contour.</param>
            <param name="columns">Column coordinates of the contour.</param>
            <param name="parContour">Parameter scale.</param>
            <param name="maxCoef">Desired number of Fourier coefficients or all of them (0). Default: 50</param>
            <param name="imaginaryCoef">Imaginary parts of the Fourier coefficients.</param>
            <returns>Real parts of the Fourier coefficients.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.PrepContourFourier(HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>Parameterize the passed contour.</summary>
            <param name="rows">Row indices of the contour.</param>
            <param name="columns">Column indices of the contour.</param>
            <param name="transMode">Kind of parameterization. Default: "signed_area"</param>
            <returns>Parameterized contour.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.MoveContourOrig(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Transformation of the origin into the centre of gravity.</summary>
            <param name="rows">Row coordinates of the contour.</param>
            <param name="columns">Column coordinates of the contour.</param>
            <param name="rowsMoved">Row coordinates of the displaced contour.</param>
            <param name="columnsMoved">Column coordinates of the displaced contour.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.InfoSmooth(System.String,System.Double,HalconDotNet.HTuple@)">
            <summary>Information on smoothing filter smooth_image.</summary>
            <param name="filter">Name of required filter. Default: "deriche2"</param>
            <param name="alpha">Filter parameter: small values effect strong smoothing (reversed in case of 'gauss'). Default: 0.5</param>
            <param name="coeffs">In case of gauss filter: coefficients of the "positive" half of the 1D impulse answer.</param>
            <returns>Width of filter is approx. size x size pixels.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.GaussDistribution(System.Double)">
            <summary>Generate a Gaussian noise distribution.</summary>
            <param name="sigma">Standard deviation of the Gaussian noise distribution. Default: 2.0</param>
            <returns>Resulting Gaussian noise distribution.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.SpDistribution(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Generate a salt-and-pepper noise distribution.</summary>
            <param name="percentSalt">Percentage of salt (white noise pixels). Default: 5.0</param>
            <param name="percentPepper">Percentage of pepper (black noise pixels). Default: 5.0</param>
            <returns>Resulting noise distribution.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.SpDistribution(System.Double,System.Double)">
            <summary>Generate a salt-and-pepper noise distribution.</summary>
            <param name="percentSalt">Percentage of salt (white noise pixels). Default: 5.0</param>
            <param name="percentPepper">Percentage of pepper (black noise pixels). Default: 5.0</param>
            <returns>Resulting noise distribution.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.DeserializeFftOptimizationData(HalconDotNet.HSerializedItem)">
            <summary>Deserialize FFT speed optimization data.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.SerializeFftOptimizationData">
            <summary>Serialize FFT speed optimization data.</summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.ReadFftOptimizationData(System.String)">
            <summary>Load FFT speed optimization data from a file.</summary>
            <param name="fileName">File name of the optimization data. Default: "fft_opt.dat"</param>
        </member>
        <member name="M:HalconDotNet.HMisc.WriteFftOptimizationData(System.String)">
            <summary>Store FFT speed optimization data in a file.</summary>
            <param name="fileName">File name of the optimization data. Default: "fft_opt.dat"</param>
        </member>
        <member name="M:HalconDotNet.HMisc.OptimizeRftSpeed(System.Int32,System.Int32,System.String)">
            <summary>Optimize the runtime of the real-valued FFT.</summary>
            <param name="width">Width of the image for which the runtime should be optimized. Default: 512</param>
            <param name="height">Height of the image for which the runtime should be optimized. Default: 512</param>
            <param name="mode">Thoroughness of the search for the optimum runtime. Default: "standard"</param>
        </member>
        <member name="M:HalconDotNet.HMisc.OptimizeFftSpeed(System.Int32,System.Int32,System.String)">
            <summary>Optimize the runtime of the FFT.</summary>
            <param name="width">Width of the image for which the runtime should be optimized. Default: 512</param>
            <param name="height">Height of the image for which the runtime should be optimized. Default: 512</param>
            <param name="mode">Thoroughness of the search for the optimum runtime. Default: "standard"</param>
        </member>
        <member name="M:HalconDotNet.HMisc.InfoEdges(System.String,System.String,System.Double,HalconDotNet.HTuple@)">
            <summary>Estimate the width of a filter in edges_image.</summary>
            <param name="filter">Name of the edge operator. Default: "lanser2"</param>
            <param name="mode">1D edge filter ('edge') or 1D smoothing filter ('smooth'). Default: "edge"</param>
            <param name="alpha">Filter parameter: small values result in strong smoothing, and thus less detail (opposite for 'canny'). Default: 0.5</param>
            <param name="coeffs">For Canny filters: Coefficients of the "positive" half of the 1D impulse response.</param>
            <returns>Filter width in pixels.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.CopyFile(System.String,System.String)">
            <summary>Copy a file to a new location.</summary>
            <param name="sourceFile">File to be copied.</param>
            <param name="destinationFile">Target location.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.SetCurrentDir(System.String)">
            <summary>Set the current working directory.</summary>
            <param name="dirName">Name of current working directory to be set.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.GetCurrentDir">
            <summary>Get the current working directory.</summary>
            <returns>Name of current working directory.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.RemoveDir(System.String)">
            <summary>Delete an empty directory.</summary>
            <param name="dirName">Name of directory to be deleted.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.MakeDir(System.String)">
            <summary>Make a directory.</summary>
            <param name="dirName">Name of directory to be created.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.ListFiles(System.String,HalconDotNet.HTuple)">
            <summary>List all files in a directory.</summary>
            <param name="directory">Name of directory to be listed.</param>
            <param name="options">Processing options. Default: "files"</param>
            <returns>Found files (and directories).</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.ListFiles(System.String,System.String)">
            <summary>List all files in a directory.</summary>
            <param name="directory">Name of directory to be listed.</param>
            <param name="options">Processing options. Default: "files"</param>
            <returns>Found files (and directories).</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.DeleteFile(System.String)">
            <summary>Delete a file.</summary>
            <param name="fileName">File to be deleted.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.FileExists(System.String)">
            <summary>Check whether file exists.</summary>
            <param name="fileName">Name of file to be checked. Default: "/bin/cc"</param>
            <returns>boolean number.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.CloseAllFiles">
            <summary>Close all open files.</summary>
        </member>
        <member name="M:HalconDotNet.HMisc.SelectLinesLongest(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Select the longest input lines.</summary>
            <param name="rowBeginIn">Row coordinates of the starting points of the input lines.</param>
            <param name="colBeginIn">Column coordinates of the starting points of the input lines.</param>
            <param name="rowEndIn">Row coordinates of the ending points of the input lines.</param>
            <param name="colEndIn">Column coordinates  of the ending points of the input lines.</param>
            <param name="num">(Maximum) desired number of output lines. Default: 10</param>
            <param name="rowBeginOut">Row coordinates of the starting points of the output lines.</param>
            <param name="colBeginOut">Column coordinates of the starting points of the output lines.</param>
            <param name="rowEndOut">Row coordinates of the ending points of the output lines.</param>
            <param name="colEndOut">Column coordinates of the ending points of the output lines.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.PartitionLines(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Partition lines according to various criteria.</summary>
            <param name="rowBeginIn">Row coordinates of the starting points of the input lines.</param>
            <param name="colBeginIn">Column coordinates of the starting points of the input lines.</param>
            <param name="rowEndIn">Row coordinates of the ending points of the input lines.</param>
            <param name="colEndIn">Column coordinates  of the ending points of the input lines.</param>
            <param name="feature">Features to be used for selection.</param>
            <param name="operation">Desired combination of the features.</param>
            <param name="min">Lower limits of the features or 'min'. Default: "min"</param>
            <param name="max">Upper limits of the features or 'max'. Default: "max"</param>
            <param name="rowBeginOut">Row coordinates of the starting points of the lines fulfilling the conditions.</param>
            <param name="colBeginOut">Column coordinates of the starting points of the lines fulfilling the conditions.</param>
            <param name="rowEndOut">Row coordinates of the ending points of the lines fulfilling the conditions.</param>
            <param name="colEndOut">Column coordinates of the ending points of the lines fulfilling the conditions.</param>
            <param name="failRowBOut">Row coordinates of the starting points of the lines not fulfilling the conditions.</param>
            <param name="failColBOut">Column coordinates of the starting points of the lines not fulfilling the conditions.</param>
            <param name="failRowEOut">Row coordinates of the ending points of the lines not fulfilling the conditions.</param>
            <param name="failColEOut">Column coordinates of the ending points of the lines not fulfilling the conditions.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.PartitionLines(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.String,System.String,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Partition lines according to various criteria.</summary>
            <param name="rowBeginIn">Row coordinates of the starting points of the input lines.</param>
            <param name="colBeginIn">Column coordinates of the starting points of the input lines.</param>
            <param name="rowEndIn">Row coordinates of the ending points of the input lines.</param>
            <param name="colEndIn">Column coordinates  of the ending points of the input lines.</param>
            <param name="feature">Features to be used for selection.</param>
            <param name="operation">Desired combination of the features.</param>
            <param name="min">Lower limits of the features or 'min'. Default: "min"</param>
            <param name="max">Upper limits of the features or 'max'. Default: "max"</param>
            <param name="rowBeginOut">Row coordinates of the starting points of the lines fulfilling the conditions.</param>
            <param name="colBeginOut">Column coordinates of the starting points of the lines fulfilling the conditions.</param>
            <param name="rowEndOut">Row coordinates of the ending points of the lines fulfilling the conditions.</param>
            <param name="colEndOut">Column coordinates of the ending points of the lines fulfilling the conditions.</param>
            <param name="failRowBOut">Row coordinates of the starting points of the lines not fulfilling the conditions.</param>
            <param name="failColBOut">Column coordinates of the starting points of the lines not fulfilling the conditions.</param>
            <param name="failRowEOut">Row coordinates of the ending points of the lines not fulfilling the conditions.</param>
            <param name="failColEOut">Column coordinates of the ending points of the lines not fulfilling the conditions.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.SelectLines(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Select lines according to various criteria.</summary>
            <param name="rowBeginIn">Row coordinates of the starting points of the input lines.</param>
            <param name="colBeginIn">Column coordinates of the starting points of the input lines.</param>
            <param name="rowEndIn">Row coordinates of the ending points of the input lines.</param>
            <param name="colEndIn">Column coordinates  of the ending points of the input lines.</param>
            <param name="feature">Features to be used for selection. Default: "length"</param>
            <param name="operation">Desired combination of the features. Default: "and"</param>
            <param name="min">Lower limits of the features or 'min'. Default: "min"</param>
            <param name="max">Upper limits of the features or 'max'. Default: "max"</param>
            <param name="rowBeginOut">Row coordinates of the starting points of the output lines.</param>
            <param name="colBeginOut">Column coordinates of the starting points of the output lines.</param>
            <param name="rowEndOut">Row coordinates of the ending points of the output lines.</param>
            <param name="colEndOut">Column coordinates of the ending points of the output lines.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.SelectLines(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.String,System.String,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Select lines according to various criteria.</summary>
            <param name="rowBeginIn">Row coordinates of the starting points of the input lines.</param>
            <param name="colBeginIn">Column coordinates of the starting points of the input lines.</param>
            <param name="rowEndIn">Row coordinates of the ending points of the input lines.</param>
            <param name="colEndIn">Column coordinates  of the ending points of the input lines.</param>
            <param name="feature">Features to be used for selection. Default: "length"</param>
            <param name="operation">Desired combination of the features. Default: "and"</param>
            <param name="min">Lower limits of the features or 'min'. Default: "min"</param>
            <param name="max">Upper limits of the features or 'max'. Default: "max"</param>
            <param name="rowBeginOut">Row coordinates of the starting points of the output lines.</param>
            <param name="colBeginOut">Column coordinates of the starting points of the output lines.</param>
            <param name="rowEndOut">Row coordinates of the ending points of the output lines.</param>
            <param name="colEndOut">Column coordinates of the ending points of the output lines.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.LinePosition(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Calculate the center of gravity, length, and orientation of a line.</summary>
            <param name="rowBegin">Row coordinates of the starting points of the input lines.</param>
            <param name="colBegin">Column coordinates of the starting points of the input lines.</param>
            <param name="rowEnd">Row coordinates of the ending points of the input lines.</param>
            <param name="colEnd">Column coordinates  of the ending points of the input lines.</param>
            <param name="rowCenter">Row coordinates of the centers of gravity of the input lines.</param>
            <param name="colCenter">Column coordinates of the centers of gravity of the input lines.</param>
            <param name="length">Euclidean length of the input lines.</param>
            <param name="phi">Orientation of the input lines.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.LinePosition(System.Int32,System.Int32,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>Calculate the center of gravity, length, and orientation of a line.</summary>
            <param name="rowBegin">Row coordinates of the starting points of the input lines.</param>
            <param name="colBegin">Column coordinates of the starting points of the input lines.</param>
            <param name="rowEnd">Row coordinates of the ending points of the input lines.</param>
            <param name="colEnd">Column coordinates  of the ending points of the input lines.</param>
            <param name="rowCenter">Row coordinates of the centers of gravity of the input lines.</param>
            <param name="colCenter">Column coordinates of the centers of gravity of the input lines.</param>
            <param name="length">Euclidean length of the input lines.</param>
            <param name="phi">Orientation of the input lines.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.LineOrientation(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Calculate the orientation of lines.</summary>
            <param name="rowBegin">Row coordinates of the starting points of the input lines.</param>
            <param name="colBegin">Column coordinates of the starting points of the input lines.</param>
            <param name="rowEnd">Row coordinates of the ending points of the input lines.</param>
            <param name="colEnd">Column coordinates  of the ending points of the input lines.</param>
            <returns>Orientation of the input lines.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.LineOrientation(System.Double,System.Double,System.Double,System.Double)">
            <summary>Calculate the orientation of lines.</summary>
            <param name="rowBegin">Row coordinates of the starting points of the input lines.</param>
            <param name="colBegin">Column coordinates of the starting points of the input lines.</param>
            <param name="rowEnd">Row coordinates of the ending points of the input lines.</param>
            <param name="colEnd">Column coordinates  of the ending points of the input lines.</param>
            <returns>Orientation of the input lines.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.ApproxChainSimple(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Approximate a contour by arcs and lines.</summary>
            <param name="row">Row of the contour. Default: 32</param>
            <param name="column">Column of the contour. Default: 32</param>
            <param name="arcCenterRow">Row of the center of an arc.</param>
            <param name="arcCenterCol">Column of the center of an arc.</param>
            <param name="arcAngle">Angle of an arc.</param>
            <param name="arcBeginRow">Row of the starting point of an arc.</param>
            <param name="arcBeginCol">Column of the starting point of an arc.</param>
            <param name="lineBeginRow">Row of the starting point of a line segment.</param>
            <param name="lineBeginCol">Column of the starting point of a line segment.</param>
            <param name="lineEndRow">Row of the ending point of a line segment.</param>
            <param name="lineEndCol">Column of the ending point of a line segment.</param>
            <param name="order">Sequence of line (value 0) and arc segments (value 1).</param>
        </member>
        <member name="M:HalconDotNet.HMisc.ApproxChain(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Approximate a contour by arcs and lines.</summary>
            <param name="row">Row of the contour. Default: 32</param>
            <param name="column">Column of the contour. Default: 32</param>
            <param name="minWidthCoord">Minimum width of Gauss operator for coordinate smoothing ($ greater than $ 0.4). Default: 0.5</param>
            <param name="maxWidthCoord">Maximum width of Gauss operator for coordinate smoothing ($ greater than $ 0.4). Default: 2.4</param>
            <param name="threshStart">Minimum threshold value of the curvature for accepting a corner (relative to the largest curvature present). Default: 0.3</param>
            <param name="threshEnd">Maximum threshold value of the curvature for accepting a corner (relative to the largest curvature present). Default: 0.9</param>
            <param name="threshStep">Step width for threshold increase. Default: 0.2</param>
            <param name="minWidthSmooth">Minimum width of Gauss operator for smoothing the curvature function ($ greater than $ 0.4). Default: 0.5</param>
            <param name="maxWidthSmooth">Maximum width of Gauss operator for smoothing the curvature function. Default: 2.4</param>
            <param name="minWidthCurve">Minimum width of curve area for curvature determination ($ greater than $ 0.4). Default: 2</param>
            <param name="maxWidthCurve">Maximum width of curve area for curvature determination. Default: 12</param>
            <param name="weight1">Weighting factor for approximation precision. Default: 1.0</param>
            <param name="weight2">Weighting factor for large segments. Default: 1.0</param>
            <param name="weight3">Weighting factor for small segments. Default: 1.0</param>
            <param name="arcCenterRow">Row of the center of an arc.</param>
            <param name="arcCenterCol">Column of the center of an arc.</param>
            <param name="arcAngle">Angle of an arc.</param>
            <param name="arcBeginRow">Row of the starting point of an arc.</param>
            <param name="arcBeginCol">Column of the starting point of an arc.</param>
            <param name="lineBeginRow">Row of the starting point of a line segment.</param>
            <param name="lineBeginCol">Column of the starting point of a line segment.</param>
            <param name="lineEndRow">Row of the ending point of a line segment.</param>
            <param name="lineEndCol">Column of the ending point of a line segment.</param>
            <param name="order">Sequence of line (value 0) and arc segments (value 1).</param>
        </member>
        <member name="M:HalconDotNet.HMisc.CloseAllClassBox">
            <summary>Destroy all classifiers.</summary>
        </member>
        <member name="M:HalconDotNet.HMisc.ImagePointsToWorldPlane(HalconDotNet.HTuple,HalconDotNet.HPose,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Transform image points into the plane z=0 of a world coordinate system.</summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="worldPose">3D pose of the world coordinate system in camera coordinates.</param>
            <param name="rows">Row coordinates of the points to be transformed. Default: 100.0</param>
            <param name="cols">Column coordinates of the points to be transformed. Default: 100.0</param>
            <param name="scale">Scale or dimension Default: "m"</param>
            <param name="x">X coordinates of the points in the world coordinate system.</param>
            <param name="y">Y coordinates of the points in the world coordinate system.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.ImagePointsToWorldPlane(HalconDotNet.HTuple,HalconDotNet.HPose,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Transform image points into the plane z=0 of a world coordinate system.</summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="worldPose">3D pose of the world coordinate system in camera coordinates.</param>
            <param name="rows">Row coordinates of the points to be transformed. Default: 100.0</param>
            <param name="cols">Column coordinates of the points to be transformed. Default: 100.0</param>
            <param name="scale">Scale or dimension Default: "m"</param>
            <param name="x">X coordinates of the points in the world coordinate system.</param>
            <param name="y">Y coordinates of the points in the world coordinate system.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.ChangeRadialDistortionCamPar(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>Determine new camera parameters in accordance to the specified radial distortion.</summary>
            <param name="mode">Mode Default: "adaptive"</param>
            <param name="camParamIn">Internal camera parameters (original).</param>
            <param name="distortionCoeffs">Desired radial distortions. Default: 0.0</param>
            <returns>Internal camera parameters (modified).</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.ChangeRadialDistortionCamPar(System.String,HalconDotNet.HTuple,System.Double)">
            <summary>Determine new camera parameters in accordance to the specified radial distortion.</summary>
            <param name="mode">Mode Default: "adaptive"</param>
            <param name="camParamIn">Internal camera parameters (original).</param>
            <param name="distortionCoeffs">Desired radial distortions. Default: 0.0</param>
            <returns>Internal camera parameters (modified).</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.GenCaltab(System.Int32,System.Int32,System.Double,System.Double,System.String,System.String)">
            <summary>Generate a calibration plate description file and a corresponding PostScript file for a calibration plate with rectangularly arranged marks.</summary>
            <param name="XNum">Number of marks in x direction. Default: 7</param>
            <param name="YNum">Number of marks in y direction. Default: 7</param>
            <param name="markDist">Distance of the marks in meters. Default: 0.0125</param>
            <param name="diameterRatio">Ratio of the mark diameter to the mark distance. Default: 0.5</param>
            <param name="calPlateDescr">File name of the calibration plate description. Default: "caltab.descr"</param>
            <param name="calPlatePSFile">File name of the PostScript file. Default: "caltab.ps"</param>
        </member>
        <member name="M:HalconDotNet.HMisc.CreateCaltab(System.Int32,System.Int32,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.String,System.String)">
            <summary>Generate a calibration plate description file and a corresponding PostScript file for a calibration plate with hexagonally arranged marks.</summary>
            <param name="numRows">Number of rows. Default: 27</param>
            <param name="marksPerRow">Number of marks per row. Default: 31</param>
            <param name="diameter">Diameter of the marks. Default: 0.00258065</param>
            <param name="finderRow">Row indices of the finder patterns. Default: [13,6,6,20,20]</param>
            <param name="finderColumn">Column indices of the finder patterns. Default: [15,6,24,6,24]</param>
            <param name="polarity">Polarity of the marks Default: "light_on_dark"</param>
            <param name="calPlateDescr">File name of the calibration plate description. Default: "calplate.cpd"</param>
            <param name="calPlatePSFile">File name of the PostScript file. Default: "calplate.ps"</param>
        </member>
        <member name="M:HalconDotNet.HMisc.CreateCaltab(System.Int32,System.Int32,System.Double,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>Generate a calibration plate description file and a corresponding PostScript file for a calibration plate with hexagonally arranged marks.</summary>
            <param name="numRows">Number of rows. Default: 27</param>
            <param name="marksPerRow">Number of marks per row. Default: 31</param>
            <param name="diameter">Diameter of the marks. Default: 0.00258065</param>
            <param name="finderRow">Row indices of the finder patterns. Default: [13,6,6,20,20]</param>
            <param name="finderColumn">Column indices of the finder patterns. Default: [15,6,24,6,24]</param>
            <param name="polarity">Polarity of the marks Default: "light_on_dark"</param>
            <param name="calPlateDescr">File name of the calibration plate description. Default: "calplate.cpd"</param>
            <param name="calPlatePSFile">File name of the PostScript file. Default: "calplate.ps"</param>
        </member>
        <member name="M:HalconDotNet.HMisc.CaltabPoints(System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Read the mark center points from the calibration plate description file.</summary>
            <param name="calPlateDescr">File name of the calibration plate description. Default: "calplate.cpd"</param>
            <param name="x">X coordinates of the mark center points in the coordinate system of the calibration plate.</param>
            <param name="y">Y coordinates of the mark center points in the coordinate system of the calibration plate.</param>
            <param name="z">Z coordinates of the mark center points in the coordinate system of the calibration plate.</param>
        </member>
        <member name="M:HalconDotNet.HMisc.GetLineOfSight(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Compute the line of sight corresponding to a point in the image.</summary>
            <param name="row">Row coordinate of the pixel.</param>
            <param name="column">Column coordinate of the pixel.</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="PX">X coordinate of the first point on the line of sight in the camera coordinate system</param>
            <param name="PY">Y coordinate of the first point on the line of sight in the camera coordinate system</param>
            <param name="PZ">Z coordinate of the first point on the line of sight in the camera coordinate system</param>
            <param name="QX">X coordinate of the second point on the line of sight in the camera coordinate system</param>
            <param name="QY">Y coordinate of the second point on the line of sight in the camera coordinate system</param>
            <param name="QZ">Z coordinate of the second point on the line of sight in the camera coordinate system</param>
        </member>
        <member name="M:HalconDotNet.HMisc.Project3dPoint(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Project 3D points into (sub-)pixel image coordinates.</summary>
            <param name="x">X coordinates of the 3D points to be projected in the camera coordinate system.</param>
            <param name="y">Y coordinates of the 3D points to be projected in the camera coordinate system.</param>
            <param name="z">Z coordinates of the 3D points to be projected in the camera coordinate system.</param>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="row">Row coordinates of the projected points (in pixels).</param>
            <param name="column">Column coordinates of the projected points (in pixels).</param>
        </member>
        <member name="M:HalconDotNet.HMisc.DeserializeCamPar(HalconDotNet.HSerializedItem)">
            <summary>Deserialize the serialized internal camera parameters.</summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
            <returns>Internal camera parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.SerializeCamPar(HalconDotNet.HTuple)">
            <summary>Serialize the internal camera parameters.</summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.ReadCamPar(System.String)">
            <summary>Read the internal camera parameters from a text file.</summary>
            <param name="camParFile">File name of internal camera parameters. Default: "campar.dat"</param>
            <returns>Internal camera parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HMisc.WriteCamPar(HalconDotNet.HTuple,System.String)">
            <summary>Write the internal camera parameters to a text file.</summary>
            <param name="cameraParam">Internal camera parameters.</param>
            <param name="camParFile">File name of internal camera parameters. Default: "campar.dat"</param>
        </member>
        <member name="M:HalconDotNet.HMisc.CloseAllBgEsti">
            <summary>Delete all background estimation data sets.</summary>
        </member>
        <member name="M:HalconDotNet.HMisc.CloseAllFramegrabbers">
            <summary>Close all image acquisition devices.</summary>
        </member>
        <member name="T:HalconDotNet.HShapeModel">
            <summary>Represents an instance of a shape model for matching.</summary>
        </member>
        <member name="M:HalconDotNet.HShapeModel.#ctor(System.String)">
            <summary>
              Read a shape model from a file.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.#ctor(HalconDotNet.HXLDCont,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32)">
            <summary>
              Prepare a shape model for anisotropic scale invariant matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.1</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.1</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.#ctor(HalconDotNet.HXLDCont,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32)">
            <summary>
              Prepare a shape model for anisotropic scale invariant matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.1</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.1</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.#ctor(HalconDotNet.HXLDCont,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32)">
            <summary>
              Prepare a shape model for scale invariant matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleMin">Minimum scale of the pattern. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the pattern. Default: 1.1</param>
            <param name="scaleStep">Scale step length (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.#ctor(HalconDotNet.HXLDCont,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32)">
            <summary>
              Prepare a shape model for scale invariant matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleMin">Minimum scale of the pattern. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the pattern. Default: 1.1</param>
            <param name="scaleStep">Scale step length (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.#ctor(HalconDotNet.HXLDCont,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32)">
            <summary>
              Prepare a shape model for matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.#ctor(HalconDotNet.HXLDCont,System.Int32,System.Double,System.Double,System.Double,System.String,System.String,System.Int32)">
            <summary>
              Prepare a shape model for matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.#ctor(HalconDotNet.HImage,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a shape model for anisotropic scale invariant matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.1</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.1</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.#ctor(HalconDotNet.HImage,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Prepare a shape model for anisotropic scale invariant matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.1</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.1</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.#ctor(HalconDotNet.HImage,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a shape model for scale invariant matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleMin">Minimum scale of the pattern. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the pattern. Default: 1.1</param>
            <param name="scaleStep">Scale step length (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.#ctor(HalconDotNet.HImage,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Prepare a shape model for scale invariant matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleMin">Minimum scale of the pattern. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the pattern. Default: 1.1</param>
            <param name="scaleStep">Scale step length (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.#ctor(HalconDotNet.HImage,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a shape model for matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.#ctor(HalconDotNet.HImage,System.Int32,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Prepare a shape model for matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.DeserializeShapeModel(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized shape model.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.ReadShapeModel(System.String)">
            <summary>
              Read a shape model from a file.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.SerializeShapeModel">
            <summary>
              Serialize a shape model.
              Instance represents: Handle of the model.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HShapeModel.WriteShapeModel(System.String)">
            <summary>
              Write a shape model to a file.
              Instance represents: Handle of the model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.GetShapeModelContours(System.Int32)">
            <summary>
              Return the contour representation of a shape model.
              Instance represents: Handle of the model.
            </summary>
            <param name="level">Pyramid level for which the contour representation should be returned. Default: 1</param>
            <returns>Contour representation of the shape model.</returns>
        </member>
        <member name="M:HalconDotNet.HShapeModel.GetShapeModelParams(System.Double@,System.Double@,System.Double@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,System.String@,System.Int32@)">
            <summary>
              Return the parameters of a shape model.
              Instance represents: Handle of the model.
            </summary>
            <param name="angleStart">Smallest rotation of the pattern.</param>
            <param name="angleExtent">Extent of the rotation angles.</param>
            <param name="angleStep">Step length of the angles (resolution).</param>
            <param name="scaleMin">Minimum scale of the pattern.</param>
            <param name="scaleMax">Maximum scale of the pattern.</param>
            <param name="scaleStep">Scale step length (resolution).</param>
            <param name="metric">Match metric.</param>
            <param name="minContrast">Minimum contrast of the objects in the search images.</param>
            <returns>Number of pyramid levels.</returns>
        </member>
        <member name="M:HalconDotNet.HShapeModel.GetShapeModelParams(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.String@,System.Int32@)">
            <summary>
              Return the parameters of a shape model.
              Instance represents: Handle of the model.
            </summary>
            <param name="angleStart">Smallest rotation of the pattern.</param>
            <param name="angleExtent">Extent of the rotation angles.</param>
            <param name="angleStep">Step length of the angles (resolution).</param>
            <param name="scaleMin">Minimum scale of the pattern.</param>
            <param name="scaleMax">Maximum scale of the pattern.</param>
            <param name="scaleStep">Scale step length (resolution).</param>
            <param name="metric">Match metric.</param>
            <param name="minContrast">Minimum contrast of the objects in the search images.</param>
            <returns>Number of pyramid levels.</returns>
        </member>
        <member name="M:HalconDotNet.HShapeModel.GetShapeModelOrigin(System.Double@,System.Double@)">
            <summary>
              Return the origin (reference point) of a shape model.
              Instance represents: Handle of the model.
            </summary>
            <param name="row">Row coordinate of the origin of the shape model.</param>
            <param name="column">Column coordinate of the origin of the shape model.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.SetShapeModelOrigin(System.Double,System.Double)">
            <summary>
              Set the origin (reference point) of a shape model.
              Instance represents: Handle of the model.
            </summary>
            <param name="row">Row coordinate of the origin of the shape model.</param>
            <param name="column">Column coordinate of the origin of the shape model.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.FindAnisoShapeModels(HalconDotNet.HImage,HalconDotNet.HShapeModel[],HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find the best matches of multiple anisotropic scale invariant shape models.</summary>
            <param name="image">Input image in which the models should be found.</param>
            <param name="modelIDs">Handle of the models.</param>
            <param name="angleStart">Smallest rotation of the models. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the models in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the models in the row direction. Default: 1.1</param>
            <param name="scaleCMin">Minimum scale of the models in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the models in the column direction. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the models to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the models to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the models.</param>
            <param name="column">Column coordinate of the found instances of the models.</param>
            <param name="angle">Rotation angle of the found instances of the models.</param>
            <param name="scaleR">Scale of the found instances of the models in the row direction.</param>
            <param name="scaleC">Scale of the found instances of the models in the column direction.</param>
            <param name="score">Score of the found instances of the models.</param>
            <param name="model">Index of the found instances of the models.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.FindAnisoShapeModels(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of multiple anisotropic scale invariant shape models.
              Instance represents: Handle of the models.
            </summary>
            <param name="image">Input image in which the models should be found.</param>
            <param name="angleStart">Smallest rotation of the models. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the models in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the models in the row direction. Default: 1.1</param>
            <param name="scaleCMin">Minimum scale of the models in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the models in the column direction. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the models to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the models to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the models.</param>
            <param name="column">Column coordinate of the found instances of the models.</param>
            <param name="angle">Rotation angle of the found instances of the models.</param>
            <param name="scaleR">Scale of the found instances of the models in the row direction.</param>
            <param name="scaleC">Scale of the found instances of the models in the column direction.</param>
            <param name="score">Score of the found instances of the models.</param>
            <param name="model">Index of the found instances of the models.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.FindScaledShapeModels(HalconDotNet.HImage,HalconDotNet.HShapeModel[],HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find the best matches of multiple scale invariant shape models.</summary>
            <param name="image">Input image in which the models should be found.</param>
            <param name="modelIDs">Handle of the models.</param>
            <param name="angleStart">Smallest rotation of the models. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleMin">Minimum scale of the models. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the models. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the models to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the models to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the models.</param>
            <param name="column">Column coordinate of the found instances of the models.</param>
            <param name="angle">Rotation angle of the found instances of the models.</param>
            <param name="scale">Scale of the found instances of the models.</param>
            <param name="score">Score of the found instances of the models.</param>
            <param name="model">Index of the found instances of the models.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.FindScaledShapeModels(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of multiple scale invariant shape models.
              Instance represents: Handle of the models.
            </summary>
            <param name="image">Input image in which the models should be found.</param>
            <param name="angleStart">Smallest rotation of the models. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleMin">Minimum scale of the models. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the models. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the models to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the models to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the models.</param>
            <param name="column">Column coordinate of the found instances of the models.</param>
            <param name="angle">Rotation angle of the found instances of the models.</param>
            <param name="scale">Scale of the found instances of the models.</param>
            <param name="score">Score of the found instances of the models.</param>
            <param name="model">Index of the found instances of the models.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.FindShapeModels(HalconDotNet.HImage,HalconDotNet.HShapeModel[],HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>Find the best matches of multiple shape models.</summary>
            <param name="image">Input image in which the models should be found.</param>
            <param name="modelIDs">Handle of the models.</param>
            <param name="angleStart">Smallest rotation of the models. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the models to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the models to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the models.</param>
            <param name="column">Column coordinate of the found instances of the models.</param>
            <param name="angle">Rotation angle of the found instances of the models.</param>
            <param name="score">Score of the found instances of the models.</param>
            <param name="model">Index of the found instances of the models.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.FindShapeModels(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of multiple shape models.
              Instance represents: Handle of the models.
            </summary>
            <param name="image">Input image in which the models should be found.</param>
            <param name="angleStart">Smallest rotation of the models. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the models to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the models to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the models to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the models.</param>
            <param name="column">Column coordinate of the found instances of the models.</param>
            <param name="angle">Rotation angle of the found instances of the models.</param>
            <param name="score">Score of the found instances of the models.</param>
            <param name="model">Index of the found instances of the models.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.FindAnisoShapeModel(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of an anisotropic scale invariant shape model in an image.
              Instance represents: Handle of the model.
            </summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the model in the row direction. Default: 1.1</param>
            <param name="scaleCMin">Minimum scale of the model in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the model in the column direction. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="scaleR">Scale of the found instances of the model in the row direction.</param>
            <param name="scaleC">Scale of the found instances of the model in the column direction.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.FindAnisoShapeModel(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of an anisotropic scale invariant shape model in an image.
              Instance represents: Handle of the model.
            </summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleRMin">Minimum scale of the model in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the model in the row direction. Default: 1.1</param>
            <param name="scaleCMin">Minimum scale of the model in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the model in the column direction. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="scaleR">Scale of the found instances of the model in the row direction.</param>
            <param name="scaleC">Scale of the found instances of the model in the column direction.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.FindScaledShapeModel(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a scale invariant shape model in an image.
              Instance represents: Handle of the model.
            </summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleMin">Minimum scale of the model. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the model. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="scale">Scale of the found instances of the model.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.FindScaledShapeModel(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a scale invariant shape model in an image.
              Instance represents: Handle of the model.
            </summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="scaleMin">Minimum scale of the model. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the model. Default: 1.1</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="scale">Scale of the found instances of the model.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.FindShapeModel(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.Int32,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a shape model in an image.
              Instance represents: Handle of the model.
            </summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.FindShapeModel(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.Int32,System.Double,System.String,System.Int32,System.Double,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a shape model in an image.
              Instance represents: Handle of the model.
            </summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="angleStart">Smallest rotation of the model. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.78</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.5</param>
            <param name="numMatches">Number of instances of the model to be found (or 0 for all matches). Default: 1</param>
            <param name="maxOverlap">Maximum overlap of the instances of the model to be found. Default: 0.5</param>
            <param name="subPixel">Subpixel accuracy if not equal to 'none'. Default: "least_squares"</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="row">Row coordinate of the found instances of the model.</param>
            <param name="column">Column coordinate of the found instances of the model.</param>
            <param name="angle">Rotation angle of the found instances of the model.</param>
            <param name="score">Score of the found instances of the model.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.SetShapeModelMetric(HalconDotNet.HImage,HalconDotNet.HHomMat2D,System.String)">
            <summary>
              Set the metric of a shape model that was created from XLD contours.
              Instance represents: Handle of the model.
            </summary>
            <param name="image">Input image used for the determination of the polarity.</param>
            <param name="homMat2D">Transformation matrix.</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.SetShapeModelParam(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set selected parameters of the shape model.
              Instance represents: Handle of the model.
            </summary>
            <param name="genParamNames">Parameter names.</param>
            <param name="genParamValues">Parameter values.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.CreateAnisoShapeModelXld(HalconDotNet.HXLDCont,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32)">
            <summary>
              Prepare a shape model for anisotropic scale invariant matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.1</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.1</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.CreateAnisoShapeModelXld(HalconDotNet.HXLDCont,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32)">
            <summary>
              Prepare a shape model for anisotropic scale invariant matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.1</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.1</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.CreateScaledShapeModelXld(HalconDotNet.HXLDCont,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32)">
            <summary>
              Prepare a shape model for scale invariant matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleMin">Minimum scale of the pattern. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the pattern. Default: 1.1</param>
            <param name="scaleStep">Scale step length (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.CreateScaledShapeModelXld(HalconDotNet.HXLDCont,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32)">
            <summary>
              Prepare a shape model for scale invariant matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleMin">Minimum scale of the pattern. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the pattern. Default: 1.1</param>
            <param name="scaleStep">Scale step length (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.CreateShapeModelXld(HalconDotNet.HXLDCont,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32)">
            <summary>
              Prepare a shape model for matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.CreateShapeModelXld(HalconDotNet.HXLDCont,System.Int32,System.Double,System.Double,System.Double,System.String,System.String,System.Int32)">
            <summary>
              Prepare a shape model for matching from XLD contours.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="contours">Input contours that will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "ignore_local_polarity"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 5</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.CreateAnisoShapeModel(HalconDotNet.HImage,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a shape model for anisotropic scale invariant matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.1</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.1</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.CreateAnisoShapeModel(HalconDotNet.HImage,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Prepare a shape model for anisotropic scale invariant matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleRMin">Minimum scale of the pattern in the row direction. Default: 0.9</param>
            <param name="scaleRMax">Maximum scale of the pattern in the row direction. Default: 1.1</param>
            <param name="scaleRStep">Scale step length (resolution) in the row direction. Default: "auto"</param>
            <param name="scaleCMin">Minimum scale of the pattern in the column direction. Default: 0.9</param>
            <param name="scaleCMax">Maximum scale of the pattern in the column direction. Default: 1.1</param>
            <param name="scaleCStep">Scale step length (resolution) in the column direction. Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.CreateScaledShapeModel(HalconDotNet.HImage,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a shape model for scale invariant matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleMin">Minimum scale of the pattern. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the pattern. Default: 1.1</param>
            <param name="scaleStep">Scale step length (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.CreateScaledShapeModel(HalconDotNet.HImage,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Prepare a shape model for scale invariant matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="scaleMin">Minimum scale of the pattern. Default: 0.9</param>
            <param name="scaleMax">Maximum scale of the pattern. Default: 1.1</param>
            <param name="scaleStep">Scale step length (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.CreateShapeModel(HalconDotNet.HImage,HalconDotNet.HTuple,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a shape model for matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel.CreateShapeModel(HalconDotNet.HImage,System.Int32,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,System.Int32)">
            <summary>
              Prepare a shape model for matching.
              Modified instance represents: Handle of the model.
            </summary>
            <param name="template">Input image whose domain will be used to create the model.</param>
            <param name="numLevels">Maximum number of pyramid levels. Default: "auto"</param>
            <param name="angleStart">Smallest rotation of the pattern. Default: -0.39</param>
            <param name="angleExtent">Extent of the rotation angles. Default: 0.79</param>
            <param name="angleStep">Step length of the angles (resolution). Default: "auto"</param>
            <param name="optimization">Kind of optimization and optionally method used for generating the model. Default: "auto"</param>
            <param name="metric">Match metric. Default: "use_polarity"</param>
            <param name="contrast">Threshold or hysteresis thresholds for the contrast of the object in the template image and optionally minimum size of the object parts. Default: "auto"</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: "auto"</param>
        </member>
        <member name="T:HalconDotNet.HXLDDistTrans">
            <summary>Represents an instance of a XLD distance transformation.</summary>
        </member>
        <member name="M:HalconDotNet.HXLDDistTrans.#ctor(System.String)">
            <summary>
              Read an XLD distance transform from a file.
              Modified instance represents: Handle of the XLD distance transform.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:HalconDotNet.HXLDDistTrans.#ctor(HalconDotNet.HXLDCont,System.String,HalconDotNet.HTuple)">
            <summary>
              Create the XLD distance transform.
              Modified instance represents: Handle of the XLD distance transform.
            </summary>
            <param name="contour">Reference contour(s).</param>
            <param name="mode">Compute the distance to points ('point_to_point') or entire segments ('point_to_segment'). Default: "point_to_point"</param>
            <param name="maxDistance">Maximum distance of interest. Default: 20.0</param>
        </member>
        <member name="M:HalconDotNet.HXLDDistTrans.#ctor(HalconDotNet.HXLDCont,System.String,System.Double)">
            <summary>
              Create the XLD distance transform.
              Modified instance represents: Handle of the XLD distance transform.
            </summary>
            <param name="contour">Reference contour(s).</param>
            <param name="mode">Compute the distance to points ('point_to_point') or entire segments ('point_to_segment'). Default: "point_to_point"</param>
            <param name="maxDistance">Maximum distance of interest. Default: 20.0</param>
        </member>
        <member name="M:HalconDotNet.HXLDDistTrans.ApplyDistanceTransformXld(HalconDotNet.HXLDCont)">
            <summary>
              Determine the pointwise distance of two contours using an XLD distance transform.
              Instance represents: Handle of the XLD distance transform of the reference contour.
            </summary>
            <param name="contour">Contour(s) for whose points the distances are calculated.</param>
            <returns>Copy of Contour containing the distances as an attribute.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDDistTrans.ReadDistanceTransformXld(System.String)">
            <summary>
              Read an XLD distance transform from a file.
              Modified instance represents: Handle of the XLD distance transform.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:HalconDotNet.HXLDDistTrans.DeserializeDistanceTransformXld(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize an XLD distance transform.
              Modified instance represents: Handle of the deserialized XLD distance  transform.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized XLD distance  transform.</param>
        </member>
        <member name="M:HalconDotNet.HXLDDistTrans.SerializeDistanceTransformXld">
            <summary>
              Serialize an XLD distance transform.
              Instance represents: Handle of the XLD distance transform.
            </summary>
            <returns>Handle of the serialized XLD distance  transform.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDDistTrans.WriteDistanceTransformXld(System.String)">
            <summary>
              Write an XLD distance transform into a file.
              Instance represents: Handle of the XLD distance transform.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:HalconDotNet.HXLDDistTrans.SetDistanceTransformXldParam(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set new parameters for an XLD distance transform.
              Instance represents: Handle of the XLD distance transform.
            </summary>
            <param name="genParamName">Names of the generic parameters. Default: "mode"</param>
            <param name="genParamValue">Values of the generic parameters. Default: "point_to_point"</param>
        </member>
        <member name="M:HalconDotNet.HXLDDistTrans.SetDistanceTransformXldParam(System.String,System.String)">
            <summary>
              Set new parameters for an XLD distance transform.
              Instance represents: Handle of the XLD distance transform.
            </summary>
            <param name="genParamName">Names of the generic parameters. Default: "mode"</param>
            <param name="genParamValue">Values of the generic parameters. Default: "point_to_point"</param>
        </member>
        <member name="M:HalconDotNet.HXLDDistTrans.GetDistanceTransformXldParam(HalconDotNet.HTuple)">
            <summary>
              Get the parameters used to build an XLD distance transform.
              Instance represents: Handle of the XLD distance transform.
            </summary>
            <param name="genParamName">Names of the generic parameters. Default: "mode"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDDistTrans.GetDistanceTransformXldParam(System.String)">
            <summary>
              Get the parameters used to build an XLD distance transform.
              Instance represents: Handle of the XLD distance transform.
            </summary>
            <param name="genParamName">Names of the generic parameters. Default: "mode"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDDistTrans.GetDistanceTransformXldContour">
            <summary>
              Get the reference contour used to build the XLD distance transform.
              Instance represents: Handle of the XLD distance transform.
            </summary>
            <returns>Reference contour.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDDistTrans.CreateDistanceTransformXld(HalconDotNet.HXLDCont,System.String,HalconDotNet.HTuple)">
            <summary>
              Create the XLD distance transform.
              Modified instance represents: Handle of the XLD distance transform.
            </summary>
            <param name="contour">Reference contour(s).</param>
            <param name="mode">Compute the distance to points ('point_to_point') or entire segments ('point_to_segment'). Default: "point_to_point"</param>
            <param name="maxDistance">Maximum distance of interest. Default: 20.0</param>
        </member>
        <member name="M:HalconDotNet.HXLDDistTrans.CreateDistanceTransformXld(HalconDotNet.HXLDCont,System.String,System.Double)">
            <summary>
              Create the XLD distance transform.
              Modified instance represents: Handle of the XLD distance transform.
            </summary>
            <param name="contour">Reference contour(s).</param>
            <param name="mode">Compute the distance to points ('point_to_point') or entire segments ('point_to_segment'). Default: "point_to_point"</param>
            <param name="maxDistance">Maximum distance of interest. Default: 20.0</param>
        </member>
        <member name="T:HalconDotNet.HBarrier">
            <summary>Represents an instance of a barrier synchronization object.</summary>
        </member>
        <member name="M:HalconDotNet.HBarrier.#ctor(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32)">
            <summary>
              Create a barrier synchronization object.
              Modified instance represents: Barrier synchronization object.
            </summary>
            <param name="attribName">Barrier attribute. Default: ""</param>
            <param name="attribValue">Barrier attribute value. Default: ""</param>
            <param name="teamSize">Barrier team size. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HBarrier.#ctor(System.String,System.String,System.Int32)">
            <summary>
              Create a barrier synchronization object.
              Modified instance represents: Barrier synchronization object.
            </summary>
            <param name="attribName">Barrier attribute. Default: ""</param>
            <param name="attribValue">Barrier attribute value. Default: ""</param>
            <param name="teamSize">Barrier team size. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HBarrier.WaitBarrier">
            <summary>
              Wait on the release of a barrier synchronization object.
              Instance represents: Barrier synchronization object.
            </summary>
        </member>
        <member name="M:HalconDotNet.HBarrier.CreateBarrier(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32)">
            <summary>
              Create a barrier synchronization object.
              Modified instance represents: Barrier synchronization object.
            </summary>
            <param name="attribName">Barrier attribute. Default: ""</param>
            <param name="attribValue">Barrier attribute value. Default: ""</param>
            <param name="teamSize">Barrier team size. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HBarrier.CreateBarrier(System.String,System.String,System.Int32)">
            <summary>
              Create a barrier synchronization object.
              Modified instance represents: Barrier synchronization object.
            </summary>
            <param name="attribName">Barrier attribute. Default: ""</param>
            <param name="attribValue">Barrier attribute value. Default: ""</param>
            <param name="teamSize">Barrier team size. Default: 1</param>
        </member>
        <member name="T:HalconDotNet.HBeadInspectionModel">
            <summary>Represents an instance of the data structure used to inspect beads.</summary>
        </member>
        <member name="M:HalconDotNet.HBeadInspectionModel.#ctor(HalconDotNet.HXLD,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a model to inspect beads or adhesive in images.
              Modified instance represents: Handle for using and accessing the bead inspection  model.
            </summary>
            <param name="beadContour">XLD contour specifying the expected bead's shape and  position.</param>
            <param name="targetThickness">Optimal bead thickness. Default: 50</param>
            <param name="thicknessTolerance">Tolerance of bead's thickness with respect to  TargetThickness. Default: 15</param>
            <param name="positionTolerance">Tolerance of the bead's center position. Default: 15</param>
            <param name="polarity">The bead's polarity. Default: "light"</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the bead inspection model. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the bead inspection model. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HBeadInspectionModel.#ctor(HalconDotNet.HXLD,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
              Create a model to inspect beads or adhesive in images.
              Modified instance represents: Handle for using and accessing the bead inspection  model.
            </summary>
            <param name="beadContour">XLD contour specifying the expected bead's shape and  position.</param>
            <param name="targetThickness">Optimal bead thickness. Default: 50</param>
            <param name="thicknessTolerance">Tolerance of bead's thickness with respect to  TargetThickness. Default: 15</param>
            <param name="positionTolerance">Tolerance of the bead's center position. Default: 15</param>
            <param name="polarity">The bead's polarity. Default: "light"</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the bead inspection model. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the bead inspection model. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HBeadInspectionModel.GetBeadInspectionParam(HalconDotNet.HTuple)">
            <summary>
              Get the value of a parameter in a specific bead inspection model.
              Instance represents: Handle of the bead inspection model.
            </summary>
            <param name="paramName">Name of the model parameter that is queried. Default: "target_thickness"</param>
            <returns>Value of the queried model parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HBeadInspectionModel.GetBeadInspectionParam(System.String)">
            <summary>
              Get the value of a parameter in a specific bead inspection model.
              Instance represents: Handle of the bead inspection model.
            </summary>
            <param name="paramName">Name of the model parameter that is queried. Default: "target_thickness"</param>
            <returns>Value of the queried model parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HBeadInspectionModel.SetBeadInspectionParam(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set parameters of the bead inspection model.
              Instance represents: Handle of the bead inspection model.
            </summary>
            <param name="paramName">Name of the model parameter that shall be adjusted for the specified bead inspection model. Default: "target_thickness"</param>
            <param name="paramValue">Value of the model parameter that shall be adjusted for the specified bead inspection model. Default: 40</param>
        </member>
        <member name="M:HalconDotNet.HBeadInspectionModel.SetBeadInspectionParam(System.String,System.String)">
            <summary>
              Set parameters of the bead inspection model.
              Instance represents: Handle of the bead inspection model.
            </summary>
            <param name="paramName">Name of the model parameter that shall be adjusted for the specified bead inspection model. Default: "target_thickness"</param>
            <param name="paramValue">Value of the model parameter that shall be adjusted for the specified bead inspection model. Default: 40</param>
        </member>
        <member name="M:HalconDotNet.HBeadInspectionModel.ApplyBeadInspectionModel(HalconDotNet.HImage,HalconDotNet.HXLD@,HalconDotNet.HXLD@,HalconDotNet.HTuple@)">
            <summary>
              Inspect beads in an image, as defined by the bead inspection model.
              Instance represents: Handle of the bead inspection model to be used.
            </summary>
            <param name="image">Image to apply bead inspection on.</param>
            <param name="rightContour">The detected right contour of the beads.</param>
            <param name="errorSegment">Detected error segments</param>
            <param name="errorType">Types of detected errors.</param>
            <returns>The detected left contour of the beads.</returns>
        </member>
        <member name="M:HalconDotNet.HBeadInspectionModel.CreateBeadInspectionModel(HalconDotNet.HXLD,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a model to inspect beads or adhesive in images.
              Modified instance represents: Handle for using and accessing the bead inspection  model.
            </summary>
            <param name="beadContour">XLD contour specifying the expected bead's shape and  position.</param>
            <param name="targetThickness">Optimal bead thickness. Default: 50</param>
            <param name="thicknessTolerance">Tolerance of bead's thickness with respect to  TargetThickness. Default: 15</param>
            <param name="positionTolerance">Tolerance of the bead's center position. Default: 15</param>
            <param name="polarity">The bead's polarity. Default: "light"</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the bead inspection model. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the bead inspection model. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HBeadInspectionModel.CreateBeadInspectionModel(HalconDotNet.HXLD,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
              Create a model to inspect beads or adhesive in images.
              Modified instance represents: Handle for using and accessing the bead inspection  model.
            </summary>
            <param name="beadContour">XLD contour specifying the expected bead's shape and  position.</param>
            <param name="targetThickness">Optimal bead thickness. Default: 50</param>
            <param name="thicknessTolerance">Tolerance of bead's thickness with respect to  TargetThickness. Default: 15</param>
            <param name="positionTolerance">Tolerance of the bead's center position. Default: 15</param>
            <param name="polarity">The bead's polarity. Default: "light"</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the bead inspection model. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the bead inspection model. Default: []</param>
        </member>
        <member name="T:HalconDotNet.HMeasure">
            <summary>Represents an instance of a tool to measure distances.</summary>
        </member>
        <member name="M:HalconDotNet.HMeasure.#ctor(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,System.String)">
            <summary>
              Prepare the extraction of straight edges perpendicular to an annular arc.
              Modified instance represents: Measure object handle.
            </summary>
            <param name="centerRow">Row coordinate of the center of the arc. Default: 100.0</param>
            <param name="centerCol">Column coordinate of the center of the arc. Default: 100.0</param>
            <param name="radius">Radius of the arc. Default: 50.0</param>
            <param name="angleStart">Start angle of the arc in radians. Default: 0.0</param>
            <param name="angleExtent">Angular extent of the arc in radians. Default: 6.28318</param>
            <param name="annulusRadius">Radius (half width) of the annulus. Default: 10.0</param>
            <param name="width">Width of the image to be processed subsequently. Default: 512</param>
            <param name="height">Height of the image to be processed subsequently. Default: 512</param>
            <param name="interpolation">Type of interpolation to be used. Default: "nearest_neighbor"</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.String)">
            <summary>
              Prepare the extraction of straight edges perpendicular to an annular arc.
              Modified instance represents: Measure object handle.
            </summary>
            <param name="centerRow">Row coordinate of the center of the arc. Default: 100.0</param>
            <param name="centerCol">Column coordinate of the center of the arc. Default: 100.0</param>
            <param name="radius">Radius of the arc. Default: 50.0</param>
            <param name="angleStart">Start angle of the arc in radians. Default: 0.0</param>
            <param name="angleExtent">Angular extent of the arc in radians. Default: 6.28318</param>
            <param name="annulusRadius">Radius (half width) of the annulus. Default: 10.0</param>
            <param name="width">Width of the image to be processed subsequently. Default: 512</param>
            <param name="height">Height of the image to be processed subsequently. Default: 512</param>
            <param name="interpolation">Type of interpolation to be used. Default: "nearest_neighbor"</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.#ctor(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,System.String)">
            <summary>
              Prepare the extraction of straight edges perpendicular to a rectangle.
              Modified instance represents: Measure object handle.
            </summary>
            <param name="row">Row coordinate of the center of the rectangle. Default: 300.0</param>
            <param name="column">Column coordinate of the center of the rectangle. Default: 200.0</param>
            <param name="phi">Angle of longitudinal axis of the rectangle to horizontal (radians). Default: 0.0</param>
            <param name="length1">Half width of the rectangle. Default: 100.0</param>
            <param name="length2">Half height of the rectangle. Default: 20.0</param>
            <param name="width">Width of the image to be processed subsequently. Default: 512</param>
            <param name="height">Height of the image to be processed subsequently. Default: 512</param>
            <param name="interpolation">Type of interpolation to be used. Default: "nearest_neighbor"</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.String)">
            <summary>
              Prepare the extraction of straight edges perpendicular to a rectangle.
              Modified instance represents: Measure object handle.
            </summary>
            <param name="row">Row coordinate of the center of the rectangle. Default: 300.0</param>
            <param name="column">Column coordinate of the center of the rectangle. Default: 200.0</param>
            <param name="phi">Angle of longitudinal axis of the rectangle to horizontal (radians). Default: 0.0</param>
            <param name="length1">Half width of the rectangle. Default: 100.0</param>
            <param name="length2">Half height of the rectangle. Default: 20.0</param>
            <param name="width">Width of the image to be processed subsequently. Default: 512</param>
            <param name="height">Height of the image to be processed subsequently. Default: 512</param>
            <param name="interpolation">Type of interpolation to be used. Default: "nearest_neighbor"</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.SerializeMeasure">
            <summary>
              Serialize a measure object.
              Instance represents: Measure object handle.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HMeasure.DeserializeMeasure(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized measure object.
              Modified instance represents: Measure object handle.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.WriteMeasure(System.String)">
            <summary>
              Write a measure object to a file.
              Instance represents: Measure object handle.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.ReadMeasure(System.String)">
            <summary>
              Read a measure object from a file.
              Modified instance represents: Measure object handle.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.MeasureThresh(HalconDotNet.HImage,System.Double,System.Double,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Extracting points with a particular gray value along a rectangle or an annular arc.
              Instance represents: Measure object handle.
            </summary>
            <param name="image">Input image.</param>
            <param name="sigma">Sigma of gaussian smoothing. Default: 1.0</param>
            <param name="threshold">Threshold. Default: 128.0</param>
            <param name="select">Selection of points. Default: "all"</param>
            <param name="rowThresh">Row coordinates of points with threshold value.</param>
            <param name="columnThresh">Column coordinates of points with threshold value.</param>
            <param name="distance">Distance between consecutive points.</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.MeasureProjection(HalconDotNet.HImage)">
            <summary>
              Extract a gray value profile perpendicular to a rectangle or annular arc.
              Instance represents: Measure object handle.
            </summary>
            <param name="image">Input image.</param>
            <returns>Gray value profile.</returns>
        </member>
        <member name="M:HalconDotNet.HMeasure.ResetFuzzyMeasure(System.String)">
            <summary>
              Reset a fuzzy function.
              Instance represents: Measure object handle.
            </summary>
            <param name="setType">Selection of the fuzzy set. Default: "contrast"</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.SetFuzzyMeasureNormPair(HalconDotNet.HTuple,System.String,HalconDotNet.HFunction1D)">
            <summary>
              Specify a normalized fuzzy function for edge pairs.
              Instance represents: Measure object handle.
            </summary>
            <param name="pairSize">Favored width of edge pairs. Default: 10.0</param>
            <param name="setType">Selection of the fuzzy set. Default: "size_abs_diff"</param>
            <param name="function">Fuzzy function.</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.SetFuzzyMeasureNormPair(System.Double,System.String,HalconDotNet.HFunction1D)">
            <summary>
              Specify a normalized fuzzy function for edge pairs.
              Instance represents: Measure object handle.
            </summary>
            <param name="pairSize">Favored width of edge pairs. Default: 10.0</param>
            <param name="setType">Selection of the fuzzy set. Default: "size_abs_diff"</param>
            <param name="function">Fuzzy function.</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.SetFuzzyMeasure(System.String,HalconDotNet.HFunction1D)">
            <summary>
              Specify a fuzzy function.
              Instance represents: Measure object handle.
            </summary>
            <param name="setType">Selection of the fuzzy set. Default: "contrast"</param>
            <param name="function">Fuzzy function.</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.FuzzyMeasurePairing(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.String,System.String,System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Extract straight edge pairs perpendicular to a rectangle or an annular arc.
              Instance represents: Measure object handle.
            </summary>
            <param name="image">Input image.</param>
            <param name="sigma">Sigma of Gaussian smoothing. Default: 1.0</param>
            <param name="ampThresh">Minimum edge amplitude. Default: 30.0</param>
            <param name="fuzzyThresh">Minimum fuzzy value. Default: 0.5</param>
            <param name="transition">Select the first gray value transition of the edge pairs. Default: "all"</param>
            <param name="pairing">Constraint of pairing. Default: "no_restriction"</param>
            <param name="numPairs">Number of edge pairs. Default: 10</param>
            <param name="rowEdgeFirst">Row coordinate of the first edge.</param>
            <param name="columnEdgeFirst">Column coordinate of the first edge.</param>
            <param name="amplitudeFirst">Edge amplitude of the first edge (with sign).</param>
            <param name="rowEdgeSecond">Row coordinate of the second edge.</param>
            <param name="columnEdgeSecond">Column coordinate of the second edge.</param>
            <param name="amplitudeSecond">Edge amplitude of the second edge (with sign).</param>
            <param name="rowPairCenter">Row coordinate of the center of the edge pair.</param>
            <param name="columnPairCenter">Column coordinate of the center of the edge pair.</param>
            <param name="fuzzyScore">Fuzzy evaluation of the edge pair.</param>
            <param name="intraDistance">Distance between the edges of the edge pair.</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.FuzzyMeasurePairs(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Extract straight edge pairs perpendicular to a rectangle or an annular arc.
              Instance represents: Measure object handle.
            </summary>
            <param name="image">Input image.</param>
            <param name="sigma">Sigma of Gaussian smoothing. Default: 1.0</param>
            <param name="ampThresh">Minimum edge amplitude. Default: 30.0</param>
            <param name="fuzzyThresh">Minimum fuzzy value. Default: 0.5</param>
            <param name="transition">Select the first gray value transition of the edge pairs. Default: "all"</param>
            <param name="rowEdgeFirst">Row coordinate of the first edge point.</param>
            <param name="columnEdgeFirst">Column coordinate of the first edge point.</param>
            <param name="amplitudeFirst">Edge amplitude of the first edge (with sign).</param>
            <param name="rowEdgeSecond">Row coordinate of the second edge point.</param>
            <param name="columnEdgeSecond">Column coordinate of the second edge point.</param>
            <param name="amplitudeSecond">Edge amplitude of the second edge (with sign).</param>
            <param name="rowEdgeCenter">Row coordinate of the center of the edge pair.</param>
            <param name="columnEdgeCenter">Column coordinate of the center of the edge pair.</param>
            <param name="fuzzyScore">Fuzzy evaluation of the edge pair.</param>
            <param name="intraDistance">Distance between edges of an edge pair.</param>
            <param name="interDistance">Distance between consecutive edge pairs.</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.FuzzyMeasurePos(HalconDotNet.HImage,System.Double,System.Double,System.Double,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Extract straight edges perpendicular to a rectangle or an annular arc.
              Instance represents: Measure object handle.
            </summary>
            <param name="image">Input image.</param>
            <param name="sigma">Sigma of Gaussian smoothing. Default: 1.0</param>
            <param name="ampThresh">Minimum edge amplitude. Default: 30.0</param>
            <param name="fuzzyThresh">Minimum fuzzy value. Default: 0.5</param>
            <param name="transition">Select light/dark or dark/light edges. Default: "all"</param>
            <param name="rowEdge">Row coordinate of the edge point.</param>
            <param name="columnEdge">Column coordinate of the edge point.</param>
            <param name="amplitude">Edge amplitude of the edge (with sign).</param>
            <param name="fuzzyScore">Fuzzy evaluation of the edges.</param>
            <param name="distance">Distance between consecutive edges.</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.MeasurePairs(HalconDotNet.HImage,System.Double,System.Double,System.String,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Extract straight edge pairs perpendicular to a rectangle or annular arc.
              Instance represents: Measure object handle.
            </summary>
            <param name="image">Input image.</param>
            <param name="sigma">Sigma of gaussian smoothing. Default: 1.0</param>
            <param name="threshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="transition">Type of gray value transition that determines how edges are grouped to edge pairs. Default: "all"</param>
            <param name="select">Selection of edge pairs. Default: "all"</param>
            <param name="rowEdgeFirst">Row coordinate of the center of the first edge.</param>
            <param name="columnEdgeFirst">Column coordinate of the center of the first edge.</param>
            <param name="amplitudeFirst">Edge amplitude of the first edge (with sign).</param>
            <param name="rowEdgeSecond">Row coordinate of the center of the second edge.</param>
            <param name="columnEdgeSecond">Column coordinate of the center of the second edge.</param>
            <param name="amplitudeSecond">Edge amplitude of the second edge (with sign).</param>
            <param name="intraDistance">Distance between edges of an edge pair.</param>
            <param name="interDistance">Distance between consecutive edge pairs.</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.MeasurePos(HalconDotNet.HImage,System.Double,System.Double,System.String,System.String,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Extract straight edges perpendicular to a rectangle or annular arc.
              Instance represents: Measure object handle.
            </summary>
            <param name="image">Input image.</param>
            <param name="sigma">Sigma of gaussian smoothing. Default: 1.0</param>
            <param name="threshold">Minimum edge amplitude. Default: 30.0</param>
            <param name="transition">Light/dark or dark/light edge. Default: "all"</param>
            <param name="select">Selection of end points. Default: "all"</param>
            <param name="rowEdge">Row coordinate of the center of the edge.</param>
            <param name="columnEdge">Column coordinate of the center of the edge.</param>
            <param name="amplitude">Edge amplitude of the edge (with sign).</param>
            <param name="distance">Distance between consecutive edges.</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.TranslateMeasure(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Translate a measure object.
              Instance represents: Measure object handle.
            </summary>
            <param name="row">Row coordinate of the new reference point. Default: 50.0</param>
            <param name="column">Column coordinate of the new reference point. Default: 100.0</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.TranslateMeasure(System.Double,System.Double)">
            <summary>
              Translate a measure object.
              Instance represents: Measure object handle.
            </summary>
            <param name="row">Row coordinate of the new reference point. Default: 50.0</param>
            <param name="column">Column coordinate of the new reference point. Default: 100.0</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.GenMeasureArc(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,System.String)">
            <summary>
              Prepare the extraction of straight edges perpendicular to an annular arc.
              Modified instance represents: Measure object handle.
            </summary>
            <param name="centerRow">Row coordinate of the center of the arc. Default: 100.0</param>
            <param name="centerCol">Column coordinate of the center of the arc. Default: 100.0</param>
            <param name="radius">Radius of the arc. Default: 50.0</param>
            <param name="angleStart">Start angle of the arc in radians. Default: 0.0</param>
            <param name="angleExtent">Angular extent of the arc in radians. Default: 6.28318</param>
            <param name="annulusRadius">Radius (half width) of the annulus. Default: 10.0</param>
            <param name="width">Width of the image to be processed subsequently. Default: 512</param>
            <param name="height">Height of the image to be processed subsequently. Default: 512</param>
            <param name="interpolation">Type of interpolation to be used. Default: "nearest_neighbor"</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.GenMeasureArc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.String)">
            <summary>
              Prepare the extraction of straight edges perpendicular to an annular arc.
              Modified instance represents: Measure object handle.
            </summary>
            <param name="centerRow">Row coordinate of the center of the arc. Default: 100.0</param>
            <param name="centerCol">Column coordinate of the center of the arc. Default: 100.0</param>
            <param name="radius">Radius of the arc. Default: 50.0</param>
            <param name="angleStart">Start angle of the arc in radians. Default: 0.0</param>
            <param name="angleExtent">Angular extent of the arc in radians. Default: 6.28318</param>
            <param name="annulusRadius">Radius (half width) of the annulus. Default: 10.0</param>
            <param name="width">Width of the image to be processed subsequently. Default: 512</param>
            <param name="height">Height of the image to be processed subsequently. Default: 512</param>
            <param name="interpolation">Type of interpolation to be used. Default: "nearest_neighbor"</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.GenMeasureRectangle2(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Int32,System.String)">
            <summary>
              Prepare the extraction of straight edges perpendicular to a rectangle.
              Modified instance represents: Measure object handle.
            </summary>
            <param name="row">Row coordinate of the center of the rectangle. Default: 300.0</param>
            <param name="column">Column coordinate of the center of the rectangle. Default: 200.0</param>
            <param name="phi">Angle of longitudinal axis of the rectangle to horizontal (radians). Default: 0.0</param>
            <param name="length1">Half width of the rectangle. Default: 100.0</param>
            <param name="length2">Half height of the rectangle. Default: 20.0</param>
            <param name="width">Width of the image to be processed subsequently. Default: 512</param>
            <param name="height">Height of the image to be processed subsequently. Default: 512</param>
            <param name="interpolation">Type of interpolation to be used. Default: "nearest_neighbor"</param>
        </member>
        <member name="M:HalconDotNet.HMeasure.GenMeasureRectangle2(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.String)">
            <summary>
              Prepare the extraction of straight edges perpendicular to a rectangle.
              Modified instance represents: Measure object handle.
            </summary>
            <param name="row">Row coordinate of the center of the rectangle. Default: 300.0</param>
            <param name="column">Column coordinate of the center of the rectangle. Default: 200.0</param>
            <param name="phi">Angle of longitudinal axis of the rectangle to horizontal (radians). Default: 0.0</param>
            <param name="length1">Half width of the rectangle. Default: 100.0</param>
            <param name="length2">Half height of the rectangle. Default: 20.0</param>
            <param name="width">Width of the image to be processed subsequently. Default: 512</param>
            <param name="height">Height of the image to be processed subsequently. Default: 512</param>
            <param name="interpolation">Type of interpolation to be used. Default: "nearest_neighbor"</param>
        </member>
        <member name="T:HalconDotNet.HSocket">
            <summary>Represents an instance of a socket connection.</summary>
        </member>
        <member name="M:HalconDotNet.HSocket.#ctor(System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Open a socket and connect it to an accepting socket.
              Modified instance represents: Socket number.
            </summary>
            <param name="hostName">Hostname of the computer to connect to. Default: "localhost"</param>
            <param name="port">Port number.</param>
            <param name="genParamName">Names of the generic parameters that can be adjusted for the socket. Default: []</param>
            <param name="genParamValue">Values of the generic parameters that can be adjusted for the socket. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HSocket.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
              Open a socket and connect it to an accepting socket.
              Modified instance represents: Socket number.
            </summary>
            <param name="hostName">Hostname of the computer to connect to. Default: "localhost"</param>
            <param name="port">Port number.</param>
            <param name="genParamName">Names of the generic parameters that can be adjusted for the socket. Default: []</param>
            <param name="genParamValue">Values of the generic parameters that can be adjusted for the socket. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HSocket.#ctor(System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Open a socket that accepts connection requests.
              Modified instance represents: Socket number.
            </summary>
            <param name="port">Port number. Default: 3000</param>
            <param name="genParamName">Names of the generic parameters that can be adjusted for the socket. Default: []</param>
            <param name="genParamValue">Values of the generic parameters that can be adjusted for the socket. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HSocket.#ctor(System.Int32,System.String,System.String)">
            <summary>
              Open a socket that accepts connection requests.
              Modified instance represents: Socket number.
            </summary>
            <param name="port">Port number. Default: 3000</param>
            <param name="genParamName">Names of the generic parameters that can be adjusted for the socket. Default: []</param>
            <param name="genParamValue">Values of the generic parameters that can be adjusted for the socket. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HSocket.ReceiveImage">
            <summary>
              Receive an image over a socket connection.
              Instance represents: Socket number.
            </summary>
            <returns>Received image.</returns>
        </member>
        <member name="M:HalconDotNet.HSocket.SendImage(HalconDotNet.HImage)">
            <summary>
              Send an image over a socket connection.
              Instance represents: Socket number.
            </summary>
            <param name="image">Image to be sent.</param>
        </member>
        <member name="M:HalconDotNet.HSocket.ReceiveRegion">
            <summary>
              Receive regions over a socket connection.
              Instance represents: Socket number.
            </summary>
            <returns>Received regions.</returns>
        </member>
        <member name="M:HalconDotNet.HSocket.SendRegion(HalconDotNet.HRegion)">
            <summary>
              Send regions over a socket connection.
              Instance represents: Socket number.
            </summary>
            <param name="region">Regions to be sent.</param>
        </member>
        <member name="M:HalconDotNet.HSocket.ReceiveXld">
            <summary>
              Receive an XLD object over a socket connection.
              Instance represents: Socket number.
            </summary>
            <returns>Received XLD object.</returns>
        </member>
        <member name="M:HalconDotNet.HSocket.SendXld(HalconDotNet.HXLD)">
            <summary>
              Send an XLD object over a socket connection.
              Instance represents: Socket number.
            </summary>
            <param name="XLD">XLD object to be sent.</param>
        </member>
        <member name="M:HalconDotNet.HSocket.ReceiveTuple">
            <summary>
              Receive a tuple over a socket connection.
              Instance represents: Socket number.
            </summary>
            <returns>Received tuple.</returns>
        </member>
        <member name="M:HalconDotNet.HSocket.SendTuple(HalconDotNet.HTuple)">
            <summary>
              Send a tuple over a socket connection.
              Instance represents: Socket number.
            </summary>
            <param name="tuple">Tuple to be sent.</param>
        </member>
        <member name="M:HalconDotNet.HSocket.SendTuple(System.String)">
            <summary>
              Send a tuple over a socket connection.
              Instance represents: Socket number.
            </summary>
            <param name="tuple">Tuple to be sent.</param>
        </member>
        <member name="M:HalconDotNet.HSocket.ReceiveData(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Receive arbitrary data from external devices or applications using a generic socket connection.
              Instance represents: Socket number.
            </summary>
            <param name="format">Specification how to convert the data to tuples. Default: "z"</param>
            <param name="from">IP address or hostname and network port of the communication partner.</param>
            <returns>Value (or tuple of values) holding the received and converted data.</returns>
        </member>
        <member name="M:HalconDotNet.HSocket.ReceiveData(System.String,System.String@)">
            <summary>
              Receive arbitrary data from external devices or applications using a generic socket connection.
              Instance represents: Socket number.
            </summary>
            <param name="format">Specification how to convert the data to tuples. Default: "z"</param>
            <param name="from">IP address or hostname and network port of the communication partner.</param>
            <returns>Value (or tuple of values) holding the received and converted data.</returns>
        </member>
        <member name="M:HalconDotNet.HSocket.SendData(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Send arbitrary data to external devices or applications using a generic socket communication.
              Instance represents: Socket number.
            </summary>
            <param name="format">Specification how to convert the data. Default: "z"</param>
            <param name="data">Value (or tuple of values) holding the data to send.</param>
            <param name="to">IP address or hostname and network port of the communication partner. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HSocket.SendData(System.String,System.String,System.String)">
            <summary>
              Send arbitrary data to external devices or applications using a generic socket communication.
              Instance represents: Socket number.
            </summary>
            <param name="format">Specification how to convert the data. Default: "z"</param>
            <param name="data">Value (or tuple of values) holding the data to send.</param>
            <param name="to">IP address or hostname and network port of the communication partner. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HSocket.GetSocketParam(HalconDotNet.HTuple)">
            <summary>
              Get the value of a socket parameter.
              Instance represents: Socket number.
            </summary>
            <param name="paramName">Name of the socket parameter.</param>
            <returns>Value of the socket parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HSocket.GetSocketParam(System.String)">
            <summary>
              Get the value of a socket parameter.
              Instance represents: Socket number.
            </summary>
            <param name="paramName">Name of the socket parameter.</param>
            <returns>Value of the socket parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HSocket.SetSocketParam(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set a socket parameter.
              Instance represents: Socket number.
            </summary>
            <param name="paramName">Name of the socket parameter.</param>
            <param name="paramValue">Value of the socket parameter. Default: "on"</param>
        </member>
        <member name="M:HalconDotNet.HSocket.SetSocketParam(System.String,System.String)">
            <summary>
              Set a socket parameter.
              Instance represents: Socket number.
            </summary>
            <param name="paramName">Name of the socket parameter.</param>
            <param name="paramValue">Value of the socket parameter. Default: "on"</param>
        </member>
        <member name="M:HalconDotNet.HSocket.GetNextSocketDataType">
            <summary>
              Determine the HALCON data type of the next socket data.
              Instance represents: Socket number.
            </summary>
            <returns>Data type of next HALCON data.</returns>
        </member>
        <member name="M:HalconDotNet.HSocket.GetSocketDescriptor">
            <summary>
              Get the socket descriptor of a socket used by the operating system.
              Instance represents: Socket number.
            </summary>
            <returns>Socket descriptor used by the operating system.</returns>
        </member>
        <member name="M:HalconDotNet.HSocket.GetSocketTimeout">
            <summary>
              Get the timeout of a socket.
              Instance represents: Socket number.
            </summary>
            <returns>Socket timeout.</returns>
        </member>
        <member name="M:HalconDotNet.HSocket.SetSocketTimeout(HalconDotNet.HTuple)">
            <summary>
              Set the timeout of a socket.
              Instance represents: Socket number.
            </summary>
            <param name="timeout">Socket timeout. Default: "infinite"</param>
        </member>
        <member name="M:HalconDotNet.HSocket.SetSocketTimeout(System.Double)">
            <summary>
              Set the timeout of a socket.
              Instance represents: Socket number.
            </summary>
            <param name="timeout">Socket timeout. Default: "infinite"</param>
        </member>
        <member name="M:HalconDotNet.HSocket.CloseAllSockets">
            <summary>Close all opened sockets.</summary>
        </member>
        <member name="M:HalconDotNet.HSocket.SocketAcceptConnect(System.String)">
            <summary>
              Accept a connection request on a listening socket of the protocol type 'HALCON' or 'TCP'/'TCP4'/'TCP6'.
              Instance represents: Socket number of the accepting socket.
            </summary>
            <param name="wait">Should the operator wait until a connection request arrives? Default: "auto"</param>
            <returns>Socket number.</returns>
        </member>
        <member name="M:HalconDotNet.HSocket.OpenSocketConnect(System.String,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Open a socket and connect it to an accepting socket.
              Modified instance represents: Socket number.
            </summary>
            <param name="hostName">Hostname of the computer to connect to. Default: "localhost"</param>
            <param name="port">Port number.</param>
            <param name="genParamName">Names of the generic parameters that can be adjusted for the socket. Default: []</param>
            <param name="genParamValue">Values of the generic parameters that can be adjusted for the socket. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HSocket.OpenSocketConnect(System.String,System.Int32,System.String,System.String)">
            <summary>
              Open a socket and connect it to an accepting socket.
              Modified instance represents: Socket number.
            </summary>
            <param name="hostName">Hostname of the computer to connect to. Default: "localhost"</param>
            <param name="port">Port number.</param>
            <param name="genParamName">Names of the generic parameters that can be adjusted for the socket. Default: []</param>
            <param name="genParamValue">Values of the generic parameters that can be adjusted for the socket. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HSocket.OpenSocketAccept(System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Open a socket that accepts connection requests.
              Modified instance represents: Socket number.
            </summary>
            <param name="port">Port number. Default: 3000</param>
            <param name="genParamName">Names of the generic parameters that can be adjusted for the socket. Default: []</param>
            <param name="genParamValue">Values of the generic parameters that can be adjusted for the socket. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HSocket.OpenSocketAccept(System.Int32,System.String,System.String)">
            <summary>
              Open a socket that accepts connection requests.
              Modified instance represents: Socket number.
            </summary>
            <param name="port">Port number. Default: 3000</param>
            <param name="genParamName">Names of the generic parameters that can be adjusted for the socket. Default: []</param>
            <param name="genParamValue">Values of the generic parameters that can be adjusted for the socket. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HSocket.ReceiveSerializedItem">
            <summary>
              Receive a serialized item over a socket connection.
              Instance represents: Socket number.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HSocket.SendSerializedItem(HalconDotNet.HSerializedItem)">
            <summary>
              Send a serialized item over a socket connection.
              Instance represents: Socket number.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="T:HalconDotNet.HTextResult">
            <summary>Represents an instance of a text segmentations result.</summary>
        </member>
        <member name="M:HalconDotNet.HTextResult.#ctor(HalconDotNet.HImage,HalconDotNet.HTextModel)">
            <summary>
              Find text in an image.
              Modified instance represents: Result of the segmentation.
            </summary>
            <param name="image">Input image.</param>
            <param name="textModel">Text model specifying the text to be segmented.</param>
        </member>
        <member name="M:HalconDotNet.HTextResult.ClearAllTextResults">
            <summary>Clear all text results.</summary>
        </member>
        <member name="M:HalconDotNet.HTextResult.GetTextObject(HalconDotNet.HTuple)">
            <summary>
              Query an iconic value of a text segmentation result.
              Instance represents: Text result.
            </summary>
            <param name="resultName">Name of the result to be returned. Default: "all_lines"</param>
            <returns>Returned result.</returns>
        </member>
        <member name="M:HalconDotNet.HTextResult.GetTextObject(System.String)">
            <summary>
              Query an iconic value of a text segmentation result.
              Instance represents: Text result.
            </summary>
            <param name="resultName">Name of the result to be returned. Default: "all_lines"</param>
            <returns>Returned result.</returns>
        </member>
        <member name="M:HalconDotNet.HTextResult.GetTextResult(HalconDotNet.HTuple)">
            <summary>
              Query a control value of a text segmentation result.
              Instance represents: Text result.
            </summary>
            <param name="resultName">Name of the result to be returned. Default: "class"</param>
            <returns>Value of ResultName.</returns>
        </member>
        <member name="M:HalconDotNet.HTextResult.GetTextResult(System.String)">
            <summary>
              Query a control value of a text segmentation result.
              Instance represents: Text result.
            </summary>
            <param name="resultName">Name of the result to be returned. Default: "class"</param>
            <returns>Value of ResultName.</returns>
        </member>
        <member name="M:HalconDotNet.HTextResult.FindText(HalconDotNet.HImage,HalconDotNet.HTextModel)">
            <summary>
              Find text in an image.
              Modified instance represents: Result of the segmentation.
            </summary>
            <param name="image">Input image.</param>
            <param name="textModel">Text model specifying the text to be segmented.</param>
        </member>
        <member name="T:HalconDotNet.HClassLUT">
            <summary>Represents an instance of a classification lookup table</summary>
        </member>
        <member name="M:HalconDotNet.HClassLUT.#ctor(HalconDotNet.HClassKnn,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a look-up table using a k-nearest neighbors classifier (k-NN) to classify byte images.
              Modified instance represents: Handle of the LUT classifier.
            </summary>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HClassLUT.#ctor(HalconDotNet.HClassGmm,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a look-up table using a gaussian mixture model to classify byte images.
              Modified instance represents: Handle of the LUT classifier.
            </summary>
            <param name="GMMHandle">GMM handle.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HClassLUT.#ctor(HalconDotNet.HClassSvm,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a look-up table using a Support-Vector-Machine to classify byte images.
              Modified instance represents: Handle of the LUT classifier.
            </summary>
            <param name="SVMHandle">SVM handle.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HClassLUT.#ctor(HalconDotNet.HClassMlp,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a look-up table using a multi-layer perceptron to classify byte images.
              Modified instance represents: Handle of the LUT classifier.
            </summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HClassLUT.ClassifyImageClassLut(HalconDotNet.HImage)">
            <summary>
              Classify a byte image using a look-up table.
              Instance represents: Handle of the LUT classifier.
            </summary>
            <param name="image">Input image.</param>
            <returns>Segmented classes.</returns>
        </member>
        <member name="M:HalconDotNet.HClassLUT.CreateClassLutKnn(HalconDotNet.HClassKnn,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a look-up table using a k-nearest neighbors classifier (k-NN) to classify byte images.
              Modified instance represents: Handle of the LUT classifier.
            </summary>
            <param name="KNNHandle">Handle of the k-NN classifier.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HClassLUT.CreateClassLutGmm(HalconDotNet.HClassGmm,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a look-up table using a gaussian mixture model to classify byte images.
              Modified instance represents: Handle of the LUT classifier.
            </summary>
            <param name="GMMHandle">GMM handle.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HClassLUT.CreateClassLutSvm(HalconDotNet.HClassSvm,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a look-up table using a Support-Vector-Machine to classify byte images.
              Modified instance represents: Handle of the LUT classifier.
            </summary>
            <param name="SVMHandle">SVM handle.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HClassLUT.CreateClassLutMlp(HalconDotNet.HClassMlp,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a look-up table using a multi-layer perceptron to classify byte images.
              Modified instance represents: Handle of the LUT classifier.
            </summary>
            <param name="MLPHandle">MLP handle.</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
        </member>
        <member name="T:HalconDotNet.HDataCode2D">
            <summary>Represents an instance of a 2D data code reader.</summary>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.#ctor(System.String)">
            <summary>
              Read a 2D data code model from a file and create a new model.
              Modified instance represents: Handle of the created 2D data code model.
            </summary>
            <param name="fileName">Name of the 2D data code model file. Default: "data_code_model.dcm"</param>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.#ctor(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a model of a 2D data code class.
              Modified instance represents: Handle for using and accessing the 2D data code model.
            </summary>
            <param name="symbolType">Type of the 2D data code. Default: "Data Matrix ECC 200"</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the 2D data code model. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the 2D data code model. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.#ctor(System.String,System.String,System.String)">
            <summary>
              Create a model of a 2D data code class.
              Modified instance represents: Handle for using and accessing the 2D data code model.
            </summary>
            <param name="symbolType">Type of the 2D data code. Default: "Data Matrix ECC 200"</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the 2D data code model. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the 2D data code model. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.GetDataCode2dObjects(HalconDotNet.HTuple,System.String)">
            <summary>
              Access iconic objects that were created during the search for 2D data code symbols.
              Instance represents: Handle of the 2D data code model.
            </summary>
            <param name="candidateHandle">Handle of the 2D data code candidate or name of a group of candidates for which the iconic data is requested. Default: "all_candidates"</param>
            <param name="objectName">Name of the iconic object to return. Default: "candidate_xld"</param>
            <returns>Objects that are created as intermediate results during the detection or evaluation of 2D data codes.</returns>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.GetDataCode2dObjects(System.Int32,System.String)">
            <summary>
              Access iconic objects that were created during the search for 2D data code symbols.
              Instance represents: Handle of the 2D data code model.
            </summary>
            <param name="candidateHandle">Handle of the 2D data code candidate or name of a group of candidates for which the iconic data is requested. Default: "all_candidates"</param>
            <param name="objectName">Name of the iconic object to return. Default: "candidate_xld"</param>
            <returns>Objects that are created as intermediate results during the detection or evaluation of 2D data codes.</returns>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.GetDataCode2dResults(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Get the alphanumerical results that were accumulated during the search for 2D data code symbols.
              Instance represents: Handle of the 2D data code model.
            </summary>
            <param name="candidateHandle">Handle of the 2D data code candidate or name of a group of candidates for which the data is required. Default: "all_candidates"</param>
            <param name="resultNames">Names of the results of the 2D data code to return. Default: "status"</param>
            <returns>List with the results.</returns>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.GetDataCode2dResults(System.String,System.String)">
            <summary>
              Get the alphanumerical results that were accumulated during the search for 2D data code symbols.
              Instance represents: Handle of the 2D data code model.
            </summary>
            <param name="candidateHandle">Handle of the 2D data code candidate or name of a group of candidates for which the data is required. Default: "all_candidates"</param>
            <param name="resultNames">Names of the results of the 2D data code to return. Default: "status"</param>
            <returns>List with the results.</returns>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.FindDataCode2d(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Detect and read 2D data code symbols in an image or train the 2D data code model.
              Instance represents: Handle of the 2D data code model.
            </summary>
            <param name="image">Input image.</param>
            <param name="genParamNames">Names of (optional) parameters for controlling the behavior of the operator. Default: []</param>
            <param name="genParamValues">Values of the optional generic parameters. Default: []</param>
            <param name="resultHandles">Handles of all successfully decoded 2D data code symbols.</param>
            <param name="decodedDataStrings">Decoded data strings of all detected 2D data code symbols in the image.</param>
            <returns>XLD contours that surround the successfully decoded data code symbols.</returns>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.FindDataCode2d(HalconDotNet.HImage,System.String,System.Int32,System.Int32@,System.String@)">
            <summary>
              Detect and read 2D data code symbols in an image or train the 2D data code model.
              Instance represents: Handle of the 2D data code model.
            </summary>
            <param name="image">Input image.</param>
            <param name="genParamNames">Names of (optional) parameters for controlling the behavior of the operator. Default: []</param>
            <param name="genParamValues">Values of the optional generic parameters. Default: []</param>
            <param name="resultHandles">Handles of all successfully decoded 2D data code symbols.</param>
            <param name="decodedDataStrings">Decoded data strings of all detected 2D data code symbols in the image.</param>
            <returns>XLD contours that surround the successfully decoded data code symbols.</returns>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.SetDataCode2dParam(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set selected parameters of the 2D data code model.
              Instance represents: Handle of the 2D data code model.
            </summary>
            <param name="genParamNames">Names of the generic parameters that shall be adjusted for the 2D data code. Default: "polarity"</param>
            <param name="genParamValues">Values of the generic parameters that are adjusted for the 2D data code. Default: "light_on_dark"</param>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.SetDataCode2dParam(System.String,System.String)">
            <summary>
              Set selected parameters of the 2D data code model.
              Instance represents: Handle of the 2D data code model.
            </summary>
            <param name="genParamNames">Names of the generic parameters that shall be adjusted for the 2D data code. Default: "polarity"</param>
            <param name="genParamValues">Values of the generic parameters that are adjusted for the 2D data code. Default: "light_on_dark"</param>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.GetDataCode2dParam(HalconDotNet.HTuple)">
            <summary>
              Get one or several parameters that describe the 2D data code model.
              Instance represents: Handle of the 2D data code model.
            </summary>
            <param name="genParamNames">Names of the generic parameters that are to be queried for the 2D data code model. Default: "contrast_min"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.GetDataCode2dParam(System.String)">
            <summary>
              Get one or several parameters that describe the 2D data code model.
              Instance represents: Handle of the 2D data code model.
            </summary>
            <param name="genParamNames">Names of the generic parameters that are to be queried for the 2D data code model. Default: "contrast_min"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.QueryDataCode2dParams(System.String)">
            <summary>
              Get for a given 2D data code model the names of the generic parameters or objects that can be used in the other 2D data code operators.
              Instance represents: Handle of the 2D data code model.
            </summary>
            <param name="queryName">Name of the parameter group. Default: "get_result_params"</param>
            <returns>List containing the names of the supported generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.DeserializeDataCode2dModel(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized 2D data code model.
              Modified instance represents: Handle of the 2D data code model.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.SerializeDataCode2dModel">
            <summary>
              Serialize a 2D data code model.
              Instance represents: Handle of the 2D data code model.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.ReadDataCode2dModel(System.String)">
            <summary>
              Read a 2D data code model from a file and create a new model.
              Modified instance represents: Handle of the created 2D data code model.
            </summary>
            <param name="fileName">Name of the 2D data code model file. Default: "data_code_model.dcm"</param>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.WriteDataCode2dModel(System.String)">
            <summary>
              Writes a 2D data code model into a file.
              Instance represents: Handle of the 2D data code model.
            </summary>
            <param name="fileName">Name of the 2D data code model file. Default: "data_code_model.dcm"</param>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.CreateDataCode2dModel(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a model of a 2D data code class.
              Modified instance represents: Handle for using and accessing the 2D data code model.
            </summary>
            <param name="symbolType">Type of the 2D data code. Default: "Data Matrix ECC 200"</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the 2D data code model. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the 2D data code model. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HDataCode2D.CreateDataCode2dModel(System.String,System.String,System.String)">
            <summary>
              Create a model of a 2D data code class.
              Modified instance represents: Handle for using and accessing the 2D data code model.
            </summary>
            <param name="symbolType">Type of the 2D data code. Default: "Data Matrix ECC 200"</param>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the 2D data code model. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the 2D data code model. Default: []</param>
        </member>
        <member name="T:HalconDotNet.HDeformableSurfaceMatchingResult">
            <summary>Represents an instance of a deformable surface matching result.</summary>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceMatchingResult.GetDeformableSurfaceMatchingResult(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Get details of a result from deformable surface based matching.
              Instance represents: Handle of the deformable surface matching result.
            </summary>
            <param name="resultName">Name of the result property. Default: "sampled_scene"</param>
            <param name="resultIndex">Index of the result property. Default: 0</param>
            <returns>Value of the result property.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceMatchingResult.GetDeformableSurfaceMatchingResult(System.String,System.Int32)">
            <summary>
              Get details of a result from deformable surface based matching.
              Instance represents: Handle of the deformable surface matching result.
            </summary>
            <param name="resultName">Name of the result property. Default: "sampled_scene"</param>
            <param name="resultIndex">Index of the result property. Default: 0</param>
            <returns>Value of the result property.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceMatchingResult.RefineDeformableSurfaceModel(HalconDotNet.HDeformableSurfaceModel,HalconDotNet.HObjectModel3D,System.Double,HalconDotNet.HObjectModel3D,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HDeformableSurfaceMatchingResult[]@)">
            <summary>Refine the position and deformation of a deformable surface model in a 3D scene.</summary>
            <param name="deformableSurfaceModel">Handle of the deformable surface model.</param>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="relSamplingDistance">Relative sampling distance of the scene. Default: 0.05</param>
            <param name="initialDeformationObjectModel3D">Initial deformation of the 3D object model</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="deformableSurfaceMatchingResult">Handle of the matching result.</param>
            <returns>Score of the refined model.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceMatchingResult.RefineDeformableSurfaceModel(HalconDotNet.HDeformableSurfaceModel,HalconDotNet.HObjectModel3D,System.Double,HalconDotNet.HObjectModel3D,System.String,System.String)">
            <summary>
              Refine the position and deformation of a deformable surface model in a 3D scene.
              Modified instance represents: Handle of the matching result.
            </summary>
            <param name="deformableSurfaceModel">Handle of the deformable surface model.</param>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="relSamplingDistance">Relative sampling distance of the scene. Default: 0.05</param>
            <param name="initialDeformationObjectModel3D">Initial deformation of the 3D object model</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Score of the refined model.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceMatchingResult.FindDeformableSurfaceModel(HalconDotNet.HDeformableSurfaceModel,HalconDotNet.HObjectModel3D,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HDeformableSurfaceMatchingResult[]@)">
            <summary>Find the best match of a deformable surface model in a 3D scene.</summary>
            <param name="deformableSurfaceModel">Handle of the deformable surface model.</param>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="relSamplingDistance">Scene sampling distance relative to the diameter of the surface model. Default: 0.05</param>
            <param name="minScore">Minimum score of the returned match. Default: 0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <param name="deformableSurfaceMatchingResult">Handle of the matching result.</param>
            <returns>Score of the found instances of the surface model.</returns>
        </member>
        <member name="M:HalconDotNet.HDeformableSurfaceMatchingResult.FindDeformableSurfaceModel(HalconDotNet.HDeformableSurfaceModel,HalconDotNet.HObjectModel3D,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Find the best match of a deformable surface model in a 3D scene.
              Modified instance represents: Handle of the matching result.
            </summary>
            <param name="deformableSurfaceModel">Handle of the deformable surface model.</param>
            <param name="objectModel3D">Handle of the 3D object model containing the scene.</param>
            <param name="relSamplingDistance">Scene sampling distance relative to the diameter of the surface model. Default: 0.05</param>
            <param name="minScore">Minimum score of the returned match. Default: 0</param>
            <param name="genParamName">Names of the generic parameters. Default: []</param>
            <param name="genParamValue">Values of the generic parameters. Default: []</param>
            <returns>Score of the found instances of the surface model.</returns>
        </member>
        <member name="T:HalconDotNet.HOCRMlp">
            <summary>Represents an instance of a MLP OCR classifier.</summary>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.#ctor(System.String)">
            <summary>
              Read an OCR classifier from a file.
              Modified instance represents: Handle of the OCR classifier.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.#ctor(System.Int32,System.Int32,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
              Create an OCR classifier using a multilayer perceptron.
              Modified instance represents: Handle of the OCR classifier.
            </summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 8</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 10</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters. Default: "constant"</param>
            <param name="features">Features to be used for classification. Default: "default"</param>
            <param name="characters">All characters of the character set to be read. Default: ["0","1","2","3","4","5","6","7","8","9"]</param>
            <param name="numHidden">Number of hidden units of the MLP. Default: 80</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "none"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
            <param name="randSeed">Seed value of the random number generator that is used to initialize the MLP with random values. Default: 42</param>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.#ctor(System.Int32,System.Int32,System.String,System.String,HalconDotNet.HTuple,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
              Create an OCR classifier using a multilayer perceptron.
              Modified instance represents: Handle of the OCR classifier.
            </summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 8</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 10</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters. Default: "constant"</param>
            <param name="features">Features to be used for classification. Default: "default"</param>
            <param name="characters">All characters of the character set to be read. Default: ["0","1","2","3","4","5","6","7","8","9"]</param>
            <param name="numHidden">Number of hidden units of the MLP. Default: 80</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "none"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
            <param name="randSeed">Seed value of the random number generator that is used to initialize the MLP with random values. Default: 42</param>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.SelectFeatureSetTrainfMlpProtected(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Select an optimal combination of features to classify OCR data from a (protected) training file.
              Modified instance represents: Trained OCR-MLP classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="password">Passwords for protected training files.</param>
            <param name="featureList">List of features that should be considered for selection. Default: ["zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"]</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="width">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 15</param>
            <param name="height">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 16</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="score">Achieved score using tow-fold cross-validation.</param>
            <returns>Selected feature set, contains only entries from  FeatureList.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.SelectFeatureSetTrainfMlpProtected(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Select an optimal combination of features to classify OCR data from a (protected) training file.
              Modified instance represents: Trained OCR-MLP classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="password">Passwords for protected training files.</param>
            <param name="featureList">List of features that should be considered for selection. Default: ["zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"]</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="width">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 15</param>
            <param name="height">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 16</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="score">Achieved score using tow-fold cross-validation.</param>
            <returns>Selected feature set, contains only entries from  FeatureList.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.SelectFeatureSetTrainfMlp(HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal combination of features to classify OCR data.
              Modified instance represents: Trained OCR-MLP classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="featureList">List of features that should be considered for selection. Default: ["zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"]</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="width">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 15</param>
            <param name="height">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 16</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="score">Achieved score using tow-fold cross-validation.</param>
            <returns>Selected feature set, contains only entries from  FeatureList.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.SelectFeatureSetTrainfMlp(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal combination of features to classify OCR data.
              Modified instance represents: Trained OCR-MLP classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="featureList">List of features that should be considered for selection. Default: ["zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"]</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="width">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 15</param>
            <param name="height">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 16</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="score">Achieved score using tow-fold cross-validation.</param>
            <returns>Selected feature set, contains only entries from  FeatureList.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.DeserializeOcrClassMlp(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized MLP-based OCR classifier.
              Modified instance represents: Handle of the OCR classifier.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.SerializeOcrClassMlp">
            <summary>
              Serialize a MLP-based OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.ReadOcrClassMlp(System.String)">
            <summary>
              Read an OCR classifier from a file.
              Modified instance represents: Handle of the OCR classifier.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.WriteOcrClassMlp(System.String)">
            <summary>
              Write an OCR classifier to a file.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.GetFeaturesOcrClassMlp(HalconDotNet.HImage,System.String)">
            <summary>
              Compute the features of a character.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="character">Input character.</param>
            <param name="transform">Should the feature vector be transformed with the preprocessing? Default: "true"</param>
            <returns>Feature vector of the character.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.DoOcrWordMlp(HalconDotNet.HRegion,HalconDotNet.HImage,System.String,System.Int32,System.Int32,HalconDotNet.HTuple@,System.String@,System.Double@)">
            <summary>
              Classify a related group of characters with an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="character">Characters to be recognized.</param>
            <param name="image">Gray values of the characters.</param>
            <param name="expression">Expression describing the allowed word structure.</param>
            <param name="numAlternatives">Number of classes per character considered for the internal word correction. Default: 3</param>
            <param name="numCorrections">Maximum number of corrected characters. Default: 2</param>
            <param name="confidence">Confidence of the class of the characters.</param>
            <param name="word">Word text after classification and correction.</param>
            <param name="score">Measure of similarity between corrected word and uncorrected classification results.</param>
            <returns>Result of classifying the characters with the MLP.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.DoOcrWordMlp(HalconDotNet.HRegion,HalconDotNet.HImage,System.String,System.Int32,System.Int32,System.Double@,System.String@,System.Double@)">
            <summary>
              Classify a related group of characters with an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="character">Characters to be recognized.</param>
            <param name="image">Gray values of the characters.</param>
            <param name="expression">Expression describing the allowed word structure.</param>
            <param name="numAlternatives">Number of classes per character considered for the internal word correction. Default: 3</param>
            <param name="numCorrections">Maximum number of corrected characters. Default: 2</param>
            <param name="confidence">Confidence of the class of the characters.</param>
            <param name="word">Word text after classification and correction.</param>
            <param name="score">Measure of similarity between corrected word and uncorrected classification results.</param>
            <returns>Result of classifying the characters with the MLP.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.DoOcrMultiClassMlp(HalconDotNet.HRegion,HalconDotNet.HImage,HalconDotNet.HTuple@)">
            <summary>
              Classify multiple characters with an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="character">Characters to be recognized.</param>
            <param name="image">Gray values of the characters.</param>
            <param name="confidence">Confidence of the class of the characters.</param>
            <returns>Result of classifying the characters with the MLP.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.DoOcrMultiClassMlp(HalconDotNet.HRegion,HalconDotNet.HImage,System.Double@)">
            <summary>
              Classify multiple characters with an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="character">Characters to be recognized.</param>
            <param name="image">Gray values of the characters.</param>
            <param name="confidence">Confidence of the class of the characters.</param>
            <returns>Result of classifying the characters with the MLP.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.DoOcrSingleClassMlp(HalconDotNet.HRegion,HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Classify a single character with an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="character">Character to be recognized.</param>
            <param name="image">Gray values of the character.</param>
            <param name="num">Number of best classes to determine. Default: 1</param>
            <param name="confidence">Confidence(s) of the class(es) of the character.</param>
            <returns>Result of classifying the character with the MLP.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.DoOcrSingleClassMlp(HalconDotNet.HRegion,HalconDotNet.HImage,HalconDotNet.HTuple,System.Double@)">
            <summary>
              Classify a single character with an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="character">Character to be recognized.</param>
            <param name="image">Gray values of the character.</param>
            <param name="num">Number of best classes to determine. Default: 1</param>
            <param name="confidence">Confidence(s) of the class(es) of the character.</param>
            <returns>Result of classifying the character with the MLP.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.TrainfOcrClassMlpProtected(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.Double,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Train an OCR classifier with data from a (protected) training file.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="password">Passwords for protected training files.</param>
            <param name="maxIterations">Maximum number of iterations of the optimization algorithm. Default: 200</param>
            <param name="weightTolerance">Threshold for the difference of the weights of the MLP between two iterations of the optimization algorithm. Default: 1.0</param>
            <param name="errorTolerance">Threshold for the difference of the mean error of the MLP on the training data between two iterations of the optimization algorithm. Default: 0.01</param>
            <param name="errorLog">Mean error of the MLP on the training data as a function of the number of iterations of the optimization algorithm.</param>
            <returns>Mean error of the MLP on the training data.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.TrainfOcrClassMlpProtected(System.String,System.String,System.Int32,System.Double,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Train an OCR classifier with data from a (protected) training file.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="password">Passwords for protected training files.</param>
            <param name="maxIterations">Maximum number of iterations of the optimization algorithm. Default: 200</param>
            <param name="weightTolerance">Threshold for the difference of the weights of the MLP between two iterations of the optimization algorithm. Default: 1.0</param>
            <param name="errorTolerance">Threshold for the difference of the mean error of the MLP on the training data between two iterations of the optimization algorithm. Default: 0.01</param>
            <param name="errorLog">Mean error of the MLP on the training data as a function of the number of iterations of the optimization algorithm.</param>
            <returns>Mean error of the MLP on the training data.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.TrainfOcrClassMlp(HalconDotNet.HTuple,System.Int32,System.Double,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Train an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="maxIterations">Maximum number of iterations of the optimization algorithm. Default: 200</param>
            <param name="weightTolerance">Threshold for the difference of the weights of the MLP between two iterations of the optimization algorithm. Default: 1.0</param>
            <param name="errorTolerance">Threshold for the difference of the mean error of the MLP on the training data between two iterations of the optimization algorithm. Default: 0.01</param>
            <param name="errorLog">Mean error of the MLP on the training data as a function of the number of iterations of the optimization algorithm.</param>
            <returns>Mean error of the MLP on the training data.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.TrainfOcrClassMlp(System.String,System.Int32,System.Double,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Train an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="maxIterations">Maximum number of iterations of the optimization algorithm. Default: 200</param>
            <param name="weightTolerance">Threshold for the difference of the weights of the MLP between two iterations of the optimization algorithm. Default: 1.0</param>
            <param name="errorTolerance">Threshold for the difference of the mean error of the MLP on the training data between two iterations of the optimization algorithm. Default: 0.01</param>
            <param name="errorLog">Mean error of the MLP on the training data as a function of the number of iterations of the optimization algorithm.</param>
            <returns>Mean error of the MLP on the training data.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.GetPrepInfoOcrClassMlp(HalconDotNet.HTuple,System.String,HalconDotNet.HTuple@)">
            <summary>
              Compute the information content of the preprocessed feature vectors of an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "principal_components"</param>
            <param name="cumInformationCont">Cumulative information content of the transformed feature vectors.</param>
            <returns>Relative information content of the transformed feature vectors.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.GetPrepInfoOcrClassMlp(System.String,System.String,HalconDotNet.HTuple@)">
            <summary>
              Compute the information content of the preprocessed feature vectors of an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "principal_components"</param>
            <param name="cumInformationCont">Cumulative information content of the transformed feature vectors.</param>
            <returns>Relative information content of the transformed feature vectors.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.GetRejectionParamsOcrClassMlp(HalconDotNet.HTuple)">
            <summary>
              Return the rejection class parameters of an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="genParamName">Name of the general parameter. Default: "sampling_strategy"</param>
            <returns>Value of the general parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.GetRejectionParamsOcrClassMlp(System.String)">
            <summary>
              Return the rejection class parameters of an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="genParamName">Name of the general parameter. Default: "sampling_strategy"</param>
            <returns>Value of the general parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.SetRejectionParamsOcrClassMlp(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set the rejection class parameters of an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="genParamName">Name of the general parameter. Default: "sampling_strategy"</param>
            <param name="genParamValue">Value of the general parameter. Default: "hyperbox_around_all_classes"</param>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.SetRejectionParamsOcrClassMlp(System.String,System.String)">
            <summary>
              Set the rejection class parameters of an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="genParamName">Name of the general parameter. Default: "sampling_strategy"</param>
            <param name="genParamValue">Value of the general parameter. Default: "hyperbox_around_all_classes"</param>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.GetRegularizationParamsOcrClassMlp(System.String)">
            <summary>
              Return the regularization parameters of an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="genParamName">Name of the regularization parameter to return. Default: "weight_prior"</param>
            <returns>Value of the regularization parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.SetRegularizationParamsOcrClassMlp(System.String,HalconDotNet.HTuple)">
            <summary>
              Set the regularization parameters of an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="genParamName">Name of the regularization parameter to return. Default: "weight_prior"</param>
            <param name="genParamValue">Value of the regularization parameter. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.SetRegularizationParamsOcrClassMlp(System.String,System.Double)">
            <summary>
              Set the regularization parameters of an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="genParamName">Name of the regularization parameter to return. Default: "weight_prior"</param>
            <param name="genParamValue">Value of the regularization parameter. Default: 1.0</param>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.GetParamsOcrClassMlp(System.Int32@,System.Int32@,System.String@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,System.Int32@,System.String@,System.Int32@)">
            <summary>
              Return the parameters of an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed.</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed.</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters.</param>
            <param name="features">Features to be used for classification.</param>
            <param name="characters">Characters of the character set to be read.</param>
            <param name="numHidden">Number of hidden units of the MLP.</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors.</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features.</param>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.GetParamsOcrClassMlp(System.Int32@,System.Int32@,System.String@,System.String@,HalconDotNet.HTuple@,System.Int32@,System.String@,System.Int32@)">
            <summary>
              Return the parameters of an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed.</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed.</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters.</param>
            <param name="features">Features to be used for classification.</param>
            <param name="characters">Characters of the character set to be read.</param>
            <param name="numHidden">Number of hidden units of the MLP.</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors.</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features.</param>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.CreateOcrClassMlp(System.Int32,System.Int32,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
              Create an OCR classifier using a multilayer perceptron.
              Modified instance represents: Handle of the OCR classifier.
            </summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 8</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 10</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters. Default: "constant"</param>
            <param name="features">Features to be used for classification. Default: "default"</param>
            <param name="characters">All characters of the character set to be read. Default: ["0","1","2","3","4","5","6","7","8","9"]</param>
            <param name="numHidden">Number of hidden units of the MLP. Default: 80</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "none"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
            <param name="randSeed">Seed value of the random number generator that is used to initialize the MLP with random values. Default: 42</param>
        </member>
        <member name="M:HalconDotNet.HOCRMlp.CreateOcrClassMlp(System.Int32,System.Int32,System.String,System.String,HalconDotNet.HTuple,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
              Create an OCR classifier using a multilayer perceptron.
              Modified instance represents: Handle of the OCR classifier.
            </summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 8</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 10</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters. Default: "constant"</param>
            <param name="features">Features to be used for classification. Default: "default"</param>
            <param name="characters">All characters of the character set to be read. Default: ["0","1","2","3","4","5","6","7","8","9"]</param>
            <param name="numHidden">Number of hidden units of the MLP. Default: 80</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "none"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
            <param name="randSeed">Seed value of the random number generator that is used to initialize the MLP with random values. Default: 42</param>
        </member>
        <member name="T:HalconDotNet.HShapeModel3D">
            <summary>Represents an instance of a 3D shape model for 3D matching.</summary>
        </member>
        <member name="M:HalconDotNet.HShapeModel3D.#ctor(System.String)">
            <summary>
              Read a 3D shape model from a file.
              Modified instance represents: Handle of the 3D shape model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel3D.#ctor(HalconDotNet.HObjectModel3D,HalconDotNet.HTuple,System.Double,System.Double,System.Double,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a 3D object model for matching.
              Modified instance represents: Handle of the 3D shape model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="camParam">Internal camera parameters.</param>
            <param name="refRotX">Reference orientation: Rotation around x-axis or x component of the Rodriguez vector (in radians or without unit). Default: 0</param>
            <param name="refRotY">Reference orientation: Rotation around y-axis or y component of the Rodriguez vector (in radians or without unit). Default: 0</param>
            <param name="refRotZ">Reference orientation: Rotation around z-axis or z component of the Rodriguez vector (in radians or without unit). Default: 0</param>
            <param name="orderOfRotation">Meaning of the rotation values of the reference orientation. Default: "gba"</param>
            <param name="longitudeMin">Minimum longitude of the model views. Default: -0.35</param>
            <param name="longitudeMax">Maximum longitude of the model views. Default: 0.35</param>
            <param name="latitudeMin">Minimum latitude of the model views. Default: -0.35</param>
            <param name="latitudeMax">Maximum latitude of the model views. Default: 0.35</param>
            <param name="camRollMin">Minimum camera roll angle of the model views. Default: -3.1416</param>
            <param name="camRollMax">Maximum camera roll angle of the model views. Default: 3.1416</param>
            <param name="distMin">Minimum camera-object-distance of the model views. Default: 0.3</param>
            <param name="distMax">Maximum camera-object-distance of the model views. Default: 0.4</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 10</param>
            <param name="genParamNames">Names of (optional) parameters for controlling the behavior of the operator. Default: []</param>
            <param name="genParamValues">Values of the optional generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel3D.#ctor(HalconDotNet.HObjectModel3D,HalconDotNet.HTuple,System.Double,System.Double,System.Double,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.String,System.Int32)">
            <summary>
              Prepare a 3D object model for matching.
              Modified instance represents: Handle of the 3D shape model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="camParam">Internal camera parameters.</param>
            <param name="refRotX">Reference orientation: Rotation around x-axis or x component of the Rodriguez vector (in radians or without unit). Default: 0</param>
            <param name="refRotY">Reference orientation: Rotation around y-axis or y component of the Rodriguez vector (in radians or without unit). Default: 0</param>
            <param name="refRotZ">Reference orientation: Rotation around z-axis or z component of the Rodriguez vector (in radians or without unit). Default: 0</param>
            <param name="orderOfRotation">Meaning of the rotation values of the reference orientation. Default: "gba"</param>
            <param name="longitudeMin">Minimum longitude of the model views. Default: -0.35</param>
            <param name="longitudeMax">Maximum longitude of the model views. Default: 0.35</param>
            <param name="latitudeMin">Minimum latitude of the model views. Default: -0.35</param>
            <param name="latitudeMax">Maximum latitude of the model views. Default: 0.35</param>
            <param name="camRollMin">Minimum camera roll angle of the model views. Default: -3.1416</param>
            <param name="camRollMax">Maximum camera roll angle of the model views. Default: 3.1416</param>
            <param name="distMin">Minimum camera-object-distance of the model views. Default: 0.3</param>
            <param name="distMax">Maximum camera-object-distance of the model views. Default: 0.4</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 10</param>
            <param name="genParamNames">Names of (optional) parameters for controlling the behavior of the operator. Default: []</param>
            <param name="genParamValues">Values of the optional generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel3D.DeserializeShapeModel3d(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized 3D shape model.
              Modified instance represents: Handle of the 3D shape model.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel3D.SerializeShapeModel3d">
            <summary>
              Serialize a 3D shape model.
              Instance represents: Handle of the 3D shape model.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HShapeModel3D.ReadShapeModel3d(System.String)">
            <summary>
              Read a 3D shape model from a file.
              Modified instance represents: Handle of the 3D shape model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel3D.WriteShapeModel3d(System.String)">
            <summary>
              Write a 3D shape model to a file.
              Instance represents: Handle of the 3D shape model.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel3D.TransPoseShapeModel3d(HalconDotNet.HPose,System.String)">
            <summary>
              Transform a pose that refers to the coordinate system of a 3D object model to a pose that refers to the reference coordinate system of a 3D shape model and vice versa.
              Instance represents: Handle of the 3D shape model.
            </summary>
            <param name="poseIn">Pose to be transformed in the source system.</param>
            <param name="transformation">Direction of the transformation. Default: "ref_to_model"</param>
            <returns>Transformed 3D pose in the target system.</returns>
        </member>
        <member name="M:HalconDotNet.HShapeModel3D.ProjectShapeModel3d(HalconDotNet.HTuple,HalconDotNet.HPose,System.String,HalconDotNet.HTuple)">
            <summary>
              Project the edges of a 3D shape model into image coordinates.
              Instance represents: Handle of the 3D shape model.
            </summary>
            <param name="camParam">Internal camera parameters.</param>
            <param name="pose">3D pose of the 3D shape model in the world coordinate system.</param>
            <param name="hiddenSurfaceRemoval">Remove hidden surfaces? Default: "true"</param>
            <param name="minFaceAngle">Smallest face angle for which the edge is displayed Default: 0.523599</param>
            <returns>Contour representation of the model view.</returns>
        </member>
        <member name="M:HalconDotNet.HShapeModel3D.ProjectShapeModel3d(HalconDotNet.HTuple,HalconDotNet.HPose,System.String,System.Double)">
            <summary>
              Project the edges of a 3D shape model into image coordinates.
              Instance represents: Handle of the 3D shape model.
            </summary>
            <param name="camParam">Internal camera parameters.</param>
            <param name="pose">3D pose of the 3D shape model in the world coordinate system.</param>
            <param name="hiddenSurfaceRemoval">Remove hidden surfaces? Default: "true"</param>
            <param name="minFaceAngle">Smallest face angle for which the edge is displayed Default: 0.523599</param>
            <returns>Contour representation of the model view.</returns>
        </member>
        <member name="M:HalconDotNet.HShapeModel3D.GetShapeModel3dContours(System.Int32,System.Int32,HalconDotNet.HPose@)">
            <summary>
              Return the contour representation of a 3D shape model view.
              Instance represents: Handle of the 3D shape model.
            </summary>
            <param name="level">Pyramid level for which the contour representation should be returned. Default: 1</param>
            <param name="view">View for which the contour representation should be returned. Default: 1</param>
            <param name="viewPose">3D pose of the 3D shape model at the current view.</param>
            <returns>Contour representation of the model view.</returns>
        </member>
        <member name="M:HalconDotNet.HShapeModel3D.GetShapeModel3dParams(HalconDotNet.HTuple)">
            <summary>
              Return the parameters of a 3D shape model.
              Instance represents: Handle of the 3D shape model.
            </summary>
            <param name="genParamNames">Names of the generic parameters that are to be queried for the 3D shape model. Default: "num_levels_max"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HShapeModel3D.GetShapeModel3dParams(System.String)">
            <summary>
              Return the parameters of a 3D shape model.
              Instance represents: Handle of the 3D shape model.
            </summary>
            <param name="genParamNames">Names of the generic parameters that are to be queried for the 3D shape model. Default: "num_levels_max"</param>
            <returns>Values of the generic parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HShapeModel3D.FindShapeModel3d(HalconDotNet.HImage,System.Double,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Find the best matches of a 3D shape model in an image.
              Instance represents: Handle of the 3D shape model.
            </summary>
            <param name="image">Input image in which the model should be found.</param>
            <param name="minScore">Minimum score of the instances of the model to be found. Default: 0.7</param>
            <param name="greediness">"Greediness" of the search heuristic (0: safe but slow; 1: fast but matches may be missed). Default: 0.9</param>
            <param name="numLevels">Number of pyramid levels used in the matching (and lowest pyramid level to use if $|NumLevels| = 2$). Default: 0</param>
            <param name="genParamNames">Names of (optional) parameters for controlling the behavior of the operator. Default: []</param>
            <param name="genParamValues">Values of the optional generic parameters. Default: []</param>
            <param name="covPose">6 standard deviations or 36 covariances of the pose parameters.</param>
            <param name="score">Score of the found instances of the 3D shape model.</param>
            <returns>3D pose of the 3D shape model.</returns>
        </member>
        <member name="M:HalconDotNet.HShapeModel3D.CreateShapeModel3d(HalconDotNet.HObjectModel3D,HalconDotNet.HTuple,System.Double,System.Double,System.Double,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Prepare a 3D object model for matching.
              Modified instance represents: Handle of the 3D shape model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="camParam">Internal camera parameters.</param>
            <param name="refRotX">Reference orientation: Rotation around x-axis or x component of the Rodriguez vector (in radians or without unit). Default: 0</param>
            <param name="refRotY">Reference orientation: Rotation around y-axis or y component of the Rodriguez vector (in radians or without unit). Default: 0</param>
            <param name="refRotZ">Reference orientation: Rotation around z-axis or z component of the Rodriguez vector (in radians or without unit). Default: 0</param>
            <param name="orderOfRotation">Meaning of the rotation values of the reference orientation. Default: "gba"</param>
            <param name="longitudeMin">Minimum longitude of the model views. Default: -0.35</param>
            <param name="longitudeMax">Maximum longitude of the model views. Default: 0.35</param>
            <param name="latitudeMin">Minimum latitude of the model views. Default: -0.35</param>
            <param name="latitudeMax">Maximum latitude of the model views. Default: 0.35</param>
            <param name="camRollMin">Minimum camera roll angle of the model views. Default: -3.1416</param>
            <param name="camRollMax">Maximum camera roll angle of the model views. Default: 3.1416</param>
            <param name="distMin">Minimum camera-object-distance of the model views. Default: 0.3</param>
            <param name="distMax">Maximum camera-object-distance of the model views. Default: 0.4</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 10</param>
            <param name="genParamNames">Names of (optional) parameters for controlling the behavior of the operator. Default: []</param>
            <param name="genParamValues">Values of the optional generic parameters. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HShapeModel3D.CreateShapeModel3d(HalconDotNet.HObjectModel3D,HalconDotNet.HTuple,System.Double,System.Double,System.Double,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.String,System.Int32)">
            <summary>
              Prepare a 3D object model for matching.
              Modified instance represents: Handle of the 3D shape model.
            </summary>
            <param name="objectModel3D">Handle of the 3D object model.</param>
            <param name="camParam">Internal camera parameters.</param>
            <param name="refRotX">Reference orientation: Rotation around x-axis or x component of the Rodriguez vector (in radians or without unit). Default: 0</param>
            <param name="refRotY">Reference orientation: Rotation around y-axis or y component of the Rodriguez vector (in radians or without unit). Default: 0</param>
            <param name="refRotZ">Reference orientation: Rotation around z-axis or z component of the Rodriguez vector (in radians or without unit). Default: 0</param>
            <param name="orderOfRotation">Meaning of the rotation values of the reference orientation. Default: "gba"</param>
            <param name="longitudeMin">Minimum longitude of the model views. Default: -0.35</param>
            <param name="longitudeMax">Maximum longitude of the model views. Default: 0.35</param>
            <param name="latitudeMin">Minimum latitude of the model views. Default: -0.35</param>
            <param name="latitudeMax">Maximum latitude of the model views. Default: 0.35</param>
            <param name="camRollMin">Minimum camera roll angle of the model views. Default: -3.1416</param>
            <param name="camRollMax">Maximum camera roll angle of the model views. Default: 3.1416</param>
            <param name="distMin">Minimum camera-object-distance of the model views. Default: 0.3</param>
            <param name="distMax">Maximum camera-object-distance of the model views. Default: 0.4</param>
            <param name="minContrast">Minimum contrast of the objects in the search images. Default: 10</param>
            <param name="genParamNames">Names of (optional) parameters for controlling the behavior of the operator. Default: []</param>
            <param name="genParamValues">Values of the optional generic parameters. Default: []</param>
        </member>
        <member name="T:HalconDotNet.HOCRSvm">
            <summary>Represents an instance of a SVM OCR classifier.</summary>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.#ctor(System.String)">
            <summary>
              Read a SVM-based OCR classifier from a file.
              Modified instance represents: Handle of the OCR classifier.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.#ctor(System.Int32,System.Int32,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Double,System.Double,System.String,System.String,System.Int32)">
            <summary>
              Create an OCR classifier using a support vector machine.
              Modified instance represents: Handle of the OCR classifier.
            </summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 8</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 10</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters. Default: "constant"</param>
            <param name="features">Features to be used for classification. Default: "default"</param>
            <param name="characters">All characters of the character set to be read. Default: ["0","1","2","3","4","5","6","7","8","9"]</param>
            <param name="kernelType">The kernel type. Default: "rbf"</param>
            <param name="kernelParam">Additional parameter for the kernel function. Default: 0.02</param>
            <param name="nu">Regularization constant of the SVM. Default: 0.05</param>
            <param name="mode">The mode of the SVM. Default: "one-versus-one"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "normalization"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.#ctor(System.Int32,System.Int32,System.String,System.String,HalconDotNet.HTuple,System.String,System.Double,System.Double,System.String,System.String,System.Int32)">
            <summary>
              Create an OCR classifier using a support vector machine.
              Modified instance represents: Handle of the OCR classifier.
            </summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 8</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 10</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters. Default: "constant"</param>
            <param name="features">Features to be used for classification. Default: "default"</param>
            <param name="characters">All characters of the character set to be read. Default: ["0","1","2","3","4","5","6","7","8","9"]</param>
            <param name="kernelType">The kernel type. Default: "rbf"</param>
            <param name="kernelParam">Additional parameter for the kernel function. Default: 0.02</param>
            <param name="nu">Regularization constant of the SVM. Default: 0.05</param>
            <param name="mode">The mode of the SVM. Default: "one-versus-one"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "normalization"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.SelectFeatureSetTrainfSvmProtected(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Select an optimal combination of features to classify OCR data from a (protected) training file.
              Modified instance represents: Trained OCR-SVM Classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="password">Passwords for protected training files.</param>
            <param name="featureList">List of features that should be considered for selection. Default: ["zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"]</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="width">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 15</param>
            <param name="height">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 16</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="score">Achieved score using tow-fold cross-validation.</param>
            <returns>Selected feature set, contains only entries from  FeatureList.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.SelectFeatureSetTrainfSvmProtected(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Select an optimal combination of features to classify OCR data from a (protected) training file.
              Modified instance represents: Trained OCR-SVM Classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="password">Passwords for protected training files.</param>
            <param name="featureList">List of features that should be considered for selection. Default: ["zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"]</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="width">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 15</param>
            <param name="height">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 16</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="score">Achieved score using tow-fold cross-validation.</param>
            <returns>Selected feature set, contains only entries from  FeatureList.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.SelectFeatureSetTrainfSvm(HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal combination of features to classify OCR  data.
              Modified instance represents: Trained OCR-SVM Classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="featureList">List of features that should be considered for selection. Default: ["zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"]</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="width">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 15</param>
            <param name="height">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 16</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="score">Achieved score using tow-fold cross-validation.</param>
            <returns>Selected feature set, contains only entries from  FeatureList.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.SelectFeatureSetTrainfSvm(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal combination of features to classify OCR  data.
              Modified instance represents: Trained OCR-SVM Classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: ""</param>
            <param name="featureList">List of features that should be considered for selection. Default: ["zoom_factor","ratio","width","height","foreground","foreground_grid_9","foreground_grid_16","anisometry","compactness","convexity","moments_region_2nd_invar","moments_region_2nd_rel_invar","moments_region_3rd_invar","moments_central","phi","num_connect","num_holes","projection_horizontal","projection_vertical","projection_horizontal_invar","projection_vertical_invar","chord_histo","num_runs","pixel","pixel_invar","pixel_binary","gradient_8dir","cooc","moments_gray_plane"]</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="width">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 15</param>
            <param name="height">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 16</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="score">Achieved score using tow-fold cross-validation.</param>
            <returns>Selected feature set, contains only entries from  FeatureList.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.DeserializeOcrClassSvm(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized SVM-based OCR classifier.
              Modified instance represents: Handle of the OCR classifier.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.SerializeOcrClassSvm">
            <summary>
              Serialize a SVM-based OCR classifier
              Instance represents: Handle of the OCR classifier.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.ReadOcrClassSvm(System.String)">
            <summary>
              Read a SVM-based OCR classifier from a file.
              Modified instance represents: Handle of the OCR classifier.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.WriteOcrClassSvm(System.String)">
            <summary>
              Write an OCR classifier to a file.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.GetFeaturesOcrClassSvm(HalconDotNet.HImage,System.String)">
            <summary>
              Compute the features of a character.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="character">Input character.</param>
            <param name="transform">Should the feature vector be transformed with the preprocessing? Default: "true"</param>
            <returns>Feature vector of the character.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.DoOcrWordSvm(HalconDotNet.HRegion,HalconDotNet.HImage,System.String,System.Int32,System.Int32,System.String@,System.Double@)">
            <summary>
              Classify a related group of characters with an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="character">Characters to be recognized.</param>
            <param name="image">Gray values of the characters.</param>
            <param name="expression">Expression describing the allowed word structure.</param>
            <param name="numAlternatives">Number of classes per character considered for the internal word correction. Default: 3</param>
            <param name="numCorrections">Maximum number of corrected characters. Default: 2</param>
            <param name="word">Word text after classification and correction.</param>
            <param name="score">Measure of similarity between corrected word and uncorrected classification results.</param>
            <returns>Result of classifying the characters with the SVM.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.DoOcrMultiClassSvm(HalconDotNet.HRegion,HalconDotNet.HImage)">
            <summary>
              Classify multiple characters with an SVM-based OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="character">Characters to be recognized.</param>
            <param name="image">Gray values of the characters.</param>
            <returns>Result of classifying the characters with the SVM.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.DoOcrSingleClassSvm(HalconDotNet.HRegion,HalconDotNet.HImage,HalconDotNet.HTuple)">
            <summary>
              Classify a single character with an SVM-based OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="character">Character to be recognized.</param>
            <param name="image">Gray values of the character.</param>
            <param name="num">Number of best classes to determine. Default: 1</param>
            <returns>Result of classifying the character with the SVM.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.ReduceOcrClassSvm(System.String,System.Int32,System.Double)">
            <summary>
              Approximate a trained SVM-based OCR classifier by a reduced SVM.
              Instance represents: Original handle of SVM-based OCR-classifier.
            </summary>
            <param name="method">Type of postprocessing to reduce number of SVs. Default: "bottom_up"</param>
            <param name="minRemainingSV">Minimum number of remaining SVs. Default: 2</param>
            <param name="maxError">Maximum allowed error of reduction. Default: 0.001</param>
            <returns>SVMHandle of reduced OCR classifier.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.TrainfOcrClassSvmProtected(HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double,HalconDotNet.HTuple)">
            <summary>
              Train an OCR classifier with data from a (protected) training file.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="password">Passwords for protected training files.</param>
            <param name="epsilon">Stop parameter for training. Default: 0.001</param>
            <param name="trainMode">Mode of training. Default: "default"</param>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.TrainfOcrClassSvmProtected(System.String,System.String,System.Double,System.String)">
            <summary>
              Train an OCR classifier with data from a (protected) training file.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="password">Passwords for protected training files.</param>
            <param name="epsilon">Stop parameter for training. Default: 0.001</param>
            <param name="trainMode">Mode of training. Default: "default"</param>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.TrainfOcrClassSvm(HalconDotNet.HTuple,System.Double,HalconDotNet.HTuple)">
            <summary>
              Train an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="epsilon">Stop parameter for training. Default: 0.001</param>
            <param name="trainMode">Mode of training. Default: "default"</param>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.TrainfOcrClassSvm(System.String,System.Double,System.String)">
            <summary>
              Train an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="epsilon">Stop parameter for training. Default: 0.001</param>
            <param name="trainMode">Mode of training. Default: "default"</param>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.GetPrepInfoOcrClassSvm(HalconDotNet.HTuple,System.String,HalconDotNet.HTuple@)">
            <summary>
              Compute the information content of the preprocessed feature vectors of an SVM-based OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "principal_components"</param>
            <param name="cumInformationCont">Cumulative information content of the transformed feature vectors.</param>
            <returns>Relative information content of the transformed feature vectors.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.GetPrepInfoOcrClassSvm(System.String,System.String,HalconDotNet.HTuple@)">
            <summary>
              Compute the information content of the preprocessed feature vectors of an SVM-based OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="trainingFile">Names of the training files. Default: "ocr.trf"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "principal_components"</param>
            <param name="cumInformationCont">Cumulative information content of the transformed feature vectors.</param>
            <returns>Relative information content of the transformed feature vectors.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.GetSupportVectorNumOcrClassSvm(HalconDotNet.HTuple@)">
            <summary>
              Return the number of support vectors of an OCR classifier.
              Instance represents: OCR handle.
            </summary>
            <param name="numSVPerSVM">Number of SV of each sub-SVM.</param>
            <returns>Total number of support vectors.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.GetSupportVectorOcrClassSvm(HalconDotNet.HTuple)">
            <summary>
              Return the index of a support vector from a trained OCR classifier that is based on support vector machines.
              Instance represents: OCR handle.
            </summary>
            <param name="indexSupportVector">Number of stored support vectors.</param>
            <returns>Index of the support vector in the training set.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.GetParamsOcrClassSvm(System.Int32@,System.Int32@,System.String@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,System.String@,System.Double@,System.Double@,System.String@,System.String@,System.Int32@)">
            <summary>
              Return the parameters of an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed.</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed.</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters.</param>
            <param name="features">Features to be used for classification.</param>
            <param name="characters">Characters of the character set to be read.</param>
            <param name="kernelType">The kernel type.</param>
            <param name="kernelParam">Additional parameters for the kernel function.</param>
            <param name="nu">Regularization constant of the SVM.</param>
            <param name="mode">The mode of the SVM.</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors.</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization').</param>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.GetParamsOcrClassSvm(System.Int32@,System.Int32@,System.String@,System.String@,HalconDotNet.HTuple@,System.String@,System.Double@,System.Double@,System.String@,System.String@,System.Int32@)">
            <summary>
              Return the parameters of an OCR classifier.
              Instance represents: Handle of the OCR classifier.
            </summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed.</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed.</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters.</param>
            <param name="features">Features to be used for classification.</param>
            <param name="characters">Characters of the character set to be read.</param>
            <param name="kernelType">The kernel type.</param>
            <param name="kernelParam">Additional parameters for the kernel function.</param>
            <param name="nu">Regularization constant of the SVM.</param>
            <param name="mode">The mode of the SVM.</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors.</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization').</param>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.CreateOcrClassSvm(System.Int32,System.Int32,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String,System.Double,System.Double,System.String,System.String,System.Int32)">
            <summary>
              Create an OCR classifier using a support vector machine.
              Modified instance represents: Handle of the OCR classifier.
            </summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 8</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 10</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters. Default: "constant"</param>
            <param name="features">Features to be used for classification. Default: "default"</param>
            <param name="characters">All characters of the character set to be read. Default: ["0","1","2","3","4","5","6","7","8","9"]</param>
            <param name="kernelType">The kernel type. Default: "rbf"</param>
            <param name="kernelParam">Additional parameter for the kernel function. Default: 0.02</param>
            <param name="nu">Regularization constant of the SVM. Default: 0.05</param>
            <param name="mode">The mode of the SVM. Default: "one-versus-one"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "normalization"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HOCRSvm.CreateOcrClassSvm(System.Int32,System.Int32,System.String,System.String,HalconDotNet.HTuple,System.String,System.Double,System.Double,System.String,System.String,System.Int32)">
            <summary>
              Create an OCR classifier using a support vector machine.
              Modified instance represents: Handle of the OCR classifier.
            </summary>
            <param name="widthCharacter">Width of the rectangle to which the gray values of the segmented character are zoomed. Default: 8</param>
            <param name="heightCharacter">Height of the rectangle to which the gray values of the segmented character are zoomed. Default: 10</param>
            <param name="interpolation">Interpolation mode for the zooming of the characters. Default: "constant"</param>
            <param name="features">Features to be used for classification. Default: "default"</param>
            <param name="characters">All characters of the character set to be read. Default: ["0","1","2","3","4","5","6","7","8","9"]</param>
            <param name="kernelType">The kernel type. Default: "rbf"</param>
            <param name="kernelParam">Additional parameter for the kernel function. Default: 0.02</param>
            <param name="nu">Regularization constant of the SVM. Default: 0.05</param>
            <param name="mode">The mode of the SVM. Default: "one-versus-one"</param>
            <param name="preprocessing">Type of preprocessing used to transform the feature vectors. Default: "normalization"</param>
            <param name="numComponents">Preprocessing parameter: Number of transformed features (ignored for Preprocessing $=$ 'none' and Preprocessing $=$ 'normalization'). Default: 10</param>
        </member>
        <member name="T:HalconDotNet.HClassKnn">
            <summary>Represents an instance of a k-NearestNeighbor classifier.</summary>
        </member>
        <member name="M:HalconDotNet.HClassKnn.#ctor(System.String)">
            <summary>
              Read the k-NN classifier from a file.
              Modified instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="fileName">File name of the classifier.</param>
        </member>
        <member name="M:HalconDotNet.HClassKnn.#ctor(HalconDotNet.HTuple)">
            <summary>
              Create a k-nearest neighbors (k-NN) classifier.
              Modified instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="numDim">Number of dimensions of the feature. Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HClassKnn.ClassifyImageClassKnn(HalconDotNet.HImage,HalconDotNet.HImage@,System.Double)">
            <summary>
              Classify an image with a k-Nearest-Neighbor classifier.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="image">Input image.</param>
            <param name="distanceImage">Distance of the pixel's nearest neighbor.</param>
            <param name="rejectionThreshold">Threshold for the rejection of the classification. Default: 0.5</param>
            <returns>Segmented classes.</returns>
        </member>
        <member name="M:HalconDotNet.HClassKnn.AddSamplesImageClassKnn(HalconDotNet.HImage,HalconDotNet.HRegion)">
            <summary>
              Add training samples from an image to the training data of a k-Nearest-Neighbor classifier.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="image">Training image.</param>
            <param name="classRegions">Regions of the classes to be trained.</param>
        </member>
        <member name="M:HalconDotNet.HClassKnn.GetClassTrainDataKnn">
            <summary>
              Get the training data of a k-nearest neighbors (k-NN) classifier.
              Instance represents: Handle of the k-NN classifier  that contains training data.
            </summary>
            <returns>Handle of the training data of the classifier.</returns>
        </member>
        <member name="M:HalconDotNet.HClassKnn.AddClassTrainDataKnn(HalconDotNet.HClassTrainData)">
            <summary>
              Add training data to a k-nearest neighbors (k-NN) classifier.
              Instance represents: Handle of a k-NN which receives the  training data.
            </summary>
            <param name="classTrainDataHandle">Training data for a classifier.</param>
        </member>
        <member name="M:HalconDotNet.HClassKnn.SelectFeatureSetKnn(HalconDotNet.HClassTrainData,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal subset from a set of features to solve a certain  classification problem.
              Modified instance represents: A trained k-NN classifier using only the selected  features.
            </summary>
            <param name="classTrainDataHandle">Handle of the training data.</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
            <returns>The selected feature set, contains  indices or names.</returns>
        </member>
        <member name="M:HalconDotNet.HClassKnn.SelectFeatureSetKnn(HalconDotNet.HClassTrainData,System.String,System.String,System.Double,HalconDotNet.HTuple@)">
            <summary>
              Selects an optimal subset from a set of features to solve a certain  classification problem.
              Modified instance represents: A trained k-NN classifier using only the selected  features.
            </summary>
            <param name="classTrainDataHandle">Handle of the training data.</param>
            <param name="selectionMethod">Method to perform the selection. Default: "greedy"</param>
            <param name="genParamNames">Names of generic parameters to configure the selection process and the classifier. Default: []</param>
            <param name="genParamValues">Values of generic parameters to configure the  selection process and the classifier. Default: []</param>
            <param name="score">The achieved score using two-fold cross-validation.</param>
            <returns>The selected feature set, contains  indices or names.</returns>
        </member>
        <member name="M:HalconDotNet.HClassKnn.ClearAllClassKnn">
            <summary>Clear all k-NN classifiers.</summary>
        </member>
        <member name="M:HalconDotNet.HClassKnn.GetSampleNumClassKnn">
            <summary>
              Return the number of training samples stored in the training data of a k-nearest neighbors (k-NN) classifier.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <returns>Number of stored training samples.</returns>
        </member>
        <member name="M:HalconDotNet.HClassKnn.GetSampleClassKnn(System.Int32,HalconDotNet.HTuple@)">
            <summary>
              Return a training sample from the training data of a k-nearest neighbors  (k-NN) classifier.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="indexSample">Index of the training sample.</param>
            <param name="classID">Class of the training sample.</param>
            <returns>Feature vector of the training sample.</returns>
        </member>
        <member name="M:HalconDotNet.HClassKnn.DeserializeClassKnn(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized k-NN classifier.
              Modified instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HClassKnn.SerializeClassKnn">
            <summary>
              Serialize a k-NN classifier.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HClassKnn.ReadClassKnn(System.String)">
            <summary>
              Read the k-NN classifier from a file.
              Modified instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="fileName">File name of the classifier.</param>
        </member>
        <member name="M:HalconDotNet.HClassKnn.WriteClassKnn(System.String)">
            <summary>
              Save the k-NN classifier in a file.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="fileName">Name of the file in which the classifier will be written.</param>
        </member>
        <member name="M:HalconDotNet.HClassKnn.GetParamsClassKnn(HalconDotNet.HTuple)">
            <summary>
              Get parameters of a k-NN classification.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="genParamNames">Names of the parameters that can be read from the k-NN classifier. Default: ["method","k"]</param>
            <returns>Values of the selected parameters.</returns>
        </member>
        <member name="M:HalconDotNet.HClassKnn.SetParamsClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Set parameters for k-NN classification.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the k-NN classifier. Default: ["method","k","max_num_classes"]</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the k-NN classifier. Default: ["classes_distance",5,1]</param>
        </member>
        <member name="M:HalconDotNet.HClassKnn.ClassifyClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Search for the next neighbors for a given feature vector.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="features">Features that should be classified.</param>
            <param name="rating">A rating for the results. This value contains either a  distance, a frequency or a weighted frequency.</param>
            <returns>The classification result, either class IDs or sample  indices.</returns>
        </member>
        <member name="M:HalconDotNet.HClassKnn.TrainClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Creates the search trees for a k-NN classifier.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the k-NN classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the k-NN classifier creation. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HClassKnn.AddSampleClassKnn(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add a sample to a  k-nearest neighbors (k-NN) classifier.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="features">List of features to add.</param>
            <param name="classID">Class IDs of the features.</param>
        </member>
        <member name="M:HalconDotNet.HClassKnn.AddSampleClassKnn(System.Double,System.Int32)">
            <summary>
              Add a sample to a  k-nearest neighbors (k-NN) classifier.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="features">List of features to add.</param>
            <param name="classID">Class IDs of the features.</param>
        </member>
        <member name="M:HalconDotNet.HClassKnn.CreateClassKnn(HalconDotNet.HTuple)">
            <summary>
              Create a k-nearest neighbors (k-NN) classifier.
              Modified instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="numDim">Number of dimensions of the feature. Default: 10</param>
        </member>
        <member name="M:HalconDotNet.HClassKnn.CreateClassLutKnn(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a look-up table using a k-nearest neighbors classifier (k-NN) to classify byte images.
              Instance represents: Handle of the k-NN classifier.
            </summary>
            <param name="genParamNames">Names of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <param name="genParamValues">Values of the generic parameters that can be adjusted for the LUT classifier creation. Default: []</param>
            <returns>Handle of the LUT classifier.</returns>
        </member>
        <member name="T:HalconDotNet.HSampleIdentifier">
            <summary>Represents an instance of a sample identifier.</summary>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.#ctor(System.String)">
            <summary>
              Read a sample identifier from a file.
              Modified instance represents: Handle of the sample identifier.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.#ctor(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a new sample identifier.
              Modified instance represents: Handle of the sample identifier.
            </summary>
            <param name="paramName">Parameter name. Default: []</param>
            <param name="paramValue">Parameter value. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.DeserializeSampleIdentifier(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized sample identifier.
              Modified instance represents: Handle of the sample identifier.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.ReadSampleIdentifier(System.String)">
            <summary>
              Read a sample identifier from a file.
              Modified instance represents: Handle of the sample identifier.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.SerializeSampleIdentifier">
            <summary>
              Serialize a sample identifier.
              Instance represents: Handle of the sample identifier.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.WriteSampleIdentifier(System.String)">
            <summary>
              Write a sample identifier to a file.
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="fileName">File name.</param>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.ApplySampleIdentifier(HalconDotNet.HImage,System.Int32,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple@)">
            <summary>
              Identify objects with a sample identifier. 
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="image">Image showing the object to be identified.</param>
            <param name="numResults">Number of suggested object indices. Default: 1</param>
            <param name="ratingThreshold">Rating threshold. Default: 0.0</param>
            <param name="genParamName">Generic parameter name. Default: []</param>
            <param name="genParamValue">Generic parameter value. Default: []</param>
            <param name="rating">Rating value of the identified object.</param>
            <returns>Index of the identified object.</returns>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.ApplySampleIdentifier(HalconDotNet.HImage,System.Int32,System.Double,HalconDotNet.HTuple,HalconDotNet.HTuple,System.Double@)">
            <summary>
              Identify objects with a sample identifier. 
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="image">Image showing the object to be identified.</param>
            <param name="numResults">Number of suggested object indices. Default: 1</param>
            <param name="ratingThreshold">Rating threshold. Default: 0.0</param>
            <param name="genParamName">Generic parameter name. Default: []</param>
            <param name="genParamValue">Generic parameter value. Default: []</param>
            <param name="rating">Rating value of the identified object.</param>
            <returns>Index of the identified object.</returns>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.GetSampleIdentifierParam(System.String)">
            <summary>
              Get selected parameters of a sample identifier.
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="paramName">Parameter name. Default: "rating_method"</param>
            <returns>Parameter value.</returns>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.SetSampleIdentifierParam(System.String,HalconDotNet.HTuple)">
            <summary>
              Set selected parameters of a sample identifier.
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="paramName">Parameter name. Default: "rating_method"</param>
            <param name="paramValue">Parameter value. Default: "score_single"</param>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.SetSampleIdentifierParam(System.String,System.Double)">
            <summary>
              Set selected parameters of a sample identifier.
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="paramName">Parameter name. Default: "rating_method"</param>
            <param name="paramValue">Parameter value. Default: "score_single"</param>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.GetSampleIdentifierObjectInfo(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Retrieve information about an object of a sample identifier.
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="objectIdx">Index of the object for which information is retrieved.</param>
            <param name="infoName">Define, for which kind of object information is retrieved. Default: "num_training_objects"</param>
            <returns>Information about the object.</returns>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.GetSampleIdentifierObjectInfo(System.Int32,System.String)">
            <summary>
              Retrieve information about an object of a sample identifier.
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="objectIdx">Index of the object for which information is retrieved.</param>
            <param name="infoName">Define, for which kind of object information is retrieved. Default: "num_training_objects"</param>
            <returns>Information about the object.</returns>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.SetSampleIdentifierObjectInfo(HalconDotNet.HTuple,System.String,HalconDotNet.HTuple)">
            <summary>
              Define a name or a description for an object of a sample identifier.
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="objectIdx">Index of the object for which information is set.</param>
            <param name="infoName">Define, for which kind of object information is set. Default: "training_object_name"</param>
            <param name="infoValue">Information about the object.</param>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.SetSampleIdentifierObjectInfo(System.Int32,System.String,System.String)">
            <summary>
              Define a name or a description for an object of a sample identifier.
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="objectIdx">Index of the object for which information is set.</param>
            <param name="infoName">Define, for which kind of object information is set. Default: "training_object_name"</param>
            <param name="infoValue">Information about the object.</param>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.RemoveSampleIdentifierTrainingData(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Remove training data from a sample identifier.  
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="objectIdx">Index of the training object, from which samples should be removed.</param>
            <param name="objectSampleIdx">Index of the training sample that should be removed.</param>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.RemoveSampleIdentifierTrainingData(System.Int32,System.Int32)">
            <summary>
              Remove training data from a sample identifier.  
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="objectIdx">Index of the training object, from which samples should be removed.</param>
            <param name="objectSampleIdx">Index of the training sample that should be removed.</param>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.RemoveSampleIdentifierPreparationData(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Remove preparation data from a sample identifier.  
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="objectIdx">Index of the preparation object, of which samples should be removed.</param>
            <param name="objectSampleIdx">Index of the preparation sample that should be removed.</param>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.RemoveSampleIdentifierPreparationData(System.Int32,System.Int32)">
            <summary>
              Remove preparation data from a sample identifier.  
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="objectIdx">Index of the preparation object, of which samples should be removed.</param>
            <param name="objectSampleIdx">Index of the preparation sample that should be removed.</param>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.TrainSampleIdentifier(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Train a sample identifier.  
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="paramName">Parameter name. Default: []</param>
            <param name="paramValue">Parameter value. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.AddSampleIdentifierTrainingData(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add training data to an existing sample identifier. 
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="sampleImage">Image that shows an object.</param>
            <param name="objectIdx">Index of the object visible in the SampleImage.</param>
            <param name="genParamName">Generic parameter name. Default: []</param>
            <param name="genParamValue">Generic parameter value. Default: []</param>
            <returns>Index of the object sample.</returns>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.AddSampleIdentifierTrainingData(HalconDotNet.HImage,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add training data to an existing sample identifier. 
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="sampleImage">Image that shows an object.</param>
            <param name="objectIdx">Index of the object visible in the SampleImage.</param>
            <param name="genParamName">Generic parameter name. Default: []</param>
            <param name="genParamValue">Generic parameter value. Default: []</param>
            <returns>Index of the object sample.</returns>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.PrepareSampleIdentifier(System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Adapt the internal data structure of a sample identifier to the objects to be identified.  
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="removePreparationData">Indicates if the preparation data should be removed. Default: "true"</param>
            <param name="genParamName">Generic parameter name. Default: []</param>
            <param name="genParamValue">Generic parameter value. Default: []</param>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.AddSampleIdentifierPreparationData(HalconDotNet.HImage,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add preparation data to an existing sample identifier. 
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="sampleImage">Image that shows an object.</param>
            <param name="objectIdx">Index of the object visible in the SampleImage. Default: "unknown"</param>
            <param name="genParamName">Generic parameter name. Default: []</param>
            <param name="genParamValue">Generic parameter value. Default: []</param>
            <returns>Index of the object sample.</returns>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.AddSampleIdentifierPreparationData(HalconDotNet.HImage,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Add preparation data to an existing sample identifier. 
              Instance represents: Handle of the sample identifier.
            </summary>
            <param name="sampleImage">Image that shows an object.</param>
            <param name="objectIdx">Index of the object visible in the SampleImage. Default: "unknown"</param>
            <param name="genParamName">Generic parameter name. Default: []</param>
            <param name="genParamValue">Generic parameter value. Default: []</param>
            <returns>Index of the object sample.</returns>
        </member>
        <member name="M:HalconDotNet.HSampleIdentifier.CreateSampleIdentifier(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a new sample identifier.
              Modified instance represents: Handle of the sample identifier.
            </summary>
            <param name="paramName">Parameter name. Default: []</param>
            <param name="paramValue">Parameter value. Default: []</param>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_MSG_OK">
            <summary>Normal return value </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_MSG_TRUE">
            <summary>TRUE </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_MSG_FALSE">
            <summary>FALSE </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_MSG_VOID">
            <summary>Stop processing </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_MSG_FAIL">
            <summary>Call failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BREAK">
            <summary>for internal use </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CNCL">
            <summary>operator was generally canceled </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT1">
            <summary>Wrong type of control parameter: 1 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT2">
            <summary>Wrong type of control parameter: 2 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT3">
            <summary>Wrong type of control parameter: 3 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT4">
            <summary>Wrong type of control parameter: 4 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT5">
            <summary>Wrong type of control parameter: 5 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT6">
            <summary>Wrong type of control parameter: 6 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT7">
            <summary>Wrong type of control parameter: 7 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT8">
            <summary>Wrong type of control parameter: 8 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT9">
            <summary>Wrong type of control parameter: 9 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT10">
            <summary>Wrong type of control parameter: 10 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT11">
            <summary>Wrong type of control parameter: 11 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT12">
            <summary>Wrong type of control parameter: 12 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT13">
            <summary>Wrong type of control parameter: 13 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT14">
            <summary>Wrong type of control parameter: 14 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT15">
            <summary>Wrong type of control parameter: 15 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT16">
            <summary>Wrong type of control parameter: 16 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT17">
            <summary>Wrong type of control parameter: 17 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT18">
            <summary>Wrong type of control parameter: 18 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT19">
            <summary>Wrong type of control parameter: 19 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPT20">
            <summary>Wrong type of control parameter: 20 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV1">
            <summary>Wrong value of control parameter: 1 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV2">
            <summary>Wrong value of control parameter: 2 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV3">
            <summary>Wrong value of control parameter: 3 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV4">
            <summary>Wrong value of control parameter: 4 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV5">
            <summary>Wrong value of control parameter: 5 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV6">
            <summary>Wrong value of control parameter: 6 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV7">
            <summary>Wrong value of control parameter: 7 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV8">
            <summary>Wrong value of control parameter: 8 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV9">
            <summary>Wrong value of control parameter: 9 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV10">
            <summary>Wrong value of control parameter: 10 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV11">
            <summary>Wrong value of control parameter: 11 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV12">
            <summary>Wrong value of control parameter: 12 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV13">
            <summary>Wrong value of control parameter: 13 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV14">
            <summary>Wrong value of control parameter: 14 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV15">
            <summary>Wrong value of control parameter: 15 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV16">
            <summary>Wrong value of control parameter: 16 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV17">
            <summary>Wrong value of control parameter: 17 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV18">
            <summary>Wrong value of control parameter: 18 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV19">
            <summary>Wrong value of control parameter: 19 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPV20">
            <summary>Wrong value of control parameter: 20 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WCOMP">
            <summary>Wrong value of component </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WGCOMP">
            <summary>Wrong value of gray value component </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN1">
            <summary>Wrong number of values of ctrl.par.: 1 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN2">
            <summary>Wrong number of values of ctrl.par.: 2 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN3">
            <summary>Wrong number of values of ctrl.par.: 3 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN4">
            <summary>Wrong number of values of ctrl.par.: 4 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN5">
            <summary>Wrong number of values of ctrl.par.: 5 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN6">
            <summary>Wrong number of values of ctrl.par.: 6 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN7">
            <summary>Wrong number of values of ctrl.par.: 7 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN8">
            <summary>Wrong number of values of ctrl.par.: 8 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN9">
            <summary>Wrong number of values of ctrl.par.: 9 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN10">
            <summary>Wrong number of values of ctrl.par.: 10 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN11">
            <summary>Wrong number of values of ctrl.par.: 11 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN12">
            <summary>Wrong number of values of ctrl.par.: 12 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN13">
            <summary>Wrong number of values of ctrl.par.: 13 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN14">
            <summary>Wrong number of values of ctrl.par.: 14 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN15">
            <summary>Wrong number of values of ctrl.par.: 15 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN16">
            <summary>Wrong number of values of ctrl.par.: 16 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN17">
            <summary>Wrong number of values of ctrl.par.: 17 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN18">
            <summary>Wrong number of values of ctrl.par.: 18 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN19">
            <summary>Wrong number of values of ctrl.par.: 19 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIPN20">
            <summary>Wrong number of values of ctrl.par.: 20 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IONTB">
            <summary>Number of input objects too big </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WION1">
            <summary>Wrong number of values of object par.: 1 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WION2">
            <summary>Wrong number of values of object par.: 2 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WION3">
            <summary>Wrong number of values of object par.: 3 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WION4">
            <summary>Wrong number of values of object par.: 4 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WION5">
            <summary>Wrong number of values of object par.: 5 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WION6">
            <summary>Wrong number of values of object par.: 6 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WION7">
            <summary>Wrong number of values of object par.: 7 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WION8">
            <summary>Wrong number of values of object par.: 8 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WION9">
            <summary>Wrong number of values of object par.: 9 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OONTB">
            <summary>Number of output objects too big </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WNP">
            <summary>Wrong specification of parameter (error in file: xxx.def) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HONI">
            <summary>Initialize Halcon: reset_obj_db(Width,Height,Components) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRKNN">
            <summary>Used number of symbolic object names too big </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_LICENSE">
            <summary>No license found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_LS_SERVER">
            <summary>Lost connection to license server </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_MODULES">
            <summary>No modules in license (no VENDOR_STRING) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_LIC_OPER">
            <summary>No license for this operator </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BAD_TZ">
            <summary>Time zone offset from GMT is &gt; 24 hours </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADPLATFORM">
            <summary>Vendor keys do not support this platform </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_LM_BADKEYDATA">
            <summary>Bad vendor keys </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADVENDORDATA">
            <summary>Unknown vendor key type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_CANTMALLOC">
            <summary>malloc() call failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_EXPIREDKEYS">
            <summary>Vendor keys have expired </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_FUNCNOTAVAIL">
            <summary>Second call to lc_inti() (multiple jobs), and vendore keys do not support multiple jobs </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOKEYDATA">
            <summary>Vendor key data not supplied </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_LIBRARYMISMATCH">
            <summary>lmclient.h/liblmgr.a version mismatch </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NONETWORK">
            <summary>Networking software not available on this machine </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_OLDVENDORDATA">
            <summary>Old vendor keys supplied </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADCODE">
            <summary>License key in license file does not match other data in file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADHANDSHAKE">
            <summary>Encryption handshake with daemon failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADPARAM">
            <summary>'key' structure is incorrect type, or feature == NULL, or num_licenses == 0 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADSYSDATE">
            <summary>System clock has been set back </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BAD_VERSION">
            <summary>Version argument is invalid floating point format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BUSYNEWSERV">
            <summary>License server busy starting another copy of itself </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_CANTCONNECT">
            <summary>Cannot establish a connection with a license server </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_FEATQUEUE">
            <summary>Feature is queued. lc_status will determine when it is available </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_FUNC_NOT_AVAIL">
            <summary>Vendor keys do not support this function </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_LOCALFILTER">
            <summary>Checkout request filtered by the vendor-defined filter routine </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_MAXLIMIT">
            <summary>Checkout exceeds MAX specified in options file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_MAXUSERS">
            <summary>All licenses in use </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NO_SERVER_IN_FILE">
            <summary>No license server specified for counted license </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOFEATURE">
            <summary>Can not find feature in the license file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOSERVSUPP">
            <summary>Server has different license file than client - client's license has feature, but server's does not </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_OLDVER">
            <summary>License file does not support a version this new </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_PLATNOTLIC">
            <summary>This platform not authorized by license - running on platform not included in PLATFORMS list </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_SERVBUSY">
            <summary>License server busy </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOCONFFILE">
            <summary>Could not find license.dat </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADFILE">
            <summary>Invalid license file syntax </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOSERVER">
            <summary>Cannot connect to a license server </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOSERVICE">
            <summary>No TCP "license" service exists </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOSOCKET">
            <summary>No socket connection to license manager server </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOTTHISHOST">
            <summary>Invalid host </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_LONGGONE">
            <summary>Feature has expired </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADDATE">
            <summary>Invalid date format in license file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADCOMM">
            <summary>Invalid returned data from license server </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADHOST">
            <summary>Cannot find SERVER hostname in network database </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_CANTREAD">
            <summary>Cannot read data from license server </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_CANTWRITE">
            <summary>Cannot write data to license server </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_SELECTERR">
            <summary>Error in select system call </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_CHECKINBAD">
            <summary>Feature checkin failure detected at license </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_USERSQUEUED">
            <summary>Users are queued for this feature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_SERVLONGGONE">
            <summary>License server does not support this version of this feature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_TOOMANY">
            <summary>Request for more licenses than this feature supports </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_CANTREADKMEM">
            <summary>Cannot read /dev/kmem </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_CANTREADVMUNIX">
            <summary>Cannot read /vmunix </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_CANTFINDETHER">
            <summary>Cannot find ethernet device </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOREADLIC">
            <summary>Cannot read license file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_TOOEARLY">
            <summary>Feature not yet available </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOSUCHATTR">
            <summary>No such attribute </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_CLOCKBAD">
            <summary>Clock difference too large between client and server </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_FEATCORRUPT">
            <summary>Feature database corrupted in daemon </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADFEATPARAM">
            <summary>Duplicate selection mismatch for this feature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_FEATEXCLUDE">
            <summary>User/host on EXCLUDE list for feature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_FEATNOTINCLUDE">
            <summary>User/host not on INCLUDE list for feature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NEVERCHECKOUT">
            <summary>Feature was never checked out </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADKEYDATA">
            <summary>Invalid FLEXlm key data supplied </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOCLOCKCHECK">
            <summary>Clock setting check not available in daemon </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_DATE_TOOBIG">
            <summary>Date too late for binary format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOFLEXLMINIT">
            <summary>FLEXlm not initialized </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOSERVRESP">
            <summary>Server did not respond to message </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_CHECKOUTFILTERED">
            <summary>Request rejected by vendor defined filter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOFEATSET">
            <summary>No FEATURESET line present in license file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADFEATSET">
            <summary>Incorrect FEATURESET line in license file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_CANTCOMPUTEFEATSET">
            <summary>Cannot compute FEATURESET line </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_SOCKETFAIL">
            <summary>socket() call failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_SETSOCKFAIL">
            <summary>setsockopt() failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADCHECKSUM">
            <summary>Message checksum failure </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_SERVNOREADLIC">
            <summary>Cannot read license file from server </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOTLICADMIN">
            <summary>Not a license administrator </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_REMOVETOOSOON">
            <summary>lmremove request too soon </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_ENDPATH">
            <summary>Attempt to read beyond the end of LF path </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_VMS_SETIMR_FAILED">
            <summary>SYS$SETIMR call failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_INTERNAL_ERROR">
            <summary>Internal FLEXlm Erro - Please report to Globetrotter Software </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOADMINAPI">
            <summary>FLEXadmin API functions not avilable </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADPKG">
            <summary>Invalid PACKAGE line in license file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_SERVOLDVER">
            <summary>Server FLEXlm version older than client's </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_USER_BASED">
            <summary>Incorrect number of USERS/HOSTS INCLUDED in options file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOSERVCAP">
            <summary>Server doesn't support this request </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_OBJECTUSED">
            <summary>This license object already in use </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_FUTURE_FILE">
            <summary>Future license file format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_SERVER_REMOVED">
            <summary>Feature removed during lmreread </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_POOL">
            <summary>This feature is available in a different license pool </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOT_THIS_HOST">
            <summary>Network connect to THIS_HOST failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_HOSTDOWN">
            <summary>Server node is down or not responding </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_VENDOR_DOWN">
            <summary>The desired vendor daemon is down </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADDECFILE">
            <summary>The decimal format license is typed incorrectly </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_RESVFOROTHERS">
            <summary>All licenses are reserved for others </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_TSOK_ERR">
            <summary>Terminal Server remote client not allowed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BORROW_TOOLONG">
            <summary>Cannot borrow that long </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_SERVER_MAXED_OUT">
            <summary>License server out of network connections </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NODONGLE">
            <summary>Dongle not attached, or can't read dongle </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NODONGLEDRIVER">
            <summary>Missing dongle driver </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_FLEXLOCK2CKOUT">
            <summary>FLEXlock checkouts attempted </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_SIGN_REQ">
            <summary>SIGN= attribute required </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOCROSUPPORT">
            <summary>CRO not supported for this platform </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BORROW_LINGER_ERR">
            <summary>BORROW failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BORROW_EXPIRED">
            <summary>BORROW period has expired </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_FLOATOK_ONEHOSTID">
            <summary>FLOAT_OK license must have exactly one dongle hostid </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BORROW_DELETE_ERR">
            <summary>Unable to delete local borrow info" </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BORROW_RETURN_EARLY_ERR">
            <summary>Returning borrowed license early not enabled </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BORROW_RETURN_SERVER_ERR">
            <summary>Returning borrowed license on server failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_CANT_CHECKOUT_JUST_PACKAGE">
            <summary>Checkout just a PACKAGE failed</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_COMPOSITEID_INIT_ERR">
            <summary>Composite Hostid not initialized </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_COMPOSITEID_ITEM_ERR">
            <summary>An item needed for Composite Hostid missing or invalid </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BORROW_MATCH_ERR">
            <summary>Borrowed license doesn't match any known server license </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_EVENTLOG_INIT_ERR">
            <summary>Error enabling event log </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_EVENTLOG_DISABLED">
            <summary>Event logging is disabled </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_EVENTLOG_WRITE_ERR">
            <summary>Error writing to event log </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_TIMEOUT">
            <summary>Timeout </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADCOMMAND">
            <summary>Bad message command </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_SOCKET_BROKEN_PIPE">
            <summary>Error writing to socket </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_INVALID_SIGNATURE">
            <summary>Failed to generate version specific license </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_UNCOUNTED_NOT_SUPPORTED">
            <summary>Vers.-specific signatures not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_REDUNDANT_SIGNATURES">
            <summary>License template contains redundant signature specifiers </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADCODE_V71_LK">
            <summary>Invalid V71_LK signature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADCODE_V71_SIGN">
            <summary>Invalid V71_SIGN signature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADCODE_V80_LK">
            <summary>Invalid V80_LK signature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADCODE_V80_SIGN">
            <summary>Invalid V80_SIGN signature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADCODE_V81_LK">
            <summary>Invalid V81_LK signature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADCODE_V81_SIGN">
            <summary>Invalid V81_SIGN signature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADCODE_V81_SIGN2">
            <summary>Invalid V81_SIGN2 signature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADCODE_V84_LK">
            <summary>Invalid V84_LK signature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADCODE_V84_SIGN">
            <summary>Invalid V84_SIGN signature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADCODE_V84_SIGN2">
            <summary>Invalid V84_SIGN2 signature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_LK_REQ">
            <summary>License key required but missing from the certificate </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADAUTH">
            <summary>Bad AUTH={} signature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_REPAIR_NEEDED">
            <summary>TS record invalid </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_TS_OPEN">
            <summary>Cannot open TS </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BAD_FULFILLMENT">
            <summary>Invalid Fulfillment record </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BAD_ACTREQ">
            <summary>Invalid activation request received </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_TS_NO_FULFILL_MATCH">
            <summary>No fulfillment exists in trusted storage which matches the request </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BAD_ACT_RESP">
            <summary>Invalid activation response received </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_CANTRETURN">
            <summary>Can't return the fulfillment </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_RETURNEXCEEDSMAX">
            <summary>Return would exceed max count(s) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NO_REPAIRS_LEFT">
            <summary>No repair count left </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_NOT_ALLOWED">
            <summary>Specified operation is not allowed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_ENTLEXCLUDE">
            <summary>User/host on EXCLUDE list for entitlement </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_ENTLNOTINCLUDE">
            <summary>User/host not in INCLUDE list for entitlement </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_ACTIVATION">
            <summary>Activation error </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_TS_BADDATE">
            <summary>Invalid date format in trusted storage </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_ENCRYPTION_FAILED">
            <summary>Message encryption failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_DECRYPTION_FAILED">
            <summary>Message decryption failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BADCONTEXT">
            <summary>Bad filter context </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_SUPERSEDE_CONFLICT">
            <summary>SUPERSEDE feature conflict </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_INVALID_SUPERSEDE_SIGN">
            <summary>Invalid SUPERSEDE_SIGN syntax </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_SUPERSEDE_SIGN_EMPTYSTRING">
            <summary>SUPERSEDE_SIGN does not contain a feature name and license signature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_ONE_TSOK_PLATFORM_ERR">
            <summary>ONE_TS_OK is not supported in this Windows Platform </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_ONE_TSOK_MTX_ERR">
            <summary>Internal error </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_ONE_TSOK_ERR">
            <summary>Only one terminal server remote client checkout is allowed for this feature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_SSIDNULL">
            <summary>Internal error </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_SMTXNOTREL">
            <summary>Internal error </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_MTXNOPERM">
            <summary>Internal error </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_COMPOSITEID_ETHER_ERR">
            <summary>More than one ethernet hostid not supported in composite hostid definition </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_LIC_FILE_CHAR_EXCEED">
            <summary>The number of characters in the license file paths exceeds the permissible limit </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_TZ_INVALID_SYNTAX">
            <summary>Invalid TZ keyword syntax </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_TZ_INVALID_TZONE_SPEC">
            <summary>Invalid time zone override specification in the client </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_TZ_INVALID_TZONE_INFO">
            <summary>The time zone information could not be obtained </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_TZ_UNAUTHORIZED">
            <summary>License client time zone not authorized for license rights </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_INVALID_VM_PLATFORMS">
            <summary>Invalid syntax for VM_PLATFORMS keyword </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_VM_PHYSICAL_ONLY">
            <summary>Feature can be checked out from physical machine only </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_VM_VIRTUAL_ONLY">
            <summary>Feature can be checked out from virtual machine only </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_VM_BAD_KEY">
            <summary>Vendor keys do not support Virtualization feature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_MAXLIMIT_EXCEED">
            <summary>Checkout request denied as it exceeds the MAX limit specified in the options file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BA_API_INTERNAL_ERROR">
            <summary>Binding agent API - Internal error </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_BA_COMM_ERROR">
            <summary>Binding agent communication error </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_INVALID_BA_VERSION">
            <summary>Invalid Binding agent version </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_SERVERQUERY_LOAD_REQUEST_FAILED">
            <summary>Failed to load ServerQuery request </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_SERVERQUERY_RESPONSE_FAILED">
            <summary>Failed to generate ServerQuery response </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLEX_LM_INVALID_IPADDRESS">
            <summary>Invalid IP address used while overriding </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_LAST_FLEX_LM_ERROR">
            <summary>Error codes concerning the HALCON core, 2100..2199 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WOOPI">
            <summary>Wrong index for output object parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIOPI">
            <summary>Wrong index for input object parameter</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WOI">
            <summary>Wrong index for image object </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRCN">
            <summary>Wrong number region/image component </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRRN">
            <summary>Wrong relation name </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AUDI">
            <summary>Access to undefined gray value component</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIWI">
            <summary>Wrong image width </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIHE">
            <summary>Wrong image height </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ICUNDEF">
            <summary>Undefined gray value component </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IDBD">
            <summary>Inconsistent data of data base (typing) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WICPI">
            <summary>Wrong index for input control parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DBDU">
            <summary>Data of data base not defined (internal error) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PNTL">
            <summary>legacy: Number of operators too big </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_UEXTNI">
            <summary>User extension not properly installed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NPTL">
            <summary>legacy: Number of packages too large </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NSP">
            <summary>No such package installed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ICHV">
            <summary>incompatible HALCON versions </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ICOI">
            <summary>incompatible operator interface </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XPKG_WXID">
            <summary>wrong extension package id </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XPKG_WOID">
            <summary>wrong operator id </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XPKG_WOIID">
            <summary>wrong operator information id </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CTPL_WTYP">
            <summary>Wrong Hctuple array type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CPAR_WTYP">
            <summary>Wrong Hcpar type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CTPL_WIDX">
            <summary>Wrong Hctuple index </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WVTYP">
            <summary>wrong vector type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WVDIM">
            <summary>wrong vector dimension </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WHDL">
            <summary>Wrong (unknown) HALCON handle </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WID">
            <summary>Wrong HALCON id, no data available </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IDOOR">
            <summary>HALCON id out of range </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HW_WFF">
            <summary>Wrong hardware information file format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HW_WFV">
            <summary>Wrong hardware information file version </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HW_RF">
            <summary>Error while reading the hardware knowledge</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HW_WF">
            <summary>Error while writing the hardware knowledge</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HW_TF">
            <summary>Tag not found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HW_CPU">
            <summary>No CPU Info </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HW_AOP">
            <summary>No AOP Info </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HW_HVAR">
            <summary>No AOP Info for this HALCON variant </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HW_HARCH">
            <summary>No AOP Info for this HALCON architecture </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HW_HOP">
            <summary>No AOP Info for specified Operator found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HW_WAOPM">
            <summary>undefined AOP model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HW_WTD">
            <summary>wrong tag derivate </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HW_IE">
            <summary>internal error </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HW_CANCEL">
            <summary>hw check was canceled </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GV_WA">
            <summary>Wrong access to global variable </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GV_NC">
            <summary>Used global variable does not exist </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GV_NG">
            <summary>Used global variable not accessible via GLOBAL_ID </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HM_NT">
            <summary>Halcon server to terminate is still working on a job </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HM_NA">
            <summary>No such HALCON software agent </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_CN">
            <summary>Hardware check for parallelization not possible on a single-processor machine </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_NC">
            <summary>(Seq.) HALCON does not support parallel hardware check (use Parallel HALCON instead) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_IN">
            <summary>Initialization of agent failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_NT">
            <summary>Termination of agent failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_HW">
            <summary>Inconsistent hardware description file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_II">
            <summary>Inconsistent agent information file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_IK">
            <summary>Inconsistent agent knowledge file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_WV">
            <summary>The file with the parallelization information does not match to the currently HALCON version/revision </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_WH">
            <summary>The file with the parallelization information does not match to the currently used machine </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_KC">
            <summary>Inconsistent knowledge base of HALCON software agent </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_CT">
            <summary>Unknown communication type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_MT">
            <summary>Unknown message type for HALCON software agent </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_WK">
            <summary>Error while saving the parallelization knowledge </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_WW">
            <summary>Wrong type of work information </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_WA">
            <summary>Wrong type of application information </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_WE">
            <summary>Wrong type of experience information </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_NU">
            <summary>Unknown name of HALCON software agent </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_NE">
            <summary>Unknown name and communication address of HALCON software agent </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_RR">
            <summary>cpu representative (HALCON software agent) not reachable </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_CR">
            <summary>cpu refuses work </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_RN">
            <summary>Description of scheduling resource not found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AG_TILT">
            <summary>Not accessible function of HALCON software agent </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRT">
            <summary>Wrong type: HALCON scheduling resource </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRS">
            <summary>Wrong state: HALCON scheduling resource </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_UNKPT">
            <summary>Unknown parameter type: HALCON scheduling resource </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_UNKPARVAL">
            <summary>Unknown parameter value: HALCON scheduling resource </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CTRL_WPP">
            <summary>Wrong post processing of control parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GETTI">
            <summary>Error while trying to get time </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GETCPUNUM">
            <summary>Error while trying to get the number of processors </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TMPFNF">
            <summary>Error while accessing temporary file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MQCNCL">
            <summary>message queue wait operation canceled </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MQOVL">
            <summary>message queue overflow </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MQCLEAR">
            <summary>Threads still wait on message queue while * clearing it. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_SCHED">
            <summary>Error while forcing a context switch </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SCHED_GAFF">
            <summary>Error while accessing cpu affinity </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SCHED_SAFF">
            <summary>Error while setting cpu affinity </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CO_WSO">
            <summary>wrong synchronization object </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CO_WOCO">
            <summary>wrong operator call object </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CO_IOPNI">
            <summary>input object not initialized </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CO_ICPNI">
            <summary>input control not initialized </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CO_OOPNI">
            <summary>output object not initialized </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CO_OCPNI">
            <summary>output control not initialized </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_CR">
            <summary>Creation of pthread failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_DT">
            <summary>pthread-detach failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_JO">
            <summary>pthread-join failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_MI">
            <summary>Initialization of mutex variable failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_MD">
            <summary>Deletion of mutex variable failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_ML">
            <summary>Lock of mutex variable failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_MU">
            <summary>Unlock of mutex variable failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_CS">
            <summary>Failed to signal pthread condition var. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_CW">
            <summary>Failed to wait for pthread cond. var. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_CI">
            <summary>Failed to init pthread condition var. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_CD">
            <summary>Failed to destroy pthread condition var.</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_ES">
            <summary>Failed to signal event. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_EW">
            <summary>Failed to wait for event. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_EI">
            <summary>Failed to init event. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_ED">
            <summary>Failed to destroy event.</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_TSDC">
            <summary>Failed to create a tsd key.</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_TSDS">
            <summary>Failed to set a thread specific data key.</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_TSDG">
            <summary>Failed to get a tsd key.</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_TSDF">
            <summary>Failed to free a tsd key.</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_BA">
            <summary>Aborted waiting at a barrier</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DCDG_FLE">
            <summary>'Free list' is empty while scheduling </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MSG_PNCI">
            <summary>Communication partner not checked in </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MSG_CSAI">
            <summary>The communication system can't be started while running </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MSG_CSNI">
            <summary>Communication partner not checked in </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_BI">
            <summary>Initialization of Barrier failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_BW">
            <summary>Waiting at a barrier failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTHRD_BD">
            <summary>Destroying of an barrier failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_RCOIMA">
            <summary>Region completely outside of the image domain </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ROOIMA">
            <summary>Region (partially) outside of the definition range of the image </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_RIEI">
            <summary>Intersected definition range region/image empty </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_EDEF">
            <summary>Image with empty definition range </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IIEI">
            <summary>No common image point of two images </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FLTS">
            <summary>Wrong region for image (first row &lt; 0) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_LLTB">
            <summary>Wrong region for image (column in last row &gt;= image width) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_UENOI">
            <summary>Number of images unequal in input pars. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HTS">
            <summary>Image height too small </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WTS">
            <summary>Image width too small </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CHSEG">
            <summary>Internal error: Multiple call of HRLInitSeg() </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_RLSEG1">
            <summary>Internal error: HRLSeg() not initialized </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WGAUSSM">
            <summary>Wrong size of filter for Gauss </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FSEIS">
            <summary>Filter size exceeds image size </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FSEVAN">
            <summary>Filter size evan </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FSTOBIG">
            <summary>Filter size to big </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_EMPTREG">
            <summary>Region is empty </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ROWTB">
            <summary>Row value of a coordinate &gt; 2^15-1 (XL: 2^31 - 1) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ROWTS">
            <summary>Row value of a coordinate &lt; -2^15 (XL: -2^31) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_COLTB">
            <summary>Column value of a coordinate &gt; 2^15-1 (XL: 2^31 - 1) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_COLTS">
            <summary>Column value of a coordinate &lt; -2^15 (XL: -2^31) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRTHR">
            <summary>Wrong segmentation threshold </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_UNKF">
            <summary>Unknown feature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_UNKG">
            <summary>Unknown gray value feature </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_EINCC">
            <summary>Internal error in HContCut </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_EINCP1">
            <summary>Error in HContToPol: distance of points too big </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_EINCP2">
            <summary>Error in HContToPol: contour too long </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TMR">
            <summary>Too many rows (IPImageTransform) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SFZ">
            <summary>Scaling factor = 0.0 (IPImageScale) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OOR">
            <summary>Wrong range in transformation matrix </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NEF">
            <summary>Internal error in IPvvf: no element free </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOOB">
            <summary>Number of input objects is zero </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_EMPOB">
            <summary>At least one input object has an empty region </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NPOT">
            <summary>Operation allowed for rectangular images 2**n only </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TMEP">
            <summary>Too many relevant points (IPHysterese) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_LTB">
            <summary>Number of labels in image too big </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NNLA">
            <summary>No labels with negative values allowed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WFS">
            <summary>Wrong filter size (too small ?) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IWDS">
            <summary>Images with different image size </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IWTL">
            <summary>Target image too wide or too far on the right </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IWTS">
            <summary>Target image too narrow or too far on the left </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IHTL">
            <summary>Target image too high or too far down </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IHTS">
            <summary>Target image too low or too far up </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DNOC">
            <summary>Number of channels in the input parameters are different </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRCFAFLT">
            <summary>Wrong color filter array type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRCFAINT">
            <summary>Wrong color filter array interpolation </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_AFFTRANS">
            <summary>Homogeneous matrix does not represent an affine transformation </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_INPNOBDRY">
            <summary>Inpainting region too close to the image border </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DSIZESD">
            <summary>source and destination differ in size</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TMFEAT">
            <summary>to many features</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_AXIS_UNDEF">
            <summary>Reflection axis undefined </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_COWTS">
            <summary>Coocurrence Matrix: Too little columns for quantisation </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_COHTS">
            <summary>Coocurrence Matrix: Too little rows for quantisation </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NUM_COLMN">
            <summary>Wrong number of columns </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NUM_LINES">
            <summary>Wrong number of rows </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OVL">
            <summary>Number has too many digits </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOT_SYM">
            <summary>Matrix is not symmetric </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NUM_COLS">
            <summary>Matrix is too big </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SYNTAX">
            <summary>Wrong structure of file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MISSING">
            <summary>Less than 2 matrices </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_COOC_MEM">
            <summary>Not enough memory </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_FILE">
            <summary>Can not read the file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FILE_WR">
            <summary>Can not open file for writing </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NUM_LUCOLS">
            <summary>Too many lookup table colors </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WNOLI">
            <summary>Too many Hough points (lines) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DITS">
            <summary>Target image has got wrong height (not big enough) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WINTM">
            <summary>Wrong interpolation mode </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_THICK_NK">
            <summary>Region not compact or not connected </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIND3">
            <summary>Wrong filter index for filter size 3 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIND5">
            <summary>Wrong filter index for filter size 5 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIND7">
            <summary>Wrong filter index for filter size 7 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WLAWSS">
            <summary>Wrong filter size; only 3/5/7 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NE_NPTS">
            <summary>Number of suitable pixels too small to reliably estimate the noise </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WNEE">
            <summary>Different number of entries/exits in HContCut </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XLDWT">
            <summary>Wrong XLD type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XLD_RPF">
            <summary>Border point is set to FG </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XLD_MCL">
            <summary>Maximum contour length exceeded </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XLD_MCN">
            <summary>Maximum number of contours exceeded </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XLD_CTS">
            <summary>Contour too short for fetch_angle_xld </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XLD_CRD">
            <summary>Regression parameters of contours already computed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XLD_CRND">
            <summary>Regression parameters of contours not yet entered! </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DBXC">
            <summary>Data base: XLD object has been deleted </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DBWXID">
            <summary>Data base: Object has no XLD-ID </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XLD_WNP">
            <summary>Wrong number of contour points allocated </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XLD_CAND">
            <summary>Contour attribute not defined </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FIT_ELLIPSE">
            <summary>Ellipse fitting failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FIT_CIRCLE">
            <summary>Circle fitting failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FIT_CLIP">
            <summary>All points classified as outliers (ClippingFactor too small) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FIT_QUADRANGLE">
            <summary>Quadrangle fitting failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_INCOMPL_RECT">
            <summary>No points for at least one rectangle side </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XLD_COI">
            <summary>A contour point lies outside of the image </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FIT_NOT_ENOUGH_POINTS">
            <summary>Not enough points for model fitting </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NWF">
            <summary>No ARC/INFO world file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NAIGF">
            <summary>No ARC/INFO generate file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DXF_UEOF">
            <summary>Unexpected end of file while reading DXF file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DXF_CRGC">
            <summary>Cannot read DXF-group code from file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DXF_INAPP">
            <summary>Inconsistent number of attributes per point in DXF file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DXF_INAPPN">
            <summary>Inconsistent number of attributes and names in DXF file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DXF_INAPCN">
            <summary>Inconsistent number of global attributes and names in DXF file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DXF_CRAPP">
            <summary>Cannot read attributes from DXF file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DXF_CRAPC">
            <summary>Cannot read global attributes from DXF file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DXF_CRAN">
            <summary>Cannot read attribute names from DXF file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DXF_WPN">
            <summary>Wrong generic parameter name </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DXF_IEDT">
            <summary>Internal DXF I/O error: Wrong data type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XLD_ISOL_POINT">
            <summary>Isolated point while contour merging </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NURBS_CCBF">
            <summary>Constraints cannot be fulfilled </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NSEG">
            <summary>No segment in contour </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_ONE_P">
            <summary>Only one or no point in template contour </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SESF">
            <summary>Syntax error in file for training </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TMFE">
            <summary>Maximum number of attributes per example exceeded </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OPSF">
            <summary>Not possible to open file for training </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TMSS">
            <summary>Too many data sets for training </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WSKEY">
            <summary>Wrong key for data for training </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TMSAM">
            <summary>Too many examples for one data set for training </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TMCLS">
            <summary>Too many classes </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TMBOX">
            <summary>Maximum number of cuboids exceeded </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OPCF">
            <summary>Not possible to open classificator's file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SCLA">
            <summary>Error while saving the classificator </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OPF">
            <summary>Not possible to open protocol file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CLEX">
            <summary>Classificator with this name is already existent </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TMCLA">
            <summary>Maximum number of classificators exceeded </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CNTL">
            <summary>Name of classificator is too long, &gt;= 20 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CLNNF">
            <summary>Classificator with this name is not existent </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NCCLA">
            <summary>Current classificator is not defined </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CLASS2_ID">
            <summary>Wrong id in classification file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CLASS2_VERS">
            <summary>The version of the classifier is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CLASS_NOSITEM">
            <summary>Serialized item does not contain a valid classifier </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TM_NO_CL">
            <summary>Text model does not contain a classifier yet (use set_text_model_param) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_KNN_CANNOT_ADD">
            <summary>Adding new features is not possible, because the dataset has been normalized during training. Please create a new classfier and add all training data again or disable normalization during training. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GMM_NOTRAINFILE">
            <summary>Invalid file format for GMM training samples </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GMM_WRTRAINVERS">
            <summary>The version of the GMM training samples is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GMM_WRSMPFORMAT">
            <summary>Wrong training sample file format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GMM_NOCLASSFILE">
            <summary>nvalid file format for Gaussian Mixture Model (GMM) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GMM_WRCLASSVERS">
            <summary>The version of the Gaussian Mixture Model (GMM) is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GMM_TRAIN_UNKERR">
            <summary>Unknown error when training GMM </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GMM_TRAIN_COLLAPSED">
            <summary>Collapsed covariance matrix </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GMM_TRAIN_NOSAMPLE">
            <summary>No samples for at least one class </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GMM_TRAIN_FEWSAMPLES">
            <summary>Too few samples for at least one class </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GMM_NOTTRAINED">
            <summary>GMM is not trained </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GMM_NOTRAINDATA">
            <summary>GMM has no training data </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GMM_NOSITEM">
            <summary>Serialized item does not contain a valid Gaussian Mixture Model (GMM) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MLP_UNKOUTFUNC">
            <summary>Unknown output function </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MLP_NOT01ENC">
            <summary>Target not in 0-1 encoding </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MLP_NOTRAINDATA">
            <summary>No training samples stored in the classifier </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MLP_NOTRAINFILE">
            <summary>Invalid file format for MLP training samples </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MLP_WRTRAINVERS">
            <summary>The version of the MLP training samples is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MLP_WRSMPFORMAT">
            <summary>Wrong training sample format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MLP_NOCLASSIF">
            <summary>MLP is not a classifier </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MLP_NOCLASSFILE">
            <summary>Invalid file format for multilayer perceptron (MLP) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MLP_WRCLASSVERS">
            <summary>The version of the multilayer perceptron (MLP) is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MLP_WRNUMCHAN">
            <summary>Wrong number of channels </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MLP_WRNUMPARAM">
            <summary>Wrong number of MLP parameters </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MLP_NOSITEM">
            <summary>Serialized item does not contain a valid multilayer perceptron (MLP) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_LUT_WRNUMCHAN">
            <summary>Wrong number of channels </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_LUT_NRCHANLARGE">
            <summary>A look-up table can be build for 2 or 3 channels only </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_LUT_CANNOTCREAT">
            <summary>Cannot create look-up table. Please choose a larger 'bit_depth' or select the 'fast' 'class_selection'. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SVM_NOTRAINDATA">
            <summary>No training samples stored in the classifier </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SVM_NOTRAINFILE">
            <summary>Invalid file format for SVM training samples </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SVM_WRTRAINVERS">
            <summary>The version of the SVM training samples is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SVM_WRSMPFORMAT">
            <summary>Wrong training sample format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SVM_NOCLASSFILE">
            <summary>Invalid file format for support vector machine (SVM) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SVM_WRCLASSVERS">
            <summary>The version of the support vector machine (SVM) is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SVM_WRNRCLASS">
            <summary>Wrong number of classes </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SVM_NU_TOO_BIG">
            <summary>Chosen nu is too big </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SVM_TRAIN_FAIL">
            <summary>SVM Training failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SVM_DO_NOT_FIT">
            <summary>SVMs do not fit together </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SVM_NO_TRAIN_ADD">
            <summary>No SV in SVM to add to training </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SVM_KERNELNOTRBF">
            <summary>Kernel must be RBF </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SVM_NO_TRAIND_FOR_CLASS">
            <summary>Not all classes contained in training data </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SVM_NOT_TRAINED">
            <summary>SVM not trained </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOT_TRAINED">
            <summary>Classifier not trained </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SVM_NOSITEM">
            <summary>Serialized item does not contain a valid support vector machine (SVM) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ROTNR">
            <summary>Wrong rotation number </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GOL">
            <summary>Wrong letter for Golay element </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BEZ">
            <summary>Wrong reference point </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ITER">
            <summary>Wrong number of iterations </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MOSYS">
            <summary>Mophology: system error </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ART">
            <summary>Wrong type of boundary </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OBJI">
            <summary>Morphology: Wrong number of input obj. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OBJO">
            <summary>Morphology: Wrong number of output obj. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PARI">
            <summary>Morphology: Wrong number of input control parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PARO">
            <summary>Morphology: Wrong number of output control parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SELC">
            <summary>Morphology: Struct. element is infinite </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRNSE">
            <summary>Morphology: Wrong name for struct. elem. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRRLN1">
            <summary>Wrong number of run length rows (chords): smaller than 0 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRRLN2">
            <summary>Number of chords too big, increase * current_runlength_number using set_system</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRRLL">
            <summary>Run length row with negative length </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_RLLTB">
            <summary>Run length row &gt;= image height </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_RLLTS">
            <summary>Run length row &lt; 0 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_RLCTB">
            <summary>Run length column &gt;= image width </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_RLCTS">
            <summary>Lauflaengenspalte &lt; 0 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CHLTB">
            <summary>For CHORD_TYPE: Number of row too big </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CHLTS">
            <summary>For CHORD_TYPE: Number of row too small </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CHCTB">
            <summary>For CHORD_TYPE: Number of column too big </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MRLE">
            <summary>Exceeding the maximum number of run lengths while automatical expansion </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ICCOMPL">
            <summary>Region-&gt;compl neither TRUE/FALSE </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_RLEMAX">
            <summary>Region-&gt;max_num &lt; Region-&gt;num </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRRLN3">
            <summary>Number of chords too big for num_max </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OPNOCOMPL">
            <summary>Operator cannot be implemented for complemented regions </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIMAW1">
            <summary>Image width &lt; 0 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIMAW2">
            <summary>Image width &gt;= MAX_FORMAT </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIMAH1">
            <summary>Image height &lt;= 0 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIMAH2">
            <summary>Image height &gt;= MAX_FORMAT </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIMAW3">
            <summary>Image width &lt;= 0 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIMAH3">
            <summary>Image height &lt;= 0 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TMS">
            <summary>Too many segments </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_INT8_IMAGE">
            <summary>INT8 images are available on 64 bit systems only </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_POINT_AT_INFINITY">
            <summary>Point at infinity cannot be converted to a Euclidean point </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ML_NO_COVARIANCE">
            <summary>Covariance matrix could not be determined </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_RANSAC_PRNG">
            <summary>RANSAC algorithm didn't find enough point correspondences </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_RANSAC_TOO_DIFFERENT">
            <summary>RANSAC algorithm didn't find enough point correspondences </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTI_FALLBACK">
            <summary>Internal diagnosis: fallback method had to be used </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTI_TRAFO_SING">
            <summary>Projective transformation is singular </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PTI_MOSAIC_UNDERDET">
            <summary>Mosaic is under-determined </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_COV_NPD">
            <summary>Input covariance matrix is not positive definite </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_INPC">
            <summary>Inconsistent number of point correspondences. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOPA">
            <summary>No path from reference image to one or more images. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IINE">
            <summary>Image with specified index does not exist. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOCM">
            <summary>Matrix is not a camera matrix. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SKNZ">
            <summary>Skew is not zero. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ILFL">
            <summary>Illegal focal length. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_KANZ">
            <summary>Kappa is not zero. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_VARA">
            <summary>It is not possible to determine all parameters for in the variable case. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_LVDE">
            <summary>No valid implementation selected. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_KPAR">
            <summary>Kappa can only be determined with the gold-standard method for fixed camera parameters. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IMOD">
            <summary>Conflicting number of images and projection mode. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PNIC">
            <summary>Error in projection: Point not in any cube map. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_SOL">
            <summary>No solution found. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TINZ">
            <summary>Tilt is not zero. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ILMD">
            <summary>Illegal combination of parameters and estimation method. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_RDS_NSC">
            <summary>No suitable contours found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_RDS_NSS">
            <summary>No stable solution found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_RDS_ISS">
            <summary>Instable solution found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_RDS_NEC">
            <summary>Not enough contours for calibration </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOFFTOPT">
            <summary>Invalid file format for FFT optimization data </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRFFTOPTVERS">
            <summary>The version of the FFT optimization data is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRHALCONVERS">
            <summary>Optimization data was created with a different HALCON version (Standard HALCON / Parallel HALCON) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OPTFAIL">
            <summary>Storing of the optimization data failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FFTOPT_NOSITEM">
            <summary>Serialized item does not contain valid FFT optimization data </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_EPIINIM">
            <summary>Epipoles are situated within the image domain </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_EPI_FOV">
            <summary>Fields of view of both cameras do not intersect each other </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BI_WT_TARGET">
            <summary>Wrong type of target_thickness parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BI_WT_THICKNESS">
            <summary>Wrong type of thickness_tolerance parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BI_WT_POSITION">
            <summary>Wrong type of position_tolerance parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BI_WT_SIGMA">
            <summary>Wrong type of sigma parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BI_WV_SIGMA">
            <summary>Wrong value of sigma parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BI_WT_THRESH">
            <summary>Wrong type of threshold parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BI_WV_TARGET">
            <summary>Wrong value of target_thickness parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BI_WV_THICKNESS">
            <summary>Wrong value of thickness_tolerance parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BI_WV_POSITION">
            <summary>Wrong value of position_tolerance parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BI_WV_THRESH">
            <summary>Wrong value of threshold parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BI_WT_REFINE">
            <summary>Wrong type of refinement parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BI_WV_REFINE">
            <summary>Wrong value of refinement parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BI_WT_RESOL">
            <summary>Wrong type of resolution parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BI_WV_RESOL">
            <summary>Wrong type of resolution parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BI_WT_POLARITY">
            <summary>Wrong type of polarity parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BI_WV_POLARITY">
            <summary>Wrong type of polarity parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_INVALID_HANDLE">
            <summary>Invalid sheet-of-light handle </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_EMPTY_MODEL_LIST">
            <summary>No sheet-of-light model available</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WNIW">
            <summary>Wrong input image size (width) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WNIH">
            <summary>Wrong input image size (height) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WPROF_REG">
            <summary>profile region does not fit the domain of definition of the input image </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_CAL_NONE">
            <summary>Calibration extend not set </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_UNDEF_DISPARITY">
            <summary>Undefined disparity image </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_UNDEF_DISPDOMAIN">
            <summary>Undefined domain for disparity image </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_UNDEF_CAMPAR">
            <summary>Undefined camera parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_UNDEF_LPCS">
            <summary>Undefined pose of the lightplane </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_UNDEF_CCS">
            <summary>Undefined pose of the camera coordinate system </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_UNDEF_CCS_2_LPCS">
            <summary>Undefined transformation from the camera to the lightplane coordinate system </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_UNDEF_MOV_POSE">
            <summary>Undefined movement pose for xyz calibration </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WV_SCALE">
            <summary>Wrong value of scale parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WV_PAR_NAME">
            <summary>Wrong parameter name </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WT_METHOD">
            <summary>Wrong type of parameter method </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WT_AMBIGUITY">
            <summary>Wrong type of parameter ambiguity </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WT_SCORE_TYPE">
            <summary>Wrong type of parameter score </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WT_CALIBRATION">
            <summary>Wrong type of parameter calibration </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WT_NUM_PROF">
            <summary>Wrong type of parameter number_profiles </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WT_CAM_PAR">
            <summary>Wrong type of element in parameter camera_parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WT_PAR_POSE">
            <summary>Wrong type of element in pose </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WV_METHOD">
            <summary>Wrong value of parameter method </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WT_THRES">
            <summary>Wrong type of parameter min_gray </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WV_AMBIGUITY">
            <summary>Wrong value of parameter ambiguity </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WV_SCORE_TYPE">
            <summary>Wrong value of parameter score_type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WV_CALIBRATION">
            <summary>Wrong value of parameter calibration </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WV_NUM_PROF">
            <summary>Wrong value of parameter number_profiles </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WV_CAMERA_TYPE">
            <summary>Wrong type of camera </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WN_CAM_PAR">
            <summary>Wrong number of values of parameter camera_parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WN_POSE">
            <summary>Wrong number of values of pose </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_NO_TARGET_FOUND">
            <summary>Calibration target not found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_NO_VALID_SOL">
            <summary>The calibration algorithm failed to find a valid solution. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WT_CALIB_OBJECT">
            <summary>Wrong type of parameter calibration_object </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_INVALID_CALIB_OBJECT">
            <summary>Invalid calibration object </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_NO_CALIB_OBJECT_SET">
            <summary>No calibration object set </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WR_FILE_FORMAT">
            <summary>Invalid file format for sheet-of-light model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_WR_FILE_VERS">
            <summary>The version of the sheet-of-light model is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_CAMPAR_UNSUPPORTED">
            <summary>Camera type not supported by calibrate_sheet_of_light_model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOL_NOT_AVAIL">
            <summary>Not available with calibration object based calibration </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SING">
            <summary>The light source positions are linearly dependent </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FEWIM">
            <summary>No sufficient image indication </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ZBR_NOS">
            <summary>Internal error: Function has equal signs in HZBrent </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DIMK">
            <summary>Kalman: Dimension n,m or p has got a undefined value </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOFILE">
            <summary>Kalman: File does not exist </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FF1">
            <summary>Kalman: Error in file (row of dimension) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FF2">
            <summary>Kalman: Error in file (row of marking) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FF3">
            <summary>Error in file (value is no float) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_A">
            <summary>Kalman: Matrix A is missing in file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_C">
            <summary>Kalman: In Datei fehlt Matrix C </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_Q">
            <summary>Kalman: Matrix Q is missing in file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_R">
            <summary>Kalman: Matrix R is missing in file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_GU">
            <summary>Kalman: G or u is missing in file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOTSYMM">
            <summary>Kalman: Covariant matrix is not symmetric </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SINGU">
            <summary>Kalman: Equation system is singular </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DBOIT">
            <summary>Object is a object tupel </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DBOC">
            <summary>Object has been deleted already </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DBWOID">
            <summary>Wrong object-ID </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DBTC">
            <summary>Object tupel has been deleted already </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DBWTID">
            <summary>Wrong object tupel-ID </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DBTIO">
            <summary>Object tupel is a object </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DBIDNULL">
            <summary>Object-ID is NULL (0) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WDBID">
            <summary>Object-ID outside the valid range </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DBIC">
            <summary>Access to deleted image </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DBWIID">
            <summary>Access to image with wrong key </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DBRC">
            <summary>Access to deleted region </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DBWRID">
            <summary>Access to region with wrong key </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WCHAN">
            <summary>Wrong value for image channel </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DBITL">
            <summary>Index too big </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DBIUNDEF">
            <summary>Index not defined </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_OPENCL">
            <summary>No OpenCL available </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OPENCL_ERROR">
            <summary>OpenCL Error occured </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_COMPUTE_DEVICES">
            <summary>No compute devices available </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_DEVICE_IMPL">
            <summary>No device implementation for this parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OUT_OF_DEVICE_MEM">
            <summary>Out of device memory </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_INVALID_SHAPE">
            <summary>Invalid work group shape </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_INVALID_DEVICE">
            <summary>Invalid compute device </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WSCN">
            <summary>Wrong (logical) window number </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DSCO">
            <summary>Error while opening the window </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WWC">
            <summary>Wrong window coordinates </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NWA">
            <summary>It is not possible to open another window </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DNA">
            <summary>Device resp. operator not available </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_UCOL">
            <summary>Unknown color </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NWO">
            <summary>No window has been opened for desired action </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WFM">
            <summary>Wrong filling mode for regions </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WGV">
            <summary>Wrong gray value (0..255) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WPV">
            <summary>Wrong pixel value </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WLW">
            <summary>Wrong line width </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WCUR">
            <summary>Wrong name of cursor </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WLUT">
            <summary>Wrong color table </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WDM">
            <summary>Wrong representation mode </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRCO">
            <summary>Wrong representation color </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRDM">
            <summary>Wrong dither matrix </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRIT">
            <summary>Wrong image transformation </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IPIT">
            <summary>Unsuitable image type for image trafo. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRZS">
            <summary>Wrong zooming factor for image trafo. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRDS">
            <summary>Wrong representation mode </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRDV">
            <summary>Wrong code of device </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WWINF">
            <summary>Wrong number for father window </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WDEXT">
            <summary>Wrong window size </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WWT">
            <summary>Wrong window type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WND">
            <summary>No current window has been set </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRGB">
            <summary>Wrong color combination or range (RGB) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WPNS">
            <summary>Wrong number of pixels set </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WCM">
            <summary>Wrong value for comprise </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FNA">
            <summary>set_fix with 1/4 image levels and static not valid </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_LNFS">
            <summary>set_lut not valid in child windows </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_LOFL">
            <summary>Number of concurrent used color tables is too big </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIDT">
            <summary>Wrong device for window dump </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WWDS">
            <summary>Wrong window size for window dump </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NDVS">
            <summary>System variable DISPLAY not defined </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WBW">
            <summary>Wrong thickness for window margin </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WDVS">
            <summary>System variable DISPLAY has been set wrong (&lt;host&gt;:0.0) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TMF">
            <summary>Too many fonts loaded </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WFN">
            <summary>Wrong font name </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WCP">
            <summary>No valid cursor position </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NTW">
            <summary>Window is not a textual window </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NPW">
            <summary>Window is not a image window </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_STL">
            <summary>String too long or too high </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NSS">
            <summary>Too little space in the window rightw. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NMS">
            <summary>Window is not suitable for the mouse </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DWNA">
            <summary>Here Windows on a equal machine is permitted only </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WOM">
            <summary>Wrong mode while opening a window </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WWM">
            <summary>Wrong window mode for operation </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_LUTF">
            <summary>Operation not possible with fixed pixel </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_LUTN8">
            <summary>Color tables for 8 image levels only </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WTCM">
            <summary>Wrong mode for pseudo real colors </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIFTL">
            <summary>Wrong pixel value for LUT </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WSOI">
            <summary>Wrong image size for pseudo real colors </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HRLUT">
            <summary>Error in procedure HRLUT </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WPFSL">
            <summary>Wrong number of entries in color table for set_lut </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WPVS">
            <summary>Wrong values for image area </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WLPN">
            <summary>Wrong line pattern </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WLPL">
            <summary>Wrong number of parameters for line pattern </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WNOC">
            <summary>Wrong number of colors </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WPST">
            <summary>Wrong value for mode of area creation </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SWNA">
            <summary>Spy window is not set (set_spy) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NSFO">
            <summary>No file for spy has been set (set_spy) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WSPN">
            <summary>Wrong parameter output depth (set_spy) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIFFD">
            <summary>Wrong window size for window dump </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WLUTF">
            <summary>Wrong color table: Wrong file name or query_lut() </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WLUTE">
            <summary>Wrong color table: Empty string ? </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WLUTD">
            <summary>Using this hardware set_lut('default') is allowed only </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CNDP">
            <summary>Error while calling online help </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_LNPR">
            <summary>Row can not be projected </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NFSC">
            <summary>Operation is unsuitable using a computer with fixed color table </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NACD">
            <summary>Computer represents gray scales only </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_LUTO">
            <summary>LUT of this display is full </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WCC">
            <summary>Internal error: wrong color code </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WWATTRT">
            <summary>Wrong type for window attribute </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WWATTRN">
            <summary>Wrong name for window attribute </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRSPART">
            <summary>negativ height of area (or 0) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WCSPART">
            <summary>negativ width of area (or 0) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WNCV">
            <summary>Window not completely visible </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FONT_NA">
            <summary>Font not allowed for this operation </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WDIFFTH">
            <summary>Window was created in different thread </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OBJ_ATTACHED">
            <summary>Drawing object already attached to another window </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CHA3">
            <summary>Internal error: only RGB-Mode </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NMWA">
            <summary>No more (image-)windows available </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEPTH_NOT_STORED">
            <summary>Depth was not stored with window </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_INDEX_NOT_STORED">
            <summary>Object index was not stored with window </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PRIM_NO_POINTS">
            <summary>Operator does not support primitives without point coordinates </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_REMOTE_DESKTOP_SIZE">
            <summary>Maximum image size for Windows Remote Desktop exceeded </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOGL">
            <summary>No OpenGL support available </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NODEPTH">
            <summary>No depth information available </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OGL_ERROR">
            <summary>OpenGL error </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_UNSUPPORTED_FBO">
            <summary>Required framebuffer object is unsupported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OGL_HSR_NOT_SUPPORTED">
            <summary>OpenGL accelerated hidden surface removal not supported on this machine </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WP_IWP">
            <summary>Invalid window parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WP_IWPV">
            <summary>Invalid value for window parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_UMOD">
            <summary>Unknown mode </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ATTIMG">
            <summary>No image attached </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NVG_WM">
            <summary>invalid navigation mode </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FINTERN">
            <summary>Internal file error </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FS">
            <summary>Error while file synchronisation </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FISR">
            <summary>insufficient rights </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BFD">
            <summary>Bad file descriptor </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FNF">
            <summary>File not found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DWI">
            <summary>Error while writing image data (sufficient memory ?) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DWID">
            <summary>Error while writing image descriptor (sufficient memory ?) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DRI1">
            <summary>Error while reading image data (format of image too small ?) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DRI2">
            <summary>Error while reading image data (format of image too big ?) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DRID1">
            <summary>Error while reading image descriptor: File too small </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DIMMAT">
            <summary>Image matrices are different </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HNF">
            <summary>Help file not found (setenv HALCONROOT) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XNF">
            <summary>Help index not found (setenv HALCONROOT) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CNCSI">
            <summary>File &lt;standard_input&gt; can not be closed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CNCSO">
            <summary>&lt;standard_output/error&gt; can not be closed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CNCF">
            <summary>File can not be closed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_EDWF">
            <summary>Error while writing to file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NFA">
            <summary>Exceeding of maximum number of files </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WFIN">
            <summary>Wrong file name </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CNOF">
            <summary>Error while opening the file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WFMO">
            <summary>Wrong file mode </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WPTY">
            <summary>Wrong type for pixel (e.g. byte) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIW">
            <summary>Wrong image width (too big ?) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIH">
            <summary>Wrong image height (too big ?) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FTS1">
            <summary>File already exhausted before reading an image </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FTS2">
            <summary>File exhausted before terminating the image </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WDPI">
            <summary>Wrong value for resolution (dpi) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WNOW">
            <summary>Wrong output image size (width) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WNOH">
            <summary>Wrong output image size (height) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WNFP">
            <summary>Wrong number of parameter values: Format description </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WPNA">
            <summary>Wrong parameter name for operator </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WSNA">
            <summary>Wrong slot name for parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NPCF">
            <summary>Operator class is missing in help file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WHIF">
            <summary>Wrong or inconsistent help/ *.idx or help/ *.sta </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HINF">
            <summary>File help/ *.idx not found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HSNF">
            <summary>File help/ *.sta not found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ICSF">
            <summary>Inconsistent file help/ *.sta </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_EFNF">
            <summary>No explication file (.exp) found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NFWKEF">
            <summary>No file found in known graphic format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIFT">
            <summary>Wrong graphic format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ICNF">
            <summary>Inconsistent file halcon.num </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WTIFF">
            <summary>File with extension 'tiff' is no Tiff-file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WFF">
            <summary>Wrong file format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOGPPROC">
            <summary>gnuplot could not be started </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOGPFILE">
            <summary>Output file for gnuplot could not be opened </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOGPOUT">
            <summary>Not a valid gnuplot output stream </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOPNM">
            <summary>No PNM format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ICODB">
            <summary>Inconsistent or old help file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WFID">
            <summary>Wrong file handle </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FNO">
            <summary>File not open </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_FILES">
            <summary>No files in use so far (none opened) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NORFILE">
            <summary>Invalid file format for regions </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_RDTB">
            <summary>Error while reading region data: Format of region too big. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WSID">
            <summary>Invalid handle for a serial connection </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SNO">
            <summary>Serial port not open </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NSA">
            <summary>No serial port available </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CNOS">
            <summary>Could not open serial port </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CNCS">
            <summary>Could not close serial port </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CNGSA">
            <summary>Could not get serial port attributes </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CNSSA">
            <summary>Could not set serial port attributes </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRSBR">
            <summary>Wrong baud rate for serial connection </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRSDB">
            <summary>Wrong number of data bits for serial connection </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRSFC">
            <summary>Wrong flow control for serial connection </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CNFS">
            <summary>Could not flush serial port </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_EDWS">
            <summary>Error during write to serial port </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_EDRS">
            <summary>Error during read from serial port </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_REG_NOSITEM">
            <summary>Serialized item does not contain valid regions. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_REG_WRVERS">
            <summary>The version of the regions is not supported. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IMG_NOSITEM">
            <summary>Serialized item does not contain valid images. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IMG_WRVERS">
            <summary>The version of the images is not supported. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XLD_NOSITEM">
            <summary>Serialized item does not contain valid XLD objects. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XLD_WRVERS">
            <summary>The version of the XLD objects is not supported. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OBJ_NOSITEM">
            <summary>Serialized item does not contain valid objects. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OBJ_WRVERS">
            <summary>The version of the objects is not supported. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XLD_DATA_TOO_LARGE">
            <summary>XLD object data can only be read by HALCON XL </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OBJ_UNEXPECTED">
            <summary>Unexpected object detected </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FNOTF">
            <summary>File has not been opened in text format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FNOBF">
            <summary>File has not been opened in binary file format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DIRCR">
            <summary>Cannot create directory </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DIRRM">
            <summary>Cannot remove directory </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GETCWD">
            <summary>Cannot get current directory </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SETCWD">
            <summary>Cannot set current directory </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XINIT">
            <summary>Need to call XInitThreads() </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NFS">
            <summary>No image acquisition device opened </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGWC">
            <summary>IA: wrong color depth </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGWD">
            <summary>IA: wrong device </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGVF">
            <summary>IA: determination of video format not possible </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGNV">
            <summary>IA: no video signal </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_UFG">
            <summary>Unknown image acquisition device </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGF">
            <summary>IA: failed grabbing of an image </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGWR">
            <summary>IA: wrong resolution chosen </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGWP">
            <summary>IA: wrong image part chosen </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGWPR">
            <summary>IA: wrong pixel ratio chosen </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGWH">
            <summary>IA: handle not valid </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGCL">
            <summary>IA: instance not valid (already closed?) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGNI">
            <summary>Image acquisition device could not be initialized </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGET">
            <summary>IA: external triggering not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGLI">
            <summary>IA: wrong camera input line (multiplex) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGCS">
            <summary>IA: wrong color space </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGPT">
            <summary>IA: wrong port </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGCT">
            <summary>IA: wrong camera type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGTM">
            <summary>IA: maximum number of acquisition device classes exceeded </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGDV">
            <summary>IA: device busy </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGASYNC">
            <summary>IA: asynchronous grab not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGPARAM">
            <summary>IA: unsupported parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGTIMEOUT">
            <summary>IA: timeout </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGGAIN">
            <summary>IA: invalid gain </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGFIELD">
            <summary>IA: invalid field </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGPART">
            <summary>IA: invalid parameter type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGPARV">
            <summary>IA: invalid parameter value </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGFNS">
            <summary>IA: function not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGIVERS">
            <summary>IA: incompatible interface version </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGSETPAR">
            <summary>IA: could not set parameter value </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGGETPAR">
            <summary>IA: could not query parameter setting </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGPARNA">
            <summary>IA: parameter not available in current configuration </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGCLOSE">
            <summary>IA: device could not be closed properly </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGCAMFILE">
            <summary>IA: camera configuration file could not be opened </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGCALLBACK">
            <summary>IA: unsupported callback type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGDEVLOST">
            <summary>IA: device lost </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FGABORTED">
            <summary>IA: grab aborted </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IOTIMEOUT">
            <summary>IO: timeout </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IOIVERS">
            <summary>IO: incompatible interface version </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IOWH">
            <summary>IO: handle not valid </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IODBUSY">
            <summary>IO: device busy </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IOIAR">
            <summary>IO: insufficient user rights </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IONF">
            <summary>IO: device or channel not found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IOPART">
            <summary>IO: invalid parameter type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IOPARV">
            <summary>IO: invalid parameter value </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IOPARNUM">
            <summary>IO: invalid parameter number </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IOPARAM">
            <summary>IO: unsupported parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IOPARNA">
            <summary>IO: parameter not available in curr config.</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IOFNS">
            <summary>IO: function not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IOME">
            <summary>IO: maximum number of dio classes exceeded </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IODNA">
            <summary>IO: driver of io device not available </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IOABORTED">
            <summary>IO: operation aborted </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IODATT">
            <summary>IO: invalid data type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JXR_UNSUPPORTED_FORMAT">
            <summary>Image type is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JXR_INVALID_PIXEL_FORMAT">
            <summary>Invalid pixel format passed to filter function </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JXR_INTERNAL_ERROR">
            <summary>Internal JpegXR error. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JXR_FORMAT_SYNTAX_ERROR">
            <summary>Syntax error in output format string </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JXR_TOO_MANY_CHANNELS">
            <summary>Maximum number of channels exceeded </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JXR_EC_ERROR">
            <summary>Unspecified error in JXR library </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JXR_EC_BADMAGIC">
            <summary>Bad magic number in JXR library </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JXR_EC_FEATURE_NOT_IMPLEMENTED">
            <summary>Feature not implemented in JXR library </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JXR_EC_IO">
            <summary>File read/write error in JXR library </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JXR_EC_BADFORMAT">
            <summary>Bad file format in JXR library </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_LIB_FILE_CLOSE">
            <summary>Error while closing the image file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_LIB_FILE_OPEN">
            <summary>Error while opening the image file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_LIB_UNEXPECTED_EOF">
            <summary>Premature end of the image file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IDTL">
            <summary>Image dimensions too large for this file format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ITLHV">
            <summary>Image too large for this HALCON version </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TMIO">
            <summary>Too many iconic objects for this file format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_FILE_FORMAT_UNSUPPORTED">
            <summary>File format is unsupported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PCX_NO_PCX_FILE">
            <summary>File is no PCX-File </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PCX_UNKNOWN_ENCODING">
            <summary>Unknown encoding </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PCX_MORE_THAN_4_PLANES">
            <summary>More than 4 image plains </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PCX_COLORMAP_SIGNATURE">
            <summary>Wrong magic in color table </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PCX_REPEAT_COUNT_SPANS">
            <summary>Wrong number of bytes in span </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PCX_TOO_MUCH_BITS_PIXEL">
            <summary>Wrong number of bits/pixels </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PCX_PACKED_PIXELS">
            <summary>Wrong number of plains </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GIF_NO_GIF_PICTURE">
            <summary>File is no GIF-File </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GIF_BAD_VERSION">
            <summary>GIF: Wrong version </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GIF_SCREEN_DESCRIPTOR">
            <summary>GIF: Wrong descriptor </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GIF_COLORMAP">
            <summary>GIF: Wrong color table </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GIF_READ_ERROR_EOF">
            <summary>GIF: Premature end of file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GIF_NOT_ENOUGH_IMAGES">
            <summary>GIF: Wrong number of images </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GIF_ERROR_ON_EXTENSION">
            <summary>GIF: Wrong image extension </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GIF_LEFT_TOP_WIDTH">
            <summary>GIF: Wrong left top width </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GIF_CIRCULAR_TABL_ENTRY">
            <summary>GIF: Cyclic index of table </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GIF_BAD_IMAGE_DATA">
            <summary>GIF: Wrong image data </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SUN_RASTERFILE_TYPE">
            <summary>File is no Sun-Raster-File </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SUN_RASTERFILE_HEADER">
            <summary>Wrong header </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SUN_COLS">
            <summary>Wrong image width </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SUN_ROWS">
            <summary>Wrong image height </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SUN_COLORMAP">
            <summary>Wrong color map </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SUN_RASTERFILE_IMAGE">
            <summary>Wrong image data </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SUN_IMPOSSIBLE_DATA">
            <summary>Wrong type of pixel </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XWD_IMPOSSIBLE_DATA">
            <summary>Wrong type of pixel </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XWD_VISUAL_CLASS">
            <summary>Wrong visual class </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XWD_X10_HEADER">
            <summary>Wrong X10 header </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XWD_X11_HEADER">
            <summary>Wrong X11 header </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XWD_X10_COLORMAP">
            <summary>Wrong X10 colormap </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XWD_X11_COLORMAP">
            <summary>Wrong X11 colormap </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XWD_X11_PIXMAP">
            <summary>Wrong pixmap </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XWD_UNKNOWN_VERSION">
            <summary>Unknown version </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_XWD_READING_IMAGE">
            <summary>Error while reading an image </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TIF_BAD_INPUTDATA">
            <summary>Error while reading a file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TIF_COLORMAP">
            <summary>Wrong colormap </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TIF_TOO_MANY_COLORS">
            <summary>Too many colors </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TIF_BAD_PHOTOMETRIC">
            <summary>Wrong photometric interpretation</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TIF_PHOTOMETRIC_DEPTH">
            <summary>Wrong photometric depth </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TIF_NO_REGION">
            <summary>Image is no binary file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TIF_UNSUPPORTED_FORMAT">
            <summary>Unsupported TIFF format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TIF_BAD_SPECIFICATION">
            <summary>Wrong file format specification </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TIF_FILE_CORRUPT">
            <summary>TIFF file is corrupt </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TIF_TAG_UNDEFINED">
            <summary>Required TIFF tag is missing </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BMP_NO_BMP_PICTURE">
            <summary>File is no BMP-File </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BMP_READ_ERROR_EOF">
            <summary>Premature end of file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BMP_INCOMPLETE_HEADER">
            <summary>Incomplete header </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BMP_UNKNOWN_FORMAT">
            <summary>Unknown bitmap format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BMP_UNKNOWN_COMPRESSION">
            <summary>Unknown compression format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BMP_COLORMAP">
            <summary>Wrong color table </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BMP_WRITE_ERROR">
            <summary>Write error on output </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BMP_NO_REGION">
            <summary>File does not contain a binary image </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JPG_COMP_NUM">
            <summary>Wrong number of components in image </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JPGLIB_UNKNOWN">
            <summary>Unknown error from libjpeg </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JPGLIB_NOTIMPL">
            <summary>Not implemented feature in libjpeg </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JPGLIB_FILE">
            <summary>File access error in libjpeg </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JPGLIB_TMPFILE">
            <summary>Tmp file access error in libjpeg </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JPGLIB_MEMORY">
            <summary>Memory error in libjpeg </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JPGLIB_INFORMAT">
            <summary>Error in input image </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PNG_NO_PNG_FILE">
            <summary>File is not a PNG file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PNG_UNKNOWN_INTERLACE_TYPE">
            <summary>Unknown interlace type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PNG_UNSUPPORTED_COLOR_TYPE">
            <summary>Unsupported color type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PNG_NO_REGION">
            <summary>Image is no binary file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JP2_CORRUPT">
            <summary>File corrupt </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JP2_PREC_TOO_HIGH">
            <summary>Image precision too high </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JP2_ENCODING_ERROR">
            <summary>Error while encoding </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HOBJ_NOT_ONLY_IMAGES">
            <summary>File does not contain only images </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_BLOCK">
            <summary>Socket can not be set to block </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_UNBLOCK">
            <summary>Socket can not be set to unblock </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_NO_CPAR">
            <summary>Received data is no tuple </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_NO_IMAGE">
            <summary>Received data is no image </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_NO_RL">
            <summary>Received data is no region </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_NO_XLD">
            <summary>Received data is no xld object </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_READ_DATA_FAILED">
            <summary>Error while reading from socket </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_WRITE_DATA_FAILED">
            <summary>Error while writing to socket </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_WRONG_BYTE_NUMBER">
            <summary>Illegal number of bytes with get_rl </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_BUFFER_OVERFLOW">
            <summary>Buffer overflow in read_data </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_CANT_ASSIGN_FD">
            <summary>Socket can not be created </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_CANT_BIND">
            <summary>Bind on socket failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_CANT_GET_PORTNUMBER">
            <summary>Socket information is not available </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_CANT_LISTEN">
            <summary>Socket cannot listen for incoming connections </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_CANT_ACCEPT">
            <summary>Connection could not be accepted </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_CANT_CONNECT">
            <summary>Connection request failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_GETHOSTBYNAME">
            <summary>Hostname could not be resolved </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_ILLEGAL_TUPLE_TYPE">
            <summary>Unknown tuple type on socket </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_TIMEOUT">
            <summary>Timeout occured on socket </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_NA">
            <summary>No more sockets available </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_NI">
            <summary>Socket is not initialized </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_OOR">
            <summary>Invalid socket </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_IS">
            <summary>Socket is NULL </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_DATA_TOO_LARGE">
            <summary>Received data type is too large </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_WRONG_TYPE">
            <summary>Wrong socket type. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_NO_PACKED_DATA">
            <summary>Received data is not packed. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_PARAM_FAILED">
            <summary>Socket parameter operation failed. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_FORMAT_MISMATCH">
            <summary>The data does not match the format specification. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_INVALID_FORMAT">
            <summary>Invalid format specification. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SOCKET_NO_SERIALIZED_ITEM">
            <summary>Received data is no serialized item </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ARCINFO_TOO_MANY_XLDS">
            <summary>Too many contours/polygons for this file format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_QUAT_WRONG_VERSION">
            <summary>The version of the quaternion is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_QUAT_NOSITEM">
            <summary>Serialized item does not contain a valid quaternion</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HOM_MAT2D_WRONG_VERSION">
            <summary>The version of the homogeneous matrix is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HOM_MAT2D_NOSITEM">
            <summary>Serialized item does not contain a valid homogeneous matrix </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HOM_MAT3D_WRONG_VERSION">
            <summary>The version of the homogeneous 3D matrix is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_HOM_MAT3D_NOSITEM">
            <summary>Serialized item does not contain a valid homogeneous 3D matrix </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TUPLE_WRONG_VERSION">
            <summary>The version of the tuple is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TUPLE_NOSITEM">
            <summary>Serialized item does not contain a valid tuple </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TUPLE_DTLFTHV">
            <summary>Tuple data can only be read on 64-bit systems </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_POSE_WRONG_VERSION">
            <summary>The version of the camera parameters (pose) is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_POSE_NOSITEM">
            <summary>Serialized item does not contain valid camera parameters (pose) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAM_PAR_WRONG_VERSION">
            <summary>The version of the internal camera parameters is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAM_PAR_NOSITEM">
            <summary>Serialized item does not contain valid internal camera parameters </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NP">
            <summary>Access to undefined memory area </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MEM">
            <summary>Not enough memory available </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ICM">
            <summary>Memory partition on heap has been overwritten </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WMS">
            <summary>HAlloc: 0 bytes requested </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOTMP">
            <summary>Tmp-memory management: Call freeing memory although nothing had been allocated </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TMPNULL">
            <summary>Tmp-memory management: Null pointer while freeing </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CNFMEM">
            <summary>Tmp-memory management: Could not find memory element </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WMT">
            <summary>memory management: wrong memory type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MEM_VID">
            <summary>Not enough video memory available </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NRA">
            <summary>No memory block allocated at last </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IAD">
            <summary>System parameter for memory-allocation inconsistent </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_INVALID_ALIGN">
            <summary>Invalid alignement </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CP_FAILED">
            <summary>Process creation failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WOCPI">
            <summary>Wrong index for output control par. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WOCPVN">
            <summary>Wrong number of values: Output control parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WOCPT">
            <summary>Wrong type: Output control parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WKT">
            <summary>Wrong data type for object key (input objects) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IOOR">
            <summary>Range for integer had been passed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IHV">
            <summary>Inconsistent Halcon version </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NISS">
            <summary>Not enough memory for strings allocated </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PROC_NULL">
            <summary>Internal error: Proc is NULL </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WLST">
            <summary>Wrong list structure using input objects </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIOP">
            <summary>Wrong input object parameter (not bound) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WICP">
            <summary>Wrong input control par. (not bound) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WOOP">
            <summary>Wrong output object par. (already bound) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WOCP">
            <summary>Wrong output control par.(already bound) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_UNKN">
            <summary>Unknown symbolic object key (input obj.) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WOON">
            <summary>Wrong number of output object parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WNOIP">
            <summary>Wrong number of input parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OTSE">
            <summary>Output type &lt;string&gt; expected </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OTLE">
            <summary>Output type &lt;long&gt; expected </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OTFE">
            <summary>Output type &lt;float&gt; expected </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OPINP">
            <summary>Object parameter is a zero pointer </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TWC">
            <summary>Tupel had been deleted; values are not valid any more </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CPPWOM">
            <summary>CPP-interface internal error: Wrong object mode </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CPPWNOR">
            <summary>Wrong number of regions (&gt; 1) for type HRegion </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CPPWNOI">
            <summary>Wrong number of images (&gt; 1) for type HImage </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TNOVAL">
            <summary>Tupel with undefined values </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_RPCS">
            <summary>No contact to RPC server </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_RPC">
            <summary>Error in remote procedure call </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SWI_NOLIST">
            <summary>Parameter value is neither a list nor a atom </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WPRN">
            <summary>Unknown operator name </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_RCNA">
            <summary>register_comp_used is not activated </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WPC">
            <summary>Unknown operator class </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ORMF">
            <summary>convol/mask: Error while opening file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_EOFRMF">
            <summary>convol/mask: Premature end of file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CVTRMF">
            <summary>convol/mask: Conversion error </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_LCNRMF">
            <summary>convol/mask: Wrong row-/column number </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WCOVRMF">
            <summary>convol/mask: Mask size overflow </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NEOFRMF">
            <summary>convol/mask: Too many elements entered </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRRA">
            <summary>convol: Wrong margin type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MCN0">
            <summary>convol: No mask object has got empty region </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WF0">
            <summary>convol: Weight factor is 0 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NWC">
            <summary>convol: Inconsistent number of weights </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRRV">
            <summary>rank: Wrong rank value </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ROVFL">
            <summary>convol/rank: Error while handling margin </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_EWPMF">
            <summary>Error while parsing filter mask file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WNUMM">
            <summary>Wrong number of coefficients for convolution (sigma too big?) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WBEDN">
            <summary>No valid ID for data set </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NBEDA">
            <summary>No data set active (set_bg_esti) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BEDNAU">
            <summary>ID already used for data set </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NBEDC">
            <summary>No data set created (create_bg_esti) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NTM">
            <summary>Not possible to pass an object list </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WISBE">
            <summary>Image has other size than the background image in data set </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_UDNSSBE">
            <summary>Up-date-region is bigger than background image </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SNBETS">
            <summary>Number of statistic data sets is too small </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WAMBE">
            <summary>Wrong value for adapt mode </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WFMBE">
            <summary>Wrong value for frame mode </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_MEM1">
            <summary>Maximum number of fonts exceeded </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_WID">
            <summary>Wrong ID (Number) for font </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR1">
            <summary>OCR internal error: wrong ID </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_NNI">
            <summary>OCR not initialised: no font was read in </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_NAI">
            <summary>No font activated </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_WTP">
            <summary>OCR internal error: Wrong threshold in angle determination </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_WF">
            <summary>OCR internal error: Wrong attribute </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_READ">
            <summary>The version of the OCR classifier is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_NODES">
            <summary>OCR File: Inconsistent number of nodes </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_EOF">
            <summary>OCR File: File too short </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_INC1">
            <summary>OCR: Internal error 1 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_INC2">
            <summary>OCR: Internal error 2 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WOCRTYPE">
            <summary>Wrong type of OCR tool (no 'box' or 'net') </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_TRF">
            <summary>The version of the OCR training characters is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TRF_ITL">
            <summary>Image too large for training file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TRF_RTL">
            <summary>Region too large for training file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TRF_PT">
            <summary>Protected OCR training file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TRF_WPW">
            <summary>Protected OCR training file: wrong passw. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_NOSITEM">
            <summary>Serialized item does not contain a valid OCR classifier </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TRF_CON_EIO">
            <summary>OCR training file concatenation failed: identical input and output files </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_MLP_NOCLASSFILE">
            <summary>Invalid file format for MLP classifier </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_MLP_WRCLASSVERS">
            <summary>The version of the MLP classifier is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_MLP_NOSITEM">
            <summary>Serialized item does not contain a valid MLP classifier </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_SVM_NOCLASSFILE">
            <summary>Invalid file format for SVM classifier </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_SVM_WRCLASSVERS">
            <summary>The version of the SVM classifier is not supported</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_SVM_NOSITEM">
            <summary>Serialized item does not contain a valid SVM classifier </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_KNN_NOCLASSFILE">
            <summary>Invalid file format for k-NN classifier </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCR_KNN_NOSITEM">
            <summary>Serialized item does not contain a valid k-NN classifier </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_INVALID_TEXT_MODEL_ID">
            <summary>Invalid text model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_INVALID_TEXT_RESULT_ID">
            <summary>Invalid text result </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCV_NI">
            <summary>OCV system not initialized </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WOCVTYPE">
            <summary>The version of the OCV tool is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCV_WNAME">
            <summary>Wrong name for an OCV object </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCV_II">
            <summary>Training has already been applied </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCV_NOTTR">
            <summary>No training has been applied </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OCV_NOSITEM">
            <summary>Serialized item does not contain a valid OCV tool </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WLENGTH">
            <summary>Wrong number of function points </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_FUNCTION">
            <summary>List of values is not a function </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOT_ASCENDING">
            <summary>Wrong ordering of values (not ascending)</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_ILLEGAL_DIST">
            <summary>Illegal distance of function points </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOT_MONOTONIC">
            <summary>Function is not monotonic. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WFUNCTION">
            <summary>Wrong function type. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GRID_CONNECT_POINTS">
            <summary>The input points could not be arranged in a regular grid </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GRID_GEN_MAP">
            <summary>Error while creating the output map </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_GRID_AUTO_ROT">
            <summary>Auto rotation failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_LCALP">
            <summary>At least 3 calibration points have to be indicated </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_INCONSISTENT_FP">
            <summary>Inconsistent finder pattern positions </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_NCPF">
            <summary>No calibration table found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_RECPF">
            <summary>Error while reading calibration table description file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_LTMTH">
            <summary>Minimum threshold while searching for ellipses </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_FRCP">
            <summary>Read error / format error in calibration table description file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_PROJ">
            <summary>Error in projection: s_x = 0 or s_y = 0 or z = 0 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_UNPRO">
            <summary>Error in inverse projection </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_RICPF">
            <summary>Not possible to open camera parameter file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_FICP1">
            <summary>Format error in file: No colon </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_FICP2">
            <summary>Format error in file: 2. colon is missing </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_FICP3">
            <summary>Format error in file: Semicolon is missing </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_REPOS">
            <summary>Not possible to open camera parameter (pose) file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_FOPOS">
            <summary>Format error in camera parameter (pose) file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_OCPDF">
            <summary>Not possible to open calibration target description file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_OCPPS">
            <summary>Not possible to open postscript file of calibration target </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_EVECN">
            <summary>Error while norming the vector </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_NPLAN">
            <summary>Fitting of calibration target failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_NNMAR">
            <summary>No next mark found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_NNEQU">
            <summary>Normal equation system is not solvable </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_QETHM">
            <summary>Average quadratic error is too big for 3D position of mark </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_NOELL">
            <summary>Non elliptic contour </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_WPARV">
            <summary>Wrong parameter value slvand() </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_WFRES">
            <summary>Wrong function results slvand() </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_ECPDI">
            <summary>Distance of marks in calibration target description file is not possible </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_WEFLA">
            <summary>Specified flag for degree of freedom not valid </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_NOMER">
            <summary>Minimum error did not fall below </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_WPTYP">
            <summary>Wrong type in Pose (rotation / translation) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_WIMSZ">
            <summary>Image size does not match the measurement in camera parameters </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_NPILS">
            <summary>Point could not be projected into linescan image </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_DIACM">
            <summary>Diameter of calibration marks could not be determined </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_ORICP">
            <summary>Orientation of calibration plate could not be determined </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_CPNII">
            <summary>Calibration plate does not lie completely inside the image </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_WNCME">
            <summary>Wrong number of calibration marks extracted </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_UNKPG">
            <summary>Unknown name of parameter group </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_NEGFL">
            <summary>Focal length must be non-negative </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_TELNA">
            <summary>Function not available for cameras with telecentric lenses </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_LSCNA">
            <summary>Function not available for line scan cameras </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_ELLDP">
            <summary>Ellipse is degenerated to a point </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_NOMF">
            <summary>No orientation mark found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_NCONV">
            <summary>Camera calibration did not converge </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_EICD">
            <summary>Error in calibration data, try to recalibrate with improved input data! </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_DISTORT">
            <summary>Point cannot be distorted. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_WREDGFILT">
            <summary>Wrong edge filter. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_NEGPS">
            <summary>Pixel size must be non-negative or zero </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_NEGTS">
            <summary>Tilt is in the wrong range </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_NEGRS">
            <summary>Rot is in the wrong range </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_NOT_OPTIMIZED">
            <summary>model not optimized yet - no res's</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_NOT_POSTPROCC">
            <summary>auxilary model results not available </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_NOT_INTERCONN">
            <summary>setup not 'visibly' interconnected </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_CAMPAR_MISMCH">
            <summary>camera parameter mismatch </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_CAMTYP_MISMCH">
            <summary>camera type mismatch </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_CAMTYP_UNSUPD">
            <summary>camera type not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_INVALD_CAMIDX">
            <summary>invalid camera ID </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_INVALD_DESCID">
            <summary>invalid cal.obj. ID </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_INVALD_COBJID">
            <summary>invalid cal.obj. instance ID </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_UNDEFINED_CAM">
            <summary>undefined camera </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_REPEATD_INDEX">
            <summary>repeated observ. index </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_UNDEFI_CADESC">
            <summary>undefined calib. object description </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_NO_DESCR_FILE">
            <summary>Invalid file format for calibration data model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_WR_DESCR_VERS">
            <summary>The version of the calibration data model is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_ZERO_MOTION">
            <summary>zero-motion in linear scan camera </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_MULTICAM_UNSP">
            <summary>multi-camera and -calibobj not supported for all camera types </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_INCMPLTE_DATA">
            <summary>incomplete data, required for legacy calibration </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CSM_NO_DESCR_FIL">
            <summary>Invalid file format for camera setup model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CSM_WR_DESCR_VER">
            <summary>The version of the camera setup model is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_CALTAB_NOT_AV">
            <summary>full HALCON-caltab descr'n required </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_INVAL_OBSERID">
            <summary>invalid observation ID </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CSM_NOSITEM">
            <summary>Serialized item does not contain a valid camera setup model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_NOSITEM">
            <summary>Serialized item does not contain a valid calibration data model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_INV_TOOLPOSID">
            <summary>Invalid tool pose id </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_UNDEFINED_TOO">
            <summary>Undefined tool pose </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_INVLD_MODL_TY">
            <summary>Invalid calib data model type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CSM_UNINIT_CAM">
            <summary>The camera setup model contains an uninitialized camera </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_NO_VALID_SOL">
            <summary>The hand-eye algorithm failed to find a solution. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_INVAL_OBS_POSE">
            <summary>invalid observation pose </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_TOO_FEW_POSES">
            <summary>Not enough calibration object poses </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CM_UNDEF_CAM_TYP">
            <summary>undefined camera type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM_INVLD_MODL_TY">
            <summary>invalid stereo model type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM_NOT_PERSISTEN">
            <summary>stereo model is not in persistent mode </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM_INVLD_BOU_BOX">
            <summary>invalid bounding box </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SR_INVLD_IMG_SIZ">
            <summary>stereo reconstruction: image sizes must correspond to camera setup </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SR_BBOX_BHND_CAM">
            <summary>bounding box is behind basis line </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_AMBIGIOUS">
            <summary>Ambigious calibration: Please, recalibrate with improved input data!</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_PCPND">
            <summary>Pose of calibration plate not determined </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_FAILED">
            <summary>Calibration failed: Please check your input data and calibrate again! </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_MISSING_DATA">
            <summary>No observation data supplied! </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CAL_FEWER_FOUR">
            <summary>The calibration object has to be seen at least once by every camera, if less than four cameras are used. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOAP">
            <summary>Invalid file format for template </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WPFV">
            <summary>The version of the template is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MATCH_MODE">
            <summary>Error during changing the file mode </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MATCH_OOR">
            <summary>Inconsistent match file: Coordinates out of range </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOTAP">
            <summary>The image(s) is not a pyramid </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NGTPTS">
            <summary>Number of template points too small </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PDTL">
            <summary>Template data can only be read by HALCON XL </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NCC_NOSITEM">
            <summary>Serialized item does not contain a valid NCC model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MATCH_NOSITEM">
            <summary>Serialized item does not contain a valid template </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NTPTS">
            <summary>Number of shape model points too small </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CGSMM">
            <summary>Gray and color shape models mixed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SMTL">
            <summary>Shape model data can only be read by HALCON XL </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SMNXLD">
            <summary>Shape model was not created from XLDs </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM_NOSITEM">
            <summary>Serialized item does not contain a valid shape model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_COMP_DRT">
            <summary>Initial components have different region types </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_COMP_SAMF">
            <summary>Solution of ambiguous matches failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IGF_NC">
            <summary>Computation of the incomplete gamma function not converged </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MSA_TMN">
            <summary>Too many nodes while computing the minimum spanning arborescence </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CTTL">
            <summary>Component training data can only be read by HALCON XL </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CMTL">
            <summary>Component model data can only be read by HALCON XL </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_COMP_NOSITEM">
            <summary>Serialized item does not contain a valid component model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TRAIN_COMP_NOSITEM">
            <summary>Serialized item does not contain a valid component training result </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_VARIATION_WS">
            <summary>Size of the training image and the variation model differ </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_VARIATION_PREP">
            <summary>Variation model has not been prepared for segmentation </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_VARIATION_WRMD">
            <summary>Invalid variation model training mode </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_VARIATION_NOVF">
            <summary>Invalid file format for variation model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_VARIATION_WVFV">
            <summary>The version of the variation model is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_VARIATION_TRDC">
            <summary>Training data has been cleared </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_VARIATION_NOSITEM">
            <summary>Serialized item does not contain a valid variation model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MEASURE_NA">
            <summary>No more measure objects available </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MEASURE_NI">
            <summary>Measure object is not initialized </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MEASURE_OOR">
            <summary>Invalid measure object </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MEASURE_IS">
            <summary>Measure object is NULL </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MEASURE_WS">
            <summary>Measure object has wrong image size </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MEASURE_NO_MODEL_FILE">
            <summary>Invalid file format for measure object </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MEASURE_WRONG_VERSION">
            <summary>The version of the measure object is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MEASURE_TL">
            <summary>Measure object data can only be read by HALCON XL </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MEASURE_NOSITEM">
            <summary>Serialized item does not contain a valid measure object </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_METROLOGY_MODEL_NI">
            <summary>Metrology model is not initialized </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_METROLOGY_MODEL_INVALID">
            <summary>Invalid metrology model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_METROLOGY_OBJECT_INVALID">
            <summary>Invalid metrology object </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_METROLOGY_FIT_NOT_ENOUGH_MEASURES">
            <summary>Not enough valid measures for fitting the metrology object </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_METROLOGY_NO_MODEL_FILE">
            <summary>Invalid file format for metrology model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_METROLOGY_WRONG_VERSION">
            <summary>The version of the metrology model is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_METROLOGY_NO_FUZZY_FUNC">
            <summary>Fuzzy function is not set </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_METROLOGY_NOSITEM">
            <summary>Serialized item does not contain a valid metrology model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_METROLOGY_UNDEF_CAMPAR">
            <summary>Camera parameters are not set </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_METROLOGY_UNDEF_POSE">
            <summary>Pose of the measurement plane is not set </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_METROLOGY_SET_MODE">
            <summary>Mode of metrology model cannot be set since an object has already been added </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_METROLOGY_OP_NOT_ALLOWED">
            <summary>If the pose of the metrology object has been set several times, the operator is not longer allowed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_METROLOGY_MULTI_POSE_CAM_PAR">
            <summary>All objects of a metrology model must have the same world pose and camera parameters. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_METROLOGY_WRONG_INPUT_MODE">
            <summary>Input type of metrology model does not correspond with the current input type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DLOPEN">
            <summary>Dynamic library could not be opened </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DLCLOSE">
            <summary>Dynamic library could not be closed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DLLOOKUP">
            <summary>Symbol not found in dynamic library </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_EAD_CAL_NII">
            <summary>Not enough information for rad. calib. </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR_UNKNOWN">
            <summary>Unkown bar code </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR_WNOM">
            <summary>Wrong number of modules </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR_WNOE">
            <summary>Wrong number of elements </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR_UNCHAR">
            <summary>Unknown character (for this code) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR_WRONGDESCR">
            <summary>Wrong name for attribute in barcode descriptor </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR_EL_LENGTH">
            <summary>Wrong thickness of element </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR_NO_REG">
            <summary>No region found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR_WRONGCODE">
            <summary>Wrong type of bar code </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR_NOTFOUND">
            <summary>Bar code not found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BC_INVALID_HANDLE">
            <summary>Invalid bar code handle </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BC_EMPTY_MODEL_LIST">
            <summary>Empty model list </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BC_TRAIN_ONLY_SINGLE">
            <summary>Training cannot be done for multiple bar code types </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BC_GET_SPECIFIC">
            <summary>Cannot get bar code type specific parameter with get_bar_code_param. Use get_bar_code_param_specific </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BC_GET_OBJ_MULTI">
            <summary>Cannot get this object for multiple bar code types. Try again with single bar code type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BC_WR_FILE_FORMAT">
            <summary>Wrong binary (file) format </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BC_WR_FILE_VERS">
            <summary>Wrong version of binary file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BC_NOT_PERSISTANT">
            <summary>The model must be in persistency mode to deliver the required object/result </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR2D_UNKNOWN_TYPE">
            <summary>Specified code type is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR2D_WRONG_FOREGROUND">
            <summary>Wrong foreground specified </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR2D_WRONG_SIZE">
            <summary>Wrong matrix size specified </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR2D_WRONG_SHAPE">
            <summary>Wrong symbol shape specified </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR2D_WRONG_PARAM_NAME">
            <summary>Wrong generic parameter name </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR2D_WRONG_PARAM_VAL">
            <summary>Wrong generic parameter value </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR2D_WRONG_MODE">
            <summary>Wrong symbol printing mode </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR2D_SYMBOL_ON_BORDER">
            <summary>Symbol region too near to image border </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR2D_MODULE_CONT_NUM">
            <summary>No rectangular modul boundings found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR2D_SYMBOL_FINDER">
            <summary>Couldn't identify symbol finder </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR2D_SYMBOL_DIMENSION">
            <summary>Symbol region with wrong dimension </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR2D_CLASSIF_FAILED">
            <summary>Classification failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR2D_DECODING_FAILED">
            <summary>Decoding failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BAR2D_DECODING_READER">
            <summary>Reader programing not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_GENERAL">
            <summary>General 2d data code error </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_BROKEN_SIGN">
            <summary>Corrupt signature of 2d data code handle </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_INVALID_HANDLE">
            <summary>Invalid 2d data code handle </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_EMPTY_MODEL_LIST">
            <summary>List of 2d data code models is empty </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_NOT_INITIALIZED">
            <summary>Access to uninitialized (or not persistent) internal data </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_INVALID_CANDIDATE">
            <summary>Invalid 'Candidate' parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_INDEX_PARNUM">
            <summary>It's not possible to return more than one parameter for several candidates </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_EXCLUSIV_PARAM">
            <summary>One of the parameters returns several values and has to be used exclucively for a single candidate </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_DEF_SET_NOT_FIRST">
            <summary>Parameter for default settings must be the first in the parameter list </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_INTERNAL_UNEXPECTED">
            <summary>Unexpected 2d data code error </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_PARAM_VALUE">
            <summary>Invalid parameter value </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_PARAM_NAME">
            <summary>Unknown parameter name </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_POLARITY">
            <summary>Invalid 'polarity' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_SYMBOL_SHAPE">
            <summary>Invalid 'symbol_shape' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_SYMBOL_SIZE">
            <summary>Invalid symbol size </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_MODULE_SIZE">
            <summary>Invalid module size </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_MODULE_SHAPE">
            <summary>Invalid 'module_shape' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_ORIENTATION">
            <summary>Invalid 'orientation' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_CONTRAST">
            <summary>Invalid 'contrast_min' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_MEAS_THRESH">
            <summary>Invalid 'measure_thresh' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_ALT_MEAS_RED">
            <summary>Invalid 'alt_measure_red' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_SLANT">
            <summary>Invalid 'slant_max' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_L_DIST">
            <summary>Invalid 'L_dist_max' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_L_LENGTH">
            <summary>Invalid 'L_length_min' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_GAP">
            <summary>Invalid module gap </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_DEF_SET">
            <summary>Invalid 'default_parameters' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_TEXTURED">
            <summary>Invalid 'back_texture' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_MIRRORED">
            <summary>Invalid 'mirrored' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_CLASSIFICATOR">
            <summary>Invalid 'classificator' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_PERSISTENCE">
            <summary>Invalid 'persistence' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_MODEL_TYPE">
            <summary>Invalid model type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_MOD_ROI_PART">
            <summary>Invalid 'module_roi_part' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_FP_TOLERANCE">
            <summary>Invalid 'finder_pattern_tolerance' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_MOD_ASPECT">
            <summary>Invalid 'mod_aspect_max' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_SM_ROBUSTNESS">
            <summary>Invalid 'small_modules_robustness' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_CONTRAST_TOL">
            <summary>Invalid 'contrast_tolerance' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_READ_HEAD_FORMAT">
            <summary>Invalid header in 2d data code model file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_READ_HEAD_SIGN">
            <summary>Invalid code signature in 2d data code model file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_READ_LINE_FORMAT">
            <summary>Corrupted line in 2d data code model file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_MODULE_ASPECT">
            <summary>Invalid module aspect ratio </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_WRONG_LAYER_NUM">
            <summary>wrong number of layers </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DCD_READ_WRONG_VERSION">
            <summary>wrong data code model version </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DC2D_NOSITEM">
            <summary>Serialized item does not contain a valid 2D data code model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_PARAM_NAME">
            <summary>Invalid parameter value </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_NUM_LEVELS">
            <summary>Invalid 'num_levels' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_OPTIMIZATION">
            <summary>Invalid 'optimization' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_METRIC">
            <summary>Invalid 'metric' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_MIN_FACE_ANGLE">
            <summary>Invalid 'min_face_angle' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_MIN_SIZE">
            <summary>Invalid 'min_size' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_MODEL_TOLERANCE">
            <summary>Invalid 'model_tolerance' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_FAST_POSE_REF">
            <summary>Invalid 'fast_pose_refinment'</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_LOWEST_MODEL_LEVEL">
            <summary>Invalid 'lowest_model_level'</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_PART_SIZE">
            <summary>Invalid 'part_size'</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_PROJECTION_TOO_LARGE">
            <summary>The projected model is too large (increase the value for DistMin or the image size in CamParam) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_OPENGL_ACCURACY">
            <summary>Invalid 'opengl_accuracy'</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_RECOMPUTE_SCORE">
            <summary>Invalid 'recompute_score'</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_LON_MIN">
            <summary>Invalid 'longitude_min' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_LON_MAX">
            <summary>Invalid 'longitude_max' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_LAT_MIN">
            <summary>Invalid 'latitude_min </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_LAT_MAX">
            <summary>Invalid 'latitude_max' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_ROL_MIN">
            <summary>Invalid 'cam_roll_min' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_ROL_MAX">
            <summary>Invalid 'cam_roll_max' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_DIST_MIN">
            <summary>Invalid 'dist_min' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_DIST_MAX">
            <summary>Invalid 'dist_max' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_NUM_MATCHES">
            <summary>Invalid 'num_matches' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_MAX_OVERLAP">
            <summary>Invalid 'max_overlap' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_POSE_REFINEMENT">
            <summary>Invalid 'pose_refinement' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_COV_POSE_MODE">
            <summary>Invalid 'cov_pose_mode' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_OUTLIER_SUP">
            <summary>In. 'outlier_suppression' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_BORDER_MODEL">
            <summary>Invalid 'border_model' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_UNDEFINED_POSE">
            <summary>Pose is not well-defined </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_NO_SM3D_FILE">
            <summary>Invalid file format for 3D shape model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_FILE_VERSION">
            <summary>The version of the 3D shape model is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_MTL">
            <summary>3D shape model can only be read by HALCON XL </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_NO_OM3D_FACES">
            <summary>3D object model does not contain any faces </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_NOSITEM">
            <summary>Serialized item does not contain a valid 3D shape model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SM3D_WRONG_UNION_ADJACENT_CONTOURS">
            <summary>Invalid 'union_adjacent_contours' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DESCR_NODESCRFILE">
            <summary>Invalid file format for descriptor model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DESCR_WRDESCRVERS">
            <summary>The version of the descriptor model is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_NUM_CIRC_RADIUS">
            <summary>Invalid 'radius' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_NUM_CHECK_NEIGH">
            <summary>Invalid 'check_neighbor' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_NUM_MIN_CHECK_NEIGH">
            <summary>Invalid 'min_check_neighbor_diff' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_NUM_MIN_SCORE">
            <summary>Invalid 'min_score' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_NUM_SIGMAGRAD">
            <summary>Invalid 'sigma_grad' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_NUM_SIGMAINT">
            <summary>Invalid 'sigma_smooth' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_NUM_ALPHA">
            <summary>Invalid 'alpha' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_NUM_THRESHOLD">
            <summary>Invalid 'threshold' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_NUM_DEPTH">
            <summary>Invalid 'depth' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_NUM_TREES">
            <summary>Invalid 'number_trees' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_NUM_MIN_SCORE_DESCR">
            <summary>Invalid 'min_score_descr' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_NUM_PATCH_SIZE">
            <summary>Invalid 'patch_size' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_TILT">
            <summary>Invalid 'tilt' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_PAR_GUIDE">
            <summary>Invalid 'guided_matching' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_PAR_SUBPIX">
            <summary>Invalid 'subpix' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_TOO_FEW_POINTS">
            <summary>Too few feature points can be found </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_NUM_MINROT">
            <summary>Invalid 'min_rot' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_NUM_MAXROT">
            <summary>Invalid 'max_rot' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_NUM_MINSCALE">
            <summary>Invalid 'min_scale' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_NUM_MAXSCALE">
            <summary>Invalid 'max_scale' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_NUM_MASKSIZEGRD">
            <summary>Invalid 'mask_size_grd' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_NUM_MASKSIZESMOOTH">
            <summary>Invalid 'mask_size_smooth' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_BROKEN_MODEL">
            <summary>Model broken </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_DESCR_TYPE">
            <summary>Invalid 'descriptor_type' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_WRONG_PAR_MATCHER">
            <summary>Invalid 'matcher' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DM_TOO_MANY_CLASSES">
            <summary>Too many point classes - cannot be written to file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DESCR_NOSITEM">
            <summary>Serialized item does not contain a valid descriptor model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOT_IMPL">
            <summary>Function not implemented on this machine </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIT">
            <summary>Image to process has wrong gray value type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIC">
            <summary>Wrong image component </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_UNDI">
            <summary>Undefined gray values </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WIS">
            <summary>Wrong image format for operation (too big or too small) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WCN">
            <summary>Wrong number of image components for image output </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_STRTL">
            <summary>String is too long (max. 1024 characters) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WITFO">
            <summary>Wrong pixel type for this operation </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NIIT">
            <summary>Operation not realized yet for this pixel type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NOCIMA">
            <summary>Image is no color image with three channels </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEMO_NOFG">
            <summary>Image acquisition devices are not supported in the demo version </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEMO_NOPA">
            <summary>Packages are not supported in the demo version </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IEUNKV">
            <summary>Internal Error: Unknown value</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WPFO">
            <summary>Wrong paramter for this operation </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_IDTS">
            <summary>Image domain too small </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CNCLDRW">
            <summary>Draw operator has been canceled </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_STUD_OPNA">
            <summary>Operator is not available in the student version of HALCON </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_STUD_PANA">
            <summary>Packages are not available in the student version of HALCON </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_STUD_FGNA">
            <summary>The selected image acquisition device is not available in the student version of HALCON</summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NDPA">
            <summary>No data points available </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TMU">
            <summary>Too many unknown variables in linear equation </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NUS">
            <summary>No (unique) solution for the linear equation </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NEE">
            <summary>Too little equations in linear equation </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_PDDL">
            <summary>Points do not define a line </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MNI">
            <summary>Matrix is not invertible </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SVD_CNVRG">
            <summary>Singular value decomposition did not converge </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SVD_FEWROW">
            <summary>Matrix has too few rows for singular value partition </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TQLI_CNVRG">
            <summary>Eigenvalue computation did not converge </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_JACOBI_CNVRG">
            <summary>Eigenvalue computation did not converge </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MATRIX_SING">
            <summary>Matrix is singular </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MATCH_CNVRG">
            <summary>Function matching did not converge </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MAT_UNDEF">
            <summary>Input matrix undefined </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MAT_WDIM">
            <summary>Input matrix with wrong dimension </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MAT_NSQR">
            <summary>Input matrix is not quadratic </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MAT_FAIL">
            <summary>Matrix operation failed </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MAT_NPD">
            <summary>Matrix is not positive definite </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MAT_DBZ">
            <summary>Matrix element division by 0 </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MAT_NUT">
            <summary>Matrix is not an upper triangular matrix </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MAT_NLT">
            <summary>Matrix is not a lower triangular matrix </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MAT_NEG">
            <summary>Matrix element is negative </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MAT_UNCHAR">
            <summary>Matrix file: Invalid character </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MAT_NOT_COMPLETE">
            <summary>Matrixdatei: Matrix unvollstÃ¤ndig </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MAT_READ">
            <summary>Invalid file format for matrix </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MAT_COMPLEX">
            <summary>Resulting matrix has complex values </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WMATEXP">
            <summary>Wrong value in matrix of exponents </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MAT_WRONG_VERSION">
            <summary>The version of the matrix is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_MAT_NOSITEM">
            <summary>Serialized item does not contain a valid matrix </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WNODE">
            <summary>Internal Error: Wrong Node </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_CMP_INCONSISTENT">
            <summary>Inconsistent red black tree </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_LAPACK_PAR">
            <summary>Internal error </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_STRI_NPNT">
            <summary>Number of points too small </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_STRI_COLL">
            <summary>First 3 points are collinear </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_STRI_IDPNT">
            <summary>Identical points in triangulation </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_STRI_NALLOC">
            <summary>Array not allocated large enough </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_STRI_DEGEN">
            <summary>Triangle is degenerate </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_STRI_ITRI">
            <summary>Inconsistent triangulation </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_STRI_SELFINT">
            <summary>Self-intersecting polygon </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_STRI_INCONS">
            <summary>Inconsistent polygon data </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_STRI_AMBINT">
            <summary>Ambiguous great circle arc intersection </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_STRI_AMBARC">
            <summary>Ambiguous great circle arc </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_STRI_ILLPAR">
            <summary>Illegal parameter </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TRI_NPNT">
            <summary>Not enough points for planar triangular meshing </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TRI_COLL">
            <summary>The first three points of the triangular meshing are collinear </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TRI_IDPNT">
            <summary>Planar triangular meshing contains identical input points </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TRI_IDPNTIN">
            <summary>Invalid points for planar triangular meshing </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TRI_NALLOC">
            <summary>Internal error: allocated array too small for planar triangular meshing </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TRI_ITRI">
            <summary>Internal error: planar triangular meshing inconsistent </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TRI_OUTR">
            <summary>Node index outside triangulation range </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WSPVP">
            <summary>Eye point and reference point coincide </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TIMEOUT">
            <summary>Timeout occurred </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_WRONG_TIMEOUT">
            <summary>Invalid 'timeout' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_TIMEOUT_AFTER_SBM_CLEAR">
            <summary>Timeout occured after cached transformations have been freed (internal error) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEFORM_WRONG_NUM_CLUSTER">
            <summary>Invalid 'sub_object_size' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEFORM_WRONG_NUM_MIN_SIZE">
            <summary>Invalid 'min_size' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEFORM_WRONG_NUM_LSQ">
            <summary>Invalid number of least-squares iterations </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEFORM_WRONG_ANGLE_STEP">
            <summary>Invalid 'angle_step' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEFORM_WRONG_SCALE_R_STEP">
            <summary>Invalid 'scale_r_step' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEFORM_WRONG_SCALE_C_STEP">
            <summary>Invalid 'scale_c_step' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEFORM_WRONG_MAX_ANGLE">
            <summary>Invalid 'max_angle_distortion' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEFORM_WRONG_MAX_ANISO">
            <summary>Invalid 'max_aniso_scale_distortion' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEFORM_WRONG_MIN_SIZE">
            <summary>Invalid 'min_size' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEFORM_WRONG_COV_POSE_MODE">
            <summary>Invalid 'cov_pose_mode' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEFORM_NO_CALIBRATION_INFO">
            <summary>Model contains no calibration information </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEFORM_WRONG_PARAM_NAME">
            <summary>Generic parameter name does not exist </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEFORM_IMAGE_TO_CAMERA_DIFF">
            <summary>camera has different resolution than image </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEFORM_NO_MODEL_IN_FILE">
            <summary>Invalid file format for deformable model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEFORM_WRONG_VERSION">
            <summary>The version of the deformable model is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEFORM_WRONG_SMOOTH_DEFORM">
            <summary>Invalid 'deformation_smoothness' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEFORM_WRONG_EXPAND_BORDER">
            <summary>Invalid 'expand_border' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEFORM_ORIGIN_OUTSIDE_TEMPLATE">
            <summary>Model origin outside of axis-aligned bounding rectangle of template region </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_DEFORM_NOSITEM">
            <summary>Serialized item does not contain a valid deformable model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SFM_NO_POINTS">
            <summary>Object model has no points </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SFM_NO_FACES">
            <summary>Object model has no faces </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SFM_NO_NORMALS">
            <summary>Object model has no normals </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SFM_NO_SFM_FILE">
            <summary>Invalid file format for 3D surface model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SFM_WRONG_FILE_VERSION">
            <summary>The version of the 3D surface model is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SFM_NOSITEM">
            <summary>Serialized item does not contain a valid 3D surface model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_INVALID_FILE">
            <summary>Invalid 3D file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_INVALID_MODEL">
            <summary>Invalid 3D Object Model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_UNKNOWN_FILE_TYPE">
            <summary>Unknown 3D file type </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_WRONG_FILE_VERSION">
            <summary>The version of the 3D object model is not supported </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_MISSING_ATTRIB">
            <summary>Required attribute is missing </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_MISSING_ATTRIB_V_COORD">
            <summary>Required attribute point_coord is missing </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_MISSING_ATTRIB_V_NORMALS">
            <summary>Required attribute point_normal is missing </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_MISSING_ATTRIB_F_TRIANGLES">
            <summary>Required attribute face_triangle is missing </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_MISSING_ATTRIB_F_LINES">
            <summary>Required attribute line_array is missing </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_MISSING_ATTRIB_F_TRINEIGB">
            <summary>Required attribute f_trineighb is missing </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_MISSING_ATTRIB_F_POLYGONS">
            <summary>Required attribute face_polygon is missing </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_MISSING_ATTRIB_V_2DMAP">
            <summary>Required attribute xyz_mapping is missing </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_MISSING_ATTRIB_O_PRIMITIVE">
            <summary>Required attribute o_primitive is missing </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_MISSING_ATTRIB_SHAPE_MODEL">
            <summary>Required attribute shape_model is missing </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_MISSING_ATTRIB_EXTENDED">
            <summary>Required extended attribute missing in 3D object model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_NOSITEM">
            <summary>Serialized item does not contain a valid 3D object model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_MISSING_O_PRIMITIVE_EXTENSION">
            <summary>Primitive in 3D object model has no extended data </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_CONTAIN_ATTRIB_F_TRIANGLES">
            <summary>Operation invalid, 3D object model already contains triangles </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_CONTAIN_ATTRIB_F_LINES">
            <summary>Operation invalid, 3D object model already contains lines </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_CONTAIN_ATTRIB_F_POLYGONS">
            <summary>Operation invalid, 3D object model already contains faces or polygons </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_ISOLATED_OBJECT">
            <summary>In a global registration an input object has no neighbors </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_SET_ALL_COORD">
            <summary>All components of points must be set at once </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_SET_ALL_NORMALS">
            <summary>All components of normals must be set at once </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_NUM_NOT_FIT_COORD">
            <summary>Number of values doesn't correspond to number of already existing points </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_NUM_NOT_FIT_NORMALS">
            <summary>Number of values doesn't correspond to number of already existing normals </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_NUM_NOT_FIT_TRIANGLES">
            <summary>Number of values doesn't correspond to already existing triangulation </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_NUM_NOT_FIT_POLYGONS">
            <summary>Number of values doesn't correspond to length of already existing polygons </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_NUM_NOT_FIT_LINES">
            <summary>Number of values doesn't correspond to length of already existing polylines </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_NUM_NOT_FIT_2DMAP">
            <summary>Number of values doesn't correspond already existing 2D mapping </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_OM3D_NUM_NOT_FIT_EXTENDED">
            <summary>Number of values doesn't correspond to already existing extended attribute </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SF_OM3D_TRIANGLES_NOT_SUITABLE">
            <summary>Triangles of the 3D object model are not suitable for this operator </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SF_OM3D_FEW_POINTS">
            <summary>Too few suitable 3D points in the 3D object model </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_NO_SERIALIZED_ITEM">
            <summary>Not a valid serialized item file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_END_OF_FILE">
            <summary>Serialized item: premature end of file </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SID_WRONG_RESIZE_METHOD">
            <summary>Invalid 'image_resize_method' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SID_WRONG_RESIZE_VALUE">
            <summary>Invalid 'image_resize_value' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SID_WRONG_RATING_METHOD">
            <summary>Invalid 'rating_method' </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SID_NO_IMAGE_INFO_TYPE">
            <summary>At least one type of image information must be used </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SID_MODEL_NO_COLOR">
            <summary>Sample identifier does not contain color information </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SID_MODEL_NO_TEXTURE">
            <summary>Sample identifier does not contain texture information </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SID_NO_IMAGE_INFO">
            <summary>Sample image does not contain enough information </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SID_NO_UNPREPARED_DATA">
            <summary>Sample identifier does not contain unprepared data (use add_sample_identifier_preparation_data) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SID_MODEL_NOT_PREPARED">
            <summary>Sample identifier has not been prepared yet (use prepare_sample_identifier) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SID_NO_UNTRAINED_DATA">
            <summary>Sample identifier does not contain untrained data (use add_sample_identifier_training_data) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SID_MODEL_NOT_TRAINED">
            <summary>Sample identifier has not been trained yet (use train_sample_identifier) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SID_NO_RESULT_DATA">
            <summary>Sample identifier does not contain result data </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_SID_NUM_TRAIN_OBJ">
            <summary>Sample identifier must contain at least two training objects (use add_sample_identifier_training_data) </summary>
        </member>
        <member name="F:HalconDotNet.HErrorDef.H_ERR_START_EXT">
            <summary>User defined error codes must be larger than this value </summary>
        </member>
        <member name="T:HalconDotNet.HXLDPara">
            <summary>Represents an instance of an XLD parallel object(-array).</summary>
        </member>
        <member name="M:HalconDotNet.HXLDPara.#ctor">
            <summary>Create an uninitialized iconic object</summary>
        </member>
        <member name="M:HalconDotNet.HXLDPara.ModParallelsXld(HalconDotNet.HImage,HalconDotNet.HXLDExtPara@,HalconDotNet.HTuple,System.Int32,System.Int32,HalconDotNet.HTuple)">
            <summary>
              Extract parallel XLD polygons enclosing a homogeneous area.
              Instance represents: Input XLD parallels.
            </summary>
            <param name="image">Corresponding gray value image.</param>
            <param name="extParallels">Extended XLD parallels.</param>
            <param name="quality">Minimum quality factor (measure of parallelism). Default: 0.4</param>
            <param name="minGray">Minimum mean gray value. Default: 160</param>
            <param name="maxGray">Maximum mean gray value. Default: 220</param>
            <param name="maxStandard">Maximum allowed standard deviation. Default: 10.0</param>
            <returns>Modified XLD parallels.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPara.ModParallelsXld(HalconDotNet.HImage,HalconDotNet.HXLDExtPara@,System.Double,System.Int32,System.Int32,System.Double)">
            <summary>
              Extract parallel XLD polygons enclosing a homogeneous area.
              Instance represents: Input XLD parallels.
            </summary>
            <param name="image">Corresponding gray value image.</param>
            <param name="extParallels">Extended XLD parallels.</param>
            <param name="quality">Minimum quality factor (measure of parallelism). Default: 0.4</param>
            <param name="minGray">Minimum mean gray value. Default: 160</param>
            <param name="maxGray">Maximum mean gray value. Default: 220</param>
            <param name="maxStandard">Maximum allowed standard deviation. Default: 10.0</param>
            <returns>Modified XLD parallels.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPara.InfoParallelsXld(HalconDotNet.HImage,System.Double@,System.Double@,System.Int32@,System.Int32@,System.Double@,System.Double@)">
            <summary>
              Return information about the gray values of the area enclosed by XLD parallels.
              Instance represents: Input XLD Parallels.
            </summary>
            <param name="image">Corresponding gray value image.</param>
            <param name="qualityMin">Minimum quality factor.</param>
            <param name="qualityMax">Maximum quality factor.</param>
            <param name="grayMin">Minimum mean gray value.</param>
            <param name="grayMax">Maximum mean gray value.</param>
            <param name="standardMin">Minimum standard deviation.</param>
            <param name="standardMax">Maximum standard deviation.</param>
        </member>
        <member name="M:HalconDotNet.HXLDPara.ObjDiff(HalconDotNet.HXLDPara)">
            <summary>
              Calculate the difference of two object tuples.
              Instance represents: Object tuple 1.
            </summary>
            <param name="objectsSub">Object tuple 2.</param>
            <returns>Objects from Objects that are not part of ObjectsSub.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPara.CopyObj(System.Int32,System.Int32)">
            <summary>
              Copy an iconic object in the HALCON database.
              Instance represents: Objects to be copied.
            </summary>
            <param name="index">Starting index of the objects to be copied. Default: 1</param>
            <param name="numObj">Number of objects to be copied or -1. Default: 1</param>
            <returns>Copied objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPara.ConcatObj(HalconDotNet.HXLDPara)">
            <summary>
              Concatenate two iconic object tuples.
              Instance represents: Object tuple 1.
            </summary>
            <param name="objects2">Object tuple 2.</param>
            <returns>Concatenated objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPara.SelectObj(HalconDotNet.HTuple)">
            <summary>
              Select objects from an object tuple.
              Instance represents: Input objects.
            </summary>
            <param name="index">Indices of the objects to be selected. Default: 1</param>
            <returns>Selected objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPara.SelectObj(System.Int32)">
            <summary>
              Select objects from an object tuple.
              Instance represents: Input objects.
            </summary>
            <param name="index">Indices of the objects to be selected. Default: 1</param>
            <returns>Selected objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPara.CompareObj(HalconDotNet.HXLDPara,HalconDotNet.HTuple)">
            <summary>
              Compare iconic objects regarding equality.
              Instance represents: Reference objects.
            </summary>
            <param name="objects2">Test objects.</param>
            <param name="epsilon">Maximum allowed difference between two gray values or  coordinates etc. Default: 0.0</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPara.CompareObj(HalconDotNet.HXLDPara,System.Double)">
            <summary>
              Compare iconic objects regarding equality.
              Instance represents: Reference objects.
            </summary>
            <param name="objects2">Test objects.</param>
            <param name="epsilon">Maximum allowed difference between two gray values or  coordinates etc. Default: 0.0</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPara.TestEqualObj(HalconDotNet.HXLDPara)">
            <summary>
              Compare image objects regarding equality.
              Instance represents: Test objects.
            </summary>
            <param name="objects2">Comparative objects.</param>
            <returns>boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPara.GenGridRectificationMap(HalconDotNet.HImage,HalconDotNet.HXLDPara@,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
              Instance represents: Input contours.
            </summary>
            <param name="image">Input image.</param>
            <param name="meshes">Output contours.</param>
            <param name="gridSpacing">Distance of the grid points in the rectified image.</param>
            <param name="rotation">Rotation to be applied to the point grid. Default: "auto"</param>
            <param name="row">Row coordinates of the grid points.</param>
            <param name="column">Column coordinates of the grid points.</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
            <returns>Image containing the mapping data.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPara.GenGridRectificationMap(HalconDotNet.HImage,HalconDotNet.HXLDPara@,System.Int32,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
              Instance represents: Input contours.
            </summary>
            <param name="image">Input image.</param>
            <param name="meshes">Output contours.</param>
            <param name="gridSpacing">Distance of the grid points in the rectified image.</param>
            <param name="rotation">Rotation to be applied to the point grid. Default: "auto"</param>
            <param name="row">Row coordinates of the grid points.</param>
            <param name="column">Column coordinates of the grid points.</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
            <returns>Image containing the mapping data.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPara.SelectXldPoint(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Choose all contours or polygons containing a given point.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row">Line coordinate of the test point. Default: 100.0</param>
            <param name="column">Column coordinate of the test point. Default: 100.0</param>
            <returns>All contours or polygons containing the test point.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPara.SelectXldPoint(System.Double,System.Double)">
            <summary>
              Choose all contours or polygons containing a given point.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row">Line coordinate of the test point. Default: 100.0</param>
            <param name="column">Column coordinate of the test point. Default: 100.0</param>
            <returns>All contours or polygons containing the test point.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPara.SelectShapeXld(HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Select contours or polygons using shape features.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="features">Shape features to be checked. Default: "area"</param>
            <param name="operation">Operation type between the individual features. Default: "and"</param>
            <param name="min">Lower limits of the features or 'min'. Default: 150.0</param>
            <param name="max">Upper limits of the features or 'max'. Default: 99999.0</param>
            <returns>Contours or polygons fulfilling the condition(s).</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPara.SelectShapeXld(System.String,System.String,System.Double,System.Double)">
            <summary>
              Select contours or polygons using shape features.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="features">Shape features to be checked. Default: "area"</param>
            <param name="operation">Operation type between the individual features. Default: "and"</param>
            <param name="min">Lower limits of the features or 'min'. Default: 150.0</param>
            <param name="max">Upper limits of the features or 'max'. Default: 99999.0</param>
            <returns>Contours or polygons fulfilling the condition(s).</returns>
        </member>
        <member name="M:HalconDotNet.HXLDPara.ShapeTransXld(System.String)">
            <summary>
              Transform the shape of contours or polygons.
              Instance represents: Contours or polygons to be transformed.
            </summary>
            <param name="type">Type of transformation. Default: "convex"</param>
            <returns>Transformed contours respectively polygons.</returns>
        </member>
        <member name="P:HalconDotNet.HXLDPara.Item(HalconDotNet.HTuple)">
            <summary>Returns the iconic object(s) at the specified index</summary>
        </member>
        <member name="T:HalconDotNet.HXLDExtPara">
            <summary>Represents an instance of an XLD extended parallel object(-array).</summary>
        </member>
        <member name="M:HalconDotNet.HXLDExtPara.#ctor">
            <summary>Create an uninitialized iconic object</summary>
        </member>
        <member name="M:HalconDotNet.HXLDExtPara.MaxParallelsXld">
            <summary>
              Join modified XLD parallels lying on the same polygon.
              Instance represents: Extended XLD parallels.
            </summary>
            <returns>Maximally extended parallels.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDExtPara.ObjDiff(HalconDotNet.HXLDExtPara)">
            <summary>
              Calculate the difference of two object tuples.
              Instance represents: Object tuple 1.
            </summary>
            <param name="objectsSub">Object tuple 2.</param>
            <returns>Objects from Objects that are not part of ObjectsSub.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDExtPara.CopyObj(System.Int32,System.Int32)">
            <summary>
              Copy an iconic object in the HALCON database.
              Instance represents: Objects to be copied.
            </summary>
            <param name="index">Starting index of the objects to be copied. Default: 1</param>
            <param name="numObj">Number of objects to be copied or -1. Default: 1</param>
            <returns>Copied objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDExtPara.ConcatObj(HalconDotNet.HXLDExtPara)">
            <summary>
              Concatenate two iconic object tuples.
              Instance represents: Object tuple 1.
            </summary>
            <param name="objects2">Object tuple 2.</param>
            <returns>Concatenated objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDExtPara.SelectObj(HalconDotNet.HTuple)">
            <summary>
              Select objects from an object tuple.
              Instance represents: Input objects.
            </summary>
            <param name="index">Indices of the objects to be selected. Default: 1</param>
            <returns>Selected objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDExtPara.SelectObj(System.Int32)">
            <summary>
              Select objects from an object tuple.
              Instance represents: Input objects.
            </summary>
            <param name="index">Indices of the objects to be selected. Default: 1</param>
            <returns>Selected objects.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDExtPara.CompareObj(HalconDotNet.HXLDExtPara,HalconDotNet.HTuple)">
            <summary>
              Compare iconic objects regarding equality.
              Instance represents: Reference objects.
            </summary>
            <param name="objects2">Test objects.</param>
            <param name="epsilon">Maximum allowed difference between two gray values or  coordinates etc. Default: 0.0</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDExtPara.CompareObj(HalconDotNet.HXLDExtPara,System.Double)">
            <summary>
              Compare iconic objects regarding equality.
              Instance represents: Reference objects.
            </summary>
            <param name="objects2">Test objects.</param>
            <param name="epsilon">Maximum allowed difference between two gray values or  coordinates etc. Default: 0.0</param>
            <returns>Boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDExtPara.TestEqualObj(HalconDotNet.HXLDExtPara)">
            <summary>
              Compare image objects regarding equality.
              Instance represents: Test objects.
            </summary>
            <param name="objects2">Comparative objects.</param>
            <returns>boolean result value.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDExtPara.GenGridRectificationMap(HalconDotNet.HImage,HalconDotNet.HXLDExtPara@,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
              Instance represents: Input contours.
            </summary>
            <param name="image">Input image.</param>
            <param name="meshes">Output contours.</param>
            <param name="gridSpacing">Distance of the grid points in the rectified image.</param>
            <param name="rotation">Rotation to be applied to the point grid. Default: "auto"</param>
            <param name="row">Row coordinates of the grid points.</param>
            <param name="column">Column coordinates of the grid points.</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
            <returns>Image containing the mapping data.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDExtPara.GenGridRectificationMap(HalconDotNet.HImage,HalconDotNet.HXLDExtPara@,System.Int32,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple,System.String)">
            <summary>
              Compute the mapping between the distorted image and the rectified image based upon the points of a regular grid.
              Instance represents: Input contours.
            </summary>
            <param name="image">Input image.</param>
            <param name="meshes">Output contours.</param>
            <param name="gridSpacing">Distance of the grid points in the rectified image.</param>
            <param name="rotation">Rotation to be applied to the point grid. Default: "auto"</param>
            <param name="row">Row coordinates of the grid points.</param>
            <param name="column">Column coordinates of the grid points.</param>
            <param name="mapType">Type of mapping. Default: "bilinear"</param>
            <returns>Image containing the mapping data.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDExtPara.SelectXldPoint(HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Choose all contours or polygons containing a given point.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row">Line coordinate of the test point. Default: 100.0</param>
            <param name="column">Column coordinate of the test point. Default: 100.0</param>
            <returns>All contours or polygons containing the test point.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDExtPara.SelectXldPoint(System.Double,System.Double)">
            <summary>
              Choose all contours or polygons containing a given point.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="row">Line coordinate of the test point. Default: 100.0</param>
            <param name="column">Column coordinate of the test point. Default: 100.0</param>
            <returns>All contours or polygons containing the test point.</returns>
        </member>
        <member name="M:HalconDotNet.HXLDExtPara.SelectShapeXld(HalconDotNet.HTuple,System.String,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Select contours or polygons using shape features.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="features">Shape features to be checked. Default: "area"</param>
            <param name="operation">Operation type between the individual features. Default: "and"</param>
            <param name="min">Lower limits of the features or 'min'. Default: 150.0</param>
            <param name="max">Upper limits of the features or 'max'. Default: 99999.0</param>
            <returns>Contours or polygons fulfilling the condition(s).</returns>
        </member>
        <member name="M:HalconDotNet.HXLDExtPara.SelectShapeXld(System.String,System.String,System.Double,System.Double)">
            <summary>
              Select contours or polygons using shape features.
              Instance represents: Contours or polygons to be examined.
            </summary>
            <param name="features">Shape features to be checked. Default: "area"</param>
            <param name="operation">Operation type between the individual features. Default: "and"</param>
            <param name="min">Lower limits of the features or 'min'. Default: 150.0</param>
            <param name="max">Upper limits of the features or 'max'. Default: 99999.0</param>
            <returns>Contours or polygons fulfilling the condition(s).</returns>
        </member>
        <member name="M:HalconDotNet.HXLDExtPara.ShapeTransXld(System.String)">
            <summary>
              Transform the shape of contours or polygons.
              Instance represents: Contours or polygons to be transformed.
            </summary>
            <param name="type">Type of transformation. Default: "convex"</param>
            <returns>Transformed contours respectively polygons.</returns>
        </member>
        <member name="P:HalconDotNet.HXLDExtPara.Item(HalconDotNet.HTuple)">
            <summary>Returns the iconic object(s) at the specified index</summary>
        </member>
        <member name="T:HalconDotNet.HQuaternion">
            <summary>Represents a quaternion.</summary>
        </member>
        <member name="M:HalconDotNet.HQuaternion.#ctor">
            <summary>Create an uninitialized instance.</summary>
        </member>
        <member name="M:HalconDotNet.HQuaternion.#ctor(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a rotation quaternion.
              Modified instance represents: Rotation quaternion.
            </summary>
            <param name="axisX">X component of the rotation axis.</param>
            <param name="axisY">Y component of the rotation axis.</param>
            <param name="axisZ">Z component of the rotation axis.</param>
            <param name="angle">Rotation angle in radians.</param>
        </member>
        <member name="M:HalconDotNet.HQuaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create a rotation quaternion.
              Modified instance represents: Rotation quaternion.
            </summary>
            <param name="axisX">X component of the rotation axis.</param>
            <param name="axisY">Y component of the rotation axis.</param>
            <param name="axisZ">Z component of the rotation axis.</param>
            <param name="angle">Rotation angle in radians.</param>
        </member>
        <member name="M:HalconDotNet.HQuaternion.op_Multiply(HalconDotNet.HQuaternion,HalconDotNet.HQuaternion)">
            <summary>Composes two quaternions</summary>
        </member>
        <member name="M:HalconDotNet.HQuaternion.op_Implicit(HalconDotNet.HQuaternion)~HalconDotNet.HPose">
            <summary>Convert to pose</summary>
        </member>
        <member name="M:HalconDotNet.HQuaternion.op_Implicit(HalconDotNet.HQuaternion)~HalconDotNet.HHomMat3D">
            <summary>Convert to matrix</summary>
        </member>
        <member name="M:HalconDotNet.HQuaternion.QuatRotatePoint3d(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
              Perform a rotation by a unit quaternion.
              Instance represents: Rotation quaternion.
            </summary>
            <param name="px">X coordinate of the point to be rotated.</param>
            <param name="py">Y coordinate of the point to be rotated.</param>
            <param name="pz">Z coordinate of the point to be rotated.</param>
            <param name="qy">Y coordinate of the rotated point.</param>
            <param name="qz">Z coordinate of the rotated point.</param>
            <returns>X coordinate of the rotated point.</returns>
        </member>
        <member name="M:HalconDotNet.HQuaternion.QuatConjugate">
            <summary>
              Generate the conjugation of a quaternion.
              Instance represents: Input quaternion.
            </summary>
            <returns>Conjugated quaternion.</returns>
        </member>
        <member name="M:HalconDotNet.HQuaternion.QuatNormalize">
            <summary>
              Normalizes a quaternion.
              Instance represents: Input quaternion.
            </summary>
            <returns>Normalized quaternion.</returns>
        </member>
        <member name="M:HalconDotNet.HQuaternion.AxisAngleToQuat(HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a rotation quaternion.
              Modified instance represents: Rotation quaternion.
            </summary>
            <param name="axisX">X component of the rotation axis.</param>
            <param name="axisY">Y component of the rotation axis.</param>
            <param name="axisZ">Z component of the rotation axis.</param>
            <param name="angle">Rotation angle in radians.</param>
        </member>
        <member name="M:HalconDotNet.HQuaternion.AxisAngleToQuat(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Create a rotation quaternion.
              Modified instance represents: Rotation quaternion.
            </summary>
            <param name="axisX">X component of the rotation axis.</param>
            <param name="axisY">Y component of the rotation axis.</param>
            <param name="axisZ">Z component of the rotation axis.</param>
            <param name="angle">Rotation angle in radians.</param>
        </member>
        <member name="M:HalconDotNet.HQuaternion.QuatToPose">
            <summary>
              Convert a quaternion into the corresponding 3D pose.
              Instance represents: Rotation quaternion.
            </summary>
            <returns>3D Pose.</returns>
        </member>
        <member name="M:HalconDotNet.HQuaternion.QuatToHomMat3d">
            <summary>
              Convert a quaternion into the corresponding rotation matrix.
              Instance represents: Rotation quaternion.
            </summary>
            <returns>Rotation matrix.</returns>
        </member>
        <member name="M:HalconDotNet.HQuaternion.PoseToQuat(HalconDotNet.HPose[])">
            <summary>Convert the rotational part of a 3D pose to a quaternion.</summary>
            <param name="pose">3D Pose.</param>
            <returns>Rotation quaternion.</returns>
        </member>
        <member name="M:HalconDotNet.HQuaternion.PoseToQuat(HalconDotNet.HPose)">
            <summary>
              Convert the rotational part of a 3D pose to a quaternion.
              Modified instance represents: Rotation quaternion.
            </summary>
            <param name="pose">3D Pose.</param>
        </member>
        <member name="M:HalconDotNet.HQuaternion.QuatInterpolate(HalconDotNet.HQuaternion,HalconDotNet.HTuple)">
            <summary>
              Interpolation of two quaternions.
              Instance represents: Start quaternion.
            </summary>
            <param name="quaternionEnd">End quaternion.</param>
            <param name="interpPos">Interpolation parameter. Default: 0.5</param>
            <returns>Interpolated quaternion.</returns>
        </member>
        <member name="M:HalconDotNet.HQuaternion.QuatCompose(HalconDotNet.HQuaternion)">
            <summary>
              Multiply two quaternions.
              Instance represents: Left quaternion.
            </summary>
            <param name="quaternionRight">Right quaternion.</param>
            <returns>Product of the input quaternions.</returns>
        </member>
        <member name="M:HalconDotNet.HQuaternion.DeserializeQuat(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized quaternion.
              Modified instance represents: Quaternion.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HQuaternion.SerializeQuat">
            <summary>
              Serialize a quaternion.
              Instance represents: Quaternion.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="T:HalconDotNet.HFile">
            <summary>Represents an instance of a file.</summary>
        </member>
        <member name="M:HalconDotNet.HFile.#ctor(System.String,System.String)">
            <summary>
              Open a file in ASCII or a binary format.
              Modified instance represents: File handle.
            </summary>
            <param name="fileName">Name of file to be opened. Default: "standard"</param>
            <param name="fileType">Type of file. Default: "output"</param>
        </member>
        <member name="M:HalconDotNet.HFile.OpenFile(System.String,System.String)">
            <summary>
              Open a file in ASCII or a binary format.
              Modified instance represents: File handle.
            </summary>
            <param name="fileName">Name of file to be opened. Default: "standard"</param>
            <param name="fileType">Type of file. Default: "output"</param>
        </member>
        <member name="M:HalconDotNet.HFile.FwriteString(HalconDotNet.HTuple)">
            <summary>
              Write values in a file.
              Instance represents: File handle.
            </summary>
            <param name="stringVal">Values to be put out on the file. Default: "hallo"</param>
        </member>
        <member name="M:HalconDotNet.HFile.FwriteString(System.String)">
            <summary>
              Write values in a file.
              Instance represents: File handle.
            </summary>
            <param name="stringVal">Values to be put out on the file. Default: "hallo"</param>
        </member>
        <member name="M:HalconDotNet.HFile.FreadLine(System.Int32@)">
            <summary>
              Read a line from a file.
              Instance represents: File handle.
            </summary>
            <param name="isEOF">Reached end of file.</param>
            <returns>Read line.</returns>
        </member>
        <member name="M:HalconDotNet.HFile.FreadString(System.Int32@)">
            <summary>
              Read strings from a file.
              Instance represents: File handle.
            </summary>
            <param name="isEOF">Reached end of file.</param>
            <returns>Read character sequence.</returns>
        </member>
        <member name="M:HalconDotNet.HFile.FreadChar">
            <summary>
              Read a character from a file.
              Instance represents: File handle.
            </summary>
            <returns>Read character or control string ('eof').</returns>
        </member>
        <member name="M:HalconDotNet.HFile.FnewLine">
            <summary>
              Create a line feed.
              Instance represents: File handle.
            </summary>
        </member>
        <member name="T:HalconDotNet.HOCRBox">
            <summary>Represents an instance of an OCR box classifier.</summary>
        </member>
        <member name="M:HalconDotNet.HOCRBox.#ctor(System.String)">
            <summary>
              Read an OCR classifier from a file.
              Modified instance represents: ID of the read OCR classifier.
            </summary>
            <param name="fileName">Name of the OCR classifier file. Default: "testnet"</param>
        </member>
        <member name="M:HalconDotNet.HOCRBox.#ctor(System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a new OCR-classifier.
              Modified instance represents: ID of the created OCR classifier.
            </summary>
            <param name="widthPattern">Width of the input layer of the network. Default: 8</param>
            <param name="heightPattern">Height of the input layer of the network. Default: 10</param>
            <param name="interpolation">Interpolation mode concerning scaling of characters. Default: 1</param>
            <param name="features">Additional features. Default: "default"</param>
            <param name="character">All characters of a set. Default: ["a","b","c"]</param>
        </member>
        <member name="M:HalconDotNet.HOCRBox.#ctor(System.Int32,System.Int32,System.Int32,System.String,HalconDotNet.HTuple)">
            <summary>
              Create a new OCR-classifier.
              Modified instance represents: ID of the created OCR classifier.
            </summary>
            <param name="widthPattern">Width of the input layer of the network. Default: 8</param>
            <param name="heightPattern">Height of the input layer of the network. Default: 10</param>
            <param name="interpolation">Interpolation mode concerning scaling of characters. Default: 1</param>
            <param name="features">Additional features. Default: "default"</param>
            <param name="character">All characters of a set. Default: ["a","b","c"]</param>
        </member>
        <member name="M:HalconDotNet.HOCRBox.SerializeOcr">
            <summary>
              Serialize an OCR classifier.
              Instance represents: ID of the OCR classifier.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRBox.DeserializeOcr(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized OCR classifier.
              Modified instance represents: ID of the OCR classifier.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HOCRBox.WriteOcr(System.String)">
            <summary>
              Writing an OCR classifier into a file.
              Instance represents: ID of the OCR classifier.
            </summary>
            <param name="fileName">Name of the file for the OCR classifier (without extension). Default: "my_ocr"</param>
        </member>
        <member name="M:HalconDotNet.HOCRBox.ReadOcr(System.String)">
            <summary>
              Read an OCR classifier from a file.
              Modified instance represents: ID of the read OCR classifier.
            </summary>
            <param name="fileName">Name of the OCR classifier file. Default: "testnet"</param>
        </member>
        <member name="M:HalconDotNet.HOCRBox.DoOcrSingle(HalconDotNet.HRegion,HalconDotNet.HImage,HalconDotNet.HTuple@)">
            <summary>
              Classify one character.
              Instance represents: ID of the OCR classifier.
            </summary>
            <param name="character">Character to be recognized.</param>
            <param name="image">Gray values of the characters.</param>
            <param name="confidences">Confidence values of the characters.</param>
            <returns>Classes (names) of the characters.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRBox.DoOcrMulti(HalconDotNet.HRegion,HalconDotNet.HImage,HalconDotNet.HTuple@)">
            <summary>
              Classify characters.
              Instance represents: ID of the OCR classifier.
            </summary>
            <param name="character">Characters to be recognized.</param>
            <param name="image">Gray values for the characters.</param>
            <param name="confidence">Confidence values of the characters.</param>
            <returns>Class (name) of the characters.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRBox.DoOcrMulti(HalconDotNet.HRegion,HalconDotNet.HImage,System.Double@)">
            <summary>
              Classify characters.
              Instance represents: ID of the OCR classifier.
            </summary>
            <param name="character">Characters to be recognized.</param>
            <param name="image">Gray values for the characters.</param>
            <param name="confidence">Confidence values of the characters.</param>
            <returns>Class (name) of the characters.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRBox.InfoOcrClassBox(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Get information about an OCR classifier.
              Instance represents: ID of the OCR classifier.
            </summary>
            <param name="widthPattern">Width of the scaled characters.</param>
            <param name="heightPattern">Height of the scaled characters.</param>
            <param name="interpolation">Interpolation mode for scaling the characters.</param>
            <param name="widthMaxChar">Width of the largest trained character.</param>
            <param name="heightMaxChar">Height of the largest trained character.</param>
            <param name="features">Used features.</param>
            <param name="characters">All characters of the set.</param>
        </member>
        <member name="M:HalconDotNet.HOCRBox.CreateOcrClassBox(System.Int32,System.Int32,System.Int32,HalconDotNet.HTuple,HalconDotNet.HTuple)">
            <summary>
              Create a new OCR-classifier.
              Modified instance represents: ID of the created OCR classifier.
            </summary>
            <param name="widthPattern">Width of the input layer of the network. Default: 8</param>
            <param name="heightPattern">Height of the input layer of the network. Default: 10</param>
            <param name="interpolation">Interpolation mode concerning scaling of characters. Default: 1</param>
            <param name="features">Additional features. Default: "default"</param>
            <param name="character">All characters of a set. Default: ["a","b","c"]</param>
        </member>
        <member name="M:HalconDotNet.HOCRBox.CreateOcrClassBox(System.Int32,System.Int32,System.Int32,System.String,HalconDotNet.HTuple)">
            <summary>
              Create a new OCR-classifier.
              Modified instance represents: ID of the created OCR classifier.
            </summary>
            <param name="widthPattern">Width of the input layer of the network. Default: 8</param>
            <param name="heightPattern">Height of the input layer of the network. Default: 10</param>
            <param name="interpolation">Interpolation mode concerning scaling of characters. Default: 1</param>
            <param name="features">Additional features. Default: "default"</param>
            <param name="character">All characters of a set. Default: ["a","b","c"]</param>
        </member>
        <member name="M:HalconDotNet.HOCRBox.TraindOcrClassBox(HalconDotNet.HRegion,HalconDotNet.HImage,HalconDotNet.HTuple)">
            <summary>
              Train an OCR classifier by the input of regions.
              Instance represents: ID of the desired OCR-classifier.
            </summary>
            <param name="character">Characters to be trained.</param>
            <param name="image">Gray values for the characters.</param>
            <param name="classVal">Class (name) of the characters. Default: "a"</param>
            <returns>Average confidence during a re-classification of the trained characters.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRBox.TraindOcrClassBox(HalconDotNet.HRegion,HalconDotNet.HImage,System.String)">
            <summary>
              Train an OCR classifier by the input of regions.
              Instance represents: ID of the desired OCR-classifier.
            </summary>
            <param name="character">Characters to be trained.</param>
            <param name="image">Gray values for the characters.</param>
            <param name="classVal">Class (name) of the characters. Default: "a"</param>
            <returns>Average confidence during a re-classification of the trained characters.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRBox.TrainfOcrClassBox(HalconDotNet.HTuple)">
            <summary>
              Train an OCR classifier with the help of a training file.
              Instance represents: ID of the desired OCR-network.
            </summary>
            <param name="trainingFile">Names of the training files. Default: "train_ocr"</param>
            <returns>Average confidence during a re-classification of the trained characters.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRBox.TrainfOcrClassBox(System.String)">
            <summary>
              Train an OCR classifier with the help of a training file.
              Instance represents: ID of the desired OCR-network.
            </summary>
            <param name="trainingFile">Names of the training files. Default: "train_ocr"</param>
            <returns>Average confidence during a re-classification of the trained characters.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRBox.OcrChangeChar(HalconDotNet.HTuple)">
            <summary>
              Define a new conversion table for the characters.
              Instance represents: ID of the OCR-network to be changed.
            </summary>
            <param name="character">New assign of characters. Default: ["a","b","c"]</param>
        </member>
        <member name="M:HalconDotNet.HOCRBox.TestdOcrClassBox(HalconDotNet.HRegion,HalconDotNet.HImage,HalconDotNet.HTuple)">
            <summary>
              Test an OCR classifier.
              Instance represents: ID of the desired OCR-classifier.
            </summary>
            <param name="character">Characters to be tested.</param>
            <param name="image">Gray values for the characters.</param>
            <param name="classVal">Class (name) of the characters. Default: "a"</param>
            <returns>Confidence for the character to belong to the class.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRBox.TestdOcrClassBox(HalconDotNet.HRegion,HalconDotNet.HImage,System.String)">
            <summary>
              Test an OCR classifier.
              Instance represents: ID of the desired OCR-classifier.
            </summary>
            <param name="character">Characters to be tested.</param>
            <param name="image">Gray values for the characters.</param>
            <param name="classVal">Class (name) of the characters. Default: "a"</param>
            <returns>Confidence for the character to belong to the class.</returns>
        </member>
        <member name="M:HalconDotNet.HOCRBox.OcrGetFeatures(HalconDotNet.HImage)">
            <summary>
              Access the features which correspond to a character.
              Instance represents: ID of the desired OCR-classifier.
            </summary>
            <param name="character">Characters to be trained.</param>
            <returns>Feature vector.</returns>
        </member>
        <member name="T:HalconDotNet.HClassBox">
            <summary>Represents an instance of a classifier.</summary>
        </member>
        <member name="M:HalconDotNet.HClassBox.#ctor">
            <summary>
              Create a new classifier.
              Modified instance represents: Handle of the classifier.
            </summary>
        </member>
        <member name="M:HalconDotNet.HClassBox.LearnNdimBox(HalconDotNet.HRegion,HalconDotNet.HRegion,HalconDotNet.HImage)">
            <summary>
              Train a classificator using a multi-channel image.
              Instance represents: Handle of the classifier.
            </summary>
            <param name="foreground">Foreground pixels to be trained.</param>
            <param name="background">Background pixels to be trained (rejection class).</param>
            <param name="multiChannelImage">Multi-channel training image.</param>
        </member>
        <member name="M:HalconDotNet.HClassBox.ClassNdimBox(HalconDotNet.HImage)">
            <summary>
              Classify pixels using hyper-cuboids.
              Instance represents: Handle of the classifier.
            </summary>
            <param name="multiChannelImage">Multi channel input image.</param>
            <returns>Classification result.</returns>
        </member>
        <member name="M:HalconDotNet.HClassBox.DeserializeClassBox(HalconDotNet.HSerializedItem)">
            <summary>
              Deserialize a serialized classifier.
              Instance represents: Handle of the classifier.
            </summary>
            <param name="serializedItemHandle">Handle of the serialized item.</param>
        </member>
        <member name="M:HalconDotNet.HClassBox.SerializeClassBox">
            <summary>
              Serialize a classifier.
              Instance represents: Handle of the classifier.
            </summary>
            <returns>Handle of the serialized item.</returns>
        </member>
        <member name="M:HalconDotNet.HClassBox.WriteClassBox(System.String)">
            <summary>
              Save a classifier in a file.
              Instance represents: Handle of the classifier.
            </summary>
            <param name="fileName">Name of the file which contains the written data.</param>
        </member>
        <member name="M:HalconDotNet.HClassBox.SetClassBoxParam(System.String,HalconDotNet.HTuple)">
            <summary>
              Set system parameters for classification.
              Instance represents: Handle of the classifier.
            </summary>
            <param name="flag">Name of the wanted parameter. Default: "split_error"</param>
            <param name="value">Value of the parameter. Default: 0.1</param>
        </member>
        <member name="M:HalconDotNet.HClassBox.SetClassBoxParam(System.String,System.Double)">
            <summary>
              Set system parameters for classification.
              Instance represents: Handle of the classifier.
            </summary>
            <param name="flag">Name of the wanted parameter. Default: "split_error"</param>
            <param name="value">Value of the parameter. Default: 0.1</param>
        </member>
        <member name="M:HalconDotNet.HClassBox.ReadClassBox(System.String)">
            <summary>
              Read a classifier from a file.
              Instance represents: Handle of the classifier.
            </summary>
            <param name="fileName">Filename of the classifier.</param>
        </member>
        <member name="M:HalconDotNet.HClassBox.LearnSampsetBox(HalconDotNet.HFeatureSet,System.String,System.Int32,System.Double,System.Int32)">
            <summary>
              Train the classifier with one data set.
              Instance represents: Handle of the classifier.
            </summary>
            <param name="sampKey">Number of the data set to train.</param>
            <param name="outfile">Name of the protocol file. Default: "training_prot"</param>
            <param name="NSamples">Number of arrays of attributes to learn. Default: 500</param>
            <param name="stopError">Classification error for termination. Default: 0.05</param>
            <param name="errorN">Error during the assignment. Default: 100</param>
        </member>
        <member name="M:HalconDotNet.HClassBox.LearnClassBox(HalconDotNet.HTuple,System.Int32)">
            <summary>
              Train the classifier.
              Instance represents: Handle of the classifier.
            </summary>
            <param name="features">Array of attributes to learn. Default: [1.0,1.5,2.0]</param>
            <param name="classVal">Class to which the array has to be assigned. Default: 1</param>
        </member>
        <member name="M:HalconDotNet.HClassBox.GetClassBoxParam(System.String)">
            <summary>
              Get information about the current parameter.
              Instance represents: Handle of the classifier.
            </summary>
            <param name="flag">Name of the system parameter. Default: "split_error"</param>
            <returns>Value of the system parameter.</returns>
        </member>
        <member name="M:HalconDotNet.HClassBox.CreateClassBox">
            <summary>
              Create a new classifier.
              Modified instance represents: Handle of the classifier.
            </summary>
        </member>
        <member name="M:HalconDotNet.HClassBox.DescriptClassBox(System.Int32,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@,HalconDotNet.HTuple@)">
            <summary>
              Describe the classes of a box classifier.
              Instance represents: Handle of the classifier.
            </summary>
            <param name="dimensions">Highest dimension for output. Default: 3</param>
            <param name="boxIdx">Indices of the boxes.</param>
            <param name="boxLowerBound">Lower bounds of the boxes (for each dimension).</param>
            <param name="boxHigherBound">Higher bounds of the boxes (for each dimension).</param>
            <param name="boxNumSamplesTrain">Number of training samples that were used to define this box (for each dimension).</param>
            <param name="boxNumSamplesWrong">Number of training samples that were assigned incorrectly to the box.</param>
            <returns>Indices of the classes.</returns>
        </member>
        <member name="M:HalconDotNet.HClassBox.DescriptClassBox(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
              Describe the classes of a box classifier.
              Instance represents: Handle of the classifier.
            </summary>
            <param name="dimensions">Highest dimension for output. Default: 3</param>
            <param name="boxIdx">Indices of the boxes.</param>
            <param name="boxLowerBound">Lower bounds of the boxes (for each dimension).</param>
            <param name="boxHigherBound">Higher bounds of the boxes (for each dimension).</param>
            <param name="boxNumSamplesTrain">Number of training samples that were used to define this box (for each dimension).</param>
            <param name="boxNumSamplesWrong">Number of training samples that were assigned incorrectly to the box.</param>
            <returns>Indices of the classes.</returns>
        </member>
        <member name="M:HalconDotNet.HClassBox.TestSampsetBox(HalconDotNet.HFeatureSet)">
            <summary>
              Classify a set of arrays.
              Instance represents: Handle of the classifier.
            </summary>
            <param name="sampKey">Key of the test data.</param>
            <returns>Error during the assignment.</returns>
        </member>
        <member name="M:HalconDotNet.HClassBox.EnquireRejectClassBox(HalconDotNet.HTuple)">
            <summary>
              Classify a tuple of attributes with rejection class.
              Instance represents: Handle of the classifier.
            </summary>
            <param name="featureList">Array of attributes which has to be classified. Default: 1.0</param>
            <returns>Number of the class, to which the array of attributes had been assigned or -1 for the rejection class.</returns>
        </member>
        <member name="M:HalconDotNet.HClassBox.EnquireClassBox(HalconDotNet.HTuple)">
            <summary>
              Classify a tuple of attributes.
              Instance represents: Handle of the classifier.
            </summary>
            <param name="featureList">Array of attributes which has to be classified. Default: 1.0</param>
            <returns>Number of the class to which the array of attributes had been assigned.</returns>
        </member>
        <member name="T:HalconDotNet.HWindowControlWPF">
            <summary>
              This control encapsulates a native HALCON window
              for use within a WPF framework.
            </summary>
        </member>
        <member name="M:HalconDotNet.HWindowControlWPF.SetFullImagePart(HalconDotNet.HImage)">
            <summary>
              Adapt ImagePart to show the full image.
            </summary>
            <param name="reference">The image used as reference</param>
        </member>
        <member name="M:HalconDotNet.HWindowControlWPF.Focus">
            <summary>
              Sets the focus to this component, which is necessary
              for obtaining mouse wheel events via HMouseWheel.
            </summary>
            <remarks>
              If Focusable is true the focus will be set automatically
              when clicking into the window. Also, Focusable will be set
              to true automatically when calling this method.
            </remarks>
        </member>
        <member name="M:HalconDotNet.HWindowControlWPF.Dispose">
            <summary>Releases the resources used by the native HALCON window</summary>
        </member>
        <member name="P:HalconDotNet.HWindowControlWPF.ImagePart">
            <summary>
             This rectangle specifies the image part to be displayed. 
             The method SetFullImagePart() will adapt this property to
             show the full image.
            </summary>
            <remarks>
              The type Thickness is used instead of rectangle to allow
              the property to be editable in the Visual Studio Designer.
            </remarks>
        </member>
        <member name="E:HalconDotNet.HWindowControlWPF.HInitWindow">
            <summary>
              Occurs when the HALCON window has been initialized.
              Note that this occurs *after* the event "Loaded".
            </summary>
        </member>
        <member name="E:HalconDotNet.HWindowControlWPF.HMouseMove">
            <summary>
              Occurs when the mouse is moved over a HALCON window.
            </summary>
        </member>
        <member name="E:HalconDotNet.HWindowControlWPF.HMouseDown">
            <summary>
              Occurs when a button is pressed over a HALCON window.
            </summary>
        </member>
        <member name="E:HalconDotNet.HWindowControlWPF.HMouseUp">
            <summary>
              Occurs when a button is released over a HALCON window.
            </summary>
        </member>
        <member name="E:HalconDotNet.HWindowControlWPF.HMouseWheel">
            <summary>
              Occurs when the wheel is used over a HALCON window while it has focus
            </summary>
        </member>
        <member name="T:HalconDotNet.HMouseEventArgsWPF">
            <summary>
            Provides data for the HMouse* events.
            </summary>
        </member>
        <member name="P:HalconDotNet.HMouseEventArgsWPF.X">
            <summary>Gets the window x coordinate of the mouse event.</summary>
        </member>
        <member name="P:HalconDotNet.HMouseEventArgsWPF.Y">
            <summary>Gets the window y coordinate of the mouse event.</summary>
        </member>
        <member name="P:HalconDotNet.HMouseEventArgsWPF.Row">
            <summary>Gets the row image coordinate of the mouse event.</summary>
        </member>
        <member name="P:HalconDotNet.HMouseEventArgsWPF.Column">
            <summary>Gets the column image coordinate of the mouse event.</summary>
        </member>
        <member name="P:HalconDotNet.HMouseEventArgsWPF.Delta">
            <summary>Gets the increment for the mouse wheel change.</summary>
        </member>
        <member name="P:HalconDotNet.HMouseEventArgsWPF.Button">
            <summary>Gets the increment for the mouse wheel change.</summary>
        </member>
        <member name="T:HalconDotNet.HMouseEventHandlerWPF">
            <summary>
            Represents the method that will handle the HMouse* events of HWindowControlWPF
            </summary>
        </member>
        <member name="T:HalconDotNet.HInitWindowEventHandlerWPF">
            <summary>
            Represents the method that will handle the InitWindow event of HWindowControlWPF
            </summary>
        </member>
    </members>
</doc>
